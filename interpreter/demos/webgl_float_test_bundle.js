/*! For license information please see webgl_float_test_bundle.js.LICENSE.txt */
!function(){var e={2568:function(e){"use strict";e.exports=JSON.parse("[0.0001831110566854477,-0.000946044921875,-0.0010986328125,-0.000518798828125,-0.000213623046875,0.00006103701889514923,0.0002441480755805969,-0.00054931640625,-0.001708984375,-0.0015869140625,-0.000762939453125,-0.00030517578125,0.00027466658502817154,0.0006103701889514923,-0.000091552734375,-0.000732421875,-0.00030517578125,0,0.00039674062281847,0.0013733329251408577,0.00158696249127388,0.0005188146606087685,-0.000244140625,-0.000457763671875,-0.000579833984375,-0.000091552734375,0.0006714072078466415,0.0006103701889514923,0,-0.00030517578125,-0.000823974609375,-0.00177001953125,-0.001708984375,-0.00067138671875,0.00006103701889514923,0.0006408886983990669,0.0012207403779029846,0.0010681478306651115,0.00039674062281847,0.0003662221133708954,0.00027466658502817154,-0.00048828125,-0.000396728515625,0.0004882961511611938,0.0007629627361893654,0.0009460737928748131,0.0010986663401126862,0.0004272591322660446,-0.000335693359375,-0.000885009765625,-0.00164794921875,-0.002288818359375,-0.00213623046875,-0.00140380859375,-0.001373291015625,-0.001617431640625,-0.001312255859375,-0.00115966796875,-0.00091552734375,-0.000335693359375,-0.00018310546875,-0.000244140625,-0.00042724609375,-0.00054931640625,-0.0006103515625,-0.000335693359375,0.0005493331700563431,0.0012817773967981339,0.0014954069629311562,0.0009460737928748131,-0.00006103515625,-0.000762939453125,-0.0008544921875,-0.000244140625,0.0008239997550845146,0.0018616290763020515,0.00238044373691082,0.0016785180196166039,0.0002136295661330223,-0.001220703125,-0.002227783203125,-0.00213623046875,-0.001312255859375,-0.00067138671875,-0.0006103515625,-0.000823974609375,-0.0009765625,-0.001220703125,-0.000823974609375,0.00039674062281847,0.0012512588873505592,0.0011597033590078354,0.0006714072078466415,-0.000274658203125,-0.00128173828125,-0.000823974609375,0.0008545182645320892,0.002136295661330223,0.0028992583975195885,0.00317392498254776,0.0023499252274632454,0.0005798516795039177,-0.000701904296875,-0.00115966796875,-0.001129150390625,-0.0003662109375,0.0006103701889514923,0.0007019257172942162,0.0003662221133708954,0.00015259254723787308,-0.000244140625,-0.00054931640625,-0.0003662109375,0.00039674062281847,0.0010681478306651115,0.0008545182645320892,0.0005188146606087685,0.0005493331700563431,0.0006714072078466415,0.0007324442267417908,0.0011597033590078354,0.00158696249127388,0.001434369944036007,0.0009460737928748131,0.0002136295661330223,-0.00067138671875,-0.0008544921875,-0.000335693359375,-0.000152587890625,-0.00042724609375,-0.000946044921875,-0.001373291015625,-0.001556396484375,-0.00213623046875,-0.00274658203125,-0.002471923828125,-0.001953125,-0.001495361328125,-0.001190185546875,-0.00103759765625,-0.000701904296875,-0.00054931640625,-0.001007080078125,-0.001739501953125,-0.002044677734375,-0.000762939453125,0.001342814415693283,0.0027466658502817154,0.0030518509447574615,0.00238044373691082,0.0010071108117699623,-0.000701904296875,-0.002044677734375,-0.001678466796875,0.000030518509447574615,0.0014038514345884323,0.0015564439818263054,0.0007629627361893654,-0.0003662109375,-0.001190185546875,-0.0009765625,-0.00006103515625,0.0003662221133708954,0.00009155552834272385,-0.000457763671875,-0.00128173828125,-0.001922607421875,-0.00152587890625,0.00006103701889514923,0.0018921475857496262,0.0027466658502817154,0.002136295661330223,0.0007019257172942162,-0.000762939453125,-0.001708984375,-0.00152587890625,-0.00048828125,0.0008545182645320892,0.0017090365290641785,0.0014648884534835815,0.0006408886983990669,-0.00048828125,-0.001312255859375,-0.0009765625,0.000030518509447574615,0.0008850367739796638,0.0011597033590078354,0.0011291848495602608,0.0008545182645320892,0.00012207403779029846,-0.00006103515625,0.00039674062281847,0.0006408886983990669,0.0008850367739796638,0.0012512588873505592,0.0010986663401126862,0.0002441480755805969,-0.00042724609375,-0.000518798828125,-0.000640869140625,-0.00030517578125,0.0004882961511611938,0.00039674062281847,-0.00018310546875,-0.00054931640625,-0.000579833984375,-0.000457763671875,-0.0001220703125,0.0003662221133708954,0.0004882961511611938,0.00045777764171361923,0.0004882961511611938,0.00012207403779029846,-0.000091552734375,0.0002136295661330223,0.0005493331700563431,0.0006408886983990669,0.00079348124563694,0.0010071108117699623,0.001037629321217537,0.0011291848495602608,0.0010071108117699623,0.0002136295661330223,-0.000244140625,0.0002441480755805969,0.0009765923023223877,0.00119022186845541,0.0013122959062457085,0.0013122959062457085,0.0006408886983990669,0.000030518509447574615,0.0002441480755805969,0.0006714072078466415,0.0008850367739796638,0.0009765923023223877,0.0001831110566854477,-0.00146484375,-0.00213623046875,-0.00128173828125,-0.000244140625,0.0010986663401126862,0.002624591812491417,0.002533036284148693,0.001037629321217537,-0.000274658203125,-0.000823974609375,-0.00079345703125,0.0002441480755805969,0.0019531846046447754,0.0025025177747011185,0.0020447401329874992,0.0016785180196166039,0.0010071108117699623,0.00027466658502817154,0.0006408886983990669,0.0017090365290641785,0.0018921475857496262,0.0009460737928748131,-0.000091552734375,-0.001129150390625,-0.001983642578125,-0.00164794921875,-0.0003662109375,0.0005798516795039177,0.0011291848495602608,0.0012817773967981339,0.00045777764171361923,-0.0006103515625,-0.000823974609375,-0.000396728515625,-0.0001220703125,0,-0.00018310546875,-0.001190185546875,-0.001953125,-0.00201416015625,-0.0020751953125,-0.001800537109375,-0.00079345703125,-0.00030517578125,-0.000518798828125,-0.000640869140625,-0.000885009765625,-0.00140380859375,-0.001312255859375,-0.00054931640625,-0.00018310546875,-0.000152587890625,0.000030518509447574615,0,0.000030518509447574615,0.0009460737928748131,0.0016785180196166039,0.001342814415693283,0.0009765923023223877,0.0009765923023223877,0.0005188146606087685,-0.000244140625,-0.000396728515625,-0.000213623046875,-0.00067138671875,-0.001068115234375,-0.0009765625,-0.000762939453125,-0.000030517578125,0.0006103701889514923,0.00045777764171361923,0,-0.000518798828125,-0.001129150390625,-0.0015869140625,-0.001312255859375,-0.000579833984375,-0.00006103515625,0.0001831110566854477,-0.0001220703125,-0.00091552734375,-0.000946044921875,-0.000396728515625,0,0.0005188146606087685,0.0009155552834272385,0.0004272591322660446,-0.000457763671875,-0.000823974609375,-0.00054931640625,0.00009155552834272385,0.001037629321217537,0.0016174810007214546,0.001434369944036007,0.0010681478306651115,0.0006408886983990669,0.00012207403779029846,0.00009155552834272385,0.0006103701889514923,0.0012207403779029846,0.0010071108117699623,-0.000244140625,-0.001739501953125,-0.00244140625,-0.001739501953125,-0.000457763671875,0.0007629627361893654,0.0018005920574069023,0.00238044373691082,0.0022583696991205215,0.001037629321217537,-0.000274658203125,-0.0001220703125,0.0008850367739796638,0.0017700735479593277,0.0019531846046447754,0.0012817773967981339,0.0002136295661330223,-0.00079345703125,-0.001556396484375,-0.001739501953125,-0.001190185546875,-0.000274658203125,-0.000030517578125,-0.00103759765625,-0.002532958984375,-0.00347900390625,-0.003814697265625,-0.0030517578125,-0.00115966796875,0.00033570360392332077,0.0007019257172942162,0.00045777764171361923,0.0002441480755805969,0,0.00012207403779029846,0.0009155552834272385,0.0015259254723787308,0.0016785180196166039,0.00119022186845541,0.0002441480755805969,-0.000579833984375,-0.00079345703125,-0.00006103515625,0.00079348124563694,0.0008239997550845146,0.0001831110566854477,-0.000701904296875,-0.001617431640625,-0.00225830078125,-0.002685546875,-0.002838134765625,-0.002410888671875,-0.001800537109375,-0.001678466796875,-0.0015869140625,-0.001190185546875,-0.00091552734375,-0.000640869140625,-0.0001220703125,0.0005798516795039177,0.001037629321217537,0.0009460737928748131,0.0007629627361893654,0.0004882961511611938,0.00039674062281847,0.00045777764171361923,0.00012207403779029846,-0.000213623046875,-0.000518798828125,-0.00079345703125,-0.000701904296875,-0.000823974609375,-0.00115966796875,-0.001129150390625,-0.000946044921875,-0.001373291015625,-0.00189208984375,-0.0013427734375,-0.000457763671875,0.00006103701889514923,0.0011597033590078354,0.0023194067180156708,0.002533036284148693,0.0020142216235399246,0.001434369944036007,0.001037629321217537,0.0008850367739796638,0.0011597033590078354,0.00158696249127388,0.0010986663401126862,0.00006103701889514923,-0.0003662109375,-0.0006103515625,-0.001068115234375,-0.001007080078125,-0.00067138671875,-0.000640869140625,-0.0009765625,-0.00177001953125,-0.0020751953125,-0.00146484375,-0.0006103515625,0.00030518509447574615,0.0010071108117699623,0.0009765923023223877,0.0001831110566854477,-0.00054931640625,-0.0006103515625,-0.000579833984375,-0.00018310546875,0.0012512588873505592,0.0025635547935962677,0.0024414807558059692,0.0014954069629311562,0.0005798516795039177,-0.000152587890625,-0.000640869140625,-0.0001220703125,0.0007324442267417908,0.0006103701889514923,0.00012207403779029846,0.00039674062281847,0.0006714072078466415,0.00030518509447574615,0.00039674062281847,0.0012512588873505592,0.0014648884534835815,0.0008239997550845146,0.0004272591322660446,0.0005188146606087685,0.0007019257172942162,0.0009155552834272385,0.0008545182645320892,0.00045777764171361923,0.00012207403779029846,-0.000030517578125,-0.0001220703125,0.00015259254723787308,0.0007019257172942162,0.001342814415693283,0.0016174810007214546,0.0009155552834272385,-0.00030517578125,-0.001007080078125,-0.0006103515625,-0.000091552734375,-0.00042724609375,-0.000396728515625,0.00015259254723787308,-0.0001220703125,-0.000579833984375,-0.00054931640625,-0.000640869140625,-0.000640869140625,-0.0001220703125,-0.000091552734375,-0.0010986328125,-0.001617431640625,-0.000946044921875,-0.000579833984375,-0.000396728515625,0.0006103701889514923,0.0016174810007214546,0.0014954069629311562,0.0008545182645320892,0.0003662221133708954,0.00012207403779029846,0.0004272591322660446,0.0011597033590078354,0.0013122959062457085,0.0010681478306651115,0.0010681478306651115,0.0007019257172942162,0.00009155552834272385,0.00015259254723787308,0.0003662221133708954,0.00030518509447574615,0.0004882961511611938,0.0005798516795039177,0.000030518509447574615,-0.000457763671875,-0.000152587890625,0,-0.00048828125,-0.000518798828125,-0.000396728515625,-0.0010986328125,-0.001251220703125,-0.0003662109375,0,0.00045777764171361923,0.0020142216235399246,0.0027466658502817154,0.0020142216235399246,0.00158696249127388,0.0015564439818263054,0.0009155552834272385,0.00079348124563694,0.0015259254723787308,0.0014648884534835815,0.0008239997550845146,0.0007324442267417908,0.0004882961511611938,-0.000091552734375,-0.000030517578125,0.0001831110566854477,-0.000335693359375,-0.0010986328125,-0.0013427734375,-0.00201416015625,-0.0029296875,-0.002410888671875,-0.001434326171875,-0.00128173828125,-0.00079345703125,-0.000457763671875,-0.000885009765625,-0.00103759765625,-0.000640869140625,-0.000396728515625,-0.00030517578125,0.0002441480755805969,0.00039674062281847,-0.00054931640625,-0.0010986328125,-0.0013427734375,-0.002197265625,-0.002410888671875,-0.001800537109375,-0.001220703125,-0.000762939453125,-0.00048828125,-0.000946044921875,-0.002288818359375,-0.003326416015625,-0.00372314453125,-0.003662109375,-0.00262451171875,-0.00091552734375,0.0006103701889514923,0.001434369944036007,0.0014038514345884323,0.0008545182645320892,0.00030518509447574615,0.00033570360392332077,0.0008850367739796638,0.0018005920574069023,0.00277718435972929,0.0028382213786244392,0.0019226660951972008,0.00119022186845541,0.0008545182645320892,0.00039674062281847,0.0003662221133708954,0.0010986663401126862,0.0010681478306651115,-0.000152587890625,-0.001068115234375,-0.001251220703125,-0.0009765625,0.00009155552834272385,0.0018616290763020515,0.002868739888072014,0.0023194067180156708,0.0011291848495602608,-0.0003662109375,-0.00213623046875,-0.00213623046875,-0.000213623046875,0.001342814415693283,0.0021973326802253723,0.0025940733030438423,0.00238044373691082,0.0018005920574069023,0.0016479995101690292,0.002227851189672947,0.0028992583975195885,0.0032044434919953346,0.0029602954164147377,0.0018005920574069023,0.00039674062281847,-0.000335693359375,-0.000152587890625,0.00015259254723787308,0,-0.000335693359375,-0.000823974609375,-0.00146484375,-0.00177001953125,-0.00146484375,-0.000762939453125,0,0.0007324442267417908,0.00119022186845541,0.0011291848495602608,0.0010986663401126862,0.0013733329251408577,0.0015564439818263054,0.001342814415693283,0.0009765923023223877,0.00079348124563694,0.0005188146606087685,-0.0001220703125,-0.0009765625,-0.001708984375,-0.0023193359375,-0.0025634765625,-0.002532958984375,-0.00250244140625,-0.001922607421875,-0.00091552734375,-0.000518798828125,-0.001007080078125,-0.002105712890625,-0.0029296875,-0.003021240234375,-0.003082275390625,-0.00299072265625,-0.001983642578125,-0.000335693359375,0.0006103701889514923,0.0005188146606087685,0.00012207403779029846,-0.000213623046875,-0.00030517578125,0.00006103701889514923,0.0005188146606087685,0.0007324442267417908,0.0005493331700563431,-0.000091552734375,-0.00103759765625,-0.001922607421875,-0.002044677734375,-0.00115966796875,-0.00030517578125,-0.000457763671875,-0.001251220703125,-0.002349853515625,-0.003143310546875,-0.002593994140625,-0.000885009765625,0.0014038514345884323,0.003082369454205036,0.00277718435972929,0.001434369944036007,0.00015259254723787308,-0.000732421875,-0.000518798828125,0.00039674062281847,0.0010681478306651115,0.0013122959062457085,0.0006714072078466415,-0.000579833984375,-0.001495361328125,-0.001251220703125,-0.000091552734375,0.0012207403779029846,0.0018616290763020515,0.00158696249127388,0.0012512588873505592,0.001037629321217537,0.00039674062281847,0.00006103701889514923,0.00033570360392332077,0.00039674062281847,0.00006103701889514923,-0.000244140625,-0.00042724609375,-0.000396728515625,-0.000030517578125,0.0007019257172942162,0.0013122959062457085,0.001434369944036007,0.0017700735479593277,0.0023194067180156708,0.002288888208568096,0.0020447401329874992,0.0017700735479593277,0.00119022186845541,0.0008545182645320892,0.0008239997550845146,0.0008239997550845146,0.001037629321217537,0.00119022186845541,0.0007324442267417908,-0.0001220703125,-0.000946044921875,-0.001190185546875,-0.00054931640625,0.0005798516795039177,0.0016479995101690292,0.0018005920574069023,0.0013733329251408577,0.0007324442267417908,-0.00042724609375,-0.0010986328125,-0.000274658203125,0.0009155552834272385,0.0013122959062457085,0.0011597033590078354,0.0007019257172942162,-0.000518798828125,-0.00152587890625,-0.0010986328125,-0.000244140625,0.0004882961511611938,0.0014954069629311562,0.0018616290763020515,0.0011597033590078354,0.0002441480755805969,-0.000274658203125,-0.0003662109375,0.000030518509447574615,0.0007629627361893654,0.0007629627361893654,-0.000244140625,-0.000946044921875,-0.001373291015625,-0.00201416015625,-0.0018310546875,-0.00079345703125,0,0.0002441480755805969,0.000030518509447574615,-0.000579833984375,-0.00146484375,-0.0018310546875,-0.00152587890625,-0.0018310546875,-0.00250244140625,-0.0023193359375,-0.002227783203125,-0.00244140625,-0.0018310546875,-0.001129150390625,-0.001068115234375,-0.00103759765625,-0.001190185546875,-0.001800537109375,-0.001708984375,-0.000946044921875,-0.000885009765625,-0.00146484375,-0.001617431640625,-0.00152587890625,-0.00164794921875,-0.001220703125,-0.00030517578125,0.00012207403779029846,0.0004272591322660446,0.0008850367739796638,0.0008545182645320892,0.00039674062281847,0.00045777764171361923,0.0010071108117699623,0.0010071108117699623,0.0010071108117699623,0.0011291848495602608,0.0003662221133708954,-0.000518798828125,-0.000213623046875,0.0007629627361893654,0.0015259254723787308,0.0020447401329874992,0.0018921475857496262,0.0008850367739796638,0.0001831110566854477,0.0002441480755805969,0.00045777764171361923,0.0006103701889514923,0.0011291848495602608,0.001434369944036007,0.0012817773967981339,0.0010986663401126862,0.00079348124563694,0.0006714072078466415,0.0011597033590078354,0.0015564439818263054,0.0012512588873505592,0.0007324442267417908,0.0004882961511611938,0.00033570360392332077,0.0005188146606087685,0.0009765923023223877,0.0010681478306651115,0.0012512588873505592,0.0016785180196166039,0.0015259254723787308,0.001037629321217537,0.0009460737928748131,0.0006714072078466415,0,-0.000762939453125,-0.00152587890625,-0.002166748046875,-0.002197265625,-0.00140380859375,-0.000335693359375,0.00030518509447574615,0.00039674062281847,0.00012207403779029846,-0.0003662109375,-0.0009765625,-0.000885009765625,-0.000244140625,0.0002441480755805969,0.00079348124563694,0.0006714072078466415,-0.000274658203125,-0.000946044921875,-0.00091552734375,-0.000457763671875,0,0.0003662221133708954,0.0002136295661330223,-0.00048828125,-0.001251220703125,-0.001800537109375,-0.001983642578125,-0.00146484375,-0.0008544921875,-0.0006103515625,-0.0006103515625,-0.000732421875,-0.001068115234375,-0.001373291015625,-0.001220703125,-0.00067138671875,-0.000030517578125,0.0006103701889514923,0.0010071108117699623,0.0008850367739796638,0.0005493331700563431,0.0006103701889514923,0.0008545182645320892,0.0004882961511611938,0.0002136295661330223,0.0005798516795039177,0.0005798516795039177,0.00027466658502817154,0.00015259254723787308,0,-0.00006103515625,0.0001831110566854477,0.00030518509447574615,0.00033570360392332077,0.0005798516795039177,0.0007019257172942162,0.0004272591322660446,0,-0.000518798828125,-0.000885009765625,-0.000030517578125,0.0015259254723787308,0.002471999265253544,0.002624591812491417,0.0019531846046447754,0.0006408886983990669,-0.000946044921875,-0.002227783203125,-0.00244140625,-0.001556396484375,0,0.00119022186845541,0.0010681478306651115,0.000030518509447574615,-0.000946044921875,-0.001190185546875,-0.000701904296875,-0.000091552734375,0.00045777764171361923,0.0008545182645320892,0.0006408886983990669,-0.000274658203125,-0.001251220703125,-0.00115966796875,0,0.0012207403779029846,0.001831110566854477,0.0016479995101690292,0.0007629627361893654,-0.0003662109375,-0.001129150390625,-0.001373291015625,-0.00128173828125,-0.00054931640625,0.0005493331700563431,0.0009765923023223877,0.0005493331700563431,0.00012207403779029846,-0.000091552734375,-0.000579833984375,-0.000885009765625,-0.00067138671875,-0.000579833984375,-0.000579833984375,-0.0006103515625,-0.000885009765625,-0.001220703125,-0.001220703125,-0.00079345703125,-0.000457763671875,-0.00018310546875,0.00012207403779029846,0.00012207403779029846,0,-0.000457763671875,-0.000946044921875,-0.000579833984375,0.00027466658502817154,0.0012207403779029846,0.001739555038511753,0.0018616290763020515,0.0019226660951972008,0.0016174810007214546,0.0012817773967981339,0.0015259254723787308,0.002288888208568096,0.003326517529785633,0.004119998775422573,0.004119998775422573,0.0028992583975195885,0.0014954069629311562,0.0010986663401126862,0.0011291848495602608,0.0014038514345884323,0.0023499252274632454,0.0033875545486807823,0.003326517529785633,0.0021668141707777977,0.0008545182645320892,-0.000030517578125,-0.000213623046875,0.0003662221133708954,0.0012817773967981339,0.001739555038511753,0.0013122959062457085,0.0005798516795039177,0.0001831110566854477,-0.00018310546875,-0.00030517578125,-0.000091552734375,0.00012207403779029846,0.000030518509447574615,-0.000701904296875,-0.001678466796875,-0.002471923828125,-0.002685546875,-0.002349853515625,-0.00201416015625,-0.001861572265625,-0.002197265625,-0.00262451171875,-0.00250244140625,-0.002777099609375,-0.003143310546875,-0.002471923828125,-0.00140380859375,-0.001434326171875,-0.002349853515625,-0.002960205078125,-0.00323486328125,-0.002899169921875,-0.00164794921875,-0.0006103515625,-0.00006103515625,0.0004882961511611938,0.0004272591322660446,-0.000457763671875,-0.00115966796875,-0.0009765625,-0.000274658203125,0.0001831110566854477,0.00015259254723787308,-0.000335693359375,-0.001129150390625,-0.00140380859375,-0.001251220703125,-0.001373291015625,-0.001251220703125,-0.000457763671875,-0.000335693359375,-0.001373291015625,-0.001953125,-0.00152587890625,-0.0009765625,-0.000274658203125,0.00030518509447574615,0.0002441480755805969,0.00033570360392332077,0.0009460737928748131,0.00079348124563694,0.00012207403779029846,0.0001831110566854477,0.0005188146606087685,0.00030518509447574615,0.00006103701889514923,0.0002441480755805969,0.0005493331700563431,0.0010681478306651115,0.001831110566854477,0.001739555038511753,0.0011597033590078354,0.0014648884534835815,0.0018616290763020515,0.0013733329251408577,0.0007629627361893654,0.0002441480755805969,-0.000152587890625,-0.000030517578125,0.0003662221133708954,0.0004882961511611938,0.00045777764171361923,0.0006408886983990669,0.0007019257172942162,-0.000091552734375,-0.000732421875,-0.00006103515625,0.0006408886983990669,0.001037629321217537,0.0009155552834272385,-0.000152587890625,-0.00103759765625,-0.001007080078125,-0.0008544921875,-0.0010986328125,-0.00115966796875,-0.00054931640625,-0.00054931640625,-0.001373291015625,-0.001983642578125,-0.002593994140625,-0.002685546875,-0.002166748046875,-0.001953125,-0.0020751953125,-0.0018310546875,-0.00115966796875,-0.0010986328125,-0.00152587890625,-0.001495361328125,-0.001007080078125,-0.000152587890625,0.0006408886983990669,0.0008239997550845146,0.0007324442267417908,0.0008239997550845146,0.0011597033590078354,0.0012817773967981339,0.0013733329251408577,0.001831110566854477,0.0021668141707777977,0.00198370311409235,0.0016479995101690292,0.0015564439818263054,0.0018005920574069023,0.0023499252274632454,0.0027466658502817154,0.00277718435972929,0.0025025177747011185,0.002288888208568096,0.0018921475857496262,0.00158696249127388,0.0018921475857496262,0.0025025177747011185,0.0028382213786244392,0.0029602954164147377,0.0028382213786244392,0.002136295661330223,0.0013122959062457085,0.0010681478306651115,0.0008545182645320892,0.00045777764171361923,0.0003662221133708954,0.00027466658502817154,0.000030518509447574615,-0.00018310546875,-0.00048828125,-0.000946044921875,-0.0013427734375,-0.001129150390625,-0.00067138671875,-0.0003662109375,-0.000152587890625,-0.000274658203125,-0.00067138671875,-0.001068115234375,-0.001312255859375,-0.00128173828125,-0.001220703125,-0.000640869140625,0.00015259254723787308,0.0004272591322660446,0.0003662221133708954,0.0002136295661330223,0,-0.00018310546875,-0.000335693359375,-0.000457763671875,-0.000640869140625,-0.000732421875,-0.00067138671875,-0.000640869140625,-0.000457763671875,-0.000091552734375,0,-0.000213623046875,-0.000518798828125,-0.000823974609375,-0.0008544921875,-0.000457763671875,-0.0001220703125,0,-0.000030517578125,-0.00018310546875,-0.00079345703125,-0.001708984375,-0.00201416015625,-0.00164794921875,-0.001129150390625,-0.000579833984375,-0.000213623046875,-0.0003662109375,-0.001007080078125,-0.001556396484375,-0.00201416015625,-0.00225830078125,-0.00146484375,-0.00006103515625,0.0005493331700563431,0.0004882961511611938,0.00027466658502817154,-0.00006103515625,-0.00030517578125,-0.000396728515625,-0.000518798828125,-0.000640869140625,-0.00091552734375,-0.001373291015625,-0.00152587890625,-0.001495361328125,-0.001251220703125,-0.000213623046875,0.0009155552834272385,0.0014038514345884323,0.0014954069629311562,0.0013122959062457085,0.0009460737928748131,0.0008545182645320892,0.001037629321217537,0.001037629321217537,0.0009460737928748131,0.0010986663401126862,0.0010681478306651115,0.0007324442267417908,0.00027466658502817154,-0.000244140625,-0.00042724609375,-0.000457763671875,-0.00103759765625,-0.00177001953125,-0.001800537109375,-0.0015869140625,-0.001556396484375,-0.001312255859375,-0.000946044921875,-0.001190185546875,-0.001495361328125,-0.000885009765625,-0.0001220703125,0.00033570360392332077,0.0011291848495602608,0.0018005920574069023,0.0019226660951972008,0.0019531846046447754,0.0021973326802253723,0.0021973326802253723,0.0021973326802253723,0.002533036284148693,0.0027466658502817154,0.0023194067180156708,0.0016785180196166039,0.0013122959062457085,0.00079348124563694,0.00030518509447574615,0.00015259254723787308,-0.00018310546875,-0.000457763671875,-0.000244140625,-0.000244140625,-0.000213623046875,0.0004882961511611938,0.0013733329251408577,0.0018005920574069023,0.0021668141707777977,0.002288888208568096,0.0014954069629311562,0.0007019257172942162,0.0009460737928748131,0.001434369944036007,0.0015259254723787308,0.0019226660951972008,0.002471999265253544,0.0021668141707777977,0.0011597033590078354,0.00015259254723787308,-0.000701904296875,-0.001312255859375,-0.00115966796875,-0.000885009765625,-0.001312255859375,-0.001922607421875,-0.00225830078125,-0.002777099609375,-0.003143310546875,-0.00262451171875,-0.0018310546875,-0.00103759765625,0.000030518509447574615,0.0011291848495602608,0.0012512588873505592,0.0009155552834272385,0.0014038514345884323,0.002075258642435074,0.0025635547935962677,0.003082369454205036,0.002868739888072014,0.0017090365290641785,0.0006408886983990669,0.00030518509447574615,0.00006103701889514923,-0.000244140625,-0.00006103515625,0,-0.0009765625,-0.002166748046875,-0.002777099609375,-0.00311279296875,-0.003082275390625,-0.002349853515625,-0.00189208984375,-0.00177001953125,-0.001129150390625,-0.000335693359375,-0.00006103515625,0.000030518509447574615,0.0004272591322660446,0.0006408886983990669,0.0007324442267417908,0.0010681478306651115,0.00119022186845541,0.0009155552834272385,0.0009460737928748131,0.0008239997550845146,0.00033570360392332077,0.0004272591322660446,0.0011291848495602608,0.0012817773967981339,0.0007629627361893654,0.00033570360392332077,-0.000396728515625,-0.001617431640625,-0.001861572265625,-0.0015869140625,-0.001678466796875,-0.00140380859375,-0.001129150390625,-0.00128173828125,-0.001251220703125,-0.000701904296875,0.0001831110566854477,0.0010986663401126862,0.00158696249127388,0.0015564439818263054,0.0009765923023223877,0.0002441480755805969,-0.000091552734375,-0.000244140625,-0.000152587890625,0.00015259254723787308,0.0006408886983990669,0.00119022186845541,0.0014038514345884323,0.0012512588873505592,0.0008239997550845146,0.00033570360392332077,-0.0003662109375,-0.001373291015625,-0.001739501953125,-0.001495361328125,-0.001190185546875,-0.00048828125,0,-0.000244140625,-0.000152587890625,0.0006103701889514923,0.0010986663401126862,0.0012207403779029846,0.0013733329251408577,0.0014038514345884323,0.0010681478306651115,0.0011291848495602608,0.001434369944036007,0.0014954069629311562,0.0015259254723787308,0.0012817773967981339,0.0006408886983990669,-0.000274658203125,-0.001007080078125,-0.0008544921875,-0.00042724609375,-0.000274658203125,-0.00030517578125,-0.00079345703125,-0.001068115234375,-0.001007080078125,-0.0008544921875,-0.000396728515625,0.0003662221133708954,0.0014038514345884323,0.0020447401329874992,0.0021973326802253723,0.0022583696991205215,0.0019531846046447754,0.0015564439818263054,0.001037629321217537,0.00009155552834272385,-0.000701904296875,-0.0010986328125,-0.00146484375,-0.001983642578125,-0.002349853515625,-0.002471923828125,-0.002532958984375,-0.00250244140625,-0.00244140625,-0.00262451171875,-0.002960205078125,-0.003143310546875,-0.002960205078125,-0.002655029296875,-0.0023193359375,-0.001373291015625,-0.000213623046875,0,-0.000335693359375,-0.000579833984375,-0.000457763671875,0.00030518509447574615,0.0011291848495602608,0.00158696249127388,0.0015259254723787308,0.0008850367739796638,-0.000213623046875,-0.0015869140625,-0.00238037109375,-0.0023193359375,-0.00177001953125,-0.001251220703125,-0.00152587890625,-0.002288818359375,-0.002685546875,-0.002349853515625,-0.00152587890625,-0.0009765625,-0.0003662109375,0.00045777764171361923,0.0006408886983990669,0.0002441480755805969,-0.00018310546875,-0.000518798828125,-0.0006103515625,-0.00054931640625,-0.0003662109375,-0.000335693359375,-0.00042724609375,-0.0006103515625,-0.00115966796875,-0.001800537109375,-0.0023193359375,-0.002349853515625,-0.001800537109375,-0.001495361328125,-0.00152587890625,-0.001617431640625,-0.001953125,-0.002349853515625,-0.002105712890625,-0.00128173828125,-0.000640869140625,-0.000457763671875,-0.0008544921875,-0.001617431640625,-0.002227783203125,-0.002410888671875,-0.00189208984375,-0.00079345703125,0,0.0001831110566854477,0,-0.00042724609375,-0.00042724609375,0.00015259254723787308,0.0012207403779029846,0.002227851189672947,0.002685628831386566,0.002533036284148693,0.0019531846046447754,0.001434369944036007,0.0010986663401126862,0.00119022186845541,0.0018005920574069023,0.002136295661330223,0.0021057771518826485,0.002227851189672947,0.00238044373691082,0.0024109622463583946,0.002624591812491417,0.003265480510890484,0.0037842951714992523,0.0038453321903944016,0.003997924737632275,0.0040894802659749985,0.0036317026242613792,0.0029908139258623123,0.002533036284148693,0.0021668141707777977,0.0021668141707777977,0.00277718435972929,0.0036011841148138046,0.003662221133708954,0.0028077028691768646,0.0019226660951972008,0.0014954069629311562,0.0010681478306651115,0.0011597033590078354,0.0019226660951972008,0.002288888208568096,0.0024109622463583946,0.0026551103219389915,0.00238044373691082,0.00198370311409235,0.0019226660951972008,0.0019531846046447754,0.0020447401329874992,0.00198370311409235,0.0015564439818263054,0.0007324442267417908,0.000030518509447574615,-0.000244140625,-0.0003662109375,-0.00030517578125,-0.000335693359375,-0.000579833984375,-0.0010986328125,-0.00201416015625,-0.002899169921875,-0.003570556640625,-0.003326416015625,-0.002105712890625,-0.00146484375,-0.001373291015625,-0.001251220703125,-0.001861572265625,-0.00286865234375,-0.003021240234375,-0.002166748046875,-0.000732421875,0.0010986663401126862,0.00238044373691082,0.0015564439818263054,-0.000152587890625,-0.001068115234375,-0.001373291015625,-0.0009765625,0.0005493331700563431,0.002471999265253544,0.0032044434919953346,0.0024414807558059692,0.001037629321217537,-0.00030517578125,-0.00079345703125,0.00006103701889514923,0.0013122959062457085,0.0019531846046447754,0.00198370311409235,0.0010986663401126862,-0.000213623046875,-0.000518798828125,0.00045777764171361923,0.001434369944036007,0.0017700735479593277,0.0019226660951972008,0.0014954069629311562,0.00027466658502817154,-0.000213623046875,0.000030518509447574615,0,0.00009155552834272385,0.0003662221133708954,-0.00006103515625,-0.001251220703125,-0.002349853515625,-0.0030517578125,-0.00341796875,-0.002899169921875,-0.002044677734375,-0.001922607421875,-0.002227783203125,-0.0025634765625,-0.003265380859375,-0.003936767578125,-0.003814697265625,-0.002777099609375,-0.0015869140625,-0.000518798828125,0.00009155552834272385,-0.000335693359375,-0.001373291015625,-0.00201416015625,-0.00225830078125,-0.00201416015625,-0.000823974609375,0.0003662221133708954,0.0006408886983990669,0.00045777764171361923,-0.0001220703125,-0.00103759765625,-0.001220703125,-0.000701904296875,-0.00030517578125,-0.00006103515625,0.0004272591322660446,0.00079348124563694,0.0005798516795039177,0.00039674062281847,0.00030518509447574615,0.00030518509447574615,0.0007324442267417908,0.0012207403779029846,0.0017090365290641785,0.0021057771518826485,0.0024414807558059692,0.0026551103219389915,0.002288888208568096,0.0018921475857496262,0.0018616290763020515,0.0018005920574069023,0.0019531846046447754,0.0017090365290641785,0.0010986663401126862,0.0008545182645320892,0.001037629321217537,0.0009460737928748131,0.0006408886983990669,0.0009155552834272385,0.0012817773967981339,0.0011597033590078354,0.0008545182645320892,0.0005188146606087685,0.00033570360392332077,0.00045777764171361923,0.0004272591322660446,-0.000030517578125,-0.000518798828125,-0.00030517578125,0.00006103701889514923,-0.00018310546875,-0.000457763671875,-0.000274658203125,-0.00042724609375,-0.001129150390625,-0.00140380859375,-0.001251220703125,-0.00140380859375,-0.00140380859375,-0.001312255859375,-0.001708984375,-0.00201416015625,-0.001495361328125,-0.000579833984375,0.00012207403779029846,0.0009155552834272385,0.0014038514345884323,0.00119022186845541,0.00079348124563694,0.0005493331700563431,0.0004882961511611938,0.0008239997550845146,0.0016479995101690292,0.0023499252274632454,0.002136295661330223,0.0012512588873505592,0.0008545182645320892,0.0005798516795039177,0.00009155552834272385,0.00009155552834272385,0.0004882961511611938,0.0010986663401126862,0.0016785180196166039,0.0015564439818263054,0.00079348124563694,-0.000213623046875,-0.000823974609375,-0.00079345703125,-0.000579833984375,-0.000244140625,0.00006103701889514923,0.000030518509447574615,-0.00018310546875,-0.00079345703125,-0.001373291015625,-0.001220703125,-0.000946044921875,-0.000640869140625,-0.0001220703125,-0.00030517578125,-0.0008544921875,-0.001007080078125,-0.00128173828125,-0.001678466796875,-0.001678466796875,-0.00128173828125,-0.000762939453125,-0.00030517578125,0.00006103701889514923,0.00027466658502817154,0.00015259254723787308,-0.000274658203125,-0.0008544921875,-0.0010986328125,-0.000946044921875,-0.000457763671875,0.0001831110566854477,0.0004272591322660446,0.00006103701889514923,-0.000244140625,-0.000213623046875,0,0.0005493331700563431,0.001434369944036007,0.001739555038511753,0.0014038514345884323,0.0005798516795039177,-0.000396728515625,-0.000701904296875,-0.000518798828125,-0.00018310546875,0.0001831110566854477,-0.0001220703125,-0.001129150390625,-0.00189208984375,-0.002288818359375,-0.0025634765625,-0.002655029296875,-0.002410888671875,-0.001861572265625,-0.0015869140625,-0.001922607421875,-0.002288818359375,-0.00213623046875,-0.001678466796875,-0.001251220703125,-0.00128173828125,-0.001708984375,-0.002197265625,-0.002685546875,-0.0030517578125,-0.003143310546875,-0.002899169921875,-0.0020751953125,-0.001434326171875,-0.00164794921875,-0.001739501953125,-0.001129150390625,-0.00042724609375,0.000030518509447574615,0.0004882961511611938,0.0007019257172942162,0.0003662221133708954,0.0002441480755805969,0.0008545182645320892,0.00158696249127388,0.0022583696991205215,0.0025940733030438423,0.00238044373691082,0.001739555038511753,0.0009155552834272385,0.0005493331700563431,0.0008545182645320892,0.0013733329251408577,0.0015564439818263054,0.0009765923023223877,-0.000152587890625,-0.001190185546875,-0.001708984375,-0.001373291015625,-0.0006103515625,-0.00018310546875,-0.000213623046875,-0.00054931640625,-0.00128173828125,-0.00244140625,-0.00262451171875,-0.001129150390625,0.0004272591322660446,0.0013733329251408577,0.0020142216235399246,0.0016785180196166039,0.00045777764171361923,-0.00054931640625,-0.000946044921875,-0.001129150390625,-0.000823974609375,0.000030518509447574615,0,-0.001312255859375,-0.0025634765625,-0.00323486328125,-0.003082275390625,-0.001800537109375,-0.0001220703125,0.0008850367739796638,0.0010986663401126862,0.0007324442267417908,0.0002441480755805969,-0.00006103515625,0.0006103701889514923,0.0022583696991205215,0.0033570360392332077,0.0036011841148138046,0.003265480510890484,0.00238044373691082,0.001831110566854477,0.002471999265253544,0.00357066560536623,0.003997924737632275,0.0035096285864710808,0.0024109622463583946,0.00079348124563694,-0.000579833984375,-0.00067138671875,0.0002136295661330223,0.0010986663401126862,0.0017700735479593277,0.0016785180196166039,0.0003662221133708954,-0.001129150390625,-0.0015869140625,-0.0010986328125,-0.000091552734375,0.0017700735479593277,0.0031434064731001854,0.003021332435309887,0.0025635547935962677,0.001831110566854477,0.0006408886983990669,0.0002441480755805969,0.0009460737928748131,0.00158696249127388,0.0018005920574069023,0.0017090365290641785,0.0011291848495602608,0.00009155552834272385,-0.00054931640625,-0.000335693359375,0.00006103701889514923,0.00045777764171361923,0.001037629321217537,0.0008850367739796638,0.00039674062281847,0.0007019257172942162,0.001342814415693283,0.002136295661330223,0.0032044434919953346,0.0036927396431565285,0.003021332435309887,0.0016785180196166039,0.0007629627361893654,0.00079348124563694,0.0015564439818263054,0.00277718435972929,0.0036317026242613792,0.003723258152604103,0.0031128879636526108,0.00158696249127388,-0.000152587890625,-0.00079345703125,-0.000030517578125,0.0014954069629311562,0.0028992583975195885,0.003326517529785633,0.00238044373691082,0.0008239997550845146,-0.00030517578125,-0.00115966796875,-0.001007080078125,0.0006103701889514923,0.0021973326802253723,0.0028382213786244392,0.002471999265253544,0.0007629627361893654,-0.00128173828125,-0.002593994140625,-0.0028076171875,-0.001953125,-0.000579833984375,0.0004272591322660446,0.0002441480755805969,-0.00103759765625,-0.002532958984375,-0.0035400390625,-0.0035400390625,-0.00274658203125,-0.001617431640625,-0.000701904296875,-0.000885009765625,-0.00189208984375,-0.0028076171875,-0.003021240234375,-0.002288818359375,-0.001129150390625,-0.00006103515625,0.0003662221133708954,0.0001831110566854477,-0.00018310546875,-0.000732421875,-0.0010986328125,-0.00103759765625,-0.00048828125,0.00015259254723787308,0.0003662221133708954,-0.000030517578125,-0.001007080078125,-0.002227783203125,-0.003021240234375,-0.003204345703125,-0.00286865234375,-0.001861572265625,-0.000946044921875,-0.001007080078125,-0.001708984375,-0.00262451171875,-0.003692626953125,-0.003875732421875,-0.002685546875,-0.00115966796875,-0.0001220703125,0.00030518509447574615,-0.000091552734375,-0.001373291015625,-0.0023193359375,-0.002532958984375,-0.00213623046875,-0.001220703125,-0.000396728515625,0.00012207403779029846,0.00039674062281847,0.00015259254723787308,-0.000518798828125,-0.00115966796875,-0.00164794921875,-0.002105712890625,-0.00189208984375,-0.00128173828125,-0.000885009765625,-0.000762939453125,-0.001251220703125,-0.002044677734375,-0.002716064453125,-0.002899169921875,-0.00225830078125,-0.001678466796875,-0.00128173828125,-0.000274658203125,0.0004882961511611938,0.0006408886983990669,0.0004272591322660446,0.00027466658502817154,0.00039674062281847,0.00027466658502817154,0,0,0.00039674062281847,0.00119022186845541,0.0016479995101690292,0.0014648884534835815,0.0007629627361893654,-0.000244140625,-0.001007080078125,-0.00103759765625,-0.00042724609375,0.00045777764171361923,0.0015259254723787308,0.0021057771518826485,0.0014648884534835815,0.0004272591322660446,0.00006103701889514923,0.00039674062281847,0.00079348124563694,0.00119022186845541,0.0018005920574069023,0.0021668141707777977,0.002136295661330223,0.0021668141707777977,0.0019226660951972008,0.0014648884534835815,0.00158696249127388,0.00158696249127388,0.0007019257172942162,-0.000335693359375,-0.001007080078125,-0.00115966796875,-0.000701904296875,-0.000030517578125,0.0005798516795039177,0.0010681478306651115,0.001037629321217537,0.0002441480755805969,-0.00042724609375,-0.000335693359375,0.0004882961511611938,0.0016785180196166039,0.0028077028691768646,0.0033570360392332077,0.002685628831386566,0.0012817773967981339,0.00045777764171361923,0.0006103701889514923,0.0014038514345884323,0.002624591812491417,0.003997924737632275,0.004547257907688618,0.00357066560536623,0.0020142216235399246,0.0009460737928748131,0.00033570360392332077,0.0005493331700563431,0.0016785180196166039,0.002685628831386566,0.002685628831386566,0.002227851189672947,0.0016479995101690292,0.0010071108117699623,0.0009765923023223877,0.0014648884534835815,0.0019531846046447754,0.002075258642435074,0.0016479995101690292,0.0010986663401126862,0.0008850367739796638,0.0011291848495602608,0.0017090365290641785,0.002288888208568096,0.00238044373691082,0.0017090365290641785,0.0008239997550845146,0.0001831110566854477,-0.000091552734375,-0.000579833984375,-0.00128173828125,-0.0013427734375,-0.001129150390625,-0.000885009765625,-0.0003662109375,-0.000579833984375,-0.001556396484375,-0.001983642578125,-0.001708984375,-0.001312255859375,-0.000762939453125,-0.000152587890625,0,-0.000213623046875,-0.000152587890625,-0.00006103515625,-0.000244140625,0,0.0008850367739796638,0.0015259254723787308,0.0017090365290641785,0.0018921475857496262,0.0018616290763020515,0.0013733329251408577,0.00079348124563694,-0.000335693359375,-0.001739501953125,-0.001739501953125,-0.0006103515625,0,0.00006103701889514923,-0.00006103515625,-0.00091552734375,-0.0020751953125,-0.00250244140625,-0.00225830078125,-0.001617431640625,-0.00054931640625,0.000030518509447574615,-0.001068115234375,-0.003021240234375,-0.00390625,-0.003875732421875,-0.00390625,-0.003692626953125,-0.003448486328125,-0.003997802734375,-0.004425048828125,-0.004486083984375,-0.00494384765625,-0.0052490234375,-0.004608154296875,-0.00408935546875,-0.00457763671875,-0.004852294921875,-0.00457763671875,-0.00439453125,-0.003814697265625,-0.00286865234375,-0.002593994140625,-0.00238037109375,-0.00152587890625,-0.000946044921875,-0.0009765625,-0.00054931640625,0.00006103701889514923,-0.000030517578125,-0.000152587890625,0.00027466658502817154,0.00039674062281847,0.0004272591322660446,0.0008239997550845146,0.0008239997550845146,0.0005188146606087685,0.0006103701889514923,0.0008239997550845146,0.0007019257172942162,0.00045777764171361923,0.0005493331700563431,0.00045777764171361923,0.0001831110566854477,0.00039674062281847,0.00027466658502817154,-0.000091552734375,-0.00006103515625,0.00012207403779029846,0.0004272591322660446,0.0007629627361893654,0.0012207403779029846,0.00158696249127388,0.0012817773967981339,0.00079348124563694,0.00039674062281847,0.00030518509447574615,0.00079348124563694,0.0015259254723787308,0.002288888208568096,0.0025025177747011185,0.0018921475857496262,0.0007019257172942162,-0.000396728515625,-0.00067138671875,-0.000244140625,0.0004882961511611938,0.0010071108117699623,0.0005798516795039177,-0.000213623046875,-0.000823974609375,-0.001251220703125,-0.001434326171875,-0.001068115234375,-0.0001220703125,0.0005188146606087685,0.0006714072078466415,0.0006714072078466415,0.00027466658502817154,-0.00042724609375,-0.00091552734375,-0.00067138671875,0.000030518509447574615,0.0007324442267417908,0.0016479995101690292,0.0024414807558059692,0.002227851189672947,0.0018616290763020515,0.002075258642435074,0.002288888208568096,0.002929776906967163,0.004028443247079849,0.004333628341555595,0.0037842951714992523,0.00317392498254776,0.002685628831386566,0.002471999265253544,0.0027466658502817154,0.0031128879636526108,0.0032349620014429092,0.0032349620014429092,0.003021332435309887,0.0026551103219389915,0.0021057771518826485,0.0018616290763020515,0.0021973326802253723,0.0024414807558059692,0.002288888208568096,0.0018921475857496262,0.0016174810007214546,0.0015564439818263054,0.0013122959062457085,0.0011291848495602608,0.0012512588873505592,0.001037629321217537,0.0006714072078466415,0.00039674062281847,0.00012207403779029846,0,-0.00018310546875,-0.000701904296875,-0.00128173828125,-0.001800537109375,-0.001953125,-0.00177001953125,-0.001678466796875,-0.001495361328125,-0.001220703125,-0.001129150390625,-0.0013427734375,-0.001800537109375,-0.0018310546875,-0.0013427734375,-0.0006103515625,0.00012207403779029846,0.00079348124563694,0.0015259254723787308,0.0018921475857496262,0.0015259254723787308,0.0008850367739796638,0.00027466658502817154,0.0001831110566854477,0.0006714072078466415,0.0008850367739796638,0.0007324442267417908,0.0005798516795039177,0.00009155552834272385,-0.0009765625,-0.001922607421875,-0.002197265625,-0.002166748046875,-0.001953125,-0.001312255859375,-0.00079345703125,-0.000885009765625,-0.0013427734375,-0.0018310546875,-0.0020751953125,-0.001983642578125,-0.00164794921875,-0.0009765625,-0.000335693359375,-0.000091552734375,0,0.00012207403779029846,0.0002441480755805969,0.0005188146606087685,0.0009765923023223877,0.0014648884534835815,0.0021057771518826485,0.0024414807558059692,0.00238044373691082,0.0021973326802253723,0.001739555038511753,0.0009765923023223877,0.00027466658502817154,-0.000274658203125,-0.0008544921875,-0.001068115234375,-0.000946044921875,-0.001373291015625,-0.002044677734375,-0.002288818359375,-0.00238037109375,-0.0025634765625,-0.002716064453125,-0.00244140625,-0.001800537109375,-0.001251220703125,-0.000396728515625,0.00030518509447574615,0.00033570360392332077,0.00012207403779029846,-0.0001220703125,-0.0006103515625,-0.00091552734375,-0.000518798828125,0.000030518509447574615,0.00039674062281847,0.0008545182645320892,0.0008850367739796638,0.0004882961511611938,0.0003662221133708954,0.00015259254723787308,-0.000335693359375,-0.00054931640625,-0.000579833984375,-0.00079345703125,-0.00067138671875,-0.00018310546875,-0.000274658203125,-0.00103759765625,-0.00146484375,-0.001708984375,-0.002410888671875,-0.00262451171875,-0.001953125,-0.001251220703125,-0.000885009765625,-0.00079345703125,-0.001251220703125,-0.00225830078125,-0.0028076171875,-0.002655029296875,-0.00250244140625,-0.0020751953125,-0.00115966796875,-0.000823974609375,-0.001220703125,-0.001434326171875,-0.00128173828125,-0.0006103515625,0.0008545182645320892,0.0025025177747011185,0.0029908139258623123,0.0028077028691768646,0.0030518509447574615,0.0032349620014429092,0.0032349620014429092,0.003662221133708954,0.004394665360450745,0.0046388134360313416,0.004181035794317722,0.0035401470959186554,0.0025940733030438423,0.0015564439818263054,0.0016174810007214546,0.002136295661330223,0.0016785180196166039,0.0007019257172942162,-0.00018310546875,-0.001373291015625,-0.002471923828125,-0.00286865234375,-0.002410888671875,-0.001434326171875,-0.000274658203125,0.0007019257172942162,0.0009460737928748131,0.0004882961511611938,-0.000213623046875,-0.001007080078125,-0.00115966796875,-0.000091552734375,0.0011291848495602608,0.0016479995101690292,0.0018005920574069023,0.0012207403779029846,-0.000213623046875,-0.001312255859375,-0.001556396484375,-0.001190185546875,-0.00030517578125,0.0005493331700563431,0.0006103701889514923,-0.000274658203125,-0.0008544921875,-0.0008544921875,-0.0009765625,-0.000518798828125,0.0005188146606087685,0.0009765923023223877,0.0009155552834272385,0.0007324442267417908,0.00045777764171361923,0.0002441480755805969,0.00015259254723787308,0.0004272591322660446,0.0004272591322660446,-0.000030517578125,-0.00030517578125,-0.000457763671875,-0.00048828125,-0.00018310546875,-0.000030517578125,-0.000030517578125,-0.000091552734375,-0.0003662109375,-0.00054931640625,-0.00079345703125,-0.001129150390625,-0.001251220703125,-0.0009765625,-0.000640869140625,-0.000579833984375,-0.00006103515625,0.0005493331700563431,0.00027466658502817154,-0.000274658203125,-0.000762939453125,-0.0010986328125,-0.001220703125,-0.001129150390625,-0.0009765625,-0.00140380859375,-0.001861572265625,-0.0018310546875,-0.00189208984375,-0.001617431640625,-0.000823974609375,0.00009155552834272385,0.001037629321217537,0.0016174810007214546,0.0021973326802253723,0.0025940733030438423,0.002533036284148693,0.0024414807558059692,0.0021973326802253723,0.001831110566854477,0.00158696249127388,0.0014648884534835815,0.0016174810007214546,0.0016785180196166039,0.0018005920574069023,0.0018921475857496262,0.001831110566854477,0.0021973326802253723,0.002533036284148693,0.0023194067180156708,0.0017090365290641785,0.0008545182645320892,0.0002136295661330223,-0.000244140625,-0.000579833984375,-0.0006103515625,-0.000732421875,-0.001495361328125,-0.002685546875,-0.003570556640625,-0.003753662109375,-0.00360107421875,-0.003509521484375,-0.003570556640625,-0.00341796875,-0.00323486328125,-0.00360107421875,-0.00390625,-0.003814697265625,-0.003570556640625,-0.0029296875,-0.001861572265625,-0.00115966796875,-0.00091552734375,-0.000823974609375,-0.00091552734375,-0.00103759765625,-0.0009765625,-0.0006103515625,-0.000244140625,0.00012207403779029846,0.0004882961511611938,0.00079348124563694,0.0010681478306651115,0.0008850367739796638,0.00045777764171361923,0.0004882961511611938,0.0011291848495602608,0.001831110566854477,0.0021057771518826485,0.0021668141707777977,0.0021668141707777977,0.002075258642435074,0.0021668141707777977,0.002471999265253544,0.0027161473408341408,0.002685628831386566,0.002288888208568096,0.0014954069629311562,0.0003662221133708954,-0.00054931640625,-0.00079345703125,-0.00042724609375,0.0004272591322660446,0.0012512588873505592,0.001739555038511753,0.0021973326802253723,0.0022583696991205215,0.0017090365290641785,0.0012512588873505592,0.0012817773967981339,0.0014038514345884323,0.0015564439818263054,0.0020142216235399246,0.0019531846046447754,0.0011291848495602608,0.00030518509447574615,-0.000640869140625,-0.001739501953125,-0.002197265625,-0.0013427734375,0.00045777764171361923,0.00158696249127388,0.0014954069629311562,0.0008239997550845146,-0.000274658203125,-0.001007080078125,-0.00079345703125,-0.00042724609375,-0.0001220703125,0.0001831110566854477,0.000030518509447574615,-0.000640869140625,-0.001434326171875,-0.00189208984375,-0.001617431640625,-0.00079345703125,-0.0001220703125,-0.0001220703125,-0.00054931640625,-0.00079345703125,-0.0008544921875,-0.000823974609375,-0.000091552734375,0.00079348124563694,0.0010071108117699623,0.0011597033590078354,0.0014648884534835815,0.0014954069629311562,0.0014954069629311562,0.0015564439818263054,0.0015259254723787308,0.0011291848495602608,0.0007629627361893654,0.0005798516795039177,-0.000030517578125,-0.001373291015625,-0.002349853515625,-0.002044677734375,-0.001129150390625,-0.00048828125,-0.000152587890625,-0.0003662109375,-0.000732421875,-0.00042724609375,0.00039674062281847,0.0012817773967981339,0.0018921475857496262,0.00198370311409235,0.0013733329251408577,0.0002136295661330223,-0.00079345703125,-0.0008544921875,0.00009155552834272385,0.0010681478306651115,0.0014038514345884323,0.0012207403779029846,0.0006714072078466415,0.00015259254723787308,0.0002136295661330223,0.0008850367739796638,0.0019531846046447754,0.00277718435972929,0.002868739888072014,0.002136295661330223,0.0006408886983990669,-0.000640869140625,-0.00079345703125,-0.000244140625,0.00012207403779029846,0.0002136295661330223,0.00006103701889514923,-0.00079345703125,-0.0020751953125,-0.002716064453125,-0.002899169921875,-0.002655029296875,-0.00146484375,-0.000244140625,0.000030518509447574615,-0.000152587890625,-0.000518798828125,-0.0010986328125,-0.001708984375,-0.001708984375,-0.001434326171875,-0.00128173828125,-0.000885009765625,-0.0008544921875,-0.001495361328125,-0.0020751953125,-0.0023193359375,-0.0023193359375,-0.001983642578125,-0.000823974609375,0.00015259254723787308,0.0001831110566854477,0.00015259254723787308,0.0001831110566854477,-0.000640869140625,-0.001312255859375,-0.000946044921875,-0.00054931640625,-0.000152587890625,0.0005798516795039177,0.0007019257172942162,0.00006103701889514923,-0.000030517578125,0.00006103701889514923,-0.000244140625,0,0.0009155552834272385,0.0013122959062457085,0.0009155552834272385,0.0005493331700563431,0.0001831110566854477,-0.000213623046875,0.0005188146606087685,0.002288888208568096,0.003479110077023506,0.003906369209289551,0.0036927396431565285,0.002227851189672947,0.0004272591322660446,-0.000213623046875,-0.00006103515625,0.00030518509447574615,0.0014954069629311562,0.0021668141707777977,0.0010986663401126862,-0.0001220703125,-0.000335693359375,0.0004272591322660446,0.002227851189672947,0.003997924737632275,0.0048829615116119385,0.0046388134360313416,0.0035401470959186554,0.0017700735479593277,-0.0001220703125,-0.000885009765625,-0.000640869140625,-0.000579833984375,-0.000762939453125,-0.0013427734375,-0.00225830078125,-0.003082275390625,-0.00347900390625,-0.002899169921875,-0.0015869140625,-0.000030517578125,0.0010071108117699623,0.0007629627361893654,-0.000030517578125,-0.00079345703125,-0.001556396484375,-0.001739501953125,-0.0013427734375,-0.001007080078125,-0.00128173828125,-0.002197265625,-0.003265380859375,-0.003936767578125,-0.003753662109375,-0.002838134765625,-0.001678466796875,-0.00048828125,0.00012207403779029846,0.00012207403779029846,0.0001831110566854477,0.0005188146606087685,0.0006714072078466415,0.0007019257172942162,0.0012207403779029846,0.00198370311409235,0.001831110566854477,0.0007324442267417908,0.00012207403779029846,0.00012207403779029846,0.00015259254723787308,0.0004882961511611938,0.0009155552834272385,0.0010071108117699623,0.0010681478306651115,0.001037629321217537,0.0006408886983990669,0.00039674062281847,0.0007019257172942162,0.0008545182645320892,0.00045777764171361923,0.00012207403779029846,-0.00006103515625,-0.000335693359375,-0.000213623046875,0.00009155552834272385,0.00012207403779029846,-0.000244140625,-0.0006103515625,-0.000457763671875,-0.00018310546875,-0.00018310546875,-0.000030517578125,0.0001831110566854477,0.00012207403779029846,0,-0.0001220703125,-0.00054931640625,-0.00079345703125,-0.0006103515625,-0.00042724609375,-0.00018310546875,0.0001831110566854477,0.0004272591322660446,0.00039674062281847,-0.000213623046875,-0.00128173828125,-0.002227783203125,-0.002532958984375,-0.00244140625,-0.002166748046875,-0.0015869140625,-0.0013427734375,-0.0015869140625,-0.001953125,-0.002471923828125,-0.002593994140625,-0.002227783203125,-0.001495361328125,-0.000732421875,-0.000457763671875,-0.000579833984375,-0.00091552734375,-0.001129150390625,-0.0009765625,-0.000396728515625,0.0005798516795039177,0.0014038514345884323,0.001739555038511753,0.0021973326802253723,0.00238044373691082,0.0018921475857496262,0.0016785180196166039,0.002075258642435074,0.002075258642435074,0.0013122959062457085,0.00027466658502817154,-0.0003662109375,-0.000885009765625,-0.0013427734375,-0.001220703125,-0.000274658203125,0.0010071108117699623,0.001831110566854477,0.0018921475857496262,0.0015259254723787308,0.0012817773967981339,0.00158696249127388,0.002288888208568096,0.002868739888072014,0.003021332435309887,0.0027161473408341408,0.0017700735479593277,0.0004882961511611938,-0.00054931640625,-0.001007080078125,-0.000885009765625,-0.000457763671875,0.00015259254723787308,0.0008239997550845146,0.001037629321217537,0.0007629627361893654,0.0003662221133708954,0.0002136295661330223,0.0002136295661330223,0,0.0002441480755805969,0.0005798516795039177,0.00012207403779029846,-0.000244140625,-0.000396728515625,-0.000946044921875,-0.001617431640625,-0.00189208984375,-0.001556396484375,-0.001068115234375,-0.000701904296875,-0.000213623046875,-0.00018310546875,-0.000762939453125,-0.001312255859375,-0.001708984375,-0.001983642578125,-0.002166748046875,-0.002166748046875,-0.00213623046875,-0.001983642578125,-0.00164794921875,-0.001495361328125,-0.00115966796875,-0.001007080078125,-0.00115966796875,-0.000885009765625,-0.00042724609375,-0.00048828125,-0.00079345703125,-0.00054931640625,-0.0001220703125,-0.000335693359375,-0.000640869140625,-0.000396728515625,0.0001831110566854477,0.0007324442267417908,0.0010986663401126862,0.0011597033590078354,0.0007324442267417908,0.00030518509447574615,0.00027466658502817154,0,-0.00054931640625,-0.000732421875,-0.0010986328125,-0.00189208984375,-0.00225830078125,-0.001708984375,-0.00079345703125,0.0006103701889514923,0.0022583696991205215,0.002929776906967163,0.00277718435972929,0.0026551103219389915,0.002624591812491417,0.0024414807558059692,0.002227851189672947,0.002624591812491417,0.002929776906967163,0.002288888208568096,0.0014038514345884323,0.0005493331700563431,0,0.0006103701889514923,0.0020447401329874992,0.0029908139258623123,0.0032044434919953346,0.00317392498254776,0.002471999265253544,0.001037629321217537,0.00009155552834272385,0.00006103701889514923,-0.0001220703125,-0.0006103515625,-0.001312255859375,-0.002593994140625,-0.00390625,-0.004241943359375,-0.00360107421875,-0.002838134765625,-0.001739501953125,-0.0003662109375,-0.00006103515625,-0.00042724609375,-0.000396728515625,0,0.0007019257172942162,0.0017090365290641785,0.0020142216235399246,0.0016479995101690292,0.0012817773967981339,0.0006408886983990669,-0.000274658203125,-0.0008544921875,-0.0008544921875,-0.0006103515625,-0.000274658203125,0.0002136295661330223,0.0002441480755805969,-0.0003662109375,-0.0006103515625,-0.00067138671875,-0.000823974609375,-0.000244140625,0.0006408886983990669,0.0009460737928748131,0.0007324442267417908,0.0004272591322660446,0.00006103701889514923,-0.00054931640625,-0.000823974609375,-0.000518798828125,-0.00006103515625,0.0006103701889514923,0.0009155552834272385,0.00039674062281847,-0.000244140625,-0.000732421875,-0.0009765625,-0.000823974609375,-0.0003662109375,0.0002136295661330223,0.0008239997550845146,0.00119022186845541,0.0007019257172942162,0.0002136295661330223,0.0007324442267417908,0.0013733329251408577,0.00158696249127388,0.0018005920574069023,0.0017700735479593277,0.0012817773967981339,0.0006408886983990669,0.00012207403779029846,-0.000213623046875,-0.000244140625,0.00015259254723787308,0.00030518509447574615,0.00015259254723787308,0.00015259254723787308,0,-0.000152587890625,-0.000152587890625,-0.000213623046875,-0.0001220703125,-0.000213623046875,-0.000244140625,-0.00018310546875,-0.000640869140625,-0.00115966796875,-0.001251220703125,-0.00091552734375,-0.000396728515625,0,0.0004272591322660446,0.0006714072078466415,0.00079348124563694,0.0007019257172942162,0.00027466658502817154,0.0001831110566854477,0.0004882961511611938,0.0008239997550845146,0.0011597033590078354,0.00119022186845541,0.0011597033590078354,0.00119022186845541,0.0009460737928748131,0.0009765923023223877,0.0012817773967981339,0.0014648884534835815,0.0016479995101690292,0.0015564439818263054,0.00079348124563694,-0.0001220703125,-0.00054931640625,-0.0008544921875,-0.001068115234375,-0.000762939453125,-0.000640869140625,-0.0009765625,-0.00103759765625,-0.0009765625,-0.000946044921875,-0.000640869140625,-0.000274658203125,0,0.00009155552834272385,-0.00006103515625,-0.000396728515625,-0.00067138671875,-0.000823974609375,-0.001251220703125,-0.001739501953125,-0.001861572265625,-0.001983642578125,-0.002197265625,-0.002349853515625,-0.00189208984375,-0.00103759765625,-0.000152587890625,0.0006714072078466415,0.0010986663401126862,0.0010071108117699623,0.0008239997550845146,0.0005493331700563431,0.00030518509447574615,0.00027466658502817154,0.00015259254723787308,-0.00030517578125,-0.001251220703125,-0.00201416015625,-0.002044677734375,-0.0015869140625,-0.000823974609375,0.000030518509447574615,0.0010071108117699623,0.001434369944036007,0.0009460737928748131,0.0004272591322660446,0.0004882961511611938,0.0007019257172942162,0.00039674062281847,0,-0.000213623046875,-0.00103759765625,-0.002288818359375,-0.00311279296875,-0.003173828125,-0.002410888671875,-0.001068115234375,0.00027466658502817154,0.0012512588873505592,0.0016785180196166039,0.0016479995101690292,0.00119022186845541,0.0007629627361893654,0.0014038514345884323,0.0029908139258623123,0.004058961756527424,0.003662221133708954,0.002288888208568096,0.0006408886983990669,-0.00067138671875,-0.00128173828125,-0.0009765625,0.0002136295661330223,0.0013122959062457085,0.0012512588873505592,0.0002441480755805969,-0.0008544921875,-0.001434326171875,-0.001434326171875,-0.000823974609375,0.00039674062281847,0.0011291848495602608,0.0009765923023223877,0.0004882961511611938,-0.000396728515625,-0.001220703125,-0.001129150390625,-0.000579833984375,0.00012207403779029846,0.0007324442267417908,0.0009155552834272385,0.0005188146606087685,-0.00054931640625,-0.001556396484375,-0.001434326171875,-0.0006103515625,0,0.0002441480755805969,0.0004272591322660446,0.0001831110566854477,-0.0006103515625,-0.001312255859375,-0.0013427734375,-0.000823974609375,0.00015259254723787308,0.0011597033590078354,0.0014954069629311562,0.0010986663401126862,0.00015259254723787308,-0.000701904296875,-0.001220703125,-0.001007080078125,-0.000091552734375,0.0009460737928748131,0.0016174810007214546,0.001434369944036007,0.0004272591322660446,-0.000518798828125,-0.0009765625,-0.000732421875,0.00039674062281847,0.0015564439818263054,0.0017090365290641785,0.0012817773967981339,0.0006714072078466415,-0.000213623046875,-0.0010986328125,-0.001129150390625,-0.000396728515625,0.0002136295661330223,0.0007324442267417908,0.0008545182645320892,0.00045777764171361923,0.0002441480755805969,0.0005798516795039177,0.001037629321217537,0.0014038514345884323,0.002075258642435074,0.002471999265253544,0.0018921475857496262,0.0009155552834272385,0.0001831110566854477,-0.00006103515625,0.00033570360392332077,0.0009765923023223877,0.0010681478306651115,0.0007629627361893654,0.0006714072078466415,0.00015259254723787308,-0.000823974609375,-0.001220703125,-0.000762939453125,-0.000274658203125,-0.000244140625,-0.000091552734375,0.00015259254723787308,0.00027466658502817154,0.0005188146606087685,0.00033570360392332077,-0.00042724609375,-0.000640869140625,-0.00018310546875,-0.000152587890625,-0.00042724609375,-0.000091552734375,0.00027466658502817154,0,-0.000335693359375,-0.00079345703125,-0.001617431640625,-0.001800537109375,-0.001190185546875,-0.000823974609375,-0.000885009765625,-0.00079345703125,-0.000946044921875,-0.001617431640625,-0.00177001953125,-0.00140380859375,-0.001312255859375,-0.001068115234375,-0.000518798828125,-0.0008544921875,-0.001922607421875,-0.00262451171875,-0.003173828125,-0.0035400390625,-0.003387451171875,-0.00335693359375,-0.003173828125,-0.002655029296875,-0.002288818359375,-0.00213623046875,-0.001953125,-0.0013427734375,-0.000457763671875,0.0001831110566854477,0.00079348124563694,0.0009460737928748131,0.0006714072078466415,0.00030518509447574615,-0.000518798828125,-0.001373291015625,-0.00152587890625,-0.00091552734375,-0.000030517578125,0.0002441480755805969,0.00027466658502817154,0.0004272591322660446,0.00039674062281847,0.0004882961511611938,0.0007324442267417908,0.0013122959062457085,0.0021973326802253723,0.0026551103219389915,0.002471999265253544,0.0016785180196166039,0.0009155552834272385,0.0002136295661330223,-0.000396728515625,-0.000396728515625,-0.000244140625,0.00009155552834272385,0.0008239997550845146,0.0010986663401126862,0.0009460737928748131,0.0006714072078466415,0.0007629627361893654,0.0013733329251408577,0.002136295661330223,0.0032349620014429092,0.004028443247079849,0.0036317026242613792,0.0025025177747011185,0.0016174810007214546,0.0009155552834272385,0.00027466658502817154,0.0004882961511611938,0.0012512588873505592,0.0015259254723787308,0.001434369944036007,0.0009765923023223877,0.0001831110566854477,-0.000030517578125,0.0006408886983990669,0.0012207403779029846,0.0012512588873505592,0.0013122959062457085,0.00119022186845541,0.0005188146606087685,-0.00030517578125,-0.000885009765625,-0.0008544921875,-0.0003662109375,0,-0.00006103515625,-0.00067138671875,-0.00146484375,-0.0018310546875,-0.00164794921875,-0.00091552734375,0.0002441480755805969,0.001434369944036007,0.0018921475857496262,0.0016785180196166039,0.0010986663401126862,0.00045777764171361923,0.00045777764171361923,0.0012207403779029846,0.002075258642435074,0.0025635547935962677,0.002471999265253544,0.0016174810007214546,0.00027466658502817154,-0.00103759765625,-0.002044677734375,-0.00225830078125,-0.001861572265625,-0.001373291015625,-0.001129150390625,-0.001251220703125,-0.001495361328125,-0.001434326171875,-0.001129150390625,-0.00067138671875,-0.000213623046875,-0.00006103515625,-0.00030517578125,-0.000701904296875,-0.000946044921875,-0.000946044921875,-0.000457763671875,0,-0.0001220703125,-0.00067138671875,-0.00079345703125,-0.000518798828125,-0.0001220703125,0.0006103701889514923,0.0015564439818263054,0.0023499252274632454,0.002624591812491417,0.0021973326802253723,0.0013122959062457085,0.0003662221133708954,-0.000091552734375,0.00015259254723787308,0.00033570360392332077,0.0002441480755805969,0.00006103701889514923,-0.00018310546875,-0.00054931640625,-0.000732421875,-0.000457763671875,0.00030518509447574615,0.0010986663401126862,0.00119022186845541,0.0007629627361893654,0.00012207403779029846,-0.00042724609375,-0.000640869140625,-0.000946044921875,-0.001495361328125,-0.0020751953125,-0.002471923828125,-0.002716064453125,-0.002899169921875,-0.0028076171875,-0.0023193359375,-0.00152587890625,-0.00103759765625,-0.001251220703125,-0.001251220703125,-0.0009765625,-0.001007080078125,-0.0008544921875,-0.00048828125,0.000030518509447574615,0.0007629627361893654,0.0010681478306651115,0.0009765923023223877,0.0005188146606087685,0.00009155552834272385,0.00006103701889514923,0,0,-0.00006103515625,0,-0.00006103515625,-0.000732421875,-0.001434326171875,-0.001617431640625,-0.001251220703125,-0.000946044921875,-0.000885009765625,-0.000640869140625,-0.000518798828125,-0.000396728515625,-0.00018310546875,-0.0003662109375,-0.000518798828125,0.0002136295661330223,0.001739555038511753,0.0027161473408341408,0.0025635547935962677,0.002533036284148693,0.002624591812491417,0.002075258642435074,0.0014954069629311562,0.001434369944036007,0.0016479995101690292,0.0018005920574069023,0.0017090365290641785,0.0012817773967981339,0.0004272591322660446,-0.000274658203125,-0.000579833984375,-0.0008544921875,-0.000885009765625,-0.000579833984375,-0.0006103515625,-0.00115966796875,-0.00146484375,-0.001373291015625,-0.001312255859375,-0.000946044921875,-0.000244140625,-0.00006103515625,-0.00048828125,-0.000732421875,-0.000579833984375,-0.000213623046875,0.0004882961511611938,0.001342814415693283,0.001739555038511753,0.0014038514345884323,0.0006103701889514923,-0.000335693359375,-0.001373291015625,-0.001495361328125,-0.00018310546875,0.0010986663401126862,0.0017090365290641785,0.0020447401329874992,0.0016174810007214546,0.0005798516795039177,0.00009155552834272385,0.00012207403779029846,0.00039674062281847,0.0010071108117699623,0.0016785180196166039,0.001831110566854477,0.001342814415693283,0.0009155552834272385,0.0004882961511611938,0.00006103701889514923,0.0002136295661330223,0.0005493331700563431,0.00030518509447574615,-0.0001220703125,-0.000091552734375,-0.00018310546875,-0.000457763671875,-0.000335693359375,-0.000152587890625,-0.00018310546875,-0.00030517578125,-0.000732421875,-0.0013427734375,-0.001190185546875,-0.000244140625,0.00015259254723787308,0.00009155552834272385,0.00009155552834272385,-0.000244140625,-0.000885009765625,-0.0013427734375,-0.00146484375,-0.001129150390625,-0.000732421875,-0.000396728515625,-0.000335693359375,-0.00048828125,-0.000335693359375,0.00006103701889514923,0.0003662221133708954,0.0005798516795039177,0.0008239997550845146,0.0010986663401126862,0.0011291848495602608,0.0010986663401126862,0.00119022186845541,0.0013122959062457085,0.0012512588873505592,0.0006714072078466415,0,-0.00042724609375,-0.001007080078125,-0.001190185546875,-0.00067138671875,-0.0001220703125,0.0003662221133708954,0.0007324442267417908,0.0005493331700563431,0,-0.000213623046875,0,0.00006103701889514923,0.0001831110566854477,0.0006103701889514923,0.00045777764171361923,-0.000457763671875,-0.001556396484375,-0.002349853515625,-0.0025634765625,-0.00250244140625,-0.002105712890625,-0.001495361328125,-0.001373291015625,-0.001556396484375,-0.00201416015625,-0.00262451171875,-0.00250244140625,-0.001739501953125,-0.0008544921875,-0.000244140625,0.00030518509447574615,0.0008239997550845146,0.0009765923023223877,0.00119022186845541,0.0017090365290641785,0.002471999265253544,0.0032044434919953346,0.0031128879636526108,0.002533036284148693,0.0021973326802253723,0.0021668141707777977,0.0021668141707777977,0.0018616290763020515,0.0016785180196166039,0.00198370311409235,0.0021668141707777977,0.001739555038511753,0.0009765923023223877,0.0003662221133708954,-0.000030517578125,-0.00018310546875,0,0.00009155552834272385,0.00045777764171361923,0.0011291848495602608,0.0006408886983990669,-0.00079345703125,-0.001617431640625,-0.001678466796875,-0.00146484375,-0.00115966796875,-0.0008544921875,-0.000518798828125,-0.000457763671875,-0.000762939453125,-0.00115966796875,-0.00140380859375,-0.001251220703125,-0.000640869140625,0.00009155552834272385,0.00045777764171361923,0.00033570360392332077,-0.00006103515625,-0.000640869140625,-0.0010986328125,-0.00140380859375,-0.00140380859375,-0.0009765625,-0.000396728515625,0.0002136295661330223,0.0005188146606087685,0.00030518509447574615,0,-0.000152587890625,0,0.0001831110566854477,0.00012207403779029846,-0.00006103515625,-0.00042724609375,-0.000732421875,-0.00115966796875,-0.001708984375,-0.0015869140625,-0.001007080078125,-0.00079345703125,-0.00079345703125,-0.000518798828125,-0.00030517578125,-0.00030517578125,0,0.0002441480755805969,0.00027466658502817154,0.0006103701889514923,0.0007629627361893654,0.00009155552834272385,-0.00079345703125,-0.001251220703125,-0.001312255859375,-0.001312255859375,-0.001129150390625,-0.00054931640625,-0.000274658203125,-0.00067138671875,-0.001068115234375,-0.001434326171875,-0.002044677734375,-0.002044677734375,-0.001373291015625,-0.000762939453125,-0.00006103515625,0.0006408886983990669,0.0006714072078466415,0.0003662221133708954,0.00015259254723787308,0.0001831110566854477,0.0005798516795039177,0.0010071108117699623,0.0014038514345884323,0.0018616290763020515,0.0025025177747011185,0.003021332435309887,0.0028992583975195885,0.0025940733030438423,0.0027161473408341408,0.00277718435972929,0.0025940733030438423,0.0021973326802253723,0.0018005920574069023,0.0014954069629311562,0.0010681478306651115,0.0009765923023223877,0.0009155552834272385,0.00030518509447574615,-0.000091552734375,0.00009155552834272385,0.00045777764171361923,0.0007629627361893654,0.0011597033590078354,0.00119022186845541,0.0008239997550845146,0.00039674062281847,0,-0.000335693359375,-0.000091552734375,0.0006408886983990669,0.00119022186845541,0.0012512588873505592,0.0009765923023223877,0.0007019257172942162,0.0009155552834272385,0.0009765923023223877,0.0008239997550845146,0.001037629321217537,0.0010681478306651115,0.0006714072078466415,0.0002441480755805969,-0.00006103515625,-0.000030517578125,0.00015259254723787308,0.00039674062281847,0.0005798516795039177,0.00006103701889514923,-0.0008544921875,-0.001861572265625,-0.00262451171875,-0.00262451171875,-0.002105712890625,-0.001495361328125,-0.001068115234375,-0.001251220703125,-0.00177001953125,-0.002593994140625,-0.0035400390625,-0.003509521484375,-0.00274658203125,-0.002044677734375,-0.001556396484375,-0.001556396484375,-0.002105712890625,-0.002532958984375,-0.00244140625,-0.001983642578125,-0.0010986328125,0.0004272591322660446,0.0018005920574069023,0.0022583696991205215,0.00238044373691082,0.0024414807558059692,0.0024109622463583946,0.0024414807558059692,0.002685628831386566,0.0028382213786244392,0.002471999265253544,0.00198370311409235,0.0015259254723787308,0.0006714072078466415,0,0.00006103701889514923,0.00009155552834272385,-0.0001220703125,-0.000091552734375,-0.00006103515625,-0.0006103515625,-0.00103759765625,-0.000885009765625,-0.0010986328125,-0.001434326171875,-0.00140380859375,-0.001800537109375,-0.00262451171875,-0.00299072265625,-0.003021240234375,-0.003143310546875,-0.003021240234375,-0.002349853515625,-0.001861572265625,-0.001739501953125,-0.00152587890625,-0.001251220703125,-0.001129150390625,-0.00079345703125,-0.000396728515625,-0.000518798828125,-0.000396728515625,0.00039674062281847,0.0008239997550845146,0.0008239997550845146,0.0010071108117699623,0.001037629321217537,0.0008850367739796638,0.0008239997550845146,0.0009765923023223877,0.001342814415693283,0.0017700735479593277,0.002136295661330223,0.0021973326802253723,0.0020142216235399246,0.0018005920574069023,0.001342814415693283,0.0009460737928748131,0.00079348124563694,0.0009765923023223877,0.0013733329251408577,0.0014038514345884323,0.0013122959062457085,0.0013733329251408577,0.0010986663401126862,0.00033570360392332077,-0.00048828125,-0.000579833984375,0,0.0002441480755805969,0,-0.00054931640625,-0.000946044921875,-0.001007080078125,-0.00091552734375,-0.000579833984375,-0.000152587890625,0.00039674062281847,0.0009460737928748131,0.0006408886983990669,0.000030518509447574615,0.0002136295661330223,0.0009460737928748131,0.0016785180196166039,0.001831110566854477,0.001434369944036007,0.0008239997550845146,0.0005188146606087685,0.0005798516795039177,0.0004882961511611938,0.00039674062281847,0.0008545182645320892,0.0014954069629311562,0.0014954069629311562,0.0007629627361893654,0.00015259254723787308,-0.000091552734375,0,0.0004272591322660446,0.0005493331700563431,0.0003662221133708954,0.0002441480755805969,0.00012207403779029846,-0.000640869140625,-0.001739501953125,-0.00213623046875,-0.001983642578125,-0.001617431640625,-0.00128173828125,-0.001312255859375,-0.001556396484375,-0.0015869140625,-0.0010986328125,-0.000518798828125,-0.00030517578125,-0.0001220703125,0.0003662221133708954,0.0007629627361893654,0.0007324442267417908,0.0006103701889514923,0.0007629627361893654,0.0009765923023223877,0.0009460737928748131,0.0005798516795039177,0.00015259254723787308,0.000030518509447574615,0.0004272591322660446,0.0010681478306651115,0.0013733329251408577,0.0014648884534835815,0.0015259254723787308,0.0013733329251408577,0.0009155552834272385,0.00033570360392332077,0.00006103701889514923,0.00009155552834272385,0.000030518509447574615,-0.000274658203125,-0.0008544921875,-0.001373291015625,-0.001678466796875,-0.001922607421875,-0.001922607421875,-0.001922607421875,-0.001922607421875,-0.001800537109375,-0.00164794921875,-0.001220703125,-0.000396728515625,0.0006714072078466415,0.0014648884534835815,0.0014038514345884323,0.001037629321217537,0.0005798516795039177,-0.00006103515625,-0.000701904296875,-0.000732421875,-0.000152587890625,0.0005493331700563431,0.0009765923023223877,0.0008850367739796638,0.00033570360392332077,-0.000274658203125,-0.00048828125,-0.000244140625,0.00009155552834272385,0.0006103701889514923,0.00119022186845541,0.0012817773967981339,0.0006103701889514923,-0.000396728515625,-0.000946044921875,-0.000701904296875,-0.00054931640625,-0.000762939453125,-0.001007080078125,-0.001251220703125,-0.001312255859375,-0.001190185546875,-0.0010986328125,-0.00103759765625,-0.0008544921875,-0.000518798828125,-0.00030517578125,-0.000579833984375,-0.00128173828125,-0.00152587890625,-0.000946044921875,-0.000457763671875,-0.00018310546875,0.00012207403779029846,0,-0.0001220703125,0.000030518509447574615,0.00006103701889514923,0.00006103701889514923,0.00039674062281847,0.0007324442267417908,0.0006714072078466415,0.00027466658502817154,-0.000152587890625,-0.000244140625,-0.000274658203125,-0.000640869140625,-0.000946044921875,-0.0009765625,-0.00091552734375,-0.0006103515625,-0.000213623046875,0.00012207403779029846,0.00039674062281847,0.00033570360392332077,0.0001831110566854477,0.00009155552834272385,-0.000030517578125,0.00012207403779029846,0.0007019257172942162,0.0011597033590078354,0.001037629321217537,0.0008545182645320892,0.0008850367739796638,0.00045777764171361923,0,0.00039674062281847,0.0007324442267417908,0.0004882961511611938,0.00039674062281847,0.00030518509447574615,-0.00018310546875,-0.000701904296875,-0.000946044921875,-0.000762939453125,-0.000335693359375,0.00012207403779029846,0.00027466658502817154,-0.0001220703125,-0.000640869140625,-0.000823974609375,-0.00103759765625,-0.0009765625,-0.0001220703125,0.0007324442267417908,0.0009460737928748131,0.00079348124563694,0.0004272591322660446,-0.00006103515625,-0.00048828125,-0.00048828125,-0.000213623046875,-0.000213623046875,-0.000274658203125,-0.000518798828125,-0.001129150390625,-0.0015869140625,-0.001495361328125,-0.0013427734375,-0.00115966796875,-0.0003662109375,0.00033570360392332077,0.0002136295661330223,0.0002136295661330223,0.0006103701889514923,0.0006408886983990669,0.0007629627361893654,0.0012207403779029846,0.0012207403779029846,0.0007324442267417908,0.00030518509447574615,0.000030518509447574615,-0.000457763671875,-0.000885009765625,-0.000885009765625,-0.0006103515625,-0.000152587890625,0.0003662221133708954,0.00033570360392332077,-0.000152587890625,-0.00018310546875,-0.00006103515625,-0.000244140625,0,0.0009765923023223877,0.0018616290763020515,0.002227851189672947,0.0021973326802253723,0.0016479995101690292,0.0008545182645320892,0.0007019257172942162,0.0010071108117699623,0.0012817773967981339,0.0019226660951972008,0.0025635547935962677,0.002471999265253544,0.0014954069629311562,0.00012207403779029846,-0.00091552734375,-0.00146484375,-0.001373291015625,-0.000885009765625,-0.000640869140625,-0.00054931640625,-0.00054931640625,-0.001129150390625,-0.001678466796875,-0.001800537109375,-0.001251220703125,0.00006103701889514923,0.00119022186845541,0.0018005920574069023,0.0021057771518826485,0.0020447401329874992,0.0017090365290641785,0.0015259254723787308,0.0017090365290641785,0.002075258642435074,0.0023499252274632454,0.0026551103219389915,0.0022583696991205215,0.0009460737928748131,0.00009155552834272385,-0.000030517578125,-0.0001220703125,-0.000030517578125,0.00027466658502817154,0.00039674062281847,0.000030518509447574615,-0.00030517578125,-0.000579833984375,-0.000640869140625,0.00009155552834272385,0.0011291848495602608,0.0016174810007214546,0.0013122959062457085,0.0006714072078466415,0.00015259254723787308,-0.000457763671875,-0.000823974609375,-0.00054931640625,0,0.0007324442267417908,0.0009765923023223877,0.0004272591322660446,-0.000335693359375,-0.0009765625,-0.0009765625,-0.000701904296875,-0.000274658203125,0.0005188146606087685,0.0009765923023223877,0.0009155552834272385,0.00030518509447574615,-0.000885009765625,-0.001708984375,-0.0018310546875,-0.00164794921875,-0.00115966796875,-0.00054931640625,-0.00006103515625,0.00012207403779029846,-0.0001220703125,-0.000518798828125,-0.00067138671875,-0.000640869140625,-0.00042724609375,0.00015259254723787308,0.00045777764171361923,0.00006103701889514923,-0.000213623046875,-0.0003662109375,-0.000823974609375,-0.001220703125,-0.00128173828125,-0.001312255859375,-0.001434326171875,-0.00146484375,-0.001434326171875,-0.00152587890625,-0.001495361328125,-0.00103759765625,-0.000335693359375,-0.000030517578125,-0.000213623046875,-0.00030517578125,-0.000244140625,-0.00018310546875,-0.000335693359375,-0.000640869140625,-0.000518798828125,-0.000396728515625,-0.00067138671875,-0.00079345703125,-0.000946044921875,-0.001220703125,-0.00115966796875,-0.000885009765625,-0.00079345703125,-0.00054931640625,0,0.0007019257172942162,0.0011291848495602608,0.0012512588873505592,0.0012207403779029846,0.0007629627361893654,0.00015259254723787308,-0.000396728515625,-0.000579833984375,-0.000152587890625,0.0001831110566854477,0.0002441480755805969,0.0002441480755805969,0.00006103701889514923,-0.00006103515625,0.0002441480755805969,0.0010986663401126862,0.0014038514345884323,0.0014038514345884323,0.0018005920574069023,0.00198370311409235,0.0014648884534835815,0.0006103701889514923,0,-0.000274658203125,-0.000091552734375,0.00030518509447574615,0.00039674062281847,0.00030518509447574615,0.0004272591322660446,0.0008239997550845146,0.00119022186845541,0.0014038514345884323,0.001739555038511753,0.002075258642435074,0.002288888208568096,0.00238044373691082,0.0021057771518826485,0.0016785180196166039,0.0012207403779029846,0.0004272591322660446,-0.000091552734375,-0.00018310546875,-0.00030517578125,-0.000701904296875,-0.00152587890625,-0.002105712890625,-0.00238037109375,-0.00274658203125,-0.002410888671875,-0.0015869140625,-0.001129150390625,-0.00079345703125,-0.000640869140625,-0.001007080078125,-0.001556396484375,-0.001678466796875,-0.001373291015625,-0.00115966796875,-0.00091552734375,-0.00054931640625,-0.00048828125,-0.0008544921875,-0.001068115234375,-0.0006103515625,0.00006103701889514923,0.0006714072078466415,0.0011291848495602608,0.00119022186845541,0.0008850367739796638,0.0002441480755805969,-0.00048828125,-0.00103759765625,-0.0010986328125,-0.000640869140625,-0.000396728515625,-0.000457763671875,-0.0006103515625,-0.0009765625,-0.001007080078125,-0.000518798828125,0.00006103701889514923,0.0009155552834272385,0.0016479995101690292,0.0018616290763020515,0.0014954069629311562,0.001037629321217537,0.0006408886983990669,0.00015259254723787308,-0.000152587890625,-0.0001220703125,0,-0.00006103515625,-0.0006103515625,-0.00140380859375,-0.002166748046875,-0.00225830078125,-0.00146484375,-0.000640869140625,0.00006103701889514923,0.0008545182645320892,0.0008545182645320892,-0.00006103515625,-0.000823974609375,-0.000885009765625,-0.000396728515625,0.0004272591322660446,0.0012512588873505592,0.0014038514345884323,0.001037629321217537,0.0007629627361893654,0.00033570360392332077,-0.000030517578125,0.0003662221133708954,0.0012817773967981339,0.001739555038511753,0.001434369944036007,0.0008239997550845146,0.00012207403779029846,-0.00054931640625,-0.00054931640625,-0.00018310546875,-0.000091552734375,0.00015259254723787308,0.00030518509447574615,-0.000152587890625,-0.00067138671875,-0.000518798828125,-0.000030517578125,0.0007019257172942162,0.002136295661330223,0.0029602954164147377,0.002533036284148693,0.0020447401329874992,0.00158696249127388,0.0007019257172942162,0.00027466658502817154,0.0004882961511611938,0.0005493331700563431,0.00039674062281847,0.0004882961511611938,0.00015259254723787308,-0.000640869140625,-0.000885009765625,-0.000701904296875,-0.000762939453125,-0.000762939453125,-0.000335693359375,0.000030518509447574615,0.00015259254723787308,0.0005493331700563431,0.0008545182645320892,0.0006714072078466415,0.0007019257172942162,0.0006714072078466415,0.00009155552834272385,-0.0003662109375,-0.000335693359375,-0.00018310546875,-0.000030517578125,0.00033570360392332077,0.0005188146606087685,0.00009155552834272385,-0.000274658203125,-0.000823974609375,-0.001708984375,-0.00225830078125,-0.002410888671875,-0.0023193359375,-0.002349853515625,-0.002655029296875,-0.00238037109375,-0.001708984375,-0.001190185546875,-0.000732421875,-0.0001220703125,0.00079348124563694,0.0014648884534835815,0.00158696249127388,0.0013733329251408577,0.0009155552834272385,0.0008545182645320892,0.0010986663401126862,0.0011597033590078354,0.0008850367739796638,0.0003662221133708954,0.00006103701889514923,-0.000244140625,-0.000640869140625,-0.000396728515625,0.00006103701889514923,0.00027466658502817154,0.0002136295661330223,0.0001831110566854477,0.00012207403779029846,-0.000091552734375,-0.000152587890625,-0.000030517578125,0,0,0.00006103701889514923,-0.000030517578125,-0.001007080078125,-0.001678466796875,-0.001312255859375,-0.0008544921875,-0.000152587890625,0.0005493331700563431,0.0006103701889514923,0.0006408886983990669,0.0007629627361893654,0.00027466658502817154,-0.00054931640625,-0.0006103515625,-0.00006103515625,0.000030518509447574615,-0.000457763671875,-0.0010986328125,-0.001678466796875,-0.001983642578125,-0.001983642578125,-0.001495361328125,-0.000885009765625,-0.000335693359375,0.0001831110566854477,0.0004272591322660446,0.0002441480755805969,0.0002441480755805969,0.0005798516795039177,0.0006408886983990669,0.0001831110566854477,-0.00018310546875,-0.00006103515625,0.00012207403779029846,0.0002136295661330223,-0.00006103515625,-0.000579833984375,-0.000457763671875,-0.000213623046875,-0.000457763671875,-0.00067138671875,-0.000732421875,-0.000457763671875,-0.000152587890625,-0.000274658203125,-0.00030517578125,-0.000152587890625,0,0.00009155552834272385,-0.00042724609375,-0.00103759765625,-0.0009765625,-0.000732421875,-0.000518798828125,-0.000244140625,0.00006103701889514923,0.00030518509447574615,0.0004882961511611938,0.00045777764171361923,0.00009155552834272385,0.00006103701889514923,0.0007324442267417908,0.001342814415693283,0.0013122959062457085,0.0013122959062457085,0.0014648884534835815,0.001434369944036007,0.0015564439818263054,0.0017090365290641785,0.002075258642435074,0.0026551103219389915,0.0025025177747011185,0.002075258642435074,0.001739555038511753,0.0011597033590078354,0.0006714072078466415,0.00039674062281847,0.0002136295661330223,0.000030518509447574615,-0.000244140625,-0.000701904296875,-0.001220703125,-0.0015869140625,-0.001434326171875,-0.000946044921875,-0.000579833984375,-0.000579833984375,-0.00067138671875,-0.000762939453125,-0.001068115234375,-0.001251220703125,-0.0009765625,-0.00048828125,-0.000030517578125,0.00006103701889514923,-0.000213623046875,-0.00091552734375,-0.00128173828125,-0.0006103515625,0.00012207403779029846,0.0003662221133708954,0.0007324442267417908,0.00119022186845541,0.0011597033590078354,0.0004882961511611938,-0.000152587890625,-0.0003662109375,-0.000274658203125,0.00006103701889514923,0.00039674062281847,0.0005798516795039177,0.0005493331700563431,0.0002136295661330223,-0.0001220703125,-0.00018310546875,0.0001831110566854477,0.0008239997550845146,0.0010681478306651115,0.0007324442267417908,0,-0.00048828125,-0.000335693359375,-0.00042724609375,-0.0008544921875,-0.000885009765625,-0.000518798828125,-0.000701904296875,-0.00140380859375,-0.001983642578125,-0.002105712890625,-0.00177001953125,-0.000823974609375,0.00015259254723787308,0.00045777764171361923,0.0006408886983990669,0.001037629321217537,0.001037629321217537,0.0006714072078466415,0.0009765923023223877,0.0021057771518826485,0.0029602954164147377,0.0032044434919953346,0.0031434064731001854,0.0026551103219389915,0.0024414807558059692,0.0027466658502817154,0.00317392498254776,0.0032044434919953346,0.002929776906967163,0.002624591812491417,0.0018616290763020515,0.00045777764171361923,-0.000518798828125,-0.000823974609375,-0.001068115234375,-0.000946044921875,-0.000579833984375,-0.000823974609375,-0.00115966796875,-0.001251220703125,-0.00164794921875,-0.001861572265625,-0.00128173828125,-0.000823974609375,-0.0009765625,-0.001190185546875,-0.001495361328125,-0.0020751953125,-0.002410888671875,-0.002166748046875,-0.001678466796875,-0.001251220703125,-0.000946044921875,-0.001129150390625,-0.001495361328125,-0.00152587890625,-0.001190185546875,-0.00079345703125,-0.000457763671875,0,0.0002441480755805969,0.0001831110566854477,0.0002136295661330223,0.00027466658502817154,0.00033570360392332077,0.0010681478306651115,0.0023499252274632454,0.0031434064731001854,0.0031128879636526108,0.002868739888072014,0.002624591812491417,0.0020447401329874992,0.0016479995101690292,0.0017700735479593277,0.0016174810007214546,0.001434369944036007,0.0011291848495602608,0.00015259254723787308,-0.00079345703125,-0.00152587890625,-0.00213623046875,-0.002471923828125,-0.002471923828125,-0.001922607421875,-0.00152587890625,-0.001922607421875,-0.002532958984375,-0.002899169921875,-0.002838134765625,-0.002166748046875,-0.001373291015625,-0.000732421875,-0.00018310546875,0,-0.000244140625,-0.00048828125,-0.00030517578125,0.00030518509447574615,0.0013733329251408577,0.0022583696991205215,0.0021057771518826485,0.00158696249127388,0.0011291848495602608,0.0004272591322660446,0.0003662221133708954,0.0013733329251408577,0.0022583696991205215,0.0025940733030438423,0.002624591812491417,0.0019531846046447754,0.0008545182645320892,0.00009155552834272385,-0.000030517578125,0.00009155552834272385,0.00027466658502817154,0.0005188146606087685,0.0003662221133708954,-0.000030517578125,-0.0003662109375,-0.000701904296875,-0.00079345703125,-0.00054931640625,-0.000213623046875,-0.0003662109375,-0.00140380859375,-0.002471923828125,-0.003265380859375,-0.00335693359375,-0.002471923828125,-0.00146484375,-0.000518798828125,0.00009155552834272385,0,-0.00042724609375,-0.000885009765625,-0.0006103515625,0.0004272591322660446,0.00158696249127388,0.0025940733030438423,0.0030518509447574615,0.002685628831386566,0.002075258642435074,0.0013733329251408577,0.0010986663401126862,0.0014648884534835815,0.0020447401329874992,0.0027161473408341408,0.0031128879636526108,0.002929776906967163,0.0024109622463583946,0.0017090365290641785,0.0010681478306651115,0.0009765923023223877,0.00119022186845541,0.0009155552834272385,0.00030518509447574615,-0.00018310546875,-0.001068115234375,-0.00201416015625,-0.002288818359375,-0.002166748046875,-0.001983642578125,-0.001922607421875,-0.002105712890625,-0.002227783203125,-0.002197265625,-0.0020751953125,-0.001678466796875,-0.001068115234375,-0.000579833984375,-0.00042724609375,-0.000885009765625,-0.001678466796875,-0.00213623046875,-0.0020751953125,-0.00177001953125,-0.001251220703125,-0.000701904296875,-0.00018310546875,0.000030518509447574615,-0.000244140625,-0.00048828125,0,0.0009460737928748131,0.0017700735479593277,0.002075258642435074,0.00198370311409235,0.0017700735479593277,0.0011597033590078354,0.00027466658502817154,-0.0003662109375,-0.0003662109375,-0.000152587890625,0.000030518509447574615,0.0005188146606087685,0.00039674062281847,-0.00018310546875,-0.00030517578125,-0.00006103515625,0.00015259254723787308,0.0003662221133708954,0.0006714072078466415,0.0009460737928748131,0.0004882961511611938,-0.000152587890625,-0.00048828125,-0.000701904296875,-0.000762939453125,-0.000640869140625,-0.00042724609375,-0.00054931640625,-0.00091552734375,-0.001129150390625,-0.001312255859375,-0.001434326171875,-0.00091552734375,0,0.00033570360392332077,0.0002441480755805969,0.00027466658502817154,0.000030518509447574615,-0.0001220703125,0.00012207403779029846,0.0004272591322660446,0.0009765923023223877,0.0013122959062457085,0.0008545182645320892,0.00033570360392332077,-0.000030517578125,-0.000457763671875,-0.000579833984375,-0.00042724609375,-0.00018310546875,-0.000244140625,-0.00067138671875,-0.00103759765625,-0.00146484375,-0.0018310546875,-0.001953125,-0.00189208984375,-0.001800537109375,-0.00189208984375,-0.001678466796875,-0.00115966796875,-0.001129150390625,-0.001251220703125,-0.000946044921875,-0.000762939453125,-0.00079345703125,-0.00042724609375,0,-0.00018310546875,-0.00030517578125,0.00012207403779029846,0.0004272591322660446,0.00030518509447574615,0.00033570360392332077,0.0007019257172942162,0.0010681478306651115,0.001342814415693283,0.00158696249127388,0.0015564439818263054,0.0014038514345884323,0.001342814415693283,0.0013733329251408577,0.0013733329251408577,0.0013733329251408577,0.0014038514345884323,0.0010986663401126862,0.0007019257172942162,0.0004882961511611938,0.0004882961511611938,0.0009460737928748131,0.0011597033590078354,0.0008239997550845146,0.0007019257172942162,0.0005188146606087685,-0.000213623046875,-0.000946044921875,-0.00091552734375,-0.0006103515625,-0.000701904296875,-0.000640869140625,-0.000701904296875,-0.00115966796875,-0.00146484375,-0.00152587890625,-0.00140380859375,-0.000762939453125,0.0001831110566854477,0.0007324442267417908,0.0005798516795039177,0.0001831110566854477,-0.000091552734375,0,0.0007629627361893654,0.0018005920574069023,0.0023499252274632454,0.0024414807558059692,0.002288888208568096,0.0017700735479593277,0.00119022186845541,0.001342814415693283,0.002075258642435074,0.0023499252274632454,0.00238044373691082,0.0021973326802253723,0.001342814415693283,0.0005798516795039177,0.0005188146606087685,0.0002441480755805969,-0.000213623046875,-0.00018310546875,-0.0003662109375,-0.00128173828125,-0.001861572265625,-0.001800537109375,-0.001983642578125,-0.0020751953125,-0.0013427734375,-0.000640869140625,-0.000701904296875,-0.00091552734375,-0.001129150390625,-0.001708984375,-0.001678466796875,-0.000732421875,-0.0001220703125,-0.000030517578125,0.0002441480755805969,0.0002136295661330223,-0.00030517578125,-0.000579833984375,-0.00048828125,-0.00042724609375,0.00009155552834272385,0.0008850367739796638,0.0007019257172942162,0.0002136295661330223,0.00030518509447574615,0.00027466658502817154,0,0.00012207403779029846,0.00045777764171361923,0.0005798516795039177,0.0005188146606087685,0.00033570360392332077,0.00012207403779029846,0.00027466658502817154,0.00079348124563694,0.0009460737928748131,0.0006103701889514923,0.00030518509447574615,0,-0.000274658203125,-0.000701904296875,-0.00128173828125,-0.001739501953125,-0.00213623046875,-0.00262451171875,-0.003082275390625,-0.00299072265625,-0.002349853515625,-0.00177001953125,-0.0015869140625,-0.00152587890625,-0.0009765625,0,0.0008239997550845146,0.0012512588873505592,0.0012817773967981339,0.0012207403779029846,0.0010681478306651115,0.0004272591322660446,0,0.0003662221133708954,0.0008850367739796638,0.0009155552834272385,0.0004882961511611938,0,-0.000732421875,-0.00128173828125,-0.001129150390625,-0.000457763671875,0.0004272591322660446,0.0013733329251408577,0.00198370311409235,0.001434369944036007,0.0002441480755805969,-0.000030517578125,0.00027466658502817154,0.0005798516795039177,0.0012817773967981339,0.0018005920574069023,0.0015564439818263054,0.0009765923023223877,0.00009155552834272385,-0.0009765625,-0.001190185546875,-0.0001220703125,0.0006408886983990669,0.0004882961511611938,-0.0001220703125,-0.001129150390625,-0.0020751953125,-0.002288818359375,-0.00152587890625,-0.00030517578125,0.0005493331700563431,0.0007629627361893654,0.00015259254723787308,-0.001007080078125,-0.0015869140625,-0.000946044921875,0.0007019257172942162,0.0025025177747011185,0.003479110077023506,0.0033875545486807823,0.0024414807558059692,0.0013733329251408577,0.0008545182645320892,0.0009460737928748131,0.0017090365290641785,0.0027161473408341408,0.003021332435309887,0.0023499252274632454,0.0011291848495602608,-0.00018310546875,-0.000701904296875,-0.00042724609375,-0.000030517578125,0.0005493331700563431,0.0006714072078466415,-0.00018310546875,-0.0015869140625,-0.00262451171875,-0.002716064453125,-0.00201416015625,-0.000885009765625,0.0002136295661330223,0.0007019257172942162,0.00033570360392332077,-0.000518798828125,-0.001068115234375,-0.000823974609375,0,0.0012207403779029846,0.00198370311409235,0.0015259254723787308,0.0002441480755805969,-0.000732421875,-0.001434326171875,-0.0018310546875,-0.00152587890625,-0.00079345703125,-0.000274658203125,-0.000579833984375,-0.0015869140625,-0.001922607421875,-0.001190185546875,0.00006103701889514923,0.0018005920574069023,0.0030518509447574615,0.0032959990203380585,0.002868739888072014,0.0016785180196166039,0.00033570360392332077,-0.000244140625,0.000030518509447574615,0.0008850367739796638,0.0015564439818263054,0.0013733329251408577,0.0007019257172942162,0.00006103701889514923,-0.000396728515625,-0.000457763671875,0,0.0007629627361893654,0.0013122959062457085,0.0013122959062457085,0.0009765923023223877,0.0004882961511611938,0,0.000030518509447574615,0.0007019257172942162,0.0010071108117699623,0.0006714072078466415,0.0002441480755805969,-0.000457763671875,-0.00164794921875,-0.002227783203125,-0.001678466796875,-0.000823974609375,-0.00006103515625,0.00045777764171361923,0.0004882961511611938,0,-0.000274658203125,-0.00018310546875,-0.00006103515625,0.00009155552834272385,0.0004272591322660446,0.0004882961511611938,0.0001831110566854477,0,-0.000213623046875,-0.0001220703125,0.0005493331700563431,0.0007019257172942162,0.00030518509447574615,0.00012207403779029846,-0.000030517578125,-0.000457763671875,-0.00054931640625,-0.00018310546875,0.0003662221133708954,0.0010681478306651115,0.00198370311409235,0.002288888208568096,0.0018005920574069023,0.00158696249127388,0.00158696249127388,0.0010071108117699623,0.00033570360392332077,0.0002136295661330223,0.00006103701889514923,-0.000579833984375,-0.001373291015625,-0.002105712890625,-0.00274658203125,-0.0028076171875,-0.002593994140625,-0.002685546875,-0.002777099609375,-0.002471923828125,-0.0023193359375,-0.002349853515625,-0.002105712890625,-0.001617431640625,-0.00115966796875,-0.00103759765625,-0.00103759765625,-0.0009765625,-0.0009765625,-0.000732421875,-0.000213623046875,0.00015259254723787308,0.0005493331700563431,0.0012207403779029846,0.0014648884534835815,0.0012512588873505592,0.0013733329251408577,0.0015564439818263054,0.0012512588873505592,0.0008239997550845146,0.0006714072078466415,0.0006103701889514923,0.00039674062281847,0.00015259254723787308,-0.000396728515625,-0.00128173828125,-0.001678466796875,-0.001434326171875,-0.0013427734375,-0.001251220703125,-0.00079345703125,-0.000762939453125,-0.001007080078125,-0.000885009765625,-0.0009765625,-0.00128173828125,-0.001068115234375,-0.00067138671875,-0.000823974609375,-0.001068115234375,-0.00103759765625,-0.00103759765625,-0.001129150390625,-0.001007080078125,-0.001129150390625,-0.001434326171875,-0.001190185546875,-0.00091552734375,-0.001251220703125,-0.001434326171875,-0.001007080078125,-0.0006103515625,-0.000396728515625,-0.000091552734375,0.00030518509447574615,0.0005188146606087685,0.0005493331700563431,0.0007629627361893654,0.0009460737928748131,0.0010986663401126862,0.0015259254723787308,0.0016479995101690292,0.0013733329251408577,0.00119022186845541,0.0012207403779029846,0.001434369944036007,0.0013733329251408577,0.0010681478306651115,0.0009155552834272385,0.0006408886983990669,0.00009155552834272385,-0.000518798828125,-0.0009765625,-0.001251220703125,-0.001434326171875,-0.00128173828125,-0.001129150390625,-0.001251220703125,-0.001068115234375,-0.00079345703125,-0.001068115234375,-0.00128173828125,-0.0009765625,-0.00042724609375,-0.000091552734375,0.00006103701889514923,0.00012207403779029846,0.00006103701889514923,0.0002136295661330223,0.0005188146606087685,0.0009155552834272385,0.0015259254723787308,0.002075258642435074,0.0028382213786244392,0.0032044434919953346,0.0030518509447574615,0.0030518509447574615,0.0029908139258623123,0.0029602954164147377,0.003082369454205036,0.0029602954164147377,0.003082369454205036,0.0032349620014429092,0.00317392498254776,0.00277718435972929,0.002227851189672947,0.002136295661330223,0.0021973326802253723,0.0020447401329874992,0.00158696249127388,0.0008239997550845146,0.00009155552834272385,-0.000457763671875,-0.0009765625,-0.001312255859375,-0.0015869140625,-0.001800537109375,-0.001953125,-0.00225830078125,-0.002593994140625,-0.00262451171875,-0.002655029296875,-0.00262451171875,-0.002105712890625,-0.001556396484375,-0.001434326171875,-0.00115966796875,-0.000640869140625,-0.000579833984375,-0.000396728515625,0.00045777764171361923,0.0012817773967981339,0.00158696249127388,0.0018616290763020515,0.0019531846046447754,0.0016479995101690292,0.001342814415693283,0.001342814415693283,0.0015564439818263054,0.0019226660951972008,0.0021057771518826485,0.0019226660951972008,0.001831110566854477,0.0017700735479593277,0.0016785180196166039,0.0016479995101690292,0.00158696249127388,0.0015564439818263054,0.001434369944036007,0.0011291848495602608,0.0007019257172942162,0.000030518509447574615,-0.000213623046875,-0.00018310546875,-0.00042724609375,-0.001068115234375,-0.00189208984375,-0.0025634765625,-0.0032958984375,-0.0040283203125,-0.004302978515625,-0.004302978515625,-0.00390625,-0.003662109375,-0.003997802734375,-0.004058837890625,-0.003753662109375,-0.003448486328125,-0.002655029296875,-0.001617431640625,-0.001068115234375,-0.000823974609375,-0.000335693359375,-0.000152587890625,-0.000457763671875,-0.000274658203125,0.00015259254723787308,0.0002136295661330223,0.0002136295661330223,0.00030518509447574615,0.00015259254723787308,0,0,0.00009155552834272385,0,-0.000091552734375,-0.000030517578125,-0.000030517578125,-0.00042724609375,-0.000732421875,-0.000762939453125,-0.000732421875,-0.000579833984375,-0.00048828125,-0.000732421875,-0.00115966796875,-0.001556396484375,-0.001800537109375,-0.001739501953125,-0.00140380859375,-0.00103759765625,-0.000640869140625,-0.0001220703125,0,-0.00054931640625,-0.000701904296875,-0.000274658203125,0,0,0.000030518509447574615,0.00015259254723787308,0.00006103701889514923,-0.00018310546875,-0.000213623046875,-0.0003662109375,-0.0003662109375,0.0002441480755805969,0.001037629321217537,0.0013733329251408577,0.0014648884534835815,0.0018616290763020515,0.0022583696991205215,0.002075258642435074,0.0018005920574069023,0.00198370311409235,0.002288888208568096,0.0024414807558059692,0.002533036284148693,0.002685628831386566,0.0028382213786244392,0.0027466658502817154,0.002471999265253544,0.002288888208568096,0.0021057771518826485,0.0018921475857496262,0.0018005920574069023,0.0016174810007214546,0.001342814415693283,0.0011291848495602608,0.0008545182645320892,0.0008850367739796638,0.0010071108117699623,0.0010681478306651115,0.001434369944036007,0.0013733329251408577,0.0008850367739796638,0.0012512588873505592,0.001831110566854477,0.002136295661330223,0.0026551103219389915,0.0028992583975195885,0.0024414807558059692,0.0017090365290641785,0.0010681478306651115,0.00045777764171361923,0.00009155552834272385,0.00027466658502817154,0.0005798516795039177,0.0002136295661330223,-0.00018310546875,-0.00030517578125,-0.0006103515625,-0.000732421875,-0.000274658203125,0.00006103701889514923,0.0002441480755805969,0.0006103701889514923,0.0006103701889514923,-0.000030517578125,-0.000396728515625,-0.000030517578125,0.0001831110566854477,0.000030518509447574615,0.00015259254723787308,0,-0.00067138671875,-0.0008544921875,-0.000823974609375,-0.001251220703125,-0.0010986328125,-0.00048828125,-0.000640869140625,-0.001190185546875,-0.001495361328125,-0.001678466796875,-0.00177001953125,-0.001312255859375,-0.0006103515625,-0.0003662109375,-0.0003662109375,-0.000457763671875,-0.00079345703125,-0.00103759765625,-0.00067138671875,-0.00030517578125,-0.000396728515625,-0.000457763671875,-0.000823974609375,-0.001556396484375,-0.001953125,-0.001983642578125,-0.001953125,-0.001800537109375,-0.001220703125,-0.001068115234375,-0.00189208984375,-0.00238037109375,-0.00225830078125,-0.002227783203125,-0.0018310546875,-0.001068115234375,-0.00079345703125,-0.000732421875,-0.000518798828125,-0.00042724609375,-0.000579833984375,-0.000457763671875,-0.00018310546875,-0.000518798828125,-0.000823974609375,-0.000732421875,-0.000823974609375,-0.000885009765625,-0.000579833984375,0,0.00045777764171361923,0.0008545182645320892,0.00119022186845541,0.0010681478306651115,0.0009155552834272385,0.0011291848495602608,0.0012207403779029846,0.0013733329251408577,0.001739555038511753,0.0016479995101690292,0.0010681478306651115,0.00045777764171361923,0,-0.00030517578125,-0.000335693359375,-0.000213623046875,-0.00006103515625,0.00015259254723787308,0,-0.000457763671875,-0.000640869140625,-0.00042724609375,-0.000091552734375,0.00015259254723787308,0.0003662221133708954,0.00039674062281847,0.00033570360392332077,0.0004272591322660446,0.0004272591322660446,0.00015259254723787308,0,0.00012207403779029846,0.0002441480755805969,0,-0.000213623046875,0.00015259254723787308,0.0005798516795039177,0.0008239997550845146,0.0013733329251408577,0.0019226660951972008,0.0020142216235399246,0.0018616290763020515,0.0014954069629311562,0.0009765923023223877,0.0008545182645320892,0.0012817773967981339,0.0016479995101690292,0.0017090365290641785,0.0017090365290641785,0.001342814415693283,0.0006103701889514923,-0.000244140625,-0.00079345703125,-0.000885009765625,-0.000732421875,-0.000244140625,0.0002441480755805969,0.00039674062281847,0.00027466658502817154,0,-0.000274658203125,-0.00042724609375,-0.000244140625,0.00006103701889514923,-0.000152587890625,-0.0006103515625,-0.001129150390625,-0.001922607421875,-0.002349853515625,-0.002532958984375,-0.002716064453125,-0.0023193359375,-0.002044677734375,-0.00244140625,-0.002532958984375,-0.002410888671875,-0.002044677734375,-0.0013427734375,-0.00079345703125,-0.00030517578125,0,-0.00006103515625,0,-0.000030517578125,0.00009155552834272385,0.0009460737928748131,0.001831110566854477,0.0021057771518826485,0.0021057771518826485,0.0019226660951972008,0.0012817773967981339,0.00033570360392332077,0.00006103701889514923,0.0003662221133708954,0.00039674062281847,0.0003662221133708954,0.0002136295661330223,-0.000640869140625,-0.00152587890625,-0.001678466796875,-0.00140380859375,-0.000885009765625,-0.0003662109375,-0.00018310546875,-0.000091552734375,-0.000091552734375,-0.000152587890625,-0.000152587890625,0.00009155552834272385,0.0005188146606087685,0.0007019257172942162,0.0006103701889514923,0.00012207403779029846,-0.00042724609375,-0.000701904296875,-0.000823974609375,-0.00091552734375,-0.000823974609375,-0.00048828125,-0.00042724609375,-0.000762939453125,-0.0010986328125,-0.00140380859375,-0.0015869140625,-0.001373291015625,-0.00091552734375,-0.0003662109375,-0.0001220703125,-0.0001220703125,0.00006103701889514923,0.0002136295661330223,0.0002136295661330223,0.0005798516795039177,0.0012207403779029846,0.0016174810007214546,0.0016479995101690292,0.0013733329251408577,0.0007629627361893654,0,-0.000457763671875,-0.00054931640625,-0.00067138671875,-0.000762939453125,-0.00091552734375,-0.000946044921875,-0.00103759765625,-0.0010986328125,-0.0009765625,-0.0009765625,-0.000732421875,-0.00030517578125,-0.00030517578125,0,0.0005798516795039177,0.0007629627361893654,0.0009155552834272385,0.00119022186845541,0.0010986663401126862,0.0008850367739796638,0.001037629321217537,0.0010681478306651115,0.0006103701889514923,0.00033570360392332077,0.0005493331700563431,0.0006408886983990669,0.0005798516795039177,0.0008850367739796638,0.0012512588873505592,0.0012512588873505592,0.00119022186845541,0.001434369944036007,0.0015259254723787308,0.0013122959062457085,0.0012207403779029846,0.001037629321217537,0.0008545182645320892,0.0012207403779029846,0.0017700735479593277,0.0021057771518826485,0.0025940733030438423,0.0031434064731001854,0.003418073058128357,0.0033875545486807823,0.0035096285864710808,0.003662221133708954,0.0032349620014429092,0.0027466658502817154,0.0028077028691768646,0.0027466658502817154,0.0023499252274632454,0.002136295661330223,0.0018005920574069023,0.001037629321217537,0.0005798516795039177,0.0005188146606087685,-0.000152587890625,-0.001068115234375,-0.0015869140625,-0.002197265625,-0.00262451171875,-0.00244140625,-0.0018310546875,-0.0013427734375,-0.001190185546875,-0.00115966796875,-0.001373291015625,-0.00152587890625,-0.0009765625,-0.00018310546875,-0.000030517578125,-0.000213623046875,-0.00048828125,-0.0009765625,-0.0010986328125,-0.00091552734375,-0.0010986328125,-0.0010986328125,-0.0006103515625,-0.000579833984375,-0.00115966796875,-0.0015869140625,-0.00189208984375,-0.002349853515625,-0.0025634765625,-0.002197265625,-0.00189208984375,-0.00146484375,-0.000762939453125,-0.000823974609375,-0.00146484375,-0.00152587890625,-0.0013427734375,-0.000946044921875,-0.000335693359375,-0.0001220703125,-0.0001220703125,-0.000152587890625,-0.000274658203125,-0.00018310546875,-0.000274658203125,-0.00030517578125,-0.000091552734375,-0.000274658203125,-0.0006103515625,-0.00115966796875,-0.00201416015625,-0.0025634765625,-0.0025634765625,-0.0020751953125,-0.00146484375,-0.00103759765625,-0.00115966796875,-0.001617431640625,-0.001678466796875,-0.00152587890625,-0.0009765625,0.00033570360392332077,0.0012207403779029846,0.0012207403779029846,0.0010681478306651115,0.0007629627361893654,0.0004882961511611938,0.0005798516795039177,0.0010681478306651115,0.0014038514345884323,0.0011291848495602608,0.0007324442267417908,0.00039674062281847,0.00015259254723787308,0.00015259254723787308,0.0001831110566854477,0.0004882961511611938,0.0009155552834272385,0.0010986663401126862,0.001037629321217537,0.0007324442267417908,0.0005188146606087685,0.00045777764171361923,0.0004882961511611938,0.001037629321217537,0.0014038514345884323,0.0013122959062457085,0.0010071108117699623,0.00039674062281847,-0.000244140625,-0.00048828125,-0.000152587890625,0.0002441480755805969,0.0001831110566854477,-0.00018310546875,-0.000823974609375,-0.001251220703125,-0.001129150390625,-0.000579833984375,0.00012207403779029846,0.0007324442267417908,0.001037629321217537,0.0012207403779029846,0.0014648884534835815,0.001739555038511753,0.0020447401329874992,0.0024414807558059692,0.002685628831386566,0.0029602954164147377,0.0032959990203380585,0.003021332435309887,0.0021668141707777977,0.001739555038511753,0.0016479995101690292,0.0015259254723787308,0.0015564439818263054,0.0014648884534835815,0.0009765923023223877,0.00027466658502817154,-0.000244140625,-0.000396728515625,-0.000030517578125,0.0007629627361893654,0.0013122959062457085,0.0008545182645320892,0.0001831110566854477,-0.00030517578125,-0.000701904296875,-0.00054931640625,-0.000091552734375,0.00030518509447574615,0.0005798516795039177,0.0004272591322660446,0.000030518509447574615,-0.00030517578125,-0.000335693359375,-0.00030517578125,-0.000518798828125,-0.00054931640625,-0.00030517578125,-0.000396728515625,-0.00128173828125,-0.002349853515625,-0.00250244140625,-0.002197265625,-0.001922607421875,-0.001495361328125,-0.001251220703125,-0.00128173828125,-0.0013427734375,-0.001190185546875,-0.0008544921875,-0.00048828125,0,0.0006714072078466415,0.00079348124563694,0.00033570360392332077,0.00039674062281847,0.0007019257172942162,0.0005188146606087685,0.00030518509447574615,0.00027466658502817154,0,-0.0008544921875,-0.00177001953125,-0.002288818359375,-0.00225830078125,-0.001739501953125,-0.0009765625,-0.000579833984375,-0.000732421875,-0.001220703125,-0.001739501953125,-0.00238037109375,-0.002655029296875,-0.002105712890625,-0.0013427734375,-0.000885009765625,-0.00067138671875,-0.000762939453125,-0.000762939453125,-0.000518798828125,-0.00048828125,-0.000579833984375,-0.00030517578125,-0.0001220703125,-0.000457763671875,-0.000732421875,-0.000732421875,-0.00079345703125,-0.00079345703125,-0.00018310546875,0.0003662221133708954,0.00030518509447574615,0.0002136295661330223,0,-0.00054931640625,-0.00079345703125,-0.0006103515625,-0.000152587890625,0.0002441480755805969,0.0001831110566854477,-0.00006103515625,-0.000030517578125,0,0.0005188146606087685,0.0014954069629311562,0.001739555038511753,0.001434369944036007,0.00119022186845541,0.0010986663401126862,0.0008850367739796638,0.0004882961511611938,0.0001831110566854477,0.00009155552834272385,0.00039674062281847,0.0008239997550845146,0.0009460737928748131,0.00079348124563694,0.00030518509447574615,-0.0001220703125,-0.000244140625,-0.000518798828125,-0.000823974609375,-0.001007080078125,-0.0010986328125,-0.001129150390625,-0.0009765625,-0.00018310546875,0.00033570360392332077,0.00045777764171361923,0.0007324442267417908,0.00045777764171361923,-0.000152587890625,-0.00048828125,-0.000732421875,-0.0009765625,-0.001068115234375,-0.00067138671875,-0.00042724609375,-0.000579833984375,-0.000213623046875,0.00012207403779029846,0.00015259254723787308,0.0003662221133708954,0.0007629627361893654,0.0013122959062457085,0.0016479995101690292,0.0014954069629311562,0.0010071108117699623,0.0005493331700563431,0.0007629627361893654,0.0014648884534835815,0.0016479995101690292,0.0014648884534835815,0.0014648884534835815,0.00119022186845541,0.0005798516795039177,0.00039674062281847,0.0006103701889514923,0.0009155552834272385,0.0013733329251408577,0.00158696249127388,0.001342814415693283,0.0013122959062457085,0.001831110566854477,0.0018921475857496262,0.0013122959062457085,0.0010986663401126862,0.0010071108117699623,0.0005493331700563431,0.00027466658502817154,0.00033570360392332077,0.00012207403779029846,-0.000274658203125,-0.000091552734375,0.0003662221133708954,0.0004882961511611938,0.0003662221133708954,0,-0.000762939453125,-0.001220703125,-0.000885009765625,-0.0003662109375,-0.00006103515625,0.00033570360392332077,0.0004882961511611938,-0.0001220703125,-0.000823974609375,-0.000885009765625,-0.000762939453125,-0.000823974609375,-0.000640869140625,-0.000762939453125,-0.001068115234375,-0.000762939453125,-0.000640869140625,-0.000762939453125,-0.0003662109375,-0.000091552734375,0,0.0001831110566854477,0.00009155552834272385,-0.000213623046875,-0.000579833984375,-0.000701904296875,-0.000701904296875,-0.0006103515625,-0.000518798828125,-0.00067138671875,-0.00079345703125,-0.000762939453125,-0.000732421875,-0.000518798828125,0.000030518509447574615,0.0006103701889514923,0.00045777764171361923,0.000030518509447574615,-0.0001220703125,-0.000213623046875,0.000030518509447574615,0.0003662221133708954,0.0004882961511611938,0.0006103701889514923,0.0005798516795039177,0.0004272591322660446,0.00027466658502817154,0.0001831110566854477,0.00027466658502817154,0.00033570360392332077,0.0003662221133708954,0.0006408886983990669,0.0007019257172942162,0.0001831110566854477,-0.0003662109375,-0.0003662109375,-0.00018310546875,0.00030518509447574615,0.00119022186845541,0.001434369944036007,0.0007019257172942162,-0.00006103515625,-0.000335693359375,-0.000457763671875,-0.000335693359375,0.00012207403779029846,0.00039674062281847,0.0002136295661330223,-0.000030517578125,-0.00006103515625,0.00012207403779029846,0.0005798516795039177,0.001342814415693283,0.0016785180196166039,0.001342814415693283,0.0010681478306651115,0.0008850367739796638,0.00039674062281847,0,-0.00018310546875,-0.000274658203125,-0.000274658203125,-0.000091552734375,0.000030518509447574615,-0.0006103515625,-0.001495361328125,-0.001312255859375,-0.000701904296875,-0.000152587890625,0.00033570360392332077,0.0005798516795039177,0.0003662221133708954,0,-0.00030517578125,-0.00067138671875,-0.0008544921875,-0.000518798828125,-0.000244140625,-0.000457763671875,-0.000640869140625,-0.00079345703125,-0.00079345703125,-0.000762939453125,-0.00091552734375,-0.000579833984375,0.000030518509447574615,0.00033570360392332077,0.0004882961511611938,0.00039674062281847,0.0001831110566854477,0.0002441480755805969,0.0003662221133708954,0.0003662221133708954,0.0002441480755805969,0,-0.000457763671875,-0.0009765625,-0.001220703125,-0.00115966796875,-0.00067138671875,-0.000152587890625,-0.000091552734375,0.000030518509447574615,0,-0.00054931640625,-0.000946044921875,-0.000885009765625,-0.00048828125,0.000030518509447574615,0.00079348124563694,0.0010986663401126862,0.0006103701889514923,0,-0.000579833984375,-0.00067138671875,-0.000244140625,-0.000244140625,-0.00018310546875,0.0001831110566854477,0,-0.00018310546875,0.00015259254723787308,0.0007019257172942162,0.0010681478306651115,0.0010071108117699623,0.0005493331700563431,0.0002441480755805969,0.00027466658502817154,0.00039674062281847,0.0005188146606087685,0.0005493331700563431,0.00039674062281847,0.0002136295661330223,0.0002441480755805969,0.00027466658502817154,0.00006103701889514923,0,-0.000030517578125,-0.000213623046875,-0.000091552734375,0.00045777764171361923,0.0007019257172942162,0.00027466658502817154,0,0.00012207403779029846,0.0001831110566854477,0.00039674062281847,0.001037629321217537,0.0016785180196166039,0.001739555038511753,0.0013733329251408577,0.0009765923023223877,0.0007019257172942162,0.0006103701889514923,0.00045777764171361923,0.00015259254723787308,0,0.00006103701889514923,-0.00006103515625,-0.00030517578125,-0.000244140625,-0.000091552734375,-0.00006103515625,-0.00006103515625,-0.000396728515625,-0.000762939453125,-0.00067138671875,-0.00054931640625,-0.00067138671875,-0.000335693359375,0.0004882961511611938,0.0006714072078466415,0.0002441480755805969,0.00027466658502817154,0.00033570360392332077,0.00006103701889514923,0.000030518509447574615,-0.000091552734375,-0.000640869140625,-0.001312255859375,-0.0015869140625,-0.00146484375,-0.00164794921875,-0.002105712890625,-0.002288818359375,-0.00262451171875,-0.0030517578125,-0.00311279296875,-0.00323486328125,-0.003570556640625,-0.0035400390625,-0.0032958984375,-0.003082275390625,-0.002532958984375,-0.001190185546875,-0.00006103515625,0.00015259254723787308,0.00027466658502817154,0.0004882961511611938,0.0008850367739796638,0.0016785180196166039,0.002533036284148693,0.002868739888072014,0.0027466658502817154,0.002533036284148693,0.002075258642435074,0.0015259254723787308,0.0013733329251408577,0.0014038514345884323,0.0012512588873505592,0.0010986663401126862,0.00119022186845541,0.0011291848495602608,0.0007019257172942162,0.0004272591322660446,0.00015259254723787308,-0.000274658203125,-0.00048828125,-0.000244140625,0.00012207403779029846,0.0004272591322660446,0.0006714072078466415,0.0005493331700563431,0.0001831110566854477,0.0004272591322660446,0.0007629627361893654,0.0006103701889514923,0.0005798516795039177,0.0006714072078466415,0.00039674062281847,-0.00006103515625,-0.0001220703125,0.0002136295661330223,0.0006714072078466415,0.00119022186845541,0.0012817773967981339,0.0005493331700563431,-0.000091552734375,-0.00030517578125,-0.000762939453125,-0.000946044921875,-0.00030517578125,0.00030518509447574615,0.00033570360392332077,-0.000213623046875,-0.000762939453125,-0.0006103515625,-0.00006103515625,0.00033570360392332077,0.0004272591322660446,0.00009155552834272385,-0.000152587890625,-0.00030517578125,-0.00048828125,-0.000732421875,-0.000823974609375,-0.00048828125,-0.000274658203125,-0.000579833984375,-0.0009765625,-0.001373291015625,-0.001739501953125,-0.002197265625,-0.00238037109375,-0.00238037109375,-0.0025634765625,-0.0023193359375,-0.001617431640625,-0.001373291015625,-0.001312255859375,-0.000823974609375,-0.000274658203125,-0.000213623046875,-0.0006103515625,-0.001190185546875,-0.00177001953125,-0.00201416015625,-0.001739501953125,-0.0015869140625,-0.001190185546875,-0.0003662109375,0.00015259254723787308,0.00030518509447574615,0.00015259254723787308,0.0002441480755805969,0.0006103701889514923,0.0008850367739796638,0.0011291848495602608,0.0013122959062457085,0.0016174810007214546,0.002075258642435074,0.0024414807558059692,0.0028382213786244392,0.00317392498254776,0.0036011841148138046,0.003936887718737125,0.0036927396431565285,0.003082369454205036,0.0020447401329874992,0.0010681478306651115,0.0007324442267417908,0.0008239997550845146,0.0012817773967981339,0.0017090365290641785,0.001739555038511753,0.001434369944036007,0.0007629627361893654,0.0002441480755805969,0.00027466658502817154,0.00027466658502817154,-0.000030517578125,-0.00030517578125,-0.00042724609375,-0.000579833984375,-0.000396728515625,0,0.0001831110566854477,0.0005493331700563431,0.0013122959062457085,0.0016479995101690292,0.0012817773967981339,0.0008239997550845146,0.0006408886983990669,0.0005493331700563431,0.0003662221133708954,0.0002441480755805969,0.0002441480755805969,0.0001831110566854477,0.0002136295661330223,0.00033570360392332077,0.00033570360392332077,0.0002136295661330223,0.00006103701889514923,-0.000213623046875,-0.000701904296875,-0.0013427734375,-0.001739501953125,-0.00164794921875,-0.001434326171875,-0.001434326171875,-0.001312255859375,-0.000885009765625,-0.00079345703125,-0.000946044921875,-0.001068115234375,-0.0013427734375,-0.001617431640625,-0.001678466796875,-0.001434326171875,-0.001190185546875,-0.00115966796875,-0.0010986328125,-0.0009765625,-0.000885009765625,-0.00091552734375,-0.00103759765625,-0.00091552734375,-0.0009765625,-0.001251220703125,-0.001220703125,-0.000701904296875,0.00006103701889514923,0.0007324442267417908,0.001342814415693283,0.0014038514345884323,0.00079348124563694,0.00045777764171361923,0.0005798516795039177,0.0006714072078466415,0.0006103701889514923,0.0006408886983990669,0.0007019257172942162,0.0006103701889514923,0.0006408886983990669,0.0009765923023223877,0.0013733329251408577,0.001739555038511753,0.0018005920574069023,0.0014038514345884323,0.0007629627361893654,0.00009155552834272385,-0.000335693359375,-0.0006103515625,-0.0006103515625,-0.000640869140625,-0.000762939453125,-0.000762939453125,-0.001068115234375,-0.00164794921875,-0.001983642578125,-0.00213623046875,-0.0023193359375,-0.00250244140625,-0.002288818359375,-0.001922607421875,-0.001800537109375,-0.00115966796875,-0.00006103515625,0.0006103701889514923,0.0010986663401126862,0.0013122959062457085,0.0010681478306651115,0.0005188146606087685,0.000030518509447574615,-0.00018310546875,-0.00054931640625,-0.000762939453125,-0.000274658203125,0.0007629627361893654,0.0016174810007214546,0.001831110566854477,0.0020142216235399246,0.0020447401329874992,0.0015564439818263054,0.0010071108117699623,0.0007324442267417908,0.0005493331700563431,0.0004272591322660446,0.00027466658502817154,0.0002136295661330223,0.00045777764171361923,0.0010986663401126862,0.00198370311409235,0.002685628831386566,0.00277718435972929,0.0024414807558059692,0.001831110566854477,0.0010071108117699623,0.0003662221133708954,0.00033570360392332077,0.00033570360392332077,0.0001831110566854477,0.00030518509447574615,0.0006714072078466415,0.0010986663401126862,0.0012207403779029846,0.001037629321217537,0.001037629321217537,0.0009765923023223877,0.0005188146606087685,0,-0.00048828125,-0.0010986328125,-0.00146484375,-0.001312255859375,-0.001251220703125,-0.001129150390625,-0.000457763671875,0.00012207403779029846,0.00015259254723787308,-0.000030517578125,-0.000152587890625,-0.00030517578125,-0.00042724609375,-0.000274658203125,-0.0003662109375,-0.000885009765625,-0.001068115234375,-0.000946044921875,-0.001007080078125,-0.000946044921875,-0.00067138671875,-0.000701904296875,-0.00091552734375,-0.000946044921875,-0.001129150390625,-0.001739501953125,-0.00189208984375,-0.00140380859375,-0.001373291015625,-0.001434326171875,-0.001007080078125,-0.000762939453125,-0.000732421875,-0.0003662109375,0,0.00015259254723787308,0.00039674062281847,0.0006408886983990669,0.0004272591322660446,0.00015259254723787308,0.0001831110566854477,0.00012207403779029846,-0.00006103515625,0.00012207403779029846,0.0006408886983990669,0.0012207403779029846,0.0019531846046447754,0.0025635547935962677,0.0025635547935962677,0.002471999265253544,0.0027466658502817154,0.002624591812491417,0.0021973326802253723,0.0018921475857496262,0.0016174810007214546,0.001037629321217537,0.0008850367739796638,0.0015564439818263054,0.0020142216235399246,0.0021668141707777977,0.0023194067180156708,0.0021668141707777977,0.0019226660951972008,0.0019226660951972008,0.001831110566854477,0.0014038514345884323,0.0008239997550845146,0.00039674062281847,-0.00018310546875,-0.00091552734375,-0.001190185546875,-0.0010986328125,-0.000823974609375,-0.000518798828125,-0.0006103515625,-0.00115966796875,-0.0018310546875,-0.002349853515625,-0.002899169921875,-0.003448486328125,-0.00390625,-0.004364013671875,-0.00439453125,-0.004241943359375,-0.004119873046875,-0.00360107421875,-0.002899169921875,-0.00274658203125,-0.002960205078125,-0.00299072265625,-0.00286865234375,-0.002838134765625,-0.00262451171875,-0.002288818359375,-0.002044677734375,-0.001434326171875,-0.00042724609375,0.00012207403779029846,0.00012207403779029846,0.00045777764171361923,0.0010071108117699623,0.0010986663401126862,0.0010681478306651115,0.0011291848495602608,0.0009460737928748131,0.0005188146606087685,0.0001831110566854477,-0.000030517578125,-0.00042724609375,-0.000518798828125,-0.000213623046875,0,-0.000030517578125,0.00015259254723787308,0.0006103701889514923,0.0008545182645320892,0.0012817773967981339,0.001739555038511753,0.0014038514345884323,0.0009155552834272385,0.0006408886983990669,0.0004272591322660446,0.0008239997550845146,0.0016479995101690292,0.0023194067180156708,0.002533036284148693,0.0021668141707777977,0.001831110566854477,0.0016174810007214546,0.0011291848495602608,0.0008545182645320892,0.0006714072078466415,0.0004272591322660446,0.00039674062281847,0.00039674062281847,0.0004882961511611938,0.00030518509447574615,-0.0001220703125,-0.000396728515625,-0.000396728515625,-0.000274658203125,-0.0001220703125,-0.000030517578125,0,0,-0.000152587890625,-0.00048828125,-0.000732421875,-0.0006103515625,-0.00030517578125,-0.0001220703125,-0.000030517578125,0.00012207403779029846,0.00039674062281847,0.0005798516795039177,0.0003662221133708954,0.00009155552834272385,-0.000335693359375,-0.001129150390625,-0.0015869140625,-0.00146484375,-0.00091552734375,-0.000152587890625,0.0001831110566854477,0.00027466658502817154,0.00012207403779029846,-0.00030517578125,-0.000518798828125,-0.0003662109375,-0.000152587890625,0,0.000030518509447574615,-0.00030517578125,-0.00079345703125,-0.00079345703125,-0.000335693359375,0.000030518509447574615,0.00015259254723787308,0.00027466658502817154,0.0007019257172942162,0.001037629321217537,0.001037629321217537,0.001037629321217537,0.0012817773967981339,0.0012207403779029846,0.0008545182645320892,0.0005798516795039177,0.00027466658502817154,0.0002136295661330223,0.0005798516795039177,0.00079348124563694,0.0005798516795039177,0.0003662221133708954,0.0005188146606087685,0.0006714072078466415,0.0002136295661330223,-0.000396728515625,-0.00067138671875,-0.00079345703125,-0.00091552734375,-0.00091552734375,-0.0006103515625,-0.000244140625,-0.000244140625,-0.000396728515625,-0.0008544921875,-0.00140380859375,-0.001129150390625,-0.000274658203125,0.00030518509447574615,0.0004882961511611938,0.0002441480755805969,0,-0.000274658203125,-0.000457763671875,-0.000152587890625,0.00033570360392332077,0.0007324442267417908,0.0008545182645320892,0.0005493331700563431,0.00006103701889514923,-0.0001220703125,0.000030518509447574615,0.0002441480755805969,0.0004882961511611938,0.0005798516795039177,0.00039674062281847,0.0005188146606087685,0.0008850367739796638,0.0010681478306651115,0.0013733329251408577,0.00198370311409235,0.0024109622463583946,0.0024109622463583946,0.0023499252274632454,0.002227851189672947,0.0017090365290641785,0.0014038514345884323,0.001739555038511753,0.001831110566854477,0.0014954069629311562,0.00119022186845541,0.0006103701889514923,-0.000030517578125,-0.0001220703125,0.00033570360392332077,0.0007324442267417908,0.00079348124563694,0.0006103701889514923,-0.0001220703125,-0.001495361328125,-0.00244140625,-0.002593994140625,-0.002532958984375,-0.002227783203125,-0.001800537109375,-0.001708984375,-0.001922607421875,-0.00201416015625,-0.001983642578125,-0.00213623046875,-0.002105712890625,-0.001617431640625,-0.0015869140625,-0.001953125,-0.002044677734375,-0.00213623046875,-0.002349853515625,-0.00189208984375,-0.00079345703125,0.00006103701889514923,0.00027466658502817154,0.00012207403779029846,-0.000335693359375,-0.000946044921875,-0.000885009765625,-0.000244140625,0,0.00009155552834272385,0.0005493331700563431,0.0008850367739796638,0.0007324442267417908,0.0006408886983990669,0.0012512588873505592,0.0021973326802253723,0.0030518509447574615,0.00357066560536623,0.0031434064731001854,0.0023499252274632454,0.00198370311409235,0.0016479995101690292,0.0015564439818263054,0.001831110566854477,0.0020142216235399246,0.002075258642435074,0.0018921475857496262,0.0016174810007214546,0.001434369944036007,0.0009765923023223877,0.0004272591322660446,-0.000030517578125,-0.00067138671875,-0.00091552734375,-0.00115966796875,-0.001708984375,-0.0018310546875,-0.00152587890625,-0.001220703125,-0.00067138671875,-0.0003662109375,-0.000457763671875,-0.0006103515625,-0.000732421875,-0.00079345703125,-0.001068115234375,-0.001556396484375,-0.001953125,-0.002166748046875,-0.002044677734375,-0.001983642578125,-0.001861572265625,-0.0013427734375,-0.00079345703125,-0.000152587890625,0.00045777764171361923,0.0006714072078466415,0.0005188146606087685,0.0002136295661330223,0,-0.00048828125,-0.000762939453125,0,0.00079348124563694,0.00119022186845541,0.001831110566854477,0.0023194067180156708,0.00238044373691082,0.0022583696991205215,0.0021973326802253723,0.0020142216235399246,0.001342814415693283,0.0008545182645320892,0.0008545182645320892,0.0006408886983990669,0.00030518509447574615,0.00012207403779029846,0.00006103701889514923,0.000030518509447574615,0.0001831110566854477,0.0004882961511611938,0.00027466658502817154,-0.00006103515625,-0.00030517578125,-0.0008544921875,-0.001312255859375,-0.001373291015625,-0.001007080078125,-0.0003662109375,0.00012207403779029846,0.0005188146606087685,0.0006714072078466415,0.0006103701889514923,0.00045777764171361923,-0.000030517578125,-0.00067138671875,-0.001220703125,-0.001556396484375,-0.0015869140625,-0.00177001953125,-0.00177001953125,-0.001068115234375,0,0.0011291848495602608,0.001831110566854477,0.0018616290763020515,0.0012207403779029846,0,-0.001617431640625,-0.00299072265625,-0.00323486328125,-0.002655029296875,-0.001861572265625,-0.000946044921875,-0.000518798828125,-0.0009765625,-0.001312255859375,-0.001312255859375,-0.001312255859375,-0.001251220703125,-0.001251220703125,-0.00152587890625,-0.00213623046875,-0.00244140625,-0.00177001953125,-0.00030517578125,0.0014648884534835815,0.0028382213786244392,0.0036011841148138046,0.003997924737632275,0.0037537766620516777,0.0027466658502817154,0.0014954069629311562,0.0007324442267417908,0.0005798516795039177,0.0005798516795039177,0.0004882961511611938,0.0002441480755805969,0.0002136295661330223,0.0008850367739796638,0.0018616290763020515,0.002471999265253544,0.0028077028691768646,0.002929776906967163,0.0028382213786244392,0.002471999265253544,0.001739555038511753,0.0011291848495602608,0.00119022186845541,0.0016785180196166039,0.0021973326802253723,0.002685628831386566,0.0028382213786244392,0.002471999265253544,0.0016785180196166039,0.0006714072078466415,-0.0001220703125,-0.00079345703125,-0.00115966796875,-0.001220703125,-0.00177001953125,-0.002899169921875,-0.003692626953125,-0.00384521484375,-0.003631591796875,-0.003265380859375,-0.002777099609375,-0.00262451171875,-0.0029296875,-0.00347900390625,-0.004150390625,-0.004730224609375,-0.004547119140625,-0.00347900390625,-0.00250244140625,-0.002288818359375,-0.002716064453125,-0.003173828125,-0.003021240234375,-0.002685546875,-0.00238037109375,-0.001617431640625,-0.0008544921875,-0.0008544921875,-0.001434326171875,-0.00201416015625,-0.002288818359375,-0.00225830078125,-0.00177001953125,-0.001007080078125,-0.0006103515625,-0.000152587890625,0.0007629627361893654,0.0014038514345884323,0.001739555038511753,0.002227851189672947,0.0027466658502817154,0.0031128879636526108,0.0029908139258623123,0.0027161473408341408,0.00238044373691082,0.0014648884534835815,0.0007629627361893654,0.0014038514345884323,0.002685628831386566,0.0035401470959186554,0.003997924737632275,0.0040894802659749985,0.00357066560536623,0.0028077028691768646,0.0021668141707777977,0.0018921475857496262,0.002075258642435074,0.0022583696991205215,0.0020142216235399246,0.0013733329251408577,0.00039674062281847,-0.0001220703125,0,0.00012207403779029846,0,-0.000091552734375,-0.0006103515625,-0.00177001953125,-0.00286865234375,-0.00311279296875,-0.002410888671875,-0.001556396484375,-0.00103759765625,-0.000396728515625,0.0001831110566854477,0.00039674062281847,0.0007324442267417908,0.001434369944036007,0.0019226660951972008,0.0018921475857496262,0.001342814415693283,0.0004882961511611938,-0.000396728515625,-0.0008544921875,-0.000701904296875,-0.00030517578125,0.00039674062281847,0.0012207403779029846,0.0012817773967981339,0.0009155552834272385,0.0007324442267417908,0.0006714072078466415,0.0007629627361893654,0.00119022186845541,0.0015259254723787308,0.0014038514345884323,0.0014954069629311562,0.0018616290763020515,0.001739555038511753,0.001434369944036007,0.0015259254723787308,0.0016174810007214546,0.001434369944036007,0.001434369944036007,0.0016479995101690292,0.0015259254723787308,0.0010071108117699623,0.0006714072078466415,0.0004272591322660446,-0.00018310546875,-0.000885009765625,-0.00140380859375,-0.002288818359375,-0.002777099609375,-0.002471923828125,-0.002197265625,-0.001678466796875,-0.000396728515625,0.00045777764171361923,0.00012207403779029846,-0.000457763671875,-0.00091552734375,-0.001617431640625,-0.0020751953125,-0.0020751953125,-0.002105712890625,-0.0020751953125,-0.00177001953125,-0.001708984375,-0.00164794921875,-0.001129150390625,-0.00054931640625,-0.000579833984375,-0.00115966796875,-0.00164794921875,-0.002197265625,-0.002471923828125,-0.002166748046875,-0.002105712890625,-0.00213623046875,-0.00164794921875,-0.00128173828125,-0.001129150390625,-0.000579833984375,0.0004272591322660446,0.0014038514345884323,0.0018921475857496262,0.002227851189672947,0.002136295661330223,0.0015564439818263054,0.0015259254723787308,0.00158696249127388,0.0016174810007214546,0.002227851189672947,0.00277718435972929,0.0031434064731001854,0.003479110077023506,0.0035401470959186554,0.0032044434919953346,0.0025940733030438423,0.0018921475857496262,0.0010681478306651115,0.00030518509447574615,0.00006103701889514923,0,0.000030518509447574615,0.00030518509447574615,0.0005798516795039177,0.001037629321217537,0.0015259254723787308,0.0017700735479593277,0.0015564439818263054,0.0008545182645320892,0.0002136295661330223,-0.0003662109375,-0.000885009765625,-0.000885009765625,-0.0006103515625,-0.000396728515625,-0.000030517578125,0.00015259254723787308,-0.000274658203125,-0.00091552734375,-0.0010986328125,-0.00140380859375,-0.002166748046875,-0.002777099609375,-0.00286865234375,-0.002838134765625,-0.00311279296875,-0.002960205078125,-0.002166748046875,-0.001434326171875,-0.000762939453125,-0.000213623046875,-0.000152587890625,-0.000335693359375,-0.000091552734375,0.00006103701889514923,-0.000274658203125,-0.000244140625,0.0004882961511611938,0.0011291848495602608,0.00158696249127388,0.0017700735479593277,0.0016785180196166039,0.0014954069629311562,0.0014954069629311562,0.00198370311409235,0.0021668141707777977,0.0017700735479593277,0.0016174810007214546,0.001342814415693283,0.0005493331700563431,-0.000152587890625,-0.00030517578125,-0.00018310546875,0.000030518509447574615,0.0007019257172942162,0.0014648884534835815,0.0018005920574069023,0.001831110566854477,0.0016479995101690292,0.0010681478306651115,0.0004882961511611938,0.0002441480755805969,0.0001831110566854477,0.00045777764171361923,0.0007324442267417908,0.00079348124563694,0.0006408886983990669,0.00012207403779029846,-0.000244140625,-0.000518798828125,-0.000762939453125,-0.001129150390625,-0.001800537109375,-0.00244140625,-0.002838134765625,-0.002838134765625,-0.0025634765625,-0.001922607421875,-0.00091552734375,-0.000396728515625,-0.0001220703125,0,-0.00042724609375,-0.000732421875,-0.0003662109375,-0.000091552734375,-0.0003662109375,-0.000762939453125,-0.001190185546875,-0.001708984375,-0.001800537109375,-0.001434326171875,-0.000732421875,0.0001831110566854477,0.0008545182645320892,0.0010681478306651115,0.0004882961511611938,-0.00054931640625,-0.001129150390625,-0.001434326171875,-0.0018310546875,-0.001678466796875,-0.000885009765625,-0.000152587890625,0.000030518509447574615,0.00012207403779029846,0.00039674062281847,0.00033570360392332077,-0.000213623046875,-0.0009765625,-0.001251220703125,-0.001129150390625,-0.001068115234375,-0.000518798828125,0.00027466658502817154,0.0009765923023223877,0.0017090365290641785,0.002288888208568096,0.0025025177747011185,0.0021057771518826485,0.0012207403779029846,0.0005798516795039177,-0.000213623046875,-0.00128173828125,-0.001251220703125,-0.000640869140625,-0.0003662109375,-0.000152587890625,0,0.00012207403779029846,0.0005493331700563431,0.00119022186845541,0.0018005920574069023,0.0020142216235399246,0.0017090365290641785,0.0012512588873505592,0.0005188146606087685,-0.0003662109375,-0.000701904296875,-0.00042724609375,0,0.0005798516795039177,0.0008545182645320892,0.0009155552834272385,0.001037629321217537,0.0007324442267417908,-0.0001220703125,-0.000885009765625,-0.001190185546875,-0.00146484375,-0.001800537109375,-0.00177001953125,-0.001953125,-0.00213623046875,-0.001495361328125,-0.000640869140625,-0.00030517578125,-0.000030517578125,0.0001831110566854477,-0.00006103515625,-0.000701904296875,-0.00115966796875,-0.001129150390625,-0.00079345703125,-0.0001220703125,0.0006103701889514923,0.0007629627361893654,0.00015259254723787308,-0.00030517578125,-0.0006103515625,-0.001007080078125,-0.0009765625,-0.000701904296875,-0.000885009765625,-0.0010986328125,-0.001251220703125,-0.001556396484375,-0.001495361328125,-0.00030517578125,0.0014038514345884323,0.0026551103219389915,0.0034485915675759315,0.0037842951714992523,0.0035096285864710808,0.0029602954164147377,0.0025635547935962677,0.002227851189672947,0.0016785180196166039,0.0010681478306651115,0.0003662221133708954,-0.0008544921875,-0.002166748046875,-0.002716064453125,-0.002685546875,-0.00244140625,-0.001708984375,-0.001007080078125,-0.000885009765625,-0.000946044921875,-0.00103759765625,-0.00128173828125,-0.00140380859375,-0.001068115234375,-0.000457763671875,0.00006103701889514923,0.0006408886983990669,0.0008850367739796638,0.0006408886983990669,0.0008850367739796638,0.0017090365290641785,0.0021668141707777977,0.002227851189672947,0.0021973326802253723,0.0016785180196166039,0.0007324442267417908,0.00012207403779029846,0.00009155552834272385,0.0006103701889514923,0.001739555038511753,0.0028992583975195885,0.00277718435972929,0.001831110566854477,0.0011291848495602608,0.0005493331700563431,0.00015259254723787308,0.0004272591322660446,0.0006408886983990669,0.0006408886983990669,0.0004882961511611938,-0.00006103515625,-0.000732421875,-0.000762939453125,0.00009155552834272385,0.0013122959062457085,0.0023499252274632454,0.002929776906967163,0.0025025177747011185,0.0014954069629311562,0.0005188146606087685,-0.000762939453125,-0.0020751953125,-0.002838134765625,-0.00323486328125,-0.0037841796875,-0.00433349609375,-0.004669189453125,-0.005035400390625,-0.00469970703125,-0.003692626953125,-0.003265380859375,-0.00323486328125,-0.00299072265625,-0.002899169921875,-0.00299072265625,-0.0029296875,-0.002716064453125,-0.00250244140625,-0.001953125,-0.001007080078125,-0.00030517578125,0.00012207403779029846,0.0006103701889514923,0.0012512588873505592,0.0020142216235399246,0.0024414807558059692,0.0024109622463583946,0.0020142216235399246,0.001434369944036007,0.0011291848495602608,0.0008239997550845146,0.0008239997550845146,0.0013733329251408577,0.002227851189672947,0.003265480510890484,0.003723258152604103,0.0037537766620516777,0.003997924737632275,0.004272591322660446,0.00436414685100317,0.003662221133708954,0.002288888208568096,0.0014038514345884323,0.0007629627361893654,0.0002441480755805969,0.0004272591322660446,0.0012512588873505592,0.00238044373691082,0.003082369454205036,0.0028992583975195885,0.0021668141707777977,0.0014954069629311562,0.0012817773967981339,0.0014648884534835815,0.0012817773967981339,0.00045777764171361923,-0.000244140625,-0.000823974609375,-0.001708984375,-0.0020751953125,-0.001190185546875,0.000030518509447574615,0.0010986663401126862,0.0020142216235399246,0.001739555038511753,0.00030518509447574615,-0.00128173828125,-0.00244140625,-0.0030517578125,-0.003173828125,-0.00299072265625,-0.002593994140625,-0.00244140625,-0.002716064453125,-0.0028076171875,-0.002288818359375,-0.00128173828125,-0.0003662109375,-0.0003662109375,-0.00115966796875,-0.00213623046875,-0.00311279296875,-0.00372314453125,-0.003448486328125,-0.0023193359375,-0.00054931640625,0.001037629321217537,0.00158696249127388,0.0011597033590078354,0.0005188146606087685,0.00033570360392332077,0.0004272591322660446,0.0005188146606087685,0.0006103701889514923,0.0007324442267417908,0.0007324442267417908,0.00039674062281847,0.00009155552834272385,0.00045777764171361923,0.001342814415693283,0.0024109622463583946,0.003479110077023506,0.004272591322660446,0.004394665360450745,0.003906369209289551,0.003082369454205036,0.002136295661330223,0.0012512588873505592,0.001037629321217537,0.0014954069629311562,0.0019531846046447754,0.0021973326802253723,0.0024414807558059692,0.0026551103219389915,0.002685628831386566,0.0025025177747011185,0.002136295661330223,0.0014954069629311562,0.00045777764171361923,-0.000579833984375,-0.001373291015625,-0.0020751953125,-0.002593994140625,-0.002410888671875,-0.001434326171875,-0.00048828125,-0.00030517578125,-0.00067138671875,-0.001129150390625,-0.001800537109375,-0.00262451171875,-0.00311279296875,-0.003143310546875,-0.003021240234375,-0.0029296875,-0.002655029296875,-0.002532958984375,-0.002838134765625,-0.002655029296875,-0.00189208984375,-0.001434326171875,-0.00103759765625,-0.00091552734375,-0.001434326171875,-0.002288818359375,-0.00286865234375,-0.002777099609375,-0.002349853515625,-0.001953125,-0.001678466796875,-0.001373291015625,-0.001068115234375,-0.000732421875,0.00012207403779029846,0.0012512588873505592,0.0020447401329874992,0.0025025177747011185,0.002471999265253544,0.0018616290763020515,0.00119022186845541,0.0008850367739796638,0.0011597033590078354,0.002075258642435074,0.0031128879636526108,0.0036317026242613792,0.003418073058128357,0.0025025177747011185,0.001342814415693283,0.0005188146606087685,0,-0.00048828125,-0.0008544921875,-0.001007080078125,-0.00091552734375,-0.000701904296875,-0.0001220703125,0.0009155552834272385,0.0017090365290641785,0.0018921475857496262,0.0019531846046447754,0.0016785180196166039,0.0009460737928748131,0.0002136295661330223,-0.000213623046875,-0.00048828125,-0.000579833984375,-0.000457763671875,-0.000457763671875,-0.00048828125,-0.000030517578125,0.0005798516795039177,0.001037629321217537,0.0016479995101690292,0.0022583696991205215,0.0022583696991205215,0.0015259254723787308,0.00030518509447574615,-0.001251220703125,-0.002899169921875,-0.003662109375,-0.0035400390625,-0.002960205078125,-0.001800537109375,-0.00067138671875,-0.000152587890625,0,0.00033570360392332077,0.0008850367739796638,0.0012512588873505592,0.0017090365290641785,0.00198370311409235,0.0012512588873505592,-0.00006103515625,-0.001251220703125,-0.00225830078125,-0.0028076171875,-0.0025634765625,-0.002166748046875,-0.0020751953125,-0.0015869140625,-0.0009765625,-0.001007080078125,-0.00103759765625,-0.00067138671875,-0.000762939453125,-0.001251220703125,-0.00146484375,-0.001800537109375,-0.002410888671875,-0.00244140625,-0.00201416015625,-0.001556396484375,-0.000640869140625,0.0007019257172942162,0.0017700735479593277,0.0021668141707777977,0.0025025177747011185,0.0026551103219389915,0.0023499252274632454,0.002685628831386566,0.0035401470959186554,0.0036011841148138046,0.003418073058128357,0.0032349620014429092,0.0024109622463583946,0.0015259254723787308,0.0010986663401126862,0.0011597033590078354,0.001342814415693283,0.0014954069629311562,0.0016174810007214546,0.001037629321217537,0.0001831110566854477,-0.00030517578125,-0.00091552734375,-0.001220703125,-0.000885009765625,-0.0003662109375,0,-0.000244140625,-0.00079345703125,-0.00152587890625,-0.002044677734375,-0.00213623046875,-0.00213623046875,-0.001800537109375,-0.001220703125,-0.00103759765625,-0.00115966796875,-0.001190185546875,-0.00091552734375,-0.000457763671875,-0.000091552734375,0.00009155552834272385,-0.00006103515625,-0.0006103515625,-0.001373291015625,-0.0023193359375,-0.002777099609375,-0.002471923828125,-0.002197265625,-0.002044677734375,-0.00164794921875,-0.00115966796875,-0.001068115234375,-0.001068115234375,-0.000579833984375,-0.00006103515625,0.0002136295661330223,0.00030518509447574615,0.000030518509447574615,-0.000579833984375,-0.000946044921875,-0.000823974609375,-0.000396728515625,0.0004882961511611938,0.0017700735479593277,0.002624591812491417,0.002624591812491417,0.002136295661330223,0.0016174810007214546,0.0009765923023223877,0.0004272591322660446,0.0002136295661330223,0.000030518509447574615,-0.000030517578125,0.00012207403779029846,0.00027466658502817154,0.00012207403779029846,-0.000091552734375,-0.00006103515625,0.00006103701889514923,0,0.00030518509447574615,0.0010681478306651115,0.0017090365290641785,0.0021057771518826485,0.002624591812491417,0.0031128879636526108,0.0031434064731001854,0.003021332435309887,0.0029602954164147377,0.002685628831386566,0.0023499252274632454,0.0019226660951972008,0.001434369944036007,0.001037629321217537,0.0008239997550845146,0.0005798516795039177,0.0002441480755805969,-0.000091552734375,-0.0003662109375,-0.000518798828125,-0.001129150390625,-0.00201416015625,-0.00244140625,-0.00262451171875,-0.002655029296875,-0.002838134765625,-0.0032958984375,-0.003692626953125,-0.003997802734375,-0.003692626953125,-0.002777099609375,-0.00177001953125,-0.00048828125,0.0007629627361893654,0.0011597033590078354,0.0007629627361893654,0.0001831110566854477,0,-0.000030517578125,-0.00042724609375,-0.00091552734375,-0.001373291015625,-0.001983642578125,-0.002471923828125,-0.002349853515625,-0.00146484375,-0.00030517578125,0.0006408886983990669,0.0014954069629311562,0.0020447401329874992,0.0021057771518826485,0.0020142216235399246,0.002136295661330223,0.0024109622463583946,0.002685628831386566,0.0028382213786244392,0.0028077028691768646,0.0026551103219389915,0.002136295661330223,0.0013122959062457085,0.0006103701889514923,0.00030518509447574615,0.0007629627361893654,0.0014954069629311562,0.0018005920574069023,0.0018005920574069023,0.001739555038511753,0.0016785180196166039,0.001434369944036007,0.0009155552834272385,0.0003662221133708954,0.00009155552834272385,0.00006103701889514923,-0.0003662109375,-0.00103759765625,-0.001373291015625,-0.0018310546875,-0.002166748046875,-0.00201416015625,-0.001708984375,-0.00115966796875,-0.000396728515625,0.00015259254723787308,0.00030518509447574615,0.00045777764171361923,0.00079348124563694,0.0008850367739796638,0.0005188146606087685,-0.000030517578125,-0.000579833984375,-0.00140380859375,-0.0023193359375,-0.002716064453125,-0.002685546875,-0.00238037109375,-0.001953125,-0.00164794921875,-0.001251220703125,-0.000732421875,-0.000457763671875,-0.00048828125,-0.000518798828125,-0.00054931640625,-0.0006103515625,-0.00048828125,-0.000457763671875,-0.0006103515625,-0.0006103515625,-0.000518798828125,-0.00030517578125,-0.0001220703125,0.0002136295661330223,0.00079348124563694,0.0010986663401126862,0.001037629321217537,0.0009765923023223877,0.0008239997550845146,0.0006103701889514923,0.0006103701889514923,0.0004882961511611938,0.00012207403779029846,0.00015259254723787308,0.0005493331700563431,0.0008850367739796638,0.0011291848495602608,0.0013733329251408577,0.0014954069629311562,0.0014648884534835815,0.0015564439818263054,0.0017700735479593277,0.001831110566854477,0.001831110566854477,0.0020447401329874992,0.002075258642435074,0.0018921475857496262,0.0020142216235399246,0.0021057771518826485,0.001831110566854477,0.0017090365290641785,0.0017090365290641785,0.0012207403779029846,0.0005493331700563431,0.00033570360392332077,0.00027466658502817154,0,-0.0001220703125,0.00012207403779029846,0.00027466658502817154,0.00033570360392332077,0.00027466658502817154,-0.000244140625,-0.000579833984375,-0.000091552734375,0.0006408886983990669,0.0010071108117699623,0.0009765923023223877,0.0005188146606087685,-0.000396728515625,-0.001220703125,-0.001495361328125,-0.001678466796875,-0.00164794921875,-0.001007080078125,-0.000396728515625,-0.000091552734375,0.0004272591322660446,0.0010681478306651115,0.0012817773967981339,0.0013733329251408577,0.0015259254723787308,0.0008850367739796638,-0.00018310546875,-0.00067138671875,-0.0010986328125,-0.001800537109375,-0.0020751953125,-0.00225830078125,-0.00299072265625,-0.003509521484375,-0.003509521484375,-0.0035400390625,-0.00347900390625,-0.00286865234375,-0.0018310546875,-0.00103759765625,-0.000701904296875,-0.000732421875,-0.000640869140625,-0.000152587890625,0.0002136295661330223,0.00033570360392332077,0.00033570360392332077,0.00027466658502817154,0.0004882961511611938,0.0009765923023223877,0.001342814415693283,0.0013122959062457085,0.0012817773967981339,0.0014038514345884323,0.0010681478306651115,0.0006714072078466415,0.0010681478306651115,0.001739555038511753,0.0021973326802253723,0.0027466658502817154,0.003082369454205036,0.002685628831386566,0.0020142216235399246,0.0015564439818263054,0.0009460737928748131,0.00027466658502817154,0.00015259254723787308,0.0003662221133708954,0.0006103701889514923,0.0009155552834272385,0.0010986663401126862,0.0011597033590078354,0.0010986663401126862,0.0011597033590078354,0.001342814415693283,0.0012207403779029846,0.0011597033590078354,0.0013733329251408577,0.0013733329251408577,0.0010681478306651115,0.00033570360392332077,-0.000457763671875,-0.00128173828125,-0.00201416015625,-0.002288818359375,-0.002227783203125,-0.001861572265625,-0.00115966796875,-0.000732421875,-0.00067138671875,-0.0009765625,-0.00115966796875,-0.0010986328125,-0.001373291015625,-0.001861572265625,-0.002227783203125,-0.002593994140625,-0.002716064453125,-0.00262451171875,-0.002349853515625,-0.001861572265625,-0.0015869140625,-0.001678466796875,-0.001800537109375,-0.001678466796875,-0.001434326171875,-0.001129150390625,-0.000640869140625,-0.00030517578125,-0.000244140625,-0.000274658203125,-0.0006103515625,-0.001068115234375,-0.001251220703125,-0.001434326171875,-0.001556396484375,-0.00128173828125,-0.0008544921875,-0.00048828125,-0.000274658203125,-0.00048828125,-0.00115966796875,-0.001739501953125,-0.001739501953125,-0.00115966796875,-0.000091552734375,0.0010681478306651115,0.0020142216235399246,0.0023499252274632454,0.0020142216235399246,0.0015564439818263054,0.0009765923023223877,0.0005493331700563431,0.0007324442267417908,0.0011597033590078354,0.0015259254723787308,0.0015259254723787308,0.0012817773967981339,0.0013122959062457085,0.001434369944036007,0.00158696249127388,0.001739555038511753,0.0015564439818263054,0.0009460737928748131,0.00012207403779029846,-0.000579833984375,-0.0010986328125,-0.001373291015625,-0.001251220703125,-0.0008544921875,-0.000885009765625,-0.00152587890625,-0.001953125,-0.002044677734375,-0.002288818359375,-0.002349853515625,-0.001861572265625,-0.0010986328125,-0.000732421875,-0.0006103515625,-0.000274658203125,0.00006103701889514923,0.0006714072078466415,0.0016785180196166039,0.0023194067180156708,0.0022583696991205215,0.001739555038511753,0.0009155552834272385,-0.00030517578125,-0.001617431640625,-0.002197265625,-0.002227783203125,-0.0020751953125,-0.001708984375,-0.001312255859375,-0.000701904296875,-0.00006103515625,0.00030518509447574615,0.0008850367739796638,0.0014954069629311562,0.0015259254723787308,0.0009155552834272385,0.0001831110566854477,-0.00018310546875,-0.0006103515625,-0.000885009765625,-0.000457763671875,-0.000030517578125,0.00012207403779029846,0.0003662221133708954,0.0004882961511611938,0.0005493331700563431,0.0005493331700563431,0.00079348124563694,0.0011291848495602608,0.0010681478306651115,0.0009765923023223877,0.0011291848495602608,0.001342814415693283,0.001037629321217537,0.0008239997550845146,0.0011597033590078354,0.0012512588873505592,0.0010071108117699623,0.0008239997550845146,0.00045777764171361923,-0.000244140625,-0.001007080078125,-0.001220703125,-0.0010986328125,-0.00067138671875,0.00015259254723787308,0.0009155552834272385,0.0013122959062457085,0.0011291848495602608,0.0006408886983990669,0.00015259254723787308,-0.000244140625,-0.00042724609375,-0.00048828125,-0.00067138671875,-0.00079345703125,-0.0008544921875,-0.000518798828125,-0.0001220703125,-0.00018310546875,0,0.00039674062281847,0.00045777764171361923,0.0002136295661330223,-0.000244140625,-0.001129150390625,-0.00238037109375,-0.003204345703125,-0.003326416015625,-0.003448486328125,-0.0030517578125,-0.001708984375,-0.000396728515625,0.0003662221133708954,0.0010681478306651115,0.001739555038511753,0.0020142216235399246,0.0020142216235399246,0.0017090365290641785,0.0009460737928748131,0.0004272591322660446,0.0004272591322660446,0.00033570360392332077,0.0002441480755805969,0.0007629627361893654,0.0014954069629311562,0.0017700735479593277,0.0018921475857496262,0.0021973326802253723,0.002136295661330223,0.0017700735479593277,0.0018616290763020515,0.0020447401329874992,0.002075258642435074,0.002685628831386566,0.0033570360392332077,0.0032959990203380585,0.0028992583975195885,0.0027161473408341408,0.0025940733030438423,0.0024414807558059692,0.0027161473408341408,0.002868739888072014,0.0022583696991205215,0.0014954069629311562,0.0004882961511611938,-0.000701904296875,-0.00103759765625,-0.00042724609375,0.000030518509447574615,0.0004272591322660446,0.0009765923023223877,0.00119022186845541,0.001037629321217537,0.0008850367739796638,0.0007019257172942162,0.0005798516795039177,0.0005798516795039177,0.0006408886983990669,0.00015259254723787308,-0.000885009765625,-0.001556396484375,-0.0020751953125,-0.002593994140625,-0.002471923828125,-0.00189208984375,-0.001251220703125,-0.00079345703125,-0.00091552734375,-0.001556396484375,-0.00238037109375,-0.002777099609375,-0.002655029296875,-0.00244140625,-0.001922607421875,-0.001495361328125,-0.001556396484375,-0.001678466796875,-0.001953125,-0.002166748046875,-0.00177001953125,-0.0009765625,-0.00042724609375,-0.000457763671875,-0.000518798828125,-0.0008544921875,-0.00128173828125,-0.0009765625,-0.000213623046875,0.0005188146606087685,0.0011597033590078354,0.0014648884534835815,0.001342814415693283,0.0011597033590078354,0.0012817773967981339,0.0013733329251408577,0.0014954069629311562,0.00158696249127388,0.0010681478306651115,0.00027466658502817154,0.000030518509447574615,0.0002441480755805969,0.0006103701889514923,0.0015564439818263054,0.0028382213786244392,0.0033570360392332077,0.0032044434919953346,0.0030518509447574615,0.0027161473408341408,0.0021973326802253723,0.00198370311409235,0.00198370311409235,0.001831110566854477,0.00119022186845541,0.0004882961511611938,-0.00006103515625,-0.000457763671875,-0.000213623046875,0.0003662221133708954,0.0004882961511611938,0.0001831110566854477,-0.0001220703125,-0.000732421875,-0.00146484375,-0.001556396484375,-0.0009765625,-0.0003662109375,0,-0.00030517578125,-0.00115966796875,-0.00189208984375,-0.002044677734375,-0.00164794921875,-0.001007080078125,-0.00030517578125,0.0001831110566854477,0.00006103701889514923,-0.000579833984375,-0.0013427734375,-0.0015869140625,-0.0010986328125,-0.000579833984375,-0.000152587890625,0,-0.00042724609375,-0.001190185546875,-0.002044677734375,-0.00286865234375,-0.003021240234375,-0.0025634765625,-0.001739501953125,-0.00091552734375,-0.000579833984375,-0.00042724609375,-0.000274658203125,-0.0003662109375,-0.000396728515625,-0.0003662109375,-0.000091552734375,0.00039674062281847,0.00027466658502817154,-0.00030517578125,-0.000732421875,-0.00091552734375,-0.00054931640625,0.00033570360392332077,0.001342814415693283,0.002136295661330223,0.0028382213786244392,0.0030518509447574615,0.0021057771518826485,0.0009155552834272385,0.00079348124563694,0.0013122959062457085,0.0014648884534835815,0.0015259254723787308,0.0012817773967981339,0.0004882961511611938,-0.000091552734375,0.000030518509447574615,0.0005493331700563431,0.00119022186845541,0.0018616290763020515,0.002288888208568096,0.00198370311409235,0.0009460737928748131,-0.0001220703125,-0.000732421875,-0.000701904296875,-0.00018310546875,0.00027466658502817154,0.00033570360392332077,0.000030518509447574615,-0.000335693359375,-0.000274658203125,0.00015259254723787308,0.0005798516795039177,0.0009765923023223877,0.0009155552834272385,0.000030518509447574615,-0.00128173828125,-0.0023193359375,-0.00225830078125,-0.00152587890625,-0.000518798828125,0.0004882961511611938,0.0008545182645320892,0.00027466658502817154,-0.00048828125,-0.001068115234375,-0.001922607421875,-0.00250244140625,-0.001953125,-0.001220703125,-0.001251220703125,-0.00164794921875,-0.001983642578125,-0.002227783203125,-0.002288818359375,-0.0018310546875,-0.00103759765625,-0.000396728515625,-0.000213623046875,-0.000640869140625,-0.00164794921875,-0.0029296875,-0.003509521484375,-0.00311279296875,-0.00250244140625,-0.0018310546875,-0.001007080078125,-0.000152587890625,0.0002441480755805969,-0.00018310546875,-0.00103759765625,-0.0013427734375,-0.001220703125,-0.001251220703125,-0.0010986328125,-0.000732421875,-0.000762939453125,-0.0009765625,-0.000701904296875,0,0.0008545182645320892,0.002227851189672947,0.0032959990203380585,0.003082369454205036,0.0021668141707777977,0.00158696249127388,0.0010986663401126862,0.0005493331700563431,0.00045777764171361923,0.0007019257172942162,0.00033570360392332077,-0.000335693359375,-0.0006103515625,-0.000518798828125,0.0001831110566854477,0.0015564439818263054,0.002533036284148693,0.0027161473408341408,0.0023499252274632454,0.0015564439818263054,0.00027466658502817154,-0.001007080078125,-0.0013427734375,-0.0010986328125,-0.00115966796875,-0.001251220703125,-0.001251220703125,-0.001495361328125,-0.001617431640625,-0.001251220703125,-0.000732421875,-0.000457763671875,-0.000457763671875,-0.000579833984375,-0.001068115234375,-0.00164794921875,-0.001373291015625,-0.00091552734375,-0.000823974609375,-0.000823974609375,-0.001007080078125,-0.00152587890625,-0.00177001953125,-0.00115966796875,-0.000457763671875,-0.000213623046875,0,-0.000152587890625,-0.000762939453125,-0.000732421875,-0.000244140625,0.00012207403779029846,0.0007324442267417908,0.0013733329251408577,0.00119022186845541,0.00039674062281847,0,-0.000244140625,-0.000762939453125,-0.0009765625,-0.0008544921875,-0.000946044921875,-0.000640869140625,-0.00006103515625,0.000030518509447574615,0.0001831110566854477,0.0008545182645320892,0.0013733329251408577,0.0014038514345884323,0.0016479995101690292,0.002136295661330223,0.0023194067180156708,0.0021057771518826485,0.0019226660951972008,0.0018616290763020515,0.001831110566854477,0.002136295661330223,0.002136295661330223,0.001831110566854477,0.0021057771518826485,0.0025635547935962677,0.002685628831386566,0.002685628831386566,0.0027466658502817154,0.0028382213786244392,0.0027466658502817154,0.0019531846046447754,0.0005798516795039177,-0.000396728515625,-0.000762939453125,-0.001190185546875,-0.00146484375,-0.001129150390625,-0.00079345703125,-0.000946044921875,-0.001495361328125,-0.0020751953125,-0.00213623046875,-0.00140380859375,-0.000640869140625,-0.00054931640625,-0.000885009765625,-0.00128173828125,-0.001708984375,-0.00177001953125,-0.0013427734375,-0.000518798828125,0.0004272591322660446,0.0005798516795039177,-0.000152587890625,-0.00146484375,-0.0025634765625,-0.002685546875,-0.00213623046875,-0.00091552734375,0.0005798516795039177,0.0012512588873505592,0.0010071108117699623,0.0006103701889514923,0.0006714072078466415,0.0011597033590078354,0.0017090365290641785,0.0024109622463583946,0.0029602954164147377,0.002685628831386566,0.0017090365290641785,0.0006103701889514923,-0.000152587890625,-0.00030517578125,0.0002441480755805969,0.0008545182645320892,0.0011597033590078354,0.0015564439818263054,0.0021973326802253723,0.0027466658502817154,0.0032044434919953346,0.004150517284870148,0.005005035549402237,0.0050355540588498116,0.0044862208887934685,0.0032349620014429092,0.0015259254723787308,0.00039674062281847,0.00030518509447574615,0.0005798516795039177,0.0009460737928748131,0.0014954069629311562,0.0018616290763020515,0.0016785180196166039,0.0012207403779029846,0.0011291848495602608,0.0015259254723787308,0.0019226660951972008,0.001831110566854477,0.0013733329251408577,0.0005188146606087685,-0.00067138671875,-0.001617431640625,-0.00177001953125,-0.00128173828125,-0.00054931640625,-0.000030517578125,0.0003662221133708954,0.0004882961511611938,0.000030518509447574615,-0.00018310546875,0.00015259254723787308,0.00033570360392332077,0.00039674062281847,0.0003662221133708954,-0.000274658203125,-0.001434326171875,-0.00213623046875,-0.002105712890625,-0.001861572265625,-0.001708984375,-0.001495361328125,-0.0015869140625,-0.002655029296875,-0.00421142578125,-0.005126953125,-0.004852294921875,-0.00384521484375,-0.00274658203125,-0.001556396484375,-0.00048828125,-0.000244140625,-0.000518798828125,-0.000579833984375,-0.00054931640625,-0.000518798828125,-0.000244140625,-0.0003662109375,-0.001495361328125,-0.002593994140625,-0.002716064453125,-0.002105712890625,-0.0010986328125,0.0004272591322660446,0.0021668141707777977,0.003265480510890484,0.003418073058128357,0.003082369454205036,0.00277718435972929,0.002685628831386566,0.00277718435972929,0.0029602954164147377,0.0028992583975195885,0.002533036284148693,0.0021668141707777977,0.0019226660951972008,0.001831110566854477,0.0019531846046447754,0.0022583696991205215,0.0027466658502817154,0.002929776906967163,0.0024109622463583946,0.001434369944036007,0.0004882961511611938,-0.00018310546875,-0.00054931640625,0,0.001342814415693283,0.0023499252274632454,0.002685628831386566,0.0027161473408341408,0.002471999265253544,0.001739555038511753,0.0008239997550845146,0.00030518509447574615,-0.00042724609375,-0.001739501953125,-0.002960205078125,-0.003692626953125,-0.004058837890625,-0.003753662109375,-0.00274658203125,-0.001953125,-0.001678466796875,-0.001800537109375,-0.002655029296875,-0.00408935546875,-0.00506591796875,-0.00518798828125,-0.00506591796875,-0.004974365234375,-0.004608154296875,-0.0042724609375,-0.004302978515625,-0.004180908203125,-0.003326416015625,-0.00164794921875,0,0.0009155552834272385,0.00079348124563694,-0.0001220703125,-0.001068115234375,-0.001800537109375,-0.002044677734375,-0.00140380859375,-0.0006103515625,0,0.0005798516795039177,0.0010071108117699623,0.001037629321217537,0.0010986663401126862,0.0013122959062457085,0.0010986663401126862,0.0007324442267417908,0.0009155552834272385,0.0010681478306651115,0.0012512588873505592,0.001831110566854477,0.0021057771518826485,0.00198370311409235,0.0021973326802253723,0.002471999265253544,0.0025940733030438423,0.0028382213786244392,0.0028992583975195885,0.0023499252274632454,0.001434369944036007,0.0007629627361893654,0.00039674062281847,0.00027466658502817154,0.0008850367739796638,0.00198370311409235,0.0024109622463583946,0.0024109622463583946,0.0025635547935962677,0.002533036284148693,0.00198370311409235,0.00119022186845541,0.0004272591322660446,-0.0006103515625,-0.00164794921875,-0.002166748046875,-0.002593994140625,-0.00262451171875,-0.001922607421875,-0.001220703125,-0.000762939453125,-0.000152587890625,0.0001831110566854477,-0.00006103515625,-0.000457763671875,-0.0006103515625,-0.0010986328125,-0.00164794921875,-0.001495361328125,-0.00146484375,-0.001800537109375,-0.0015869140625,-0.001312255859375,-0.00140380859375,-0.001220703125,-0.0009765625,-0.001129150390625,-0.0015869140625,-0.0018310546875,-0.00225830078125,-0.00311279296875,-0.0032958984375,-0.00299072265625,-0.003173828125,-0.00274658203125,-0.001373291015625,-0.000274658203125,0.0006103701889514923,0.0014954069629311562,0.0019226660951972008,0.0017700735479593277,0.0013733329251408577,0.0009155552834272385,0.00027466658502817154,0.0002136295661330223,0.0005188146606087685,0.0002136295661330223,-0.000213623046875,-0.00030517578125,-0.000030517578125,0.0004882961511611938,0.0009155552834272385,0.001434369944036007,0.00158696249127388,0.0010681478306651115,0.00033570360392332077,-0.000518798828125,-0.000701904296875,0.00009155552834272385,0.00119022186845541,0.0019226660951972008,0.001831110566854477,0.001037629321217537,0.00015259254723787308,-0.000152587890625,0.00009155552834272385,0.0006103701889514923,0.0012207403779029846,0.0010681478306651115,0,-0.00091552734375,-0.001312255859375,-0.00115966796875,-0.000213623046875,0.0010986663401126862,0.0015259254723787308,0.0007629627361893654,0,-0.000274658203125,-0.000274658203125,-0.0001220703125,0.0001831110566854477,0.00015259254723787308,-0.0006103515625,-0.00146484375,-0.001922607421875,-0.001983642578125,-0.001190185546875,0.00006103701889514923,0.0006408886983990669,0.0003662221133708954,-0.000152587890625,-0.000885009765625,-0.0015869140625,-0.00140380859375,-0.000518798828125,0.00033570360392332077,0.0011597033590078354,0.001342814415693283,0.0008850367739796638,0.0002441480755805969,-0.00018310546875,0.0002441480755805969,0.001037629321217537,0.0010681478306651115,0.0006714072078466415,0,-0.00140380859375,-0.0028076171875,-0.00311279296875,-0.00225830078125,-0.001373291015625,-0.000518798828125,0.0003662221133708954,0.00079348124563694,0.0008850367739796638,0.0012207403779029846,0.0014954069629311562,0.001434369944036007,0.0013122959062457085,0.0009765923023223877,0.00045777764171361923,-0.000030517578125,-0.000457763671875,-0.000396728515625,-0.000213623046875,0.0002441480755805969,0.0010986663401126862,0.0016174810007214546,0.0018005920574069023,0.0018616290763020515,0.001739555038511753,0.0015259254723787308,0.00119022186845541,0.0008239997550845146,0.0006714072078466415,0.0005798516795039177,0,-0.000762939453125,-0.00115966796875,-0.001617431640625,-0.002166748046875,-0.00213623046875,-0.001556396484375,-0.001220703125,-0.001068115234375,-0.000579833984375,-0.000518798828125,-0.000823974609375,-0.000396728515625,0.00027466658502817154,0.0005188146606087685,0.0006408886983990669,0.0007324442267417908,0.0003662221133708954,-0.00042724609375,-0.001220703125,-0.001495361328125,-0.00152587890625,-0.001983642578125,-0.00262451171875,-0.002899169921875,-0.002593994140625,-0.00177001953125,-0.000518798828125,0.0008850367739796638,0.0019226660951972008,0.0025025177747011185,0.0024109622463583946,0.0015564439818263054,0.0006714072078466415,0.0006408886983990669,0.0012207403779029846,0.0014648884534835815,0.0009460737928748131,0.000030518509447574615,-0.000823974609375,-0.00152587890625,-0.001861572265625,-0.000946044921875,0.0007324442267417908,0.0021057771518826485,0.0031128879636526108,0.0033570360392332077,0.002868739888072014,0.0025940733030438423,0.0026551103219389915,0.002685628831386566,0.00238044373691082,0.0019226660951972008,0.0016479995101690292,0.0010681478306651115,0.0005798516795039177,0.0005493331700563431,0.0006408886983990669,0.0006103701889514923,0.0002441480755805969,-0.00018310546875,-0.000457763671875,-0.000213623046875,0.0003662221133708954,0.0008545182645320892,0.0011597033590078354,0.0012207403779029846,0.0009765923023223877,0.0007324442267417908,0.0008239997550845146,0.0012207403779029846,0.0016479995101690292,0.0016174810007214546,0.0008545182645320892,-0.000335693359375,-0.0010986328125,-0.001251220703125,-0.00164794921875,-0.0018310546875,-0.001312255859375,-0.000885009765625,-0.001129150390625,-0.001556396484375,-0.00152587890625,-0.00115966796875,-0.000579833984375,0,-0.00006103515625,-0.000701904296875,-0.001007080078125,-0.001373291015625,-0.002105712890625,-0.001953125,-0.0009765625,-0.00042724609375,-0.000244140625,-0.0001220703125,-0.000274658203125,-0.000762939453125,-0.00091552734375,-0.00054931640625,-0.000335693359375,-0.0001220703125,0.00033570360392332077,0.0005188146606087685,0.00009155552834272385,-0.000244140625,-0.000091552734375,0,-0.000030517578125,0.0005493331700563431,0.001434369944036007,0.0015564439818263054,0.0015259254723787308,0.0014954069629311562,0.0009155552834272385,0.0004272591322660446,0.0004882961511611938,0.0006714072078466415,0.0010071108117699623,0.0016174810007214546,0.0021973326802253723,0.00238044373691082,0.0021668141707777977,0.0014954069629311562,0.0009155552834272385,0.0011291848495602608,0.0014648884534835815,0.0011291848495602608,0.0007324442267417908,0.0005493331700563431,0.00012207403779029846,-0.000152587890625,-0.00006103515625,0.0004272591322660446,0.0011291848495602608,0.001739555038511753,0.001739555038511753,0.0010681478306651115,0.0008545182645320892,0.0017090365290641785,0.002227851189672947,0.0018616290763020515,0.0015564439818263054,0.0010986663401126862,0.00015259254723787308,-0.00067138671875,-0.001068115234375,-0.0010986328125,-0.00091552734375,-0.000762939453125,-0.00103759765625,-0.001495361328125,-0.00140380859375,-0.001068115234375,-0.0008544921875,-0.00048828125,-0.000244140625,-0.000030517578125,0.00030518509447574615,0.0006408886983990669,0.0007324442267417908,0.0005493331700563431,-0.00006103515625,-0.001220703125,-0.002410888671875,-0.003082275390625,-0.003326416015625,-0.003265380859375,-0.0029296875,-0.0029296875,-0.003204345703125,-0.00335693359375,-0.003204345703125,-0.002685546875,-0.001739501953125,-0.00042724609375,0.0005493331700563431,0.0008545182645320892,0.0009460737928748131,0.0008545182645320892,0.0007019257172942162,0.0009460737928748131,0.001037629321217537,0.001037629321217537,0.001037629321217537,0.0005798516795039177,-0.0003662109375,-0.001434326171875,-0.00177001953125,-0.00103759765625,0.000030518509447574615,0.0010681478306651115,0.0013733329251408577,0.0012512588873505592,0.0011291848495602608,0.0007324442267417908,0.0009460737928748131,0.002288888208568096,0.0036317026242613792,0.003997924737632275,0.0032959990203380585,0.0017090365290641785,-0.0001220703125,-0.00146484375,-0.0018310546875,-0.001556396484375,-0.00140380859375,-0.0015869140625,-0.00201416015625,-0.00250244140625,-0.0025634765625,-0.0015869140625,-0.000030517578125,0.001037629321217537,0.0011597033590078354,0.0007629627361893654,0.00033570360392332077,-0.000213623046875,-0.000732421875,-0.00054931640625,-0.000213623046875,-0.000518798828125,-0.00115966796875,-0.001861572265625,-0.00238037109375,-0.002685546875,-0.002471923828125,-0.001373291015625,-0.000244140625,0.0002136295661330223,0.00030518509447574615,0,-0.000396728515625,-0.00018310546875,0.0006714072078466415,0.0015564439818263054,0.002075258642435074,0.0019226660951972008,0.0011597033590078354,0.0002136295661330223,-0.00067138671875,-0.0009765625,-0.000457763671875,0.00009155552834272385,0.0002441480755805969,0.00009155552834272385,0.00006103701889514923,0.0004272591322660446,0.0009460737928748131,0.0015564439818263054,0.002227851189672947,0.00238044373691082,0.0019226660951972008,0.0012512588873505592,0.0004882961511611938,-0.000457763671875,-0.001190185546875,-0.0013427734375,-0.00146484375,-0.00177001953125,-0.00189208984375,-0.001678466796875,-0.0015869140625,-0.001617431640625,-0.0010986328125,-0.000244140625,0.0002441480755805969,0.0009155552834272385,0.0016174810007214546,0.00158696249127388,0.0013733329251408577,0.0014038514345884323,0.0015564439818263054,0.0014038514345884323,0.0007629627361893654,0.00015259254723787308,-0.00067138671875,-0.0018310546875,-0.0025634765625,-0.002685546875,-0.002655029296875,-0.0025634765625,-0.00225830078125,-0.00213623046875,-0.002044677734375,-0.00152587890625,-0.000701904296875,0.0002441480755805969,0.0008545182645320892,0.0009765923023223877,0.0009460737928748131,0.0006408886983990669,0.0001831110566854477,-0.0001220703125,-0.00006103515625,0.0003662221133708954,0.00045777764171361923,-0.00006103515625,-0.0008544921875,-0.00164794921875,-0.002349853515625,-0.00274658203125,-0.00250244140625,-0.002044677734375,-0.00177001953125,-0.001312255859375,-0.0010986328125,-0.0015869140625,-0.00189208984375,-0.001190185546875,0,0.0009155552834272385,0.0014648884534835815,0.0015564439818263054,0.0006714072078466415,-0.000579833984375,-0.0010986328125,-0.000762939453125,-0.0001220703125,0.0005188146606087685,0.0012512588873505592,0.0017090365290641785,0.0015564439818263054,0.0013733329251408577,0.0014038514345884323,0.00158696249127388,0.001831110566854477,0.0018921475857496262,0.0018921475857496262,0.0015259254723787308,0.0008239997550845146,0.0005188146606087685,0.0005493331700563431,0.00012207403779029846,-0.00054931640625,-0.00067138671875,-0.000701904296875,-0.001312255859375,-0.001495361328125,-0.00103759765625,-0.000457763671875,-0.000030517578125,0.00006103701889514923,-0.000030517578125,-0.00030517578125,-0.00030517578125,-0.00006103515625,-0.000213623046875,-0.000335693359375,-0.000213623046875,-0.00042724609375,-0.001007080078125,-0.00146484375,-0.001495361328125,-0.001434326171875,-0.0015869140625,-0.001953125,-0.002105712890625,-0.00152587890625,-0.000732421875,-0.0001220703125,0.0007019257172942162,0.001434369944036007,0.001037629321217537,0.0002441480755805969,0.00009155552834272385,0.00030518509447574615,0.0004882961511611938,0.0009460737928748131,0.0015259254723787308,0.001434369944036007,0.0010681478306651115,0.0011291848495602608,0.0012512588873505592,0.0013733329251408577,0.00198370311409235,0.002685628831386566,0.00277718435972929,0.002929776906967163,0.003418073058128357,0.00357066560536623,0.0032959990203380585,0.0032044434919953346,0.003082369454205036,0.0024414807558059692,0.0018616290763020515,0.0016785180196166039,0.0013733329251408577,0.001037629321217537,0.00119022186845541,0.0014038514345884323,0.001342814415693283,0.0011597033590078354,0.0006103701889514923,-0.0003662109375,-0.00091552734375,-0.000640869140625,-0.0001220703125,0.0006714072078466415,0.0017090365290641785,0.0018616290763020515,0.0014648884534835815,0.001037629321217537,0.00012207403779029846,-0.0006103515625,-0.00054931640625,-0.000030517578125,0.0001831110566854477,-0.0001220703125,-0.00054931640625,-0.001373291015625,-0.00244140625,-0.002288818359375,-0.00140380859375,-0.000579833984375,0.000030518509447574615,0.00015259254723787308,-0.000244140625,-0.0013427734375,-0.002227783203125,-0.0023193359375,-0.002227783203125,-0.002197265625,-0.00238037109375,-0.002685546875,-0.002960205078125,-0.003204345703125,-0.00274658203125,-0.001556396484375,-0.0006103515625,-0.0001220703125,0.00012207403779029846,0.00009155552834272385,-0.000213623046875,-0.00030517578125,0.00006103701889514923,0.0006103701889514923,0.0013733329251408577,0.002136295661330223,0.0020142216235399246,0.0010986663401126862,0.00027466658502817154,-0.000152587890625,-0.0006103515625,-0.0009765625,-0.000701904296875,-0.00030517578125,-0.000732421875,-0.00164794921875,-0.002044677734375,-0.002197265625,-0.002197265625,-0.00140380859375,-0.000396728515625,0,0.00030518509447574615,0.0008239997550845146,0.0008850367739796638,0.0007324442267417908,0.0012207403779029846,0.0018921475857496262,0.0021973326802253723,0.0024414807558059692,0.0023499252274632454,0.0019531846046447754,0.0014954069629311562,0.0009155552834272385,0.00045777764171361923,0.00033570360392332077,0.00033570360392332077,0.00015259254723787308,-0.0006103515625,-0.001312255859375,-0.001190185546875,-0.00067138671875,-0.000152587890625,0.0005798516795039177,0.0015564439818263054,0.0020142216235399246,0.0016479995101690292,0.0009460737928748131,0.0005188146606087685,0.0004272591322660446,0.0004882961511611938,0.0003662221133708954,0,-0.00048828125,-0.000762939453125,-0.000946044921875,-0.000946044921875,-0.000640869140625,0.0001831110566854477,0.00119022186845541,0.00158696249127388,0.0017090365290641785,0.0020447401329874992,0.002471999265253544,0.0025025177747011185,0.0018921475857496262,0.00119022186845541,0.0004272591322660446,-0.000396728515625,-0.000946044921875,-0.001129150390625,-0.001190185546875,-0.0010986328125,-0.000701904296875,-0.000640869140625,-0.001220703125,-0.001617431640625,-0.001495361328125,-0.00128173828125,-0.0006103515625,0.0003662221133708954,0.0008545182645320892,0.0008239997550845146,0.0007629627361893654,0.0009155552834272385,0.0013733329251408577,0.0017090365290641785,0.0020447401329874992,0.002471999265253544,0.0024109622463583946,0.0019531846046447754,0.0017090365290641785,0.00158696249127388,0.0013733329251408577,0.0014038514345884323,0.0016785180196166039,0.0017090365290641785,0.0014648884534835815,0.0011597033590078354,0.001037629321217537,0.0013122959062457085,0.001342814415693283,0.0008239997550845146,0.0003662221133708954,-0.000091552734375,-0.00067138671875,-0.000823974609375,-0.0009765625,-0.000946044921875,-0.0006103515625,-0.00048828125,-0.00030517578125,-0.0003662109375,-0.000732421875,-0.000762939453125,-0.001312255859375,-0.002166748046875,-0.00213623046875,-0.001708984375,-0.001739501953125,-0.00201416015625,-0.002166748046875,-0.002288818359375,-0.0023193359375,-0.00213623046875,-0.002197265625,-0.00250244140625,-0.002288818359375,-0.001922607421875,-0.001922607421875,-0.001953125,-0.001800537109375,-0.00164794921875,-0.001434326171875,-0.00115966796875,-0.000823974609375,-0.000274658203125,0.00045777764171361923,0.00079348124563694,0.0008239997550845146,0.0007324442267417908,0.0004882961511611938,0.0004272591322660446,0.0005798516795039177,0.0007019257172942162,0.0006103701889514923,0.0006408886983990669,0.0013122959062457085,0.0017090365290641785,0.001342814415693283,0.0013122959062457085,0.0016785180196166039,0.001342814415693283,0.0005798516795039177,0,-0.000457763671875,-0.00091552734375,-0.0010986328125,-0.001373291015625,-0.002227783203125,-0.00274658203125,-0.002532958984375,-0.00262451171875,-0.002685546875,-0.0020751953125,-0.0015869140625,-0.001220703125,-0.0006103515625,0.0001831110566854477,0.0006408886983990669,0.0008239997550845146,0.0014954069629311562,0.002227851189672947,0.0025940733030438423,0.0028992583975195885,0.0028382213786244392,0.002288888208568096,0.0020142216235399246,0.0021668141707777977,0.0018616290763020515,0.0009765923023223877,0.0002441480755805969,0.00009155552834272385,0.0001831110566854477,0.0003662221133708954,0.0011291848495602608,0.0019226660951972008,0.0020447401329874992,0.0018005920574069023,0.0009155552834272385,-0.000152587890625,-0.000579833984375,-0.00054931640625,-0.00067138671875,-0.000823974609375,-0.000823974609375,-0.00152587890625,-0.00274658203125,-0.003387451171875,-0.003692626953125,-0.00360107421875,-0.00238037109375,-0.00128173828125,-0.001129150390625,-0.001068115234375,-0.000732421875,-0.00042724609375,-0.000457763671875,-0.000396728515625,-0.000091552734375,-0.000091552734375,0.00006103701889514923,0.0003662221133708954,-0.000244140625,-0.001068115234375,-0.001373291015625,-0.00164794921875,-0.001617431640625,-0.00115966796875,-0.000823974609375,-0.000518798828125,-0.000030517578125,0.00030518509447574615,0.00033570360392332077,0.0004272591322660446,0.0009460737928748131,0.0014954069629311562,0.0023499252274632454,0.003082369454205036,0.0030518509447574615,0.0028992583975195885,0.002929776906967163,0.0028992583975195885,0.0028992583975195885,0.0030518509447574615,0.0031128879636526108,0.00277718435972929,0.002227851189672947,0.0012817773967981339,0.000030518509447574615,-0.000457763671875,-0.000396728515625,-0.000732421875,-0.001190185546875,-0.001434326171875,-0.001861572265625,-0.002471923828125,-0.0028076171875,-0.002655029296875,-0.0023193359375,-0.001708984375,-0.001190185546875,-0.0013427734375,-0.001739501953125,-0.002197265625,-0.00250244140625,-0.00238037109375,-0.001739501953125,-0.000885009765625,-0.00048828125,-0.00030517578125,-0.000244140625,-0.0006103515625,-0.000885009765625,-0.000579833984375,-0.00006103515625,0.00027466658502817154,0.00039674062281847,0.0004272591322660446,-0.000152587890625,-0.00091552734375,-0.000732421875,-0.00042724609375,-0.00054931640625,-0.000518798828125,-0.000518798828125,-0.000732421875,-0.001068115234375,-0.001190185546875,-0.00091552734375,-0.00030517578125,0.0004882961511611938,0.0010986663401126862,0.0009460737928748131,0.0007629627361893654,0.0011597033590078354,0.0014954069629311562,0.0016785180196166039,0.0019531846046447754,0.0019531846046447754,0.0014954069629311562,0.0012512588873505592,0.001037629321217537,0.0004882961511611938,0.00045777764171361923,0.00119022186845541,0.0016785180196166039,0.0017090365290641785,0.0010071108117699623,0.00015259254723787308,0,0.00009155552834272385,0.00039674062281847,0.0010681478306651115,0.001434369944036007,0.0008545182645320892,-0.00018310546875,-0.00091552734375,-0.0008544921875,-0.000213623046875,0.0005493331700563431,0.0011597033590078354,0.0011291848495602608,0.0006408886983990669,0.0003662221133708954,0.0004272591322660446,0.0008239997550845146,0.0016785180196166039,0.002624591812491417,0.002868739888072014,0.0021668141707777977,0.0010071108117699623,0.00027466658502817154,0.00012207403779029846,0.00027466658502817154,0.0006408886983990669,0.00079348124563694,0.0001831110566854477,-0.001190185546875,-0.00250244140625,-0.003021240234375,-0.002838134765625,-0.002197265625,-0.00115966796875,-0.000152587890625,-0.000213623046875,-0.0010986328125,-0.0013427734375,-0.001251220703125,-0.001251220703125,-0.00042724609375,0.0006408886983990669,0.0007019257172942162,0,-0.00091552734375,-0.001495361328125,-0.001434326171875,-0.0008544921875,0,0.0002441480755805969,-0.000213623046875,-0.0006103515625,-0.00079345703125,-0.001129150390625,-0.001068115234375,-0.000274658203125,0.0007019257172942162,0.0012512588873505592,0.0010986663401126862,0.00079348124563694,0.0007019257172942162,0.0005798516795039177,0.0005188146606087685,0.0006103701889514923,0.0005493331700563431,-0.000030517578125,-0.0008544921875,-0.001220703125,-0.001220703125,-0.0008544921875,0.00027466658502817154,0.0012817773967981339,0.0012512588873505592,0.0008545182645320892,0.0004882961511611938,0.00009155552834272385,-0.0001220703125,0.00006103701889514923,0.0006103701889514923,0.0007019257172942162,0.00009155552834272385,-0.000518798828125,-0.000579833984375,-0.00042724609375,0.000030518509447574615,0.0010071108117699623,0.0014954069629311562,0.0008239997550845146,-0.0001220703125,-0.000823974609375,-0.00115966796875,-0.00048828125,0.0007629627361893654,0.001434369944036007,0.00158696249127388,0.0012512588873505592,0.0005493331700563431,0.00012207403779029846,0.00015259254723787308,0.00045777764171361923,0.0005493331700563431,0.00009155552834272385,-0.001068115234375,-0.00262451171875,-0.00347900390625,-0.003082275390625,-0.001617431640625,0.00027466658502817154,0.001831110566854477,0.0020142216235399246,0.0013122959062457085,0.0007019257172942162,0.0004272591322660446,0.0005188146606087685,0.0008239997550845146,0.0008850367739796638,0.00012207403779029846,-0.001220703125,-0.002105712890625,-0.002471923828125,-0.001953125,-0.0003662109375,0.0009155552834272385,0.0010986663401126862,0.0005798516795039177,-0.000091552734375,-0.0006103515625,-0.000335693359375,0.0007629627361893654,0.001831110566854477,0.0024414807558059692,0.00277718435972929,0.0023194067180156708,0.0015564439818263054,0.0014648884534835815,0.0018005920574069023,0.0020447401329874992,0.0019531846046447754,0.0012817773967981339,0.00006103701889514923,-0.001220703125,-0.00189208984375,-0.0020751953125,-0.002105712890625,-0.00140380859375,-0.000091552734375,0.0005493331700563431,0.0005188146606087685,0.0006103701889514923,0.0005188146606087685,0.00015259254723787308,0.0003662221133708954,0.0006408886983990669,0,-0.000823974609375,-0.00152587890625,-0.002593994140625,-0.0029296875,-0.00201416015625,-0.00091552734375,-0.00018310546875,0.0002136295661330223,-0.000030517578125,-0.0010986328125,-0.002197265625,-0.002532958984375,-0.002197265625,-0.001434326171875,-0.0006103515625,-0.000823974609375,-0.00189208984375,-0.002166748046875,-0.001922607421875,-0.0015869140625,-0.000518798828125,0.00033570360392332077,0.00009155552834272385,-0.000823974609375,-0.002105712890625,-0.002899169921875,-0.00250244140625,-0.000885009765625,0.0010071108117699623,0.0019531846046447754,0.0019226660951972008,0.0014648884534835815,0.0011291848495602608,0.0014954069629311562,0.0024414807558059692,0.0036011841148138046,0.003997924737632275,0.00317392498254776,0.0017700735479593277,0.00009155552834272385,-0.000640869140625,0.00009155552834272385,0.001434369944036007,0.0027466658502817154,0.0031434064731001854,0.002533036284148693,0.001434369944036007,0.00015259254723787308,-0.0003662109375,0.00006103701889514923,0.0009765923023223877,0.0016479995101690292,0.0018616290763020515,0.0016479995101690292,0.001037629321217537,0.0007629627361893654,0.0012817773967981339,0.0020142216235399246,0.0024109622463583946,0.0022583696991205215,0.0016785180196166039,0.0007629627361893654,-0.000274658203125,-0.000579833984375,-0.000030517578125,0.0003662221133708954,0.00045777764171361923,0.0006103701889514923,0.0004882961511611938,-0.000213623046875,-0.000396728515625,0.0003662221133708954,0.0009155552834272385,0.0008850367739796638,0.0006714072078466415,-0.00018310546875,-0.00164794921875,-0.002593994140625,-0.002777099609375,-0.002471923828125,-0.001434326171875,-0.000091552734375,0.00039674062281847,0.0002441480755805969,0.00009155552834272385,0,0.0001831110566854477,0.0007629627361893654,0.0013733329251408577,0.0014954069629311562,0.0008239997550845146,0,-0.000213623046875,0.0001831110566854477,0.0008850367739796638,0.0016174810007214546,0.0016785180196166039,0.0004882961511611938,-0.0010986328125,-0.00225830078125,-0.002593994140625,-0.00201416015625,-0.00115966796875,-0.000732421875,-0.000946044921875,-0.00189208984375,-0.00286865234375,-0.002777099609375,-0.00164794921875,-0.00018310546875,0.0009460737928748131,0.0009155552834272385,-0.00018310546875,-0.0015869140625,-0.0023193359375,-0.00189208984375,-0.00054931640625,0.0012207403779029846,0.002288888208568096,0.00158696249127388,0.00012207403779029846,-0.000732421875,-0.00067138671875,0.00015259254723787308,0.0011597033590078354,0.001739555038511753,0.0009460737928748131,-0.001190185546875,-0.0030517578125,-0.003875732421875,-0.003631591796875,-0.001953125,0.00006103701889514923,0.0005798516795039177,-0.00018310546875,-0.0013427734375,-0.001922607421875,-0.001220703125,0.0002136295661330223,0.0017700735479593277,0.002868739888072014,0.0024414807558059692,0.0008545182645320892,-0.000274658203125,-0.000335693359375,0.0006408886983990669,0.0020142216235399246,0.0028077028691768646,0.0018005920574069023,-0.000732421875,-0.003021240234375,-0.003997802734375,-0.003631591796875,-0.002105712890625,-0.00018310546875,0.00079348124563694,0,-0.0015869140625,-0.00244140625,-0.00213623046875,-0.000518798828125,0.0016174810007214546,0.003082369454205036,0.0028382213786244392,0.0011597033590078354,-0.000335693359375,-0.00152587890625,-0.00189208984375,-0.00030517578125,0.0018921475857496262,0.002685628831386566,0.0018616290763020515,0.0007019257172942162,-0.000274658203125,-0.00054931640625,0.0003662221133708954,0.0015564439818263054,0.0021668141707777977,0.002075258642435074,0.00079348124563694,-0.0009765625,-0.001983642578125,-0.001556396484375,0.00027466658502817154,0.0020142216235399246,0.0020447401329874992,0.0003662221133708954,-0.001953125,-0.003509521484375,-0.003509521484375,-0.00213623046875,0.000030518509447574615,0.0018616290763020515,0.001831110566854477,0,-0.001922607421875,-0.00286865234375,-0.002227783203125,0.00012207403779029846,0.0025940733030438423,0.0028382213786244392,0.0013733329251408577,-0.000518798828125,-0.00250244140625,-0.0032958984375,-0.0020751953125,0.0001831110566854477,0.0016785180196166039,0.001342814415693283,-0.0003662109375,-0.00262451171875,-0.00421142578125,-0.00372314453125,-0.001678466796875,-0.0001220703125,0.0005493331700563431,0.0005798516795039177,-0.00042724609375,-0.001251220703125,-0.00054931640625,0.0012207403779029846,0.0028382213786244392,0.00357066560536623,0.0032959990203380585,0.0016479995101690292,-0.000274658203125,-0.00079345703125,-0.000152587890625,0.0008545182645320892,0.0023194067180156708,0.0030518509447574615,0.00198370311409235,0.0002136295661330223,-0.000640869140625,-0.000335693359375,0.0008239997550845146,0.00238044373691082,0.0034485915675759315,0.003082369454205036,0.0016174810007214546,0.000030518509447574615,-0.001220703125,-0.001495361328125,-0.000213623046875,0.001434369944036007,0.0020447401329874992,0.0015564439818263054,0.0007019257172942162,0,-0.000091552734375,0.00033570360392332077,0.0006714072078466415,0.0007324442267417908,0.00045777764171361923,-0.00054931640625,-0.00146484375,-0.00115966796875,-0.000244140625,0.0003662221133708954,0.0006714072078466415,0.00015259254723787308,-0.001312255859375,-0.002166748046875,-0.001708984375,-0.001220703125,-0.000762939453125,0.0001831110566854477,0.0007324442267417908,0.00015259254723787308,-0.000885009765625,-0.001495361328125,-0.001220703125,-0.000244140625,0.0009155552834272385,0.0012817773967981339,0.0004272591322660446,-0.0006103515625,-0.001220703125,-0.001251220703125,-0.000823974609375,-0.0001220703125,0.0005188146606087685,0.0006103701889514923,-0.000091552734375,-0.000732421875,-0.00067138671875,0,0.0007324442267417908,0.0013122959062457085,0.00119022186845541,-0.0001220703125,-0.00146484375,-0.001800537109375,-0.001556396484375,-0.000701904296875,0.0006103701889514923,0.0012207403779029846,0.0006103701889514923,-0.000701904296875,-0.00177001953125,-0.002227783203125,-0.001617431640625,-0.000030517578125,0.001342814415693283,0.001831110566854477,0.0011597033590078354,-0.00018310546875,-0.000946044921875,-0.000640869140625,0.0006408886983990669,0.0019226660951972008,0.0020447401329874992,0.0011597033590078354,-0.00042724609375,-0.00189208984375,-0.002227783203125,-0.001708984375,-0.000518798828125,0.0005493331700563431,0.0005798516795039177,0,-0.000732421875,-0.00079345703125,0.000030518509447574615,0.0009155552834272385,0.001342814415693283,0.0009460737928748131,-0.000030517578125,-0.00091552734375,-0.00115966796875,-0.0006103515625,0.00027466658502817154,0.0010071108117699623,0.0011291848495602608,0.0001831110566854477,-0.001129150390625,-0.00152587890625,-0.00115966796875,-0.000579833984375,0.0002441480755805969,0.0010986663401126862,0.0013122959062457085,0.0010071108117699623,0.0008545182645320892,0.0007019257172942162,0.0007019257172942162,0.0014954069629311562,0.0021668141707777977,0.0018921475857496262,0.0009460737928748131,-0.000030517578125,-0.00054931640625,-0.0001220703125,0.0011291848495602608,0.0022583696991205215,0.0023499252274632454,0.0015259254723787308,0.0002136295661330223,-0.000946044921875,-0.001373291015625,-0.0006103515625,0.0008850367739796638,0.002075258642435074,0.0025025177747011185,0.001831110566854477,0.0004272591322660446,-0.000579833984375,-0.00079345703125,-0.000091552734375,0.0011291848495602608,0.0020142216235399246,0.0017700735479593277,0.0005798516795039177,-0.000274658203125,-0.000213623046875,0.0006408886983990669,0.001831110566854477,0.002288888208568096,0.0017700735479593277,0.00039674062281847,-0.00152587890625,-0.002838134765625,-0.00299072265625,-0.0023193359375,-0.001190185546875,-0.000396728515625,-0.000579833984375,-0.001739501953125,-0.002685546875,-0.002532958984375,-0.001983642578125,-0.000946044921875,0.0005493331700563431,0.0012817773967981339,0.0008850367739796638,0.00033570360392332077,0.00027466658502817154,0.00045777764171361923,0.0008545182645320892,0.0016479995101690292,0.002227851189672947,0.0017700735479593277,0.0007324442267417908,0.0001831110566854477,-0.000152587890625,-0.0003662109375,-0.000152587890625,0,-0.000335693359375,-0.0009765625,-0.001617431640625,-0.00189208984375,-0.001708984375,-0.00140380859375,-0.001068115234375,-0.000885009765625,-0.001312255859375,-0.00201416015625,-0.00213623046875,-0.0013427734375,-0.000579833984375,0,0.0005798516795039177,0.0004272591322660446,-0.00030517578125,-0.0006103515625,0,0.0011291848495602608,0.0020447401329874992,0.0027161473408341408,0.0026551103219389915,0.0012207403779029846,-0.00030517578125,-0.000823974609375,-0.000640869140625,-0.00018310546875,0.0005493331700563431,0.00079348124563694,-0.00018310546875,-0.00146484375,-0.001800537109375,-0.001129150390625,-0.00006103515625,0.0006408886983990669,0.0007324442267417908,0.00012207403779029846,-0.0009765625,-0.001556396484375,-0.001068115234375,0.00012207403779029846,0.0016785180196166039,0.0029602954164147377,0.0029602954164147377,0.0017700735479593277,0.0004272591322660446,-0.00018310546875,0.00012207403779029846,0.0007629627361893654,0.0008545182645320892,0.0005798516795039177,-0.000274658203125,-0.001708984375,-0.002471923828125,-0.002105712890625,-0.00115966796875,-0.000213623046875,-0.000030517578125,-0.00103759765625,-0.002532958984375,-0.003326416015625,-0.003082275390625,-0.001922607421875,-0.00018310546875,0.0012207403779029846,0.0014648884534835815,0.0007324442267417908,-0.000152587890625,-0.000640869140625,-0.00018310546875,0.0010986663401126862,0.0020142216235399246,0.0018616290763020515,0.00119022186845541,0,-0.00146484375,-0.00201416015625,-0.001068115234375,0.00009155552834272385,0.0006408886983990669,0.0008239997550845146,0.00015259254723787308,-0.0015869140625,-0.002593994140625,-0.00213623046875,-0.00140380859375,-0.00067138671875,0.00012207403779029846,0,-0.00115966796875,-0.0018310546875,-0.001800537109375,-0.00140380859375,-0.00006103515625,0.00158696249127388,0.0020447401329874992,0.0013733329251408577,0.00039674062281847,-0.000579833984375,-0.000701904296875,0.0005188146606087685,0.00198370311409235,0.0025025177747011185,0.00238044373691082,0.0016785180196166039,0.00015259254723787308,-0.000701904296875,0.00006103701889514923,0.001434369944036007,0.002227851189672947,0.0022583696991205215,0.0014648884534835815,-0.000152587890625,-0.001373291015625,-0.00115966796875,-0.0006103515625,0.00015259254723787308,0.0014648884534835815,0.001831110566854477,0.0009460737928748131,-0.00006103515625,-0.000518798828125,-0.000518798828125,-0.000244140625,0.0002441480755805969,0.00012207403779029846,-0.000701904296875,-0.001434326171875,-0.00177001953125,-0.001556396484375,-0.000732421875,0.0005798516795039177,0.0016479995101690292,0.0014954069629311562,0.0006103701889514923,-0.000274658203125,-0.000946044921875,-0.001007080078125,-0.0009765625,-0.00115966796875,-0.001495361328125,-0.002166748046875,-0.00250244140625,-0.00201416015625,-0.001373291015625,-0.0008544921875,-0.000396728515625,-0.00018310546875,-0.0003662109375,-0.000518798828125,-0.000396728515625,-0.000091552734375,0.00045777764171361923,0.00119022186845541,0.0014038514345884323,0.0009460737928748131,0.0006408886983990669,0.0008239997550845146,0.0010681478306651115,0.0012817773967981339,0.0015259254723787308,0.001434369944036007,0.0009155552834272385,0.00030518509447574615,0.000030518509447574615,0,0.00012207403779029846,0.0008850367739796638,0.0014648884534835815,0.0010681478306651115,0.0005188146606087685,0.00009155552834272385,-0.0001220703125,-0.000152587890625,-0.000213623046875,-0.0006103515625,-0.001129150390625,-0.001434326171875,-0.00146484375,-0.001190185546875,-0.000823974609375,-0.000579833984375,-0.000152587890625,0.00030518509447574615,0.0008850367739796638,0.0012817773967981339,0.0009460737928748131,0.0005798516795039177,0.00033570360392332077,-0.00018310546875,-0.000823974609375,-0.001129150390625,-0.000518798828125,0.00027466658502817154,0.0006408886983990669,0.0008239997550845146,0.0008545182645320892,0.0009765923023223877,0.001434369944036007,0.0015564439818263054,0.0014038514345884323,0.0014954069629311562,0.001831110566854477,0.0019226660951972008,0.0014954069629311562,0.0009765923023223877,0.0005188146606087685,0,-0.000274658203125,-0.000213623046875,-0.000335693359375,-0.000579833984375,-0.000946044921875,-0.001617431640625,-0.002288818359375,-0.002777099609375,-0.003021240234375,-0.002685546875,-0.001953125,-0.001556396484375,-0.00146484375,-0.00146484375,-0.001617431640625,-0.0015869140625,-0.00091552734375,-0.000091552734375,0.000030518509447574615,-0.000274658203125,-0.00042724609375,-0.000640869140625,-0.000762939453125,0.00006103701889514923,0.0017090365290641785,0.0033570360392332077,0.004119998775422573,0.003997924737632275,0.003723258152604103,0.0032044434919953346,0.002533036284148693,0.0023194067180156708,0.002288888208568096,0.001739555038511753,0.0009460737928748131,0.00012207403779029846,-0.00079345703125,-0.00140380859375,-0.0010986328125,-0.000152587890625,0.00045777764171361923,0.00009155552834272385,-0.000579833984375,-0.0010986328125,-0.001434326171875,-0.001434326171875,-0.00146484375,-0.00140380859375,-0.001129150390625,-0.001129150390625,-0.001068115234375,-0.0006103515625,0,0.0012512588873505592,0.0022583696991205215,0.0018921475857496262,0.001037629321217537,0.00039674062281847,-0.00006103515625,-0.00042724609375,-0.000518798828125,-0.00030517578125,-0.00018310546875,-0.000335693359375,-0.0006103515625,-0.001190185546875,-0.001617431640625,-0.001373291015625,-0.000640869140625,-0.00006103515625,0,-0.000213623046875,-0.000457763671875,-0.000701904296875,-0.00054931640625,-0.000091552734375,0.0005493331700563431,0.00119022186845541,0.0010071108117699623,0.0001831110566854477,-0.000518798828125,-0.000885009765625,-0.000823974609375,-0.000457763671875,0.00012207403779029846,0.0007019257172942162,0.00119022186845541,0.001739555038511753,0.0017090365290641785,0.001342814415693283,0.0017090365290641785,0.0024109622463583946,0.0024414807558059692,0.0021057771518826485,0.002075258642435074,0.001739555038511753,0.0009155552834272385,0.0003662221133708954,0,-0.000213623046875,0.00009155552834272385,0.0006408886983990669,0.0006714072078466415,0.0007629627361893654,0.0016174810007214546,0.00238044373691082,0.002624591812491417,0.0027466658502817154,0.002533036284148693,0.0018616290763020515,0.0011291848495602608,0.0005493331700563431,-0.000152587890625,-0.0008544921875,-0.001129150390625,-0.00164794921875,-0.002655029296875,-0.003143310546875,-0.00286865234375,-0.002288818359375,-0.00177001953125,-0.0010986328125,-0.00030517578125,0.00006103701889514923,0.0005188146606087685,0.0013733329251408577,0.0018616290763020515,0.002075258642435074,0.002227851189672947,0.0015259254723787308,0.000030518509447574615,-0.001068115234375,-0.00146484375,-0.001495361328125,-0.001251220703125,-0.0010986328125,-0.001190185546875,-0.0008544921875,-0.00006103515625,0.00033570360392332077,0.0007324442267417908,0.0017700735479593277,0.002471999265253544,0.0021057771518826485,0.00119022186845541,0.00015259254723787308,-0.000946044921875,-0.00177001953125,-0.00189208984375,-0.002410888671875,-0.0032958984375,-0.003173828125,-0.002777099609375,-0.002960205078125,-0.002777099609375,-0.00213623046875,-0.00146484375,-0.00079345703125,-0.000213623046875,0.000030518509447574615,0.00009155552834272385,0.00027466658502817154,0.00045777764171361923,0.00012207403779029846,-0.000335693359375,-0.00048828125,-0.00079345703125,-0.001251220703125,-0.001708984375,-0.00213623046875,-0.001953125,-0.00128173828125,-0.000701904296875,-0.000335693359375,-0.000274658203125,-0.00048828125,-0.000732421875,-0.000823974609375,-0.001007080078125,-0.001220703125,-0.001129150390625,-0.001434326171875,-0.002227783203125,-0.00262451171875,-0.00244140625,-0.00177001953125,-0.0009765625,-0.000396728515625,-0.000091552734375,-0.0001220703125,-0.000030517578125,0.00012207403779029846,0.00030518509447574615,0.00079348124563694,0.001342814415693283,0.0017090365290641785,0.001739555038511753,0.001342814415693283,0.0009765923023223877,0.00045777764171361923,-0.000030517578125,-0.00006103515625,-0.000091552734375,-0.00018310546875,-0.0003662109375,-0.000762939453125,-0.001129150390625,-0.001251220703125,-0.000579833984375,0.0002441480755805969,0.0007629627361893654,0.0012512588873505592,0.0013733329251408577,0.0011291848495602608,0.0008239997550845146,0.0005493331700563431,0.0006103701889514923,0.0009765923023223877,0.0011291848495602608,0.0005798516795039177,-0.000244140625,-0.0008544921875,-0.001190185546875,-0.000885009765625,-0.00006103515625,0.0004272591322660446,0.00033570360392332077,-0.0001220703125,-0.00067138671875,-0.001434326171875,-0.00189208984375,-0.001251220703125,-0.000213623046875,0.00033570360392332077,0.0007324442267417908,0.0006714072078466415,0.00039674062281847,0.00030518509447574615,0.0005798516795039177,0.0014954069629311562,0.0025635547935962677,0.0029908139258623123,0.002929776906967163,0.002533036284148693,0.0021973326802253723,0.0020447401329874992,0.0021973326802253723,0.0025940733030438423,0.002868739888072014,0.002685628831386566,0.0017700735479593277,0.0005798516795039177,-0.000274658203125,-0.000885009765625,-0.001007080078125,-0.0010986328125,-0.001739501953125,-0.002197265625,-0.00225830078125,-0.0023193359375,-0.001983642578125,-0.00103759765625,0.00012207403779029846,0.0007324442267417908,0.0005798516795039177,0.00033570360392332077,0,-0.000335693359375,-0.000152587890625,0.0003662221133708954,0.0009155552834272385,0.0011291848495602608,0.0007324442267417908,0.0002441480755805969,0.00012207403779029846,0.00039674062281847,0.0008850367739796638,0.0012207403779029846,0.0009460737928748131,0.00015259254723787308,-0.00067138671875,-0.001190185546875,-0.001068115234375,-0.0003662109375,0.0005798516795039177,0.0013122959062457085,0.0013733329251408577,0.0010071108117699623,0.0006103701889514923,0.00030518509447574615,0,-0.0003662109375,-0.00091552734375,-0.001983642578125,-0.00299072265625,-0.003387451171875,-0.003204345703125,-0.002288818359375,-0.0009765625,0.00012207403779029846,0.0009765923023223877,0.0011291848495602608,0.0006408886983990669,0.0001831110566854477,0.00027466658502817154,0.0006714072078466415,0.00119022186845541,0.0017700735479593277,0.00158696249127388,0.0007324442267417908,0.00033570360392332077,0.00033570360392332077,0.0002441480755805969,0.0005188146606087685,0.001037629321217537,0.0005798516795039177,-0.0008544921875,-0.002227783203125,-0.002960205078125,-0.003082275390625,-0.002655029296875,-0.001434326171875,0.000030518509447574615,0.0006714072078466415,0.0004882961511611938,0,-0.00054931640625,-0.00054931640625,0.0002441480755805969,0.0011291848495602608,0.0010681478306651115,0.00033570360392332077,-0.000396728515625,-0.00115966796875,-0.001312255859375,-0.0003662109375,0.0012207403779029846,0.002868739888072014,0.0034485915675759315,0.002624591812491417,0.0011597033590078354,-0.000152587890625,-0.00067138671875,-0.000244140625,0.00045777764171361923,0.0010986663401126862,0.0011291848495602608,0.0006408886983990669,0.0002136295661330223,0.0001831110566854477,0.0011291848495602608,0.002868739888072014,0.003997924737632275,0.003723258152604103,0.00238044373691082,0.0008850367739796638,-0.000335693359375,-0.000762939453125,-0.000152587890625,0.0006408886983990669,0.0013122959062457085,0.0016785180196166039,0.001037629321217537,-0.000335693359375,-0.00146484375,-0.001861572265625,-0.001739501953125,-0.001251220703125,-0.001220703125,-0.002471923828125,-0.003997802734375,-0.0042724609375,-0.003509521484375,-0.002044677734375,0.00015259254723787308,0.0020447401329874992,0.0025635547935962677,0.002136295661330223,0.0014648884534835815,0.0008850367739796638,0.0008545182645320892,0.0017090365290641785,0.002533036284148693,0.002136295661330223,0.0010681478306651115,-0.000030517578125,-0.001068115234375,-0.001373291015625,-0.00054931640625,0.0005188146606087685,0.0010986663401126862,0.0010071108117699623,0.00009155552834272385,-0.0013427734375,-0.002105712890625,-0.001617431640625,-0.000823974609375,0,0.0008545182645320892,0.0006103701889514923,-0.0006103515625,-0.001495361328125,-0.00177001953125,-0.001373291015625,-0.000335693359375,0.0004272591322660446,0.00027466658502817154,-0.000457763671875,-0.000946044921875,-0.00128173828125,-0.001312255859375,-0.0001220703125,0.00119022186845541,0.0016479995101690292,0.0017090365290641785,0.001342814415693283,0.0007324442267417908,0.00079348124563694,0.0014648884534835815,0.002227851189672947,0.0029602954164147377,0.0036317026242613792,0.003662221133708954,0.0025940733030438423,0.001434369944036007,0.0005493331700563431,-0.00006103515625,-0.000244140625,-0.000457763671875,-0.00091552734375,-0.00152587890625,-0.0020751953125,-0.002197265625,-0.002227783203125,-0.002044677734375,-0.00189208984375,-0.0023193359375,-0.0028076171875,-0.003082275390625,-0.003143310546875,-0.002655029296875,-0.001861572265625,-0.001190185546875,-0.000732421875,-0.00030517578125,0.0002441480755805969,0.0010986663401126862,0.0021973326802253723,0.002929776906967163,0.003082369454205036,0.002929776906967163,0.002471999265253544,0.001831110566854477,0.0012512588873505592,0.0010986663401126862,0.0012207403779029846,0.0008850367739796638,0.00012207403779029846,-0.000762939453125,-0.001556396484375,-0.00189208984375,-0.00152587890625,-0.00079345703125,-0.000457763671875,-0.00030517578125,0,0.00009155552834272385,0.00039674062281847,0.0014038514345884323,0.0024109622463583946,0.0029602954164147377,0.003021332435309887,0.0021668141707777977,0.0007019257172942162,-0.000396728515625,-0.0010986328125,-0.0013427734375,-0.001068115234375,-0.0008544921875,-0.0009765625,-0.0013427734375,-0.001678466796875,-0.001220703125,-0.00048828125,0.000030518509447574615,0.0005493331700563431,0.0006408886983990669,0.0003662221133708954,0.00012207403779029846,-0.00018310546875,-0.000335693359375,-0.000213623046875,0.00009155552834272385,0.0006714072078466415,0.0008850367739796638,0.00079348124563694,0.0005798516795039177,0.0001831110566854477,-0.00006103515625,-0.0001220703125,-0.00018310546875,-0.000244140625,-0.0006103515625,-0.0010986328125,-0.001251220703125,-0.001251220703125,-0.000946044921875,-0.000640869140625,-0.000762939453125,-0.001129150390625,-0.002044677734375,-0.00323486328125,-0.003875732421875,-0.003753662109375,-0.00311279296875,-0.00225830078125,-0.0015869140625,-0.00128173828125,-0.0008544921875,0,0.0007629627361893654,0.0016785180196166039,0.0028382213786244392,0.003479110077023506,0.003082369454205036,0.002136295661330223,0.00119022186845541,0.00030518509447574615,-0.00030517578125,-0.00030517578125,-0.000274658203125,-0.00054931640625,-0.001312255859375,-0.00213623046875,-0.002410888671875,-0.00250244140625,-0.002410888671875,-0.002044677734375,-0.001861572265625,-0.00164794921875,-0.00103759765625,-0.000335693359375,0.00030518509447574615,0.0010986663401126862,0.002075258642435074,0.00238044373691082,0.0017700735479593277,0.0009155552834272385,0.000030518509447574615,-0.000823974609375,-0.001312255859375,-0.00140380859375,-0.00128173828125,-0.001129150390625,-0.001220703125,-0.00146484375,-0.001220703125,-0.00054931640625,0.00015259254723787308,0.0009155552834272385,0.0010681478306651115,0.0005493331700563431,-0.00006103515625,-0.000762939453125,-0.001190185546875,-0.00115966796875,-0.000823974609375,-0.00030517578125,-0.00006103515625,-0.0001220703125,-0.0001220703125,0,0.0006103701889514923,0.0015259254723787308,0.0021057771518826485,0.002136295661330223,0.0019226660951972008,0.0014038514345884323,0.0006408886983990669,0.0004882961511611938,0.0006103701889514923,0.0004272591322660446,0.00039674062281847,0.00027466658502817154,-0.00054931640625,-0.00146484375,-0.001617431640625,-0.0013427734375,-0.00103759765625,-0.000457763671875,-0.0001220703125,-0.00030517578125,0.00006103701889514923,0.0009765923023223877,0.0013122959062457085,0.0015259254723787308,0.0021668141707777977,0.0024414807558059692,0.0018921475857496262,0.0011597033590078354,0.00039674062281847,-0.00030517578125,-0.000518798828125,-0.000274658203125,-0.000152587890625,-0.00018310546875,0.000030518509447574615,0.00030518509447574615,0.00033570360392332077,0.0007629627361893654,0.0015259254723787308,0.0019226660951972008,0.002136295661330223,0.0020447401329874992,0.0014954069629311562,0.0005188146606087685,0.000030518509447574615,0.00033570360392332077,0.00033570360392332077,0.0002136295661330223,0.00039674062281847,0.0001831110566854477,0,0.00039674062281847,0.001037629321217537,0.0015259254723787308,0.001831110566854477,0.0019531846046447754,0.0012512588873505592,0.00006103701889514923,-0.000274658203125,-0.000091552734375,0.000030518509447574615,0.00012207403779029846,-0.000091552734375,-0.000885009765625,-0.001678466796875,-0.001678466796875,-0.001220703125,-0.0009765625,-0.00054931640625,-0.000335693359375,-0.00079345703125,-0.0009765625,-0.000885009765625,-0.00091552734375,-0.000396728515625,0.00045777764171361923,0.0006103701889514923,0.000030518509447574615,-0.0006103515625,-0.001190185546875,-0.00152587890625,-0.001373291015625,-0.00103759765625,-0.000885009765625,-0.00048828125,-0.00006103515625,-0.000335693359375,-0.0006103515625,-0.000091552734375,0.0007019257172942162,0.0013733329251408577,0.001831110566854477,0.0017700735479593277,0.0011597033590078354,0.00030518509447574615,-0.000213623046875,-0.000244140625,-0.00018310546875,0.00012207403779029846,0.0006714072078466415,0.0009155552834272385,0.0008239997550845146,0.0005493331700563431,0.0005188146606087685,0.0006408886983990669,0.0008545182645320892,0.0010681478306651115,0.0006408886983990669,-0.00006103515625,-0.000732421875,-0.001312255859375,-0.001556396484375,-0.001861572265625,-0.001922607421875,-0.00152587890625,-0.0013427734375,-0.00140380859375,-0.001068115234375,-0.00054931640625,-0.00030517578125,-0.000213623046875,-0.00006103515625,-0.0003662109375,-0.0008544921875,-0.00079345703125,-0.000762939453125,-0.000732421875,-0.000518798828125,-0.00054931640625,-0.000579833984375,-0.000701904296875,-0.0009765625,-0.001220703125,-0.001556396484375,-0.001678466796875,-0.00152587890625,-0.0013427734375,-0.001129150390625,-0.000946044921875,-0.000762939453125,-0.000823974609375,-0.000823974609375,-0.00042724609375,-0.000030517578125,0.00033570360392332077,0.0006103701889514923,0.0004882961511611938,0.00012207403779029846,-0.00018310546875,-0.000274658203125,0,0.0007324442267417908,0.0016479995101690292,0.00238044373691082,0.0029602954164147377,0.0031434064731001854,0.003082369454205036,0.0031128879636526108,0.003082369454205036,0.0029602954164147377,0.002533036284148693,0.0019226660951972008,0.0013122959062457085,0.0005188146606087685,0,0.00009155552834272385,0.00045777764171361923,0.0008545182645320892,0.0011291848495602608,0.0009460737928748131,0.0004272591322660446,-0.00030517578125,-0.000946044921875,-0.00091552734375,-0.00054931640625,-0.000091552734375,0.00033570360392332077,0.0003662221133708954,-0.000152587890625,-0.00079345703125,-0.000946044921875,-0.00048828125,0.0002441480755805969,0.0008545182645320892,0.0012512588873505592,0.0014038514345884323,0.0010681478306651115,0.0005798516795039177,0.0004882961511611938,0.0004272591322660446,0.0003662221133708954,0.0004882961511611938,0.00039674062281847,0.00006103701889514923,-0.00030517578125,-0.000701904296875,-0.000946044921875,-0.00103759765625,-0.001129150390625,-0.001220703125,-0.00128173828125,-0.001220703125,-0.00103759765625,-0.00054931640625,-0.000030517578125,0.0001831110566854477,0.0005188146606087685,0.0009460737928748131,0.0010986663401126862,0.0009765923023223877,0.0007019257172942162,0.00006103701889514923,-0.00091552734375,-0.00140380859375,-0.001007080078125,-0.00067138671875,-0.000885009765625,-0.001068115234375,-0.00091552734375,-0.00091552734375,-0.001007080078125,-0.000823974609375,-0.000579833984375,-0.000335693359375,-0.000030517578125,-0.00006103515625,-0.0006103515625,-0.001068115234375,-0.00103759765625,-0.000701904296875,-0.000274658203125,0.00009155552834272385,0.0004882961511611938,0.0006714072078466415,0.00045777764171361923,0.00009155552834272385,-0.000030517578125,0.0002136295661330223,0.0007019257172942162,0.0008239997550845146,0.0007324442267417908,0.0008545182645320892,0.00079348124563694,0.0006103701889514923,0.0010986663401126862,0.0018005920574069023,0.0021668141707777977,0.0024109622463583946,0.0026551103219389915,0.00238044373691082,0.001434369944036007,0.0009155552834272385,0.0012817773967981339,0.0014954069629311562,0.0013733329251408577,0.0016785180196166039,0.002075258642435074,0.0020142216235399246,0.0017700735479593277,0.0014648884534835815,0.0008239997550845146,0.0002441480755805969,0.0002136295661330223,0.00012207403779029846,-0.000213623046875,-0.000457763671875,-0.000762939453125,-0.001251220703125,-0.00140380859375,-0.00103759765625,-0.00054931640625,-0.000091552734375,-0.000091552734375,-0.00042724609375,-0.000701904296875,-0.000823974609375,-0.00054931640625,-0.000091552734375,0.0001831110566854477,0.00027466658502817154,0.00015259254723787308,0,-0.00042724609375,-0.001068115234375,-0.001129150390625,-0.000823974609375,-0.000762939453125,-0.001007080078125,-0.001373291015625,-0.00201416015625,-0.00250244140625,-0.002105712890625,-0.001678466796875,-0.001617431640625,-0.001068115234375,-0.000213623046875,0,-0.000274658203125,-0.00067138671875,-0.001007080078125,-0.001190185546875,-0.00115966796875,-0.001373291015625,-0.00177001953125,-0.00146484375,-0.000823974609375,-0.0009765625,-0.001495361328125,-0.00152587890625,-0.001495361328125,-0.001495361328125,-0.0010986328125,-0.00054931640625,-0.0006103515625,-0.000762939453125,-0.000457763671875,-0.00067138671875,-0.00103759765625,-0.000213623046875,0.0007019257172942162,0.0008850367739796638,0.0009460737928748131,0.0006103701889514923,-0.0001220703125,-0.000396728515625,-0.000152587890625,-0.000030517578125,0,0.0004882961511611938,0.0007019257172942162,0.00033570360392332077,0.0002441480755805969,0.00045777764171361923,0.0004272591322660446,0.0006408886983990669,0.0009155552834272385,0.00045777764171361923,-0.000274658203125,-0.0010986328125,-0.00201416015625,-0.00238037109375,-0.001922607421875,-0.001190185546875,-0.000946044921875,-0.00054931640625,0.0003662221133708954,0.0005493331700563431,0.0005493331700563431,0.0014954069629311562,0.002227851189672947,0.00238044373691082,0.0025025177747011185,0.0021973326802253723,0.00158696249127388,0.0008850367739796638,0.00033570360392332077,0.00015259254723787308,0.00039674062281847,0.0006714072078466415,0.0005188146606087685,0.0002441480755805969,-0.00006103515625,-0.00042724609375,-0.00030517578125,0.0002441480755805969,0.0012817773967981339,0.0023499252274632454,0.0029908139258623123,0.003082369454205036,0.002533036284148693,0.0018616290763020515,0.0016174810007214546,0.0015564439818263054,0.0016174810007214546,0.0015564439818263054,0.0010071108117699623,0.00009155552834272385,-0.000762939453125,-0.0009765625,-0.000732421875,-0.00006103515625,0.0007324442267417908,0.0007629627361893654,0.0002136295661330223,-0.0003662109375,-0.001068115234375,-0.00146484375,-0.001068115234375,-0.000335693359375,-0.000091552734375,-0.0001220703125,-0.000244140625,-0.000762939453125,-0.001251220703125,-0.001068115234375,-0.000274658203125,0.0004272591322660446,0.0006714072078466415,0.0005188146606087685,0.0001831110566854477,0,0.0001831110566854477,0.0007019257172942162,0.0012512588873505592,0.0014648884534835815,0.0012207403779029846,0.00033570360392332077,-0.00048828125,-0.00048828125,-0.000091552734375,0.0003662221133708954,0.0006408886983990669,0.0002136295661330223,-0.00054931640625,-0.001007080078125,-0.000823974609375,-0.0001220703125,0.0004882961511611938,0.00079348124563694,0.00079348124563694,0.00045777764171361923,-0.000396728515625,-0.001373291015625,-0.001678466796875,-0.00152587890625,-0.00140380859375,-0.001220703125,-0.001007080078125,-0.001129150390625,-0.00146484375,-0.00152587890625,-0.001434326171875,-0.001251220703125,-0.001129150390625,-0.001373291015625,-0.001953125,-0.00244140625,-0.00238037109375,-0.0020751953125,-0.0015869140625,-0.00091552734375,-0.00048828125,-0.000244140625,-0.000274658203125,-0.00048828125,-0.000518798828125,-0.0001220703125,0.0006103701889514923,0.0010071108117699623,0.0008545182645320892,0.0005798516795039177,0.0002136295661330223,0,-0.00030517578125,-0.000823974609375,-0.000885009765625,-0.00067138671875,-0.00091552734375,-0.0015869140625,-0.002105712890625,-0.001983642578125,-0.0010986328125,-0.000335693359375,-0.000152587890625,-0.000274658203125,-0.0006103515625,-0.000823974609375,-0.00054931640625,-0.000213623046875,0.000030518509447574615,0.0004272591322660446,0.00030518509447574615,-0.000579833984375,-0.0013427734375,-0.00128173828125,-0.000579833984375,0.00006103701889514923,0.0002441480755805969,0,-0.00048828125,-0.001129150390625,-0.001556396484375,-0.00146484375,-0.001129150390625,-0.000762939453125,-0.000396728515625,-0.000579833984375,-0.00115966796875,-0.001251220703125,-0.000457763671875,0.0008545182645320892,0.0018616290763020515,0.0024414807558059692,0.002868739888072014,0.002533036284148693,0.0018005920574069023,0.00158696249127388,0.0020142216235399246,0.002929776906967163,0.003936887718737125,0.004455702379345894,0.004119998775422573,0.0033570360392332077,0.0028992583975195885,0.002868739888072014,0.003021332435309887,0.003326517529785633,0.0032959990203380585,0.0028992583975195885,0.0023194067180156708,0.0017700735479593277,0.0016479995101690292,0.002288888208568096,0.003326517529785633,0.003814813680946827,0.0034485915675759315,0.0027466658502817154,0.0018616290763020515,0.0010681478306651115,0.0008850367739796638,0.0010681478306651115,0.0012512588873505592,0.001342814415693283,0.0010071108117699623,-0.0003662109375,-0.001953125,-0.00225830078125,-0.0018310546875,-0.00201416015625,-0.002288818359375,-0.002410888671875,-0.003082275390625,-0.004241943359375,-0.00494384765625,-0.004852294921875,-0.00433349609375,-0.0035400390625,-0.0028076171875,-0.00286865234375,-0.003143310546875,-0.002593994140625,-0.001861572265625,-0.001190185546875,-0.00042724609375,-0.000030517578125,0.00012207403779029846,0.00015259254723787308,-0.000152587890625,-0.0006103515625,-0.000518798828125,0.0004272591322660446,0.0012512588873505592,0.0013733329251408577,0.0013733329251408577,0.0013122959062457085,0.001037629321217537,0.0005493331700563431,0.0002136295661330223,0.00006103701889514923,0.00006103701889514923,0.00033570360392332077,0.00027466658502817154,-0.00048828125,-0.0009765625,-0.000823974609375,-0.0008544921875,-0.000946044921875,-0.000701904296875,-0.0006103515625,-0.001007080078125,-0.001251220703125,-0.000946044921875,-0.000213623046875,0.0008239997550845146,0.0018005920574069023,0.0018005920574069023,0.0015259254723787308,0.0021057771518826485,0.0027466658502817154,0.0028382213786244392,0.003021332435309887,0.003082369454205036,0.002929776906967163,0.002685628831386566,0.002136295661330223,0.001342814415693283,0.001037629321217537,0.0014954069629311562,0.0019226660951972008,0.0016785180196166039,0.0015564439818263054,0.0016479995101690292,0.0013733329251408577,0.0011291848495602608,0.001037629321217537,0.0006408886983990669,0.0004272591322660446,0.0005798516795039177,0.0002441480755805969,-0.00048828125,-0.00067138671875,-0.000091552734375,0.0002441480755805969,0.000030518509447574615,-0.0003662109375,-0.00067138671875,-0.000457763671875,-0.00030517578125,-0.00054931640625,-0.000213623046875,0.0004272591322660446,0.0007629627361893654,0.0005188146606087685,-0.000152587890625,-0.000640869140625,-0.000640869140625,-0.00042724609375,-0.000732421875,-0.001678466796875,-0.00213623046875,-0.0025634765625,-0.003692626953125,-0.004364013671875,-0.004150390625,-0.003692626953125,-0.003143310546875,-0.0028076171875,-0.0025634765625,-0.0020751953125,-0.001129150390625,-0.000244140625,0.00009155552834272385,0.00039674062281847,0.0005493331700563431,0,-0.000640869140625,-0.000823974609375,-0.00018310546875,0.0006408886983990669,0.0011597033590078354,0.0010986663401126862,0.00033570360392332077,-0.000244140625,-0.000640869140625,-0.0010986328125,-0.000762939453125,0.00033570360392332077,0.0013733329251408577,0.0016479995101690292,0.0011291848495602608,0.0004272591322660446,0,-0.000244140625,-0.000701904296875,-0.0013427734375,-0.001800537109375,-0.002166748046875,-0.00250244140625,-0.002777099609375,-0.00262451171875,-0.001617431640625,-0.00030517578125,0.0005493331700563431,0.0009460737928748131,0.0010071108117699623,0.0010071108117699623,0.0012207403779029846,0.001434369944036007,0.0012207403779029846,0.0008545182645320892,0.0007019257172942162,-0.000091552734375,-0.002044677734375,-0.003753662109375,-0.0042724609375,-0.00396728515625,-0.00341796875,-0.002960205078125,-0.002410888671875,-0.001678466796875,-0.001373291015625,-0.001739501953125,-0.00225830078125,-0.001861572265625,-0.00067138671875,0.00006103701889514923,0,-0.0001220703125,0.000030518509447574615,0.0004272591322660446,0.00079348124563694,0.0008239997550845146,0.0009460737928748131,0.0017700735479593277,0.0022583696991205215,0.0015259254723787308,0.0006714072078466415,0.0009155552834272385,0.002075258642435074,0.00317392498254776,0.0033875545486807823,0.0032349620014429092,0.003479110077023506,0.003662221133708954,0.0032044434919953346,0.0025635547935962677,0.0025940733030438423,0.0029602954164147377,0.0030518509447574615,0.0025635547935962677,0.00158696249127388,0.0009460737928748131,0.0013733329251408577,0.0021973326802253723,0.0024414807558059692,0.0027466658502817154,0.003814813680946827,0.004455702379345894,0.0039674062281847,0.0031128879636526108,0.002685628831386566,0.0025940733030438423,0.0024414807558059692,0.0019531846046447754,0.0011597033590078354,0.0004272591322660446,0.00009155552834272385,-0.000518798828125,-0.001739501953125,-0.00274658203125,-0.00299072265625,-0.002960205078125,-0.003173828125,-0.00347900390625,-0.003753662109375,-0.003753662109375,-0.003570556640625,-0.003662109375,-0.0037841796875,-0.00347900390625,-0.00311279296875,-0.00323486328125,-0.003570556640625,-0.00372314453125,-0.003631591796875,-0.0032958984375,-0.00262451171875,-0.001953125,-0.001373291015625,-0.000396728515625,0.0005493331700563431,0.0008545182645320892,0.0008850367739796638,0.0012817773967981339,0.0017700735479593277,0.001831110566854477,0.0018005920574069023,0.0017700735479593277,0.0013733329251408577,0.0008545182645320892,0.0008850367739796638,0.0012207403779029846,0.00158696249127388,0.00238044373691082,0.0034485915675759315,0.003723258152604103,0.0032044434919953346,0.002685628831386566,0.0025025177747011185,0.0024109622463583946,0.00238044373691082,0.00238044373691082,0.0020142216235399246,0.00119022186845541,0.000030518509447574615,-0.00103759765625,-0.001678466796875,-0.001739501953125,-0.001373291015625,-0.00079345703125,-0.000579833984375,-0.00103759765625,-0.001739501953125,-0.001922607421875,-0.00140380859375,-0.00091552734375,-0.0001220703125,0.00079348124563694,0.0006408886983990669,0,-0.00018310546875,0.00006103701889514923,0.0006103701889514923,0.00158696249127388,0.0025635547935962677,0.0024414807558059692,0.0016174810007214546,0.001037629321217537,0.0005493331700563431,0.0004882961511611938,0.0012817773967981339,0.00198370311409235,0.0020142216235399246,0.0013733329251408577,0.0005493331700563431,-0.0001220703125,-0.000579833984375,-0.000640869140625,-0.00079345703125,-0.0008544921875,-0.00091552734375,-0.00189208984375,-0.003082275390625,-0.003448486328125,-0.003021240234375,-0.002349853515625,-0.001922607421875,-0.0015869140625,-0.00146484375,-0.00152587890625,-0.001373291015625,-0.001251220703125,-0.001068115234375,-0.000335693359375,0.0002441480755805969,-0.000274658203125,-0.001373291015625,-0.0018310546875,-0.001922607421875,-0.001861572265625,-0.00115966796875,-0.00054931640625,-0.0006103515625,-0.000762939453125,-0.00115966796875,-0.001983642578125,-0.00201416015625,-0.000823974609375,0.0002136295661330223,0.0004272591322660446,0.0005493331700563431,0.0004882961511611938,-0.000030517578125,-0.000030517578125,0.00027466658502817154,0.00030518509447574615,0.00030518509447574615,0.0004272591322660446,-0.0001220703125,-0.00103759765625,-0.001007080078125,-0.000335693359375,0.00033570360392332077,0.0013122959062457085,0.0019531846046447754,0.001831110566854477,0.0018005920574069023,0.002136295661330223,0.0025635547935962677,0.002868739888072014,0.003418073058128357,0.003875850699841976,0.0034485915675759315,0.0025635547935962677,0.0016174810007214546,0.0008239997550845146,0.0005798516795039177,0.0006714072078466415,0.0004272591322660446,-0.000274658203125,-0.00115966796875,-0.0018310546875,-0.002197265625,-0.002197265625,-0.002197265625,-0.002288818359375,-0.0020751953125,-0.001983642578125,-0.00225830078125,-0.00238037109375,-0.002166748046875,-0.0015869140625,-0.00103759765625,-0.00091552734375,-0.0009765625,-0.000946044921875,-0.00079345703125,-0.000701904296875,-0.00042724609375,0.0004272591322660446,0.0012817773967981339,0.001434369944036007,0.0010986663401126862,0.0006714072078466415,0.00015259254723787308,-0.0001220703125,0.00009155552834272385,0.00027466658502817154,0,-0.0003662109375,-0.000457763671875,-0.0006103515625,-0.0010986328125,-0.00128173828125,-0.001007080078125,-0.000640869140625,-0.00042724609375,-0.0006103515625,-0.000946044921875,-0.000885009765625,-0.000335693359375,0.000030518509447574615,0.000030518509447574615,0.00033570360392332077,0.0006103701889514923,0.00045777764171361923,0.00039674062281847,0.0006103701889514923,0.0009155552834272385,0.0013733329251408577,0.0018921475857496262,0.0021973326802253723,0.0022583696991205215,0.0022583696991205215,0.002227851189672947,0.0020447401329874992,0.0017700735479593277,0.0016785180196166039,0.0018005920574069023,0.0019226660951972008,0.0016785180196166039,0.001342814415693283,0.0011597033590078354,0.00119022186845541,0.0013122959062457085,0.0013122959062457085,0.0010681478306651115,0.0008545182645320892,0.0007019257172942162,0.00033570360392332077,-0.000152587890625,-0.00054931640625,-0.000579833984375,-0.000213623046875,0.0002136295661330223,0.0006103701889514923,0.0008239997550845146,0.0008239997550845146,0.00079348124563694,0.0005493331700563431,0.00030518509447574615,0.00009155552834272385,-0.000152587890625,-0.000457763671875,-0.00103759765625,-0.001434326171875,-0.001251220703125,-0.00103759765625,-0.000762939453125,-0.00030517578125,0.000030518509447574615,0.0004272591322660446,0.0005188146606087685,0.00033570360392332077,0.0004272591322660446,0.0005798516795039177,0.00039674062281847,-0.00030517578125,-0.001220703125,-0.0015869140625,-0.001678466796875,-0.001983642578125,-0.001953125,-0.00140380859375,-0.00091552734375,-0.00079345703125,-0.0008544921875,-0.001007080078125,-0.0009765625,-0.00030517578125,0.0006103701889514923,0.0012207403779029846,0.001342814415693283,0.0011597033590078354,0.0008850367739796638,0.00039674062281847,-0.000030517578125,-0.00006103515625,0.00012207403779029846,0.00009155552834272385,-0.00018310546875,-0.000457763671875,-0.000701904296875,-0.00079345703125,-0.000244140625,0.0006408886983990669,0.0009155552834272385,0.0004272591322660446,0,-0.000701904296875,-0.001953125,-0.0025634765625,-0.00238037109375,-0.002044677734375,-0.00177001953125,-0.001800537109375,-0.00213623046875,-0.002532958984375,-0.002685546875,-0.002288818359375,-0.0015869140625,-0.001007080078125,-0.0006103515625,-0.000579833984375,-0.00103759765625,-0.001373291015625,-0.001220703125,-0.000640869140625,0.0001831110566854477,0.0005493331700563431,0.00027466658502817154,0.00009155552834272385,-0.000335693359375,-0.001220703125,-0.001617431640625,-0.001251220703125,-0.000701904296875,-0.000335693359375,-0.000244140625,-0.000396728515625,-0.000518798828125,0.00006103701889514923,0.0010986663401126862,0.0018616290763020515,0.0028077028691768646,0.003875850699841976,0.003997924737632275,0.003082369454205036,0.0023194067180156708,0.002288888208568096,0.0025940733030438423,0.0027466658502817154,0.0029602954164147377,0.002868739888072014,0.002533036284148693,0.0025025177747011185,0.002533036284148693,0.0026551103219389915,0.003418073058128357,0.004272591322660446,0.004394665360450745,0.003814813680946827,0.0028077028691768646,0.0018005920574069023,0.0009765923023223877,0.0005493331700563431,0.0003662221133708954,0.00012207403779029846,0.00009155552834272385,0.0004272591322660446,0.0004272591322660446,0.0002441480755805969,0.00079348124563694,0.0017090365290641785,0.002227851189672947,0.0025025177747011185,0.0025635547935962677,0.0016785180196166039,0.00030518509447574615,-0.000701904296875,-0.001739501953125,-0.003021240234375,-0.00384521484375,-0.00445556640625,-0.00543212890625,-0.0064697265625,-0.00689697265625,-0.006622314453125,-0.006134033203125,-0.005279541015625,-0.00421142578125,-0.00360107421875,-0.0030517578125,-0.002197265625,-0.001495361328125,-0.00067138671875,0.00039674062281847,0.0007324442267417908,0.0005188146606087685,0.0004882961511611938,0.00045777764171361923,0.0004272591322660446,0.0004272591322660446,0.0005798516795039177,0.0006408886983990669,0.0004882961511611938,0.00033570360392332077,-0.000091552734375,-0.000518798828125,-0.000457763671875,-0.000457763671875,-0.000518798828125,-0.000457763671875,-0.000274658203125,0,0,-0.00006103515625,-0.000091552734375,-0.00018310546875,-0.000213623046875,-0.00030517578125,-0.000335693359375,0.00015259254723787308,0.0009460737928748131,0.0013733329251408577,0.0015259254723787308,0.0015259254723787308,0.001434369944036007,0.0014038514345884323,0.0014038514345884323,0.001037629321217537,0.0007019257172942162,0.0005798516795039177,-0.00030517578125,-0.001434326171875,-0.001861572265625,-0.002288818359375,-0.002685546875,-0.00250244140625,-0.00225830078125,-0.0020751953125,-0.001678466796875,-0.001129150390625,-0.00079345703125,-0.000274658203125,0.0009155552834272385,0.0016479995101690292,0.00198370311409235,0.0024109622463583946,0.0023194067180156708,0.0020447401329874992,0.0018616290763020515,0.0018616290763020515,0.002136295661330223,0.0023194067180156708,0.0025025177747011185,0.0023194067180156708,0.0017700735479593277,0.0014648884534835815,0.0015259254723787308,0.001831110566854477,0.0021668141707777977,0.0023499252274632454,0.0023194067180156708,0.0015259254723787308,0.0006103701889514923,-0.000152587890625,-0.0009765625,-0.001312255859375,-0.001495361328125,-0.0018310546875,-0.00213623046875,-0.0028076171875,-0.00341796875,-0.003631591796875,-0.003448486328125,-0.002593994140625,-0.001495361328125,-0.0006103515625,0.00006103701889514923,0.00009155552834272385,-0.00042724609375,-0.0006103515625,-0.00042724609375,-0.00048828125,-0.00042724609375,-0.0001220703125,-0.0003662109375,-0.000762939453125,-0.0008544921875,-0.00079345703125,-0.000274658203125,0.00030518509447574615,0.0006408886983990669,0.0009155552834272385,0.001037629321217537,0.0007629627361893654,0.0004272591322660446,0.00045777764171361923,0.00079348124563694,0.0012817773967981339,0.0018616290763020515,0.002288888208568096,0.0024414807558059692,0.002288888208568096,0.00198370311409235,0.0014954069629311562,0.00079348124563694,0.0006103701889514923,0.001037629321217537,0.0011597033590078354,0.0008545182645320892,0.0005798516795039177,0.00015259254723787308,-0.000396728515625,-0.000701904296875,-0.00030517578125,0.00027466658502817154,0.0005798516795039177,0.0005493331700563431,0.00009155552834272385,-0.000640869140625,-0.0013427734375,-0.001495361328125,-0.001007080078125,-0.00042724609375,0.00012207403779029846,0.0007019257172942162,0.0008239997550845146,0.0006408886983990669,0.0003662221133708954,0.0005798516795039177,0.0012207403779029846,0.0014954069629311562,0.0015259254723787308,0.0012207403779029846,0.00027466658502817154,-0.0006103515625,-0.001068115234375,-0.001007080078125,-0.000396728515625,0.00012207403779029846,0.0002136295661330223,-0.000457763671875,-0.00177001953125,-0.0028076171875,-0.003265380859375,-0.003143310546875,-0.002288818359375,-0.001190185546875,-0.0006103515625,-0.000579833984375,-0.00091552734375,-0.00140380859375,-0.001251220703125,-0.000518798828125,0.00009155552834272385,0.00039674062281847,0.00027466658502817154,-0.00067138671875,-0.002105712890625,-0.002716064453125,-0.002288818359375,-0.001373291015625,-0.00006103515625,0.001342814415693283,0.0021057771518826485,0.001831110566854477,0.001342814415693283,0.001434369944036007,0.0018616290763020515,0.0024109622463583946,0.0030518509447574615,0.0030518509447574615,0.0021057771518826485,0.0011597033590078354,0.0009155552834272385,0.0010071108117699623,0.001342814415693283,0.0024109622463583946,0.0035096285864710808,0.003479110077023506,0.00277718435972929,0.0020142216235399246,0.0011597033590078354,0.0007324442267417908,0.0012817773967981339,0.002136295661330223,0.0025635547935962677,0.0026551103219389915,0.0025635547935962677,0.0018616290763020515,0.0007324442267417908,0.0002441480755805969,0.0006714072078466415,0.001037629321217537,0.0008239997550845146,0.00027466658502817154,-0.00048828125,-0.001129150390625,-0.00146484375,-0.001708984375,-0.0015869140625,-0.001129150390625,-0.000823974609375,-0.0008544921875,-0.001556396484375,-0.002471923828125,-0.002838134765625,-0.002777099609375,-0.002655029296875,-0.002288818359375,-0.0013427734375,-0.00054931640625,-0.000518798828125,-0.0003662109375,0,0.00009155552834272385,0.0005188146606087685,0.0014954069629311562,0.0021057771518826485,0.0020447401329874992,0.0016174810007214546,0.0007019257172942162,-0.00042724609375,-0.001007080078125,-0.00091552734375,-0.000701904296875,-0.00042724609375,-0.000244140625,-0.000762939453125,-0.002105712890625,-0.0032958984375,-0.00396728515625,-0.00457763671875,-0.00469970703125,-0.004425048828125,-0.00439453125,-0.0042724609375,-0.00396728515625,-0.00396728515625,-0.0037841796875,-0.002532958984375,-0.000762939453125,0.0001831110566854477,0.00033570360392332077,0.0001831110566854477,-0.000274658203125,-0.00048828125,-0.000213623046875,0.00006103701889514923,0.0005493331700563431,0.0014038514345884323,0.0019226660951972008,0.001831110566854477,0.0017090365290641785,0.0019531846046447754,0.002075258642435074,0.0018616290763020515,0.0016785180196166039,0.0010681478306651115,-0.000274658203125,-0.001373291015625,-0.002044677734375,-0.0029296875,-0.003448486328125,-0.003021240234375,-0.002593994140625,-0.00225830078125,-0.00146484375,-0.0009765625,-0.000762939453125,-0.000152587890625,0.00039674062281847,0.0005798516795039177,0.0007629627361893654,0.0010681478306651115,0.00119022186845541,0.001342814415693283,0.0016174810007214546,0.0018005920574069023,0.0021057771518826485,0.0023499252274632454,0.0024414807558059692,0.002624591812491417,0.002685628831386566,0.0027161473408341408,0.002471999265253544,0.0018005920574069023,0.001037629321217537,0.00006103701889514923,-0.000396728515625,-0.00006103515625,0.0004272591322660446,0.0013122959062457085,0.0020447401329874992,0.002136295661330223,0.0021057771518826485,0.0021057771518826485,0.0017090365290641785,0.0012512588873505592,0.001342814415693283,0.001739555038511753,0.00198370311409235,0.0021057771518826485,0.002136295661330223,0.0017090365290641785,0.0011597033590078354,0.001037629321217537,0.0011597033590078354,0.0013122959062457085,0.00119022186845541,0.0007019257172942162,-0.000396728515625,-0.001922607421875,-0.00286865234375,-0.002960205078125,-0.00274658203125,-0.002227783203125,-0.001617431640625,-0.00152587890625,-0.00189208984375,-0.002166748046875,-0.002197265625,-0.001983642578125,-0.001251220703125,-0.00054931640625,-0.00067138671875,-0.00115966796875,-0.001251220703125,-0.0010986328125,-0.0008544921875,-0.0001220703125,0.0007324442267417908,0.0010986663401126862,0.0009460737928748131,0.00030518509447574615,-0.00054931640625,-0.00128173828125,-0.0013427734375,-0.0008544921875,-0.00054931640625,-0.000396728515625,-0.0001220703125,0.00015259254723787308,0.0006714072078466415,0.0014648884534835815,0.00238044373691082,0.0032044434919953346,0.003723258152604103,0.0034485915675759315,0.002227851189672947,0.0010986663401126862,0.0006103701889514923,0.0004882961511611938,0.0007019257172942162,0.0008850367739796638,0.0006103701889514923,0.00027466658502817154,-0.000335693359375,-0.0010986328125,-0.001373291015625,-0.00103759765625,-0.00067138671875,-0.000885009765625,-0.00164794921875,-0.00244140625,-0.00311279296875,-0.003265380859375,-0.002960205078125,-0.002471923828125,-0.002044677734375,-0.00177001953125,-0.00177001953125,-0.001953125,-0.00189208984375,-0.001129150390625,0.00015259254723787308,0.0013733329251408577,0.0020142216235399246,0.0019531846046447754,0.0016785180196166039,0.0018005920574069023,0.0023499252274632454,0.003082369454205036,0.0038453321903944016,0.004058961756527424,0.0036011841148138046,0.002929776906967163,0.0020142216235399246,0.0011291848495602608,0.00079348124563694,0.0008239997550845146,0.0008239997550845146,0.0005493331700563431,0.00033570360392332077,0.00033570360392332077,0.00027466658502817154,0.0002441480755805969,0.0004272591322660446,0.0004272591322660446,0.00012207403779029846,-0.0003662109375,-0.001129150390625,-0.00189208984375,-0.002197265625,-0.002105712890625,-0.001922607421875,-0.001556396484375,-0.0013427734375,-0.001312255859375,-0.00146484375,-0.0015869140625,-0.001373291015625,-0.001190185546875,-0.001220703125,-0.000885009765625,-0.000396728515625,-0.000457763671875,-0.000732421875,-0.0006103515625,-0.000091552734375,0.0004882961511611938,0.0008239997550845146,0.0008545182645320892,0.0005493331700563431,0,-0.000701904296875,-0.001434326171875,-0.001983642578125,-0.002105712890625,-0.00152587890625,-0.00091552734375,-0.000335693359375,0.00039674062281847,0.0006408886983990669,0.0008239997550845146,0.0010681478306651115,0.0009460737928748131,0.0010071108117699623,0.0010681478306651115,0.0007324442267417908,0.0002136295661330223,-0.0003662109375,-0.00091552734375,-0.001373291015625,-0.00152587890625,-0.000762939453125,0.00015259254723787308,0.0008239997550845146,0.0017090365290641785,0.0024109622463583946,0.0023194067180156708,0.0017090365290641785,0.0013733329251408577,0.00119022186845541,0.0008545182645320892,0.00079348124563694,0.0005493331700563431,0,-0.0003662109375,-0.000579833984375,-0.000640869140625,-0.00030517578125,0.0004272591322660446,0.0010681478306651115,0.0011291848495602608,0.0007019257172942162,0.00006103701889514923,-0.00048828125,-0.0006103515625,-0.000274658203125,-0.000030517578125,0.0001831110566854477,0.0005798516795039177,0.0004272591322660446,-0.00006103515625,-0.00018310546875,-0.000030517578125,0,0.00015259254723787308,0.0006714072078466415,0.0009155552834272385,0.0005493331700563431,0.00039674062281847,0.0005188146606087685,0.00030518509447574615,0.0002136295661330223,0.0007324442267417908,0.0011597033590078354,0.0012512588873505592,0.0013122959062457085,0.0010681478306651115,0.00033570360392332077,-0.000213623046875,-0.0006103515625,-0.00115966796875,-0.001617431640625,-0.001434326171875,-0.0009765625,-0.000640869140625,-0.000030517578125,0.00033570360392332077,0.0001831110566854477,0.000030518509447574615,0.00012207403779029846,0.00027466658502817154,0.00045777764171361923,0.0007019257172942162,0.0005798516795039177,0.00009155552834272385,-0.00030517578125,-0.00103759765625,-0.00189208984375,-0.00201416015625,-0.00177001953125,-0.00189208984375,-0.002197265625,-0.002349853515625,-0.002593994140625,-0.00299072265625,-0.003204345703125,-0.00286865234375,-0.0023193359375,-0.00164794921875,-0.0010986328125,-0.001068115234375,-0.001007080078125,-0.0009765625,-0.001312255859375,-0.0013427734375,-0.0008544921875,-0.00018310546875,0.00033570360392332077,0.0002441480755805969,-0.00042724609375,-0.001129150390625,-0.001220703125,-0.0009765625,-0.0006103515625,0.00012207403779029846,0.0006408886983990669,0.00039674062281847,0,-0.00042724609375,-0.00079345703125,-0.0006103515625,0.0002441480755805969,0.0012207403779029846,0.0016785180196166039,0.0015564439818263054,0.001037629321217537,0.0004882961511611938,0.0005188146606087685,0.0010071108117699623,0.0019531846046447754,0.0028077028691768646,0.0028992583975195885,0.0024109622463583946,0.0014648884534835815,0.00027466658502817154,-0.000030517578125,0.0005493331700563431,0.0015259254723787308,0.0023499252274632454,0.002685628831386566,0.002227851189672947,0.0012207403779029846,0.0002441480755805969,-0.000213623046875,-0.000030517578125,0.0005798516795039177,0.0010681478306651115,0.0011597033590078354,0.0005188146606087685,-0.00054931640625,-0.001251220703125,-0.001312255859375,-0.000885009765625,-0.000152587890625,0.0005798516795039177,0.0009765923023223877,0.0008545182645320892,0.00030518509447574615,-0.000152587890625,-0.00030517578125,-0.000213623046875,0.00006103701889514923,0.00045777764171361923,0.00030518509447574615,-0.000244140625,-0.000579833984375,-0.000640869140625,-0.000518798828125,0.00009155552834272385,0.0009765923023223877,0.0016479995101690292,0.0016479995101690292,0.0009155552834272385,0.000030518509447574615,-0.0006103515625,-0.0008544921875,-0.00042724609375,0.0002441480755805969,0.0008545182645320892,0.0010071108117699623,0.0005798516795039177,-0.000091552734375,-0.000732421875,-0.000762939453125,-0.000030517578125,0.0009460737928748131,0.0016479995101690292,0.0017090365290641785,0.0015259254723787308,0.0012512588873505592,0.0007324442267417908,0.0005798516795039177,0.0010071108117699623,0.0015259254723787308,0.00158696249127388,0.0010681478306651115,0.00039674062281847,-0.000396728515625,-0.00115966796875,-0.001251220703125,-0.000885009765625,-0.00054931640625,-0.00054931640625,-0.0008544921875,-0.001220703125,-0.001739501953125,-0.00177001953125,-0.0008544921875,0.0001831110566854477,0.0007324442267417908,0.0008239997550845146,0.0005188146606087685,-0.00018310546875,-0.001007080078125,-0.001220703125,-0.0008544921875,-0.000396728515625,-0.00018310546875,-0.000030517578125,-0.000152587890625,-0.000335693359375,-0.00018310546875,0.0002136295661330223,0.00045777764171361923,0.0005493331700563431,0.0006714072078466415,0.0005493331700563431,0.00012207403779029846,0.000030518509447574615,0.00039674062281847,0.00079348124563694,0.0011291848495602608,0.0010071108117699623,0.0007019257172942162,0.00045777764171361923,0.0001831110566854477,0.0002441480755805969,0.0005188146606087685,0.0005493331700563431,0.00033570360392332077,0,-0.00042724609375,-0.000823974609375,-0.000823974609375,-0.000213623046875,0.00030518509447574615,0.0002136295661330223,-0.00018310546875,-0.000823974609375,-0.001739501953125,-0.0025634765625,-0.00286865234375,-0.00244140625,-0.0018310546875,-0.00177001953125,-0.001678466796875,-0.001373291015625,-0.001251220703125,-0.00079345703125,0.0002136295661330223,0.0009765923023223877,0.0010681478306651115,0.001037629321217537,0.0008545182645320892,0.0002136295661330223,-0.000335693359375,-0.000030517578125,0.0008850367739796638,0.0017700735479593277,0.002136295661330223,0.0021057771518826485,0.0018616290763020515,0.0013733329251408577,0.0009155552834272385,0.001037629321217537,0.0017700735479593277,0.0024414807558059692,0.0025940733030438423,0.0021668141707777977,0.0012817773967981339,0.0004882961511611938,0.0002136295661330223,0,-0.000457763671875,-0.00067138671875,-0.000823974609375,-0.00140380859375,-0.002105712890625,-0.002410888671875,-0.001922607421875,-0.001068115234375,-0.0001220703125,0.0007019257172942162,0.0011291848495602608,0.0013122959062457085,0.0013122959062457085,0.001037629321217537,0.0006714072078466415,0.0005188146606087685,0.0006714072078466415,0.0004882961511611938,-0.000244140625,-0.00103759765625,-0.001678466796875,-0.00201416015625,-0.0020751953125,-0.002166748046875,-0.00201416015625,-0.0013427734375,-0.000885009765625,-0.0009765625,-0.000946044921875,-0.0006103515625,-0.00067138671875,-0.00103759765625,-0.001129150390625,-0.001129150390625,-0.001312255859375,-0.001220703125,-0.001220703125,-0.0018310546875,-0.00238037109375,-0.002532958984375,-0.002532958984375,-0.002166748046875,-0.001190185546875,-0.000274658203125,-0.000091552734375,-0.000030517578125,0,-0.000457763671875,-0.0003662109375,0.0003662221133708954,0.0009155552834272385,0.0011291848495602608,0.0011597033590078354,0.0006714072078466415,-0.00018310546875,-0.000762939453125,-0.000823974609375,-0.000701904296875,-0.00042724609375,0,-0.00018310546875,-0.001007080078125,-0.0013427734375,-0.001251220703125,-0.0010986328125,-0.000213623046875,0.0007324442267417908,0.0010681478306651115,0.0007629627361893654,-0.000030517578125,-0.001007080078125,-0.001617431640625,-0.00140380859375,-0.00067138671875,-0.000091552734375,0.00030518509447574615,0.00039674062281847,0.000030518509447574615,-0.00030517578125,-0.00030517578125,0.0004882961511611938,0.0016785180196166039,0.00277718435972929,0.0035096285864710808,0.003326517529785633,0.0028077028691768646,0.0021057771518826485,0.001342814415693283,0.0010986663401126862,0.0010681478306651115,0.0010986663401126862,0.0009155552834272385,0.0002441480755805969,-0.0006103515625,-0.001373291015625,-0.001708984375,-0.001434326171875,-0.0009765625,-0.0006103515625,-0.000640869140625,-0.00067138671875,-0.000579833984375,-0.000762939453125,-0.0009765625,-0.00091552734375,-0.0006103515625,-0.000274658203125,-0.000244140625,-0.000152587890625,-0.000030517578125,-0.000030517578125,-0.000030517578125,0.0001831110566854477,0.0005188146606087685,0.0009460737928748131,0.0017090365290641785,0.0023499252274632454,0.0025635547935962677,0.003082369454205036,0.0038453321903944016,0.0040894802659749985,0.003875850699841976,0.0036927396431565285,0.0031128879636526108,0.0021668141707777977,0.0013733329251408577,0.0005493331700563431,-0.000335693359375,-0.00079345703125,-0.00091552734375,-0.001068115234375,-0.001190185546875,-0.0009765625,-0.00048828125,-0.000335693359375,-0.000640869140625,-0.000732421875,-0.00042724609375,-0.000213623046875,-0.0003662109375,-0.0006103515625,-0.00103759765625,-0.001495361328125,-0.001861572265625,-0.001953125,-0.001678466796875,-0.001007080078125,0.000030518509447574615,0.0008850367739796638,0.0012512588873505592,0.0014038514345884323,0.0014954069629311562,0.00158696249127388,0.0017090365290641785,0.0020447401329874992,0.002288888208568096,0.002075258642435074,0.00158696249127388,0.0007629627361893654,-0.00018310546875,-0.0006103515625,-0.000701904296875,-0.0008544921875,-0.00140380859375,-0.0023193359375,-0.002899169921875,-0.00286865234375,-0.00244140625,-0.00146484375,0.00006103701889514923,0.0013733329251408577,0.001831110566854477,0.001739555038511753,0.0012817773967981339,0.0006103701889514923,0.00033570360392332077,0.0005798516795039177,0.0007629627361893654,0.0004882961511611938,0.0002136295661330223,-0.000091552734375,-0.00054931640625,-0.000885009765625,-0.0009765625,-0.000518798828125,0.00033570360392332077,0.0009155552834272385,0.0008850367739796638,0.0003662221133708954,-0.0003662109375,-0.001129150390625,-0.00164794921875,-0.001708984375,-0.001373291015625,-0.001373291015625,-0.001953125,-0.00262451171875,-0.0030517578125,-0.00286865234375,-0.002044677734375,-0.001220703125,-0.000762939453125,-0.000457763671875,-0.0003662109375,-0.000274658203125,-0.0001220703125,0.0001831110566854477,0.001037629321217537,0.002075258642435074,0.002868739888072014,0.003418073058128357,0.0031434064731001854,0.0021668141707777977,0.0011597033590078354,0.00033570360392332077,-0.00006103515625,-0.00018310546875,0.00009155552834272385,0.0005798516795039177,0.0008239997550845146,0.0008239997550845146,0.0006103701889514923,0.00045777764171361923,0.0006714072078466415,0.0009155552834272385,0.0009460737928748131,0.0007324442267417908,0.0002441480755805969,-0.000335693359375,-0.0009765625,-0.0015869140625,-0.001983642578125,-0.001953125,-0.00164794921875,-0.001617431640625,-0.001556396484375,-0.001129150390625,-0.000640869140625,-0.000335693359375,0.00009155552834272385,0.0007629627361893654,0.0013122959062457085,0.0014038514345884323,0.0014648884534835815,0.0014954069629311562,0.0011597033590078354,0.0008545182645320892,0.0008545182645320892,0.0007019257172942162,0.0005188146606087685,0.0007019257172942162,0.0007629627361893654,0.0002136295661330223,-0.000213623046875,-0.000213623046875,-0.000335693359375,-0.00018310546875,0.0008545182645320892,0.0018005920574069023,0.0021973326802253723,0.002471999265253544,0.002288888208568096,0.0016174810007214546,0.0011597033590078354,0.0010986663401126862,0.0008545182645320892,0.0002441480755805969,-0.000030517578125,-0.000518798828125,-0.001556396484375,-0.0020751953125,-0.001861572265625,-0.001251220703125,-0.000335693359375,0.0004272591322660446,0.0005188146606087685,0.00009155552834272385,-0.000091552734375,-0.00018310546875,-0.000579833984375,-0.000701904296875,-0.000274658203125,-0.00006103515625,-0.00054931640625,-0.00128173828125,-0.001953125,-0.002410888671875,-0.002288818359375,-0.001708984375,-0.0009765625,-0.000274658203125,0.00027466658502817154,0.0002136295661330223,-0.000274658203125,-0.000396728515625,-0.000030517578125,0.0005798516795039177,0.0013733329251408577,0.0019226660951972008,0.0016785180196166039,0.0011291848495602608,0.0006408886983990669,0.0002441480755805969,0.000030518509447574615,0.00033570360392332077,0.0007019257172942162,0.00033570360392332077,-0.00018310546875,-0.000396728515625,-0.000701904296875,-0.00048828125,0.00027466658502817154,0.0007019257172942162,0.0007629627361893654,0.0006408886983990669,0.00030518509447574615,-0.000213623046875,-0.000946044921875,-0.0013427734375,-0.00140380859375,-0.001434326171875,-0.0009765625,-0.00048828125,-0.000213623046875,0.0002441480755805969,0.0004882961511611938,0.0005188146606087685,0.0007019257172942162,0.001037629321217537,0.0014954069629311562,0.0019226660951972008,0.0020447401329874992,0.0017090365290641785,0.0011597033590078354,0.0006714072078466415,0.00030518509447574615,0.0001831110566854477,0.00009155552834272385,-0.000213623046875,-0.0006103515625,-0.0009765625,-0.001312255859375,-0.001556396484375,-0.0015869140625,-0.00140380859375,-0.001190185546875,-0.000885009765625,-0.00067138671875,-0.0008544921875,-0.000762939453125,-0.000457763671875,-0.000396728515625,-0.0003662109375,-0.000762939453125,-0.001190185546875,-0.00128173828125,-0.001434326171875,-0.001708984375,-0.002044677734375,-0.001861572265625,-0.00128173828125,-0.0009765625,-0.000946044921875,-0.000823974609375,-0.000244140625,0.00045777764171361923,0.0010071108117699623,0.0015259254723787308,0.0016785180196166039,0.00158696249127388,0.0015564439818263054,0.0011291848495602608,0.0004882961511611938,0.000030518509447574615,-0.000091552734375,-0.000396728515625,-0.001190185546875,-0.001983642578125,-0.002227783203125,-0.00189208984375,-0.00140380859375,-0.000823974609375,-0.000274658203125,0.000030518509447574615,0.0003662221133708954,0.0003662221133708954,-0.000274658203125,-0.000457763671875,-0.000152587890625,-0.00030517578125,-0.000457763671875,-0.00048828125,-0.000640869140625,-0.000579833984375,-0.000396728515625,-0.00006103515625,0.00033570360392332077,0.0005188146606087685,0.0007019257172942162,0.00119022186845541,0.0017090365290641785,0.0021057771518826485,0.00238044373691082,0.002624591812491417,0.0027466658502817154,0.0025940733030438423,0.0020447401329874992,0.0010681478306651115,0.00009155552834272385,-0.000335693359375,-0.00048828125,-0.00079345703125,-0.00146484375,-0.002044677734375,-0.002227783203125,-0.00238037109375,-0.002532958984375,-0.00250244140625,-0.002166748046875,-0.001708984375,-0.001556396484375,-0.001434326171875,-0.001068115234375,-0.000701904296875,-0.00079345703125,-0.00128173828125,-0.001434326171875,-0.001312255859375,-0.001312255859375,-0.00103759765625,-0.00079345703125,-0.000823974609375,-0.0003662109375,0.0006408886983990669,0.0014038514345884323,0.0017700735479593277,0.0023499252274632454,0.003082369454205036,0.003265480510890484,0.002624591812491417,0.00158696249127388,0.0009460737928748131,0.0006103701889514923,0.00030518509447574615,0.000030518509447574615,-0.0003662109375,-0.000579833984375,-0.00048828125,-0.000579833984375,-0.00091552734375,-0.000732421875,0.00006103701889514923,0.0007324442267417908,0.0008545182645320892,0.00045777764171361923,0.00006103701889514923,-0.0001220703125,-0.00048828125,-0.0006103515625,0.00006103701889514923,0.0010681478306651115,0.0015564439818263054,0.0013122959062457085,0.0005798516795039177,-0.00042724609375,-0.00128173828125,-0.0010986328125,-0.00006103515625,0.0010986663401126862,0.0019531846046447754,0.00238044373691082,0.002227851189672947,0.0016479995101690292,0.0014038514345884323,0.00198370311409235,0.0028077028691768646,0.0032349620014429092,0.0030518509447574615,0.002288888208568096,0.0008545182645320892,-0.00054931640625,-0.000946044921875,-0.000457763671875,0.00033570360392332077,0.00119022186845541,0.001739555038511753,0.0015259254723787308,0.0007019257172942162,0.00006103701889514923,0.00009155552834272385,0.0007019257172942162,0.0015564439818263054,0.002288888208568096,0.0022583696991205215,0.0012817773967981339,-0.0001220703125,-0.00146484375,-0.002166748046875,-0.00201416015625,-0.001495361328125,-0.001129150390625,-0.001190185546875,-0.001861572265625,-0.002410888671875,-0.002105712890625,-0.00146484375,-0.000518798828125,0.0007019257172942162,0.0014954069629311562,0.0011291848495602608,0.00006103701889514923,-0.00091552734375,-0.001739501953125,-0.002044677734375,-0.0015869140625,-0.00140380859375,-0.00164794921875,-0.00177001953125,-0.001953125,-0.002166748046875,-0.001922607421875,-0.000885009765625,0.00045777764171361923,0.0018921475857496262,0.0029602954164147377,0.0031128879636526108,0.0031434064731001854,0.0035401470959186554,0.003662221133708954,0.0035401470959186554,0.003479110077023506,0.003082369454205036,0.0021057771518826485,0.0010681478306651115,0.00030518509447574615,-0.000274658203125,-0.001068115234375,-0.0015869140625,-0.0015869140625,-0.001861572265625,-0.002105712890625,-0.00189208984375,-0.001678466796875,-0.001251220703125,-0.0008544921875,-0.0013427734375,-0.002105712890625,-0.0018310546875,-0.00103759765625,-0.000885009765625,-0.0009765625,-0.000732421875,-0.00067138671875,-0.00079345703125,-0.00079345703125,-0.0009765625,-0.000885009765625,0.00015259254723787308,0.00119022186845541,0.0011291848495602608,0.0009765923023223877,0.0012512588873505592,0.0012512588873505592,0.0006714072078466415,0,-0.00054931640625,-0.001007080078125,-0.0010986328125,-0.00140380859375,-0.00262451171875,-0.00341796875,-0.003082275390625,-0.00274658203125,-0.002593994140625,-0.00238037109375,-0.001983642578125,-0.001434326171875,-0.001129150390625,-0.00103759765625,-0.0008544921875,-0.000274658203125,0.0002136295661330223,0.00015259254723787308,-0.000152587890625,-0.000335693359375,-0.000030517578125,0.00045777764171361923,0.00039674062281847,0.0002441480755805969,0.00033570360392332077,0.0005188146606087685,0.0006408886983990669,0.0005188146606087685,0.00079348124563694,0.001434369944036007,0.0018616290763020515,0.002136295661330223,0.0021973326802253723,0.0021057771518826485,0.0024109622463583946,0.002868739888072014,0.002685628831386566,0.00198370311409235,0.0014038514345884323,0.0006714072078466415,-0.000335693359375,-0.000946044921875,-0.00115966796875,-0.0010986328125,-0.000732421875,-0.0003662109375,-0.000152587890625,-0.000152587890625,0.00006103701889514923,0.0004882961511611938,0.0002136295661330223,-0.0003662109375,-0.000457763671875,-0.00030517578125,-0.000823974609375,-0.001312255859375,-0.00128173828125,-0.0009765625,-0.000457763671875,0.00009155552834272385,0.00027466658502817154,0.00045777764171361923,0.0010071108117699623,0.0012512588873505592,0.0008850367739796638,0.0009155552834272385,0.0016174810007214546,0.002288888208568096,0.002471999265253544,0.0019531846046447754,0.0014038514345884323,0.0012207403779029846,0.0010071108117699623,0.0006408886983990669,0.00009155552834272385,-0.000640869140625,-0.001129150390625,-0.001556396484375,-0.00225830078125,-0.00274658203125,-0.002593994140625,-0.0018310546875,-0.0009765625,-0.000518798828125,-0.00018310546875,0.0003662221133708954,0.0009155552834272385,0.0012512588873505592,0.0012817773967981339,0.001342814415693283,0.0016479995101690292,0.0017700735479593277,0.0014038514345884323,0.00079348124563694,0.0005188146606087685,0.00039674062281847,0.00006103701889514923,-0.000244140625,-0.0003662109375,-0.000335693359375,-0.000335693359375,-0.00079345703125,-0.001190185546875,-0.001129150390625,-0.0006103515625,0.0001831110566854477,0.0008239997550845146,0.0013122959062457085,0.0016785180196166039,0.0018616290763020515,0.0015564439818263054,0.0007324442267417908,0.00027466658502817154,0.00030518509447574615,-0.000030517578125,-0.001068115234375,-0.00201416015625,-0.002197265625,-0.001953125,-0.001617431640625,-0.00115966796875,-0.000946044921875,-0.00091552734375,-0.000732421875,-0.00079345703125,-0.00103759765625,-0.000946044921875,-0.000701904296875,-0.00054931640625,-0.000946044921875,-0.001678466796875,-0.001708984375,-0.001129150390625,-0.00079345703125,-0.000762939453125,-0.000701904296875,-0.000518798828125,-0.000274658203125,0.000030518509447574615,0.0003662221133708954,0.0006103701889514923,0.0009155552834272385,0.0014038514345884323,0.0017090365290641785,0.0017090365290641785,0.001831110566854477,0.0021668141707777977,0.002533036284148693,0.0025025177747011185,0.0018005920574069023,0.0012512588873505592,0.0007019257172942162,-0.000244140625,-0.000823974609375,-0.001190185546875,-0.00146484375,-0.000946044921875,-0.00018310546875,0.00027466658502817154,0.00039674062281847,0.00015259254723787308,-0.00006103515625,-0.000030517578125,0.00009155552834272385,0.0001831110566854477,0.0003662221133708954,0.0006714072078466415,0.0006103701889514923,0,-0.000701904296875,-0.000946044921875,-0.000823974609375,-0.000579833984375,-0.000091552734375,0.00033570360392332077,0.00030518509447574615,0.00027466658502817154,0.00027466658502817154,0.0002441480755805969,0.0005798516795039177,0.0012207403779029846,0.0015564439818263054,0.0013122959062457085,0.00119022186845541,0.0012512588873505592,0.0008239997550845146,0.00033570360392332077,0.0002136295661330223,0.0001831110566854477,0.000030518509447574615,-0.00018310546875,-0.00042724609375,-0.0008544921875,-0.001129150390625,-0.0009765625,-0.001129150390625,-0.00128173828125,-0.000518798828125,0.0006714072078466415,0.0014038514345884323,0.0017090365290641785,0.00158696249127388,0.0009765923023223877,0.0005798516795039177,0.0004882961511611938,-0.00006103515625,-0.001007080078125,-0.0013427734375,-0.001251220703125,-0.001556396484375,-0.001983642578125,-0.00189208984375,-0.001434326171875,-0.001220703125,-0.001007080078125,-0.000732421875,-0.000640869140625,-0.000518798828125,-0.000091552734375,-0.00030517578125,-0.00091552734375,-0.00048828125,0.00039674062281847,0.0005493331700563431,0.0006714072078466415,0.0010681478306651115,0.0010681478306651115,0.0005188146606087685,0,-0.00018310546875,-0.0001220703125,0.00033570360392332077,0.0008239997550845146,0.0008239997550845146,0.0007019257172942162,0.0008545182645320892,0.0009460737928748131,0.0007629627361893654,0.0007019257172942162,0.0008239997550845146,0.00079348124563694,0.0006714072078466415,0.0002441480755805969,-0.000335693359375,-0.0006103515625,-0.00067138671875,-0.000946044921875,-0.0008544921875,-0.00006103515625,0.0004882961511611938,0.0006103701889514923,0.0007019257172942162,0.0005188146606087685,0.00012207403779029846,-0.000091552734375,-0.000274658203125,-0.000457763671875,-0.0003662109375,0,0.00015259254723787308,-0.000030517578125,-0.000213623046875,-0.00018310546875,0,0.0003662221133708954,0.0006714072078466415,0.0010071108117699623,0.00119022186845541,0.0011291848495602608,0.0008850367739796638,0.0006714072078466415,0.0006408886983990669,0.00045777764171361923,0.0002441480755805969,0,-0.00048828125,-0.000762939453125,-0.000885009765625,-0.00152587890625,-0.001953125,-0.00152587890625,-0.00091552734375,-0.0006103515625,-0.000396728515625,-0.0001220703125,0.00015259254723787308,0.00045777764171361923,0.0008239997550845146,0.0009460737928748131,0.0010071108117699623,0.0008239997550845146,0.00006103701889514923,-0.000762939453125,-0.0015869140625,-0.001953125,-0.0018310546875,-0.001739501953125,-0.00164794921875,-0.001708984375,-0.00177001953125,-0.0015869140625,-0.001312255859375,-0.00091552734375,-0.000396728515625,0.00012207403779029846,0.00045777764171361923,0.00033570360392332077,0.0002441480755805969,0.0002136295661330223,0.000030518509447574615,0.000030518509447574615,-0.00006103515625,-0.000396728515625,-0.00079345703125,-0.00115966796875,-0.001312255859375,-0.001312255859375,-0.00091552734375,0.000030518509447574615,0.0008545182645320892,0.0012512588873505592,0.001434369944036007,0.00119022186845541,0.0007629627361893654,0.0006408886983990669,0.0006103701889514923,0.0003662221133708954,0.0003662221133708954,0.0006408886983990669,0.00009155552834272385,-0.00079345703125,-0.00091552734375,-0.00054931640625,-0.00006103515625,0.0004882961511611938,0.0008850367739796638,0.0009460737928748131,0.0008239997550845146,0.0007324442267417908,0.0008239997550845146,0.0010071108117699623,0.0012207403779029846,0.0012207403779029846,0.0009155552834272385,0.0005798516795039177,0.00030518509447574615,-0.00018310546875,-0.00091552734375,-0.00140380859375,-0.001739501953125,-0.001678466796875,-0.001220703125,-0.00079345703125,-0.000457763671875,-0.0001220703125,0.0002136295661330223,0.00033570360392332077,-0.0001220703125,-0.000579833984375,-0.000335693359375,0.00006103701889514923,0.00012207403779029846,-0.0001220703125,-0.000518798828125,-0.000946044921875,-0.001373291015625,-0.001495361328125,-0.001434326171875,-0.001007080078125,-0.000091552734375,0.0006714072078466415,0.0007019257172942162,0.0002441480755805969,0.0001831110566854477,0.0003662221133708954,0.00009155552834272385,0,0.00030518509447574615,0.00045777764171361923,0.00015259254723787308,-0.00048828125,-0.001312255859375,-0.00164794921875,-0.001373291015625,-0.000885009765625,-0.000518798828125,-0.0006103515625,-0.00067138671875,-0.000457763671875,-0.000640869140625,-0.0008544921875,-0.0006103515625,-0.00006103515625,0.0004882961511611938,0.0006714072078466415,0.0005798516795039177,0.0004272591322660446,0.00006103701889514923,-0.000213623046875,-0.000152587890625,0.00006103701889514923,0.00012207403779029846,0.00009155552834272385,0.0004882961511611938,0.0008239997550845146,0.0008545182645320892,0.0013122959062457085,0.002075258642435074,0.0025940733030438423,0.0027161473408341408,0.0024414807558059692,0.0019226660951972008,0.001342814415693283,0.0009765923023223877,0.0008545182645320892,0.00030518509447574615,-0.00054931640625,-0.00103759765625,-0.000732421875,-0.000213623046875,0.00012207403779029846,0.0006714072078466415,0.0010986663401126862,0.001037629321217537,0.00079348124563694,0.0005188146606087685,0.0003662221133708954,0.0007324442267417908,0.001342814415693283,0.0015564439818263054,0.0011597033590078354,0.00027466658502817154,-0.00042724609375,-0.000732421875,-0.000701904296875,-0.0003662109375,0.00030518509447574615,0.0009765923023223877,0.0010986663401126862,0.0008850367739796638,0.0005493331700563431,0.0004882961511611938,0.0008239997550845146,0.0012207403779029846,0.0016479995101690292,0.001434369944036007,0.0004882961511611938,-0.000091552734375,-0.000335693359375,-0.000701904296875,-0.000946044921875,-0.000823974609375,-0.0009765625,-0.001434326171875,-0.0013427734375,-0.001190185546875,-0.0013427734375,-0.001007080078125,-0.0003662109375,-0.00006103515625,0.00012207403779029846,0.0006408886983990669,0.00119022186845541,0.0010986663401126862,0.0009460737928748131,0.0009460737928748131,0.00079348124563694,0.0007019257172942162,0.0006714072078466415,0.00039674062281847,0.0003662221133708954,0.0006714072078466415,0.0006103701889514923,0.00012207403779029846,0.00009155552834272385,0.0004882961511611938,0.0006103701889514923,0.0006408886983990669,0.00045777764171361923,-0.00006103515625,-0.0003662109375,-0.000457763671875,-0.000823974609375,-0.000946044921875,-0.000457763671875,-0.00006103515625,-0.000335693359375,-0.000579833984375,-0.00042724609375,-0.000579833984375,-0.000823974609375,-0.00067138671875,-0.000640869140625,-0.0006103515625,-0.000213623046875,-0.000152587890625,-0.0006103515625,-0.00054931640625,-0.000030517578125,0.00012207403779029846,-0.000030517578125,-0.000244140625,-0.00067138671875,-0.00146484375,-0.001861572265625,-0.001739501953125,-0.001678466796875,-0.001190185546875,-0.000396728515625,-0.00054931640625,-0.000885009765625,-0.000640869140625,-0.00042724609375,-0.000152587890625,0.00033570360392332077,0.0008850367739796638,0.001037629321217537,0.0006408886983990669,0.0001831110566854477,-0.000457763671875,-0.000823974609375,-0.000457763671875,0,0.00033570360392332077,0.00045777764171361923,0.0004272591322660446,0.0003662221133708954,0,-0.000213623046875,-0.00018310546875,0,0.00027466658502817154,0.00015259254723787308,-0.00006103515625,-0.000030517578125,0.00012207403779029846,0.00030518509447574615,0.00027466658502817154,0.0001831110566854477,0.0002136295661330223,0.00015259254723787308,-0.000091552734375,-0.000457763671875,-0.00042724609375,-0.000244140625,-0.0003662109375,-0.000244140625,0,0,0,0,-0.000091552734375,-0.00030517578125,-0.000335693359375,0,0.0001831110566854477,0.00030518509447574615,0.0007324442267417908,0.001037629321217537,0.00079348124563694,0.0003662221133708954,0.0004272591322660446,0.0006408886983990669,0.0007629627361893654,0.0009155552834272385,0.0008545182645320892,0.0005188146606087685,-0.000030517578125,-0.000732421875,-0.00146484375,-0.002044677734375,-0.0020751953125,-0.0015869140625,-0.001007080078125,-0.00054931640625,-0.00030517578125,-0.00030517578125,-0.0003662109375,0,0.0004882961511611938,0.0007019257172942162,0.0008239997550845146,0.0008545182645320892,0.0009765923023223877,0.0009460737928748131,0.0006714072078466415,0.0004882961511611938,0.0002441480755805969,0.00027466658502817154,0.00045777764171361923,0.00030518509447574615,0.0002441480755805969,0.00045777764171361923,0.0004272591322660446,0.00012207403779029846,0.00012207403779029846,0.00033570360392332077,0.0007629627361893654,0.0012207403779029846,0.0011597033590078354,0.0006408886983990669,0.00009155552834272385,-0.000335693359375,-0.000823974609375,-0.001373291015625,-0.001495361328125,-0.001312255859375,-0.001312255859375,-0.0013427734375,-0.001220703125,-0.000823974609375,-0.000244140625,0.00039674062281847,0.0009155552834272385,0.00119022186845541,0.00158696249127388,0.0019226660951972008,0.0020142216235399246,0.00198370311409235,0.0017090365290641785,0.0012817773967981339,0.0009460737928748131,0.0006408886983990669,0.0003662221133708954,0.0003662221133708954,0.0007019257172942162,0.0007019257172942162,0.0002136295661330223,-0.00030517578125,-0.000640869140625,-0.000732421875,-0.000732421875,-0.00054931640625,-0.00006103515625,0.00033570360392332077,0.00039674062281847,0.000030518509447574615,-0.000457763671875,-0.0006103515625,-0.000579833984375,-0.000457763671875,-0.000244140625,-0.00018310546875,-0.000244140625,-0.000396728515625,-0.000640869140625,-0.00054931640625,0.00009155552834272385,0.0010986663401126862,0.0014038514345884323,0.0006714072078466415,-0.00030517578125,-0.000946044921875,-0.001251220703125,-0.0015869140625,-0.001434326171875,-0.00079345703125,-0.000732421875,-0.001220703125,-0.001678466796875,-0.00201416015625,-0.001983642578125,-0.001251220703125,-0.000335693359375,0.0002136295661330223,0.0006408886983990669,0.0011291848495602608,0.0011597033590078354,0.001037629321217537,0.00119022186845541,0.0014648884534835815,0.0014038514345884323,0.0009155552834272385,0.0004272591322660446,0,-0.000152587890625,0,0.000030518509447574615,0.0002441480755805969,0.0003662221133708954,-0.000152587890625,-0.00067138671875,-0.00042724609375,0.00009155552834272385,0.0004272591322660446,0.00079348124563694,0.001037629321217537,0.0006408886983990669,0.0002136295661330223,0.0001831110566854477,0.000030518509447574615,-0.000091552734375,0.0002441480755805969,0.0005493331700563431,0.00030518509447574615,0.000030518509447574615,0.00006103701889514923,0.00006103701889514923,-0.000091552734375,-0.0003662109375,-0.00067138671875,-0.00079345703125,-0.00067138671875,-0.000518798828125,-0.000579833984375,-0.00079345703125,-0.0008544921875,-0.000885009765625,-0.00091552734375,-0.000946044921875,-0.000823974609375,-0.000640869140625,-0.000518798828125,-0.0003662109375,-0.000335693359375,-0.00006103515625,0.00079348124563694,0.001434369944036007,0.0013122959062457085,0.0011291848495602608,0.0012207403779029846,0.0008850367739796638,0.0001831110566854477,-0.000152587890625,-0.0003662109375,-0.000640869140625,-0.000457763671875,-0.000213623046875,-0.00067138671875,-0.00128173828125,-0.001617431640625,-0.002166748046875,-0.002532958984375,-0.001953125,-0.000701904296875,0.00012207403779029846,0.0004882961511611938,0.00045777764171361923,-0.000091552734375,-0.00054931640625,-0.000457763671875,-0.00018310546875,0.0001831110566854477,0.00079348124563694,0.0011291848495602608,0.00079348124563694,0.0005188146606087685,0.0007629627361893654,0.0008850367739796638,0.0006714072078466415,0.0006408886983990669,0.0004272591322660446,0.0001831110566854477,0.0004272591322660446,0.0004882961511611938,0.00033570360392332077,0.0003662221133708954,0.0004882961511611938,0.00045777764171361923,0,-0.00054931640625,-0.0008544921875,-0.000946044921875,-0.00079345703125,-0.00067138671875,-0.000885009765625,-0.001007080078125,-0.000762939453125,-0.00054931640625,-0.00030517578125,0,0.0004272591322660446,0.0012207403779029846,0.0016174810007214546,0.001434369944036007,0.0012817773967981339,0.0012207403779029846,0.0012207403779029846,0.0010681478306651115,0.0004882961511611938,-0.000152587890625,-0.00042724609375,-0.00006103515625,0.0002136295661330223,0.0002136295661330223,0.0005798516795039177,0.0009765923023223877,0.0008545182645320892,0.00030518509447574615,-0.000244140625,-0.000732421875,-0.00091552734375,-0.000640869140625,-0.000457763671875,-0.000518798828125,-0.000579833984375,-0.000946044921875,-0.00177001953125,-0.002716064453125,-0.00311279296875,-0.00286865234375,-0.00262451171875,-0.002166748046875,-0.001495361328125,-0.00103759765625,-0.00030517578125,0.0004272591322660446,0.00079348124563694,0.0010681478306651115,0.0014954069629311562,0.0018005920574069023,0.0017700735479593277,0.0016785180196166039,0.0014954069629311562,0.0010986663401126862,0.0008850367739796638,0.0005798516795039177,-0.00018310546875,-0.001007080078125,-0.001617431640625,-0.00177001953125,-0.001312255859375,-0.000762939453125,-0.000457763671875,-0.000396728515625,-0.000274658203125,0.0001831110566854477,0.00045777764171361923,0.0002441480755805969,0.0002136295661330223,0.0005493331700563431,0.0006103701889514923,0.00015259254723787308,-0.0001220703125,-0.000152587890625,-0.000244140625,0,0.0002136295661330223,0.000030518509447574615,0,0.00009155552834272385,0.0002441480755805969,0.0005188146606087685,0.0009460737928748131,0.0016785180196166039,0.002227851189672947,0.002136295661330223,0.0013733329251408577,0.0005798516795039177,0.00012207403779029846,-0.000244140625,-0.0006103515625,-0.0008544921875,-0.001007080078125,-0.00128173828125,-0.00177001953125,-0.0020751953125,-0.002227783203125,-0.002044677734375,-0.001068115234375,0.00012207403779029846,0.0008850367739796638,0.001342814415693283,0.00198370311409235,0.0025635547935962677,0.002685628831386566,0.002685628831386566,0.0024109622463583946,0.0015564439818263054,0.0005188146606087685,-0.00030517578125,-0.00091552734375,-0.001190185546875,-0.001129150390625,-0.000762939453125,-0.0003662109375,-0.00042724609375,-0.0008544921875,-0.000885009765625,-0.000335693359375,0.00030518509447574615,0.0011597033590078354,0.0019226660951972008,0.002136295661330223,0.0017090365290641785,0.0009765923023223877,0.000030518509447574615,-0.0006103515625,-0.00054931640625,-0.000030517578125,0.00033570360392332077,0.000030518509447574615,-0.00091552734375,-0.001556396484375,-0.001678466796875,-0.00164794921875,-0.0010986328125,-0.000244140625,0.00039674062281847,0.0005493331700563431,0.000030518509447574615,-0.00048828125,-0.000518798828125,-0.00030517578125,0.00009155552834272385,0.0002136295661330223,-0.000274658203125,-0.001068115234375,-0.001617431640625,-0.001617431640625,-0.00146484375,-0.000762939453125,0.0005798516795039177,0.0016785180196166039,0.0019226660951972008,0.0017090365290641785,0.0016785180196166039,0.0019226660951972008,0.0021973326802253723,0.0025940733030438423,0.0029602954164147377,0.002624591812491417,0.0015259254723787308,0.00027466658502817154,-0.0008544921875,-0.001739501953125,-0.001708984375,-0.000732421875,0,-0.000030517578125,-0.000274658203125,-0.00042724609375,-0.0006103515625,-0.0003662109375,0.0006103701889514923,0.0017090365290641785,0.00238044373691082,0.0023499252274632454,0.0015564439818263054,0.0006408886983990669,0.00033570360392332077,0.00045777764171361923,0.0004272591322660446,0.0002441480755805969,0.00006103701889514923,-0.0003662109375,-0.000823974609375,-0.00079345703125,-0.000335693359375,0.0005798516795039177,0.0014954069629311562,0.001434369944036007,0.00079348124563694,0.00027466658502817154,-0.000213623046875,-0.00067138671875,-0.00067138671875,-0.00030517578125,-0.0003662109375,-0.000885009765625,-0.001373291015625,-0.00189208984375,-0.001953125,-0.001190185546875,-0.000244140625,0.0006408886983990669,0.0018005920574069023,0.0025940733030438423,0.00238044373691082,0.0020142216235399246,0.0019531846046447754,0.0015259254723787308,0.0009765923023223877,0.00045777764171361923,-0.000396728515625,-0.0010986328125,-0.00128173828125,-0.001556396484375,-0.001953125,-0.0018310546875,-0.001220703125,-0.0010986328125,-0.001312255859375,-0.0010986328125,-0.000823974609375,-0.00042724609375,0.0004272591322660446,0.00079348124563694,0.0006103701889514923,0.0007629627361893654,0.0006714072078466415,-0.000396728515625,-0.00152587890625,-0.001739501953125,-0.0015869140625,-0.001434326171875,-0.0010986328125,-0.001190185546875,-0.0015869140625,-0.001220703125,-0.000396728515625,-0.000091552734375,0.0005493331700563431,0.0018616290763020515,0.002533036284148693,0.002471999265253544,0.002288888208568096,0.0019226660951972008,0.0011291848495602608,0.0002136295661330223,-0.000335693359375,-0.0010986328125,-0.0018310546875,-0.0018310546875,-0.0020751953125,-0.00244140625,-0.001861572265625,-0.0009765625,-0.000244140625,0.0006103701889514923,0.00158696249127388,0.002136295661330223,0.002288888208568096,0.0024109622463583946,0.0019531846046447754,0.001434369944036007,0.0014038514345884323,0.0008545182645320892,-0.0001220703125,-0.001068115234375,-0.0020751953125,-0.0028076171875,-0.003204345703125,-0.003082275390625,-0.0025634765625,-0.002197265625,-0.00177001953125,-0.00146484375,-0.0013427734375,-0.000701904296875,0.00009155552834272385,0.0006103701889514923,0.0010681478306651115,0.001342814415693283,0.0012817773967981339,0.0011291848495602608,0.001037629321217537,0.0007019257172942162,0.00030518509447574615,-0.000030517578125,-0.0008544921875,-0.001434326171875,-0.00115966796875,-0.00054931640625,-0.000213623046875,-0.000030517578125,0.0001831110566854477,0.00015259254723787308,-0.000030517578125,0,0.000030518509447574615,-0.000152587890625,-0.000335693359375,-0.0003662109375,-0.00079345703125,-0.00140380859375,-0.00115966796875,-0.0006103515625,-0.00054931640625,-0.000457763671875,-0.000091552734375,0,0.00012207403779029846,0.00039674062281847,0.0004882961511611938,0.0009460737928748131,0.001739555038511753,0.002075258642435074,0.0021057771518826485,0.0019226660951972008,0.0013122959062457085,0.0007019257172942162,0.0002441480755805969,0.0001831110566854477,0.00039674062281847,0.0001831110566854477,-0.00030517578125,-0.00079345703125,-0.001312255859375,-0.00152587890625,-0.001434326171875,-0.0010986328125,-0.00054931640625,-0.000335693359375,-0.000213623046875,0.000030518509447574615,0.00006103701889514923,0.0002136295661330223,0.0004272591322660446,0.0003662221133708954,0.0003662221133708954,0.00033570360392332077,0.0004882961511611938,0.0009460737928748131,0.0010681478306651115,0.0011597033590078354,0.0012207403779029846,0.0007324442267417908,0.00012207403779029846,-0.000640869140625,-0.0015869140625,-0.0023193359375,-0.00286865234375,-0.00311279296875,-0.003082275390625,-0.0029296875,-0.00238037109375,-0.001739501953125,-0.001373291015625,-0.00103759765625,-0.00042724609375,0.0002136295661330223,0.0006714072078466415,0.001037629321217537,0.0013122959062457085,0.00119022186845541,0.0007019257172942162,0.00039674062281847,0.00033570360392332077,0.00009155552834272385,-0.00006103515625,0.00012207403779029846,0.00027466658502817154,0.00006103701889514923,-0.000152587890625,-0.000244140625,-0.000274658203125,-0.000274658203125,0.0001831110566854477,0.0009765923023223877,0.001342814415693283,0.0015564439818263054,0.0018616290763020515,0.0018005920574069023,0.0013733329251408577,0.00079348124563694,0.0004272591322660446,0.00012207403779029846,-0.00006103515625,0.00015259254723787308,0.00009155552834272385,-0.000244140625,-0.0003662109375,-0.00048828125,-0.0003662109375,0.00006103701889514923,0.0002136295661330223,0.0001831110566854477,0.0006103701889514923,0.0009155552834272385,0.001037629321217537,0.0016479995101690292,0.00198370311409235,0.0018616290763020515,0.0017700735479593277,0.0015564439818263054,0.0012817773967981339,0.0008850367739796638,0.00045777764171361923,0.00009155552834272385,-0.00030517578125,-0.000640869140625,-0.00079345703125,-0.000823974609375,-0.000732421875,-0.000701904296875,-0.00067138671875,-0.00079345703125,-0.000640869140625,-0.0001220703125,0.00006103701889514923,0.00039674062281847,0.0006408886983990669,0.0005798516795039177,0.0006408886983990669,0.0002441480755805969,-0.000335693359375,-0.00048828125,-0.00054931640625,-0.00091552734375,-0.00115966796875,-0.001129150390625,-0.0010986328125,-0.001068115234375,-0.0006103515625,-0.0001220703125,-0.000152587890625,0.0001831110566854477,0.001037629321217537,0.0014954069629311562,0.0013122959062457085,0.0009155552834272385,0.0003662221133708954,-0.00030517578125,-0.00054931640625,-0.000518798828125,-0.0008544921875,-0.000946044921875,-0.000823974609375,-0.00103759765625,-0.001220703125,-0.000885009765625,-0.000274658203125,0.0004882961511611938,0.0013122959062457085,0.0015259254723787308,0.0011597033590078354,0.001037629321217537,0.0014954069629311562,0.0019226660951972008,0.00198370311409235,0.0021668141707777977,0.002288888208568096,0.001739555038511753,0.0009765923023223877,0.0005798516795039177,0.0002136295661330223,-0.000091552734375,0.000030518509447574615,0.00009155552834272385,-0.0006103515625,-0.001220703125,-0.0010986328125,-0.0008544921875,-0.000396728515625,0.00039674062281847,0.0008850367739796638,0.0008239997550845146,0.0005188146606087685,0.00006103701889514923,-0.00079345703125,-0.00146484375,-0.001434326171875,-0.001373291015625,-0.00140380859375,-0.001068115234375,-0.0009765625,-0.00128173828125,-0.001373291015625,-0.001373291015625,-0.0015869140625,-0.001312255859375,-0.0006103515625,-0.00018310546875,-0.000091552734375,0.00006103701889514923,0,-0.000518798828125,-0.000457763671875,-0.000091552734375,-0.000213623046875,-0.000213623046875,-0.000091552734375,-0.000213623046875,-0.000244140625,-0.000091552734375,0.000030518509447574615,0,-0.0003662109375,-0.000457763671875,-0.00042724609375,-0.00042724609375,0.00006103701889514923,0.0005188146606087685,0.0007324442267417908,0.0012207403779029846,0.0016174810007214546,0.0016785180196166039,0.0013733329251408577,0.0010071108117699623,0.0008850367739796638,0.0010681478306651115,0.0010681478306651115,0.0005493331700563431,0.0002136295661330223,0.00015259254723787308,0,0.0003662221133708954,0.0009460737928748131,0.0008239997550845146,0.0007019257172942162,0.0006103701889514923,-0.000091552734375,-0.00091552734375,-0.0010986328125,-0.00079345703125,-0.0003662109375,0.00033570360392332077,0.0011597033590078354,0.00119022186845541,0.0007629627361893654,0.00033570360392332077,0,0.00012207403779029846,0.0008545182645320892,0.0016174810007214546,0.0015259254723787308,0.0007019257172942162,0,-0.000579833984375,-0.00091552734375,-0.0008544921875,-0.00042724609375,0.00015259254723787308,0.0006103701889514923,0.0006408886983990669,0.00009155552834272385,-0.000579833984375,-0.000823974609375,-0.000885009765625,-0.00091552734375,-0.001190185546875,-0.001495361328125,-0.001251220703125,-0.00079345703125,-0.000335693359375,0.00027466658502817154,0.0005798516795039177,0.0006714072078466415,0.0003662221133708954,-0.000701904296875,-0.001678466796875,-0.0015869140625,-0.0008544921875,0.0002441480755805969,0.0014648884534835815,0.0019226660951972008,0.001434369944036007,0.0006408886983990669,-0.000091552734375,-0.000885009765625,-0.001190185546875,-0.00079345703125,0.00009155552834272385,0.0009155552834272385,0.00079348124563694,0.00012207403779029846,-0.000732421875,-0.001739501953125,-0.002197265625,-0.0018310546875,-0.0009765625,-0.00006103515625,0.00045777764171361923,0.0005188146606087685,0.00027466658502817154,-0.000213623046875,-0.000640869140625,-0.00054931640625,-0.000274658203125,-0.00006103515625,0.0005493331700563431,0.0012817773967981339,0.001739555038511753,0.0021057771518826485,0.00238044373691082,0.00238044373691082,0.0023194067180156708,0.0020447401329874992,0.0014038514345884323,0.0007629627361893654,0.0005188146606087685,0.0004272591322660446,0.00030518509447574615,0.00012207403779029846,-0.000335693359375,-0.000885009765625,-0.001129150390625,-0.001495361328125,-0.001983642578125,-0.00177001953125,-0.0008544921875,-0.000244140625,0.00009155552834272385,0.0007324442267417908,0.0008850367739796638,0.0002136295661330223,-0.000335693359375,-0.00054931640625,-0.000732421875,-0.0008544921875,-0.00042724609375,0.00012207403779029846,-0.000152587890625,-0.000732421875,-0.001190185546875,-0.002197265625,-0.00311279296875,-0.00286865234375,-0.00201416015625,-0.0010986328125,0.00006103701889514923,0.0011291848495602608,0.0012512588873505592,0.0006103701889514923,-0.000244140625,-0.000701904296875,-0.000396728515625,0.00027466658502817154,0.001037629321217537,0.0015259254723787308,0.001434369944036007,0.0005798516795039177,-0.000579833984375,-0.001190185546875,-0.001312255859375,-0.001007080078125,-0.000213623046875,0.0005493331700563431,0.0006714072078466415,0.0001831110566854477,-0.00048828125,-0.00115966796875,-0.00152587890625,-0.00115966796875,0,0.0011291848495602608,0.00119022186845541,0.0006714072078466415,0.00039674062281847,-0.000335693359375,-0.0010986328125,-0.000457763671875,0.00039674062281847,0.0007629627361893654,0.0011291848495602608,0.0008239997550845146,-0.000274658203125,-0.001220703125,-0.001495361328125,-0.001251220703125,-0.000579833984375,0.0002441480755805969,0.0009155552834272385,0.0010681478306651115,0.0005493331700563431,-0.0003662109375,-0.00115966796875,-0.0015869140625,-0.00128173828125,-0.000244140625,0.0008850367739796638,0.00198370311409235,0.002685628831386566,0.0026551103219389915,0.00198370311409235,0.0007629627361893654,-0.000579833984375,-0.00103759765625,-0.0006103515625,0.00012207403779029846,0.0009460737928748131,0.00158696249127388,0.001342814415693283,0.00030518509447574615,-0.000701904296875,-0.00152587890625,-0.001617431640625,-0.000579833984375,0.0008545182645320892,0.001831110566854477,0.0022583696991205215,0.0021057771518826485,0.0008239997550845146,-0.001007080078125,-0.00238037109375,-0.003173828125,-0.002960205078125,-0.0015869140625,-0.00006103515625,0.0010071108117699623,0.0016479995101690292,0.0013122959062457085,0.00006103701889514923,-0.000946044921875,-0.001068115234375,-0.000457763671875,0.0006103701889514923,0.0018616290763020515,0.0024414807558059692,0.00198370311409235,0.0010986663401126862,0.000030518509447574615,-0.001495361328125,-0.002471923828125,-0.002166748046875,-0.00152587890625,-0.00079345703125,0.00030518509447574615,0.0007629627361893654,0.0002441480755805969,-0.000396728515625,-0.001007080078125,-0.00201416015625,-0.002349853515625,-0.0013427734375,-0.000457763671875,-0.000152587890625,0.0002441480755805969,0,-0.0009765625,-0.00140380859375,-0.001190185546875,-0.00103759765625,-0.000732421875,0.0002136295661330223,0.0009765923023223877,0.0008850367739796638,0.0008239997550845146,0.0008850367739796638,0.0003662221133708954,0.00009155552834272385,0.00030518509447574615,0.0002441480755805969,0.0002136295661330223,0.0004882961511611938,0.0006714072078466415,0.0004882961511611938,0.00033570360392332077,0.0006714072078466415,0.0010986663401126862,0.00158696249127388,0.0017700735479593277,0.0013733329251408577,0.0010986663401126862,0.0010681478306651115,0.0012207403779029846,0.0011597033590078354,0.0008239997550845146,0.0006408886983990669,0.0003662221133708954,-0.0001220703125,-0.000579833984375,-0.0010986328125,-0.001007080078125,-0.000244140625,0.0004882961511611938,0.0008850367739796638,0.00079348124563694,0.00045777764171361923,0.00039674062281847,0.0006103701889514923,0.0006714072078466415,0.0006103701889514923,0.0007629627361893654,0.0006714072078466415,0.00006103701889514923,-0.0003662109375,-0.000732421875,-0.000946044921875,-0.00067138671875,-0.0003662109375,-0.000335693359375,-0.000335693359375,-0.00018310546875,0.00006103701889514923,0.0002136295661330223,0.0004272591322660446,0.0008850367739796638,0.001434369944036007,0.0014954069629311562,0.0012512588873505592,0.0008850367739796638,0.00033570360392332077,0.0001831110566854477,0.0006714072078466415,0.001037629321217537,0.0013122959062457085,0.001739555038511753,0.0015564439818263054,0.00045777764171361923,-0.00048828125,-0.001190185546875,-0.00189208984375,-0.00164794921875,-0.000579833984375,0.00012207403779029846,0.0004882961511611938,0.0005493331700563431,0.00030518509447574615,-0.0001220703125,-0.000701904296875,-0.000946044921875,-0.000885009765625,-0.00054931640625,-0.0001220703125,0.000030518509447574615,-0.000396728515625,-0.0010986328125,-0.001220703125,-0.00091552734375,-0.00067138671875,-0.000274658203125,0.0001831110566854477,0.00027466658502817154,0.00009155552834272385,-0.000091552734375,-0.000274658203125,0.000030518509447574615,0.0006408886983990669,0.0008545182645320892,0.0005493331700563431,-0.000396728515625,-0.001556396484375,-0.002166748046875,-0.002105712890625,-0.001434326171875,-0.000396728515625,0.0006408886983990669,0.0009765923023223877,0.0002136295661330223,-0.00079345703125,-0.001373291015625,-0.0009765625,0.00033570360392332077,0.0018005920574069023,0.002929776906967163,0.003082369454205036,0.002227851189672947,0.0007629627361893654,-0.001129150390625,-0.00238037109375,-0.00189208984375,-0.000579833984375,0.00030518509447574615,0.0007629627361893654,0.0009155552834272385,0.0003662221133708954,-0.000732421875,-0.001708984375,-0.001922607421875,-0.001129150390625,0.0002441480755805969,0.0012817773967981339,0.0016785180196166039,0.0015564439818263054,0.0008850367739796638,0,-0.00091552734375,-0.00177001953125,-0.002227783203125,-0.001739501953125,-0.000762939453125,-0.000091552734375,0.0004882961511611938,0.0010681478306651115,0.0009765923023223877,-0.000030517578125,-0.00140380859375,-0.002227783203125,-0.002105712890625,-0.001129150390625,0.0002441480755805969,0.001434369944036007,0.00198370311409235,0.0010071108117699623,-0.001251220703125,-0.003814697265625,-0.005401611328125,-0.00439453125,-0.001434326171875,0.001739555038511753,0.0042420728132128716,0.004791405983269215,0.003021332435309887,-0.0001220703125,-0.003021240234375,-0.003814697265625,-0.002227783203125,0.0008545182645320892,0.003906369209289551,0.005218665115535259,0.004181035794317722,0.0011291848495602608,-0.002685546875,-0.005157470703125,-0.004791259765625,-0.00189208984375,0.0018921475857496262,0.004669331945478916,0.004943998530507088,0.0028992583975195885,-0.00048828125,-0.003692626953125,-0.005126953125,-0.003875732421875,-0.00030517578125,0.003021332435309887,0.003723258152604103,0.002288888208568096,-0.00006103515625,-0.003387451171875,-0.005828857421875,-0.005218505859375,-0.00244140625,0.00119022186845541,0.004791405983269215,0.006103701889514923,0.004394665360450745,0.0014648884534835815,-0.000946044921875,-0.002166748046875,-0.00140380859375,0.001342814415693283,0.0042420728132128716,0.005310220643877983,0.004028443247079849,0.0007324442267417908,-0.0030517578125,-0.005340576171875,-0.0047607421875,-0.001983642578125,0.0008545182645320892,0.003082369454205036,0.0037842951714992523,0.001739555038511753,-0.0013427734375,-0.00299072265625,-0.002899169921875,-0.001251220703125,0.0013733329251408577,0.0029602954164147377,0.002136295661330223,-0.000030517578125,-0.00225830078125,-0.003662109375,-0.003265380859375,-0.00067138671875,0.0023194067180156708,0.0036011841148138046,0.002685628831386566,-0.00006103515625,-0.003173828125,-0.004302978515625,-0.002685546875,0.0004272591322660446,0.003082369454205036,0.003906369209289551,0.002136295661330223,-0.001739501953125,-0.005157470703125,-0.00628662109375,-0.0047607421875,-0.00042724609375,0.0044862208887934685,0.006805627606809139,0.005523850210011005,0.0014648884534835815,-0.003570556640625,-0.007049560546875,-0.006683349609375,-0.002471923828125,0.0032044434919953346,0.007782219909131527,0.008941923268139362,0.004943998530507088,-0.002166748046875,-0.00799560546875,-0.010589599609375,-0.0087890625,-0.00225830078125,0.005706961266696453,0.010986663401126862,0.010864589363336563,0.005249183624982834,-0.003143310546875,-0.010406494140625,-0.0126953125,-0.0087890625,0,0.00991851557046175,0.01507614366710186,0.01269569993019104,0.004303109832108021,-0.006378173828125,-0.014190673828125,-0.01507568359375,-0.008453369140625,0.002624591812491417,0.01263466291129589,0.0160222165286541,0.010162663646042347,-0.00128173828125,-0.01202392578125,-0.017486572265625,-0.0145263671875,-0.004241943359375,0.008148442022502422,0.01678518019616604,0.016968291252851486,0.008514664135873318,-0.00360107421875,-0.012939453125,-0.015106201171875,-0.009521484375,0.0009765923023223877,0.011017181910574436,0.01553392130881548,0.012573625892400742,0.0040894802659749985,-0.00469970703125,-0.009521484375,-0.009124755859375,-0.00445556640625,0.0018616290763020515,0.00753807183355093,0.010223700664937496,0.008697775192558765,0.004303109832108021,-0.000579833984375,-0.003814697265625,-0.0048828125,-0.00408935546875,-0.0013427734375,0.0016174810007214546,0.004150517284870148,0.006134220398962498,0.00476088747382164,0.0008545182645320892,-0.003143310546875,-0.007537841796875,-0.009796142578125,-0.007476806640625,-0.00244140625,0.0036011841148138046,0.008209479041397572,0.008026367984712124,0.004119998775422573,-0.001220703125,-0.006744384765625,-0.008697509765625,-0.004638671875,0.002227851189672947,0.008514664135873318,0.01156651508063078,0.008606219664216042,0.0014038514345884323,-0.0064697265625,-0.013275146484375,-0.013916015625,-0.006622314453125,0.0037537766620516777,0.013580736704170704,0.018402662128210068,0.014770958572626114,0.0042420728132128716,-0.010406494140625,-0.023284912109375,-0.02569580078125,-0.0146484375,0.006286812946200371,0.028260139748454094,0.04058961570262909,0.03576769307255745,0.01110873743891716,-0.0242919921875,-0.053009033203125,-0.0614013671875,-0.040679931640625,0.005645924247801304,0.055879391729831696,0.08505508303642273,0.07547227293252945,0.02450636401772499,-0.046661376953125,-0.104400634765625,-0.119964599609375,-0.076141357421875,0.013977477326989174,0.10461744666099548,0.15222632884979248,0.13223670423030853,0.04135258123278618,-0.080718994140625,-0.173553466796875,-0.19219970703125,-0.11328125,0.03094576857984066,0.16550187766551971,0.23407696187496185,0.19718009233474731,0.05240027979016304,-0.128173828125,-0.255340576171875,-0.26995849609375,-0.150238037109375,0.05258339270949364,0.23587755858898163,0.32074952125549316,0.25763726234436035,0.05331583693623543,-0.184295654296875,-0.337982177734375,-0.34429931640625,-0.17645263671875,0.08893093466758728,0.31241798400878906,0.4036377966403961,0.3026215434074402,0.03662221133708954,-0.246795654296875,-0.419525146484375,-0.40313720703125,-0.17608642578125,0.1427350640296936,0.3895382583141327,0.46617022156715393,0.317423015832901,-0.003265380859375,-0.318145751953125,-0.48291015625,-0.42474365234375,-0.143646240234375,0.2068544626235962,0.4461195766925812,0.4902493357658386,0.29105502367019653,-0.068145751953125,-0.376708984375,-0.508026123046875,-0.40185546875,-0.0826416015625,0.2609942853450775,0.47050386667251587,0.47407451272010803,0.23178808391094208,-0.129608154296875,-0.403228759765625,-0.490325927734375,-0.3468017578125,-0.023101806640625,0.2924894094467163,0.460585355758667,0.42432934045791626,0.16898098587989807,-0.166473388671875,-0.395416259765625,-0.447113037109375,-0.287261962890625,0.02298043668270111,0.29618212580680847,0.42597734928131104,0.3713186979293823,0.12140262871980667,-0.17938232421875,-0.372711181640625,-0.403350830078125,-0.237213134765625,0.04818872734904289,0.28366953134536743,0.39133885502815247,0.32886746525764465,0.08777123689651489,-0.187286376953125,-0.353363037109375,-0.367156982421875,-0.20068359375,0.06601153314113617,0.2767723500728607,0.37049469351768494,0.29804375767707825,0.055940426886081696,-0.19854736328125,-0.3426513671875,-0.341583251953125,-0.167510986328125,0.08777123689651489,0.28302866220474243,0.36246833205223083,0.269508957862854,0.022705771028995514,-0.2158203125,-0.3411865234375,-0.32281494140625,-0.135528564453125,0.11801507323980331,0.29795220494270325,0.3578905463218689,0.24228644371032715,-0.01409912109375,-0.23883056640625,-0.348785400390625,-0.3101806640625,-0.10028076171875,0.15213477611541748,0.3194677531719208,0.36051514744758606,0.21759697794914246,-0.049652099609375,-0.2698974609375,-0.365631103515625,-0.298858642578125,-0.067962646484375,0.18671223521232605,0.34540849924087524,0.365489661693573,0.1902218759059906,-0.09552001953125,-0.309051513671875,-0.3865966796875,-0.287994384765625,-0.029327392578125,0.22635579109191895,0.37717825174331665,0.3715018033981323,0.15530869364738464,-0.142669677734375,-0.3446044921875,-0.398193359375,-0.263885498046875,0.015381328761577606,0.2709738314151764,0.40269172191619873,0.3570360541343689,0.10794396698474884,-0.19195556640625,-0.3724365234375,-0.396392822265625,-0.226898193359375,0.06976531445980072,0.3089998960494995,0.4136784076690674,0.33024078607559204,0.053590502589941025,-0.228912353515625,-0.382415771484375,-0.375274658203125,-0.17120361328125,0.1192663311958313,0.33082064986228943,0.40092167258262634,0.27335429191589355,-0.012847900390625,-0.270416259765625,-0.385955810546875,-0.332275390625,-0.10369873046875,0.17328409850597382,0.34815514087677,0.3747062683105469,0.2071596384048462,-0.084991455078125,-0.30096435546875,-0.368377685546875,-0.271392822265625,-0.019866943359375,0.22516556084156036,0.35383158922195435,0.32966095209121704,0.11243018507957458,-0.1636962890625,-0.3282470703125,-0.34466552734375,-0.19183349609375,0.06521805375814438,0.2711264491081238,0.3500167727470398,0.2604754865169525,0.013336588628590107,-0.231414794921875,-0.336883544921875,-0.289398193359375,-0.095489501953125,0.15478987991809845,0.3101901412010193,0.3234046399593353,0.17658010125160217,-0.088226318359375,-0.285369873046875,-0.3255615234375,-0.224945068359375,0.0036317026242613792,0.22434155642986298,0.3185216784477234,0.2769554853439331,0.07834101468324661,-0.175018310546875,-0.309783935546875,-0.293548583984375,-0.138580322265625,0.09729300439357758,0.2717368006706238,0.31305888295173645,0.21195104718208313,-0.01654052734375,-0.239471435546875,-0.3175048828125,-0.244171142578125,-0.054718017578125,0.17194128036499023,0.29889827966690063,0.2846461236476898,0.13971373438835144,-0.10491943359375,-0.287567138671875,-0.30389404296875,-0.187255859375,0.030335398390889168,0.23444318771362305,0.30695515871047974,0.24964140355587006,0.05880916863679886,-0.186370849609375,-0.315521240234375,-0.284271240234375,-0.12200927734375,0.1114841178059578,0.28089237213134766,0.31226539611816406,0.2057557851076126,-0.022125244140625,-0.25048828125,-0.3319091796875,-0.2508544921875,-0.05389404296875,0.18045595288276672,0.3165074586868286,0.3014313280582428,0.15381328761577606,-0.09783935546875,-0.301788330078125,-0.330841064453125,-0.215911865234375,0.0060731833800673485,0.23386333882808685,0.32834863662719727,0.28144168853759766,0.10068055987358093,-0.1605224609375,-0.324798583984375,-0.3177490234375,-0.175628662109375,0.06280709058046341,0.26566362380981445,0.32181769609451294,0.251899778842926,0.05621509253978729,-0.2044677734375,-0.336578369140625,-0.289306640625,-0.12847900390625,0.1109958216547966,0.28214362263679504,0.3036896884441376,0.22803430259227753,0.005462813191115856,-0.252410888671875,-0.32757568359375,-0.261077880859375,-0.083770751953125,0.1595812886953354,0.28312021493911743,0.29056674242019653,0.19171728193759918,-0.063140869140625,-0.277496337890625,-0.315704345703125,-0.22784423828125,-0.0208740234375,0.19727164506912231,0.29013946652412415,0.2768028676509857,0.13705863058567047,-0.121368408203125,-0.29681396484375,-0.293548583984375,-0.177032470703125,0.03799554333090782,0.23236793279647827,0.2844630181789398,0.2453077733516693,0.07434308528900146,-0.184356689453125,-0.300262451171875,-0.26519775390625,-0.12652587890625,0.10583819448947906,0.2538529634475708,0.27542954683303833,0.2134769707918167,0.002075258642435074,-0.226776123046875,-0.2994384765625,-0.2408447265625,-0.06402587890625,0.15677358210086823,0.26773887872695923,0.26764732599258423,0.16824854910373688,-0.06170654296875,-0.266754150390625,-0.30181884765625,-0.21002197265625,-0.011871337890625,0.20096439123153687,0.2776879072189331,0.25638601183891296,0.12857447564601898,-0.123809814453125,-0.290191650390625,-0.2906494140625,-0.17779541015625,0.04831080138683319,0.23310036957263947,0.28086185455322266,0.24747459590435028,0.07516708970069885,-0.175506591796875,-0.30206298828125,-0.2774658203125,-0.13165283203125,0.0954008623957634,0.251655638217926,0.28342539072036743,0.2231513410806656,0.025116734206676483,-0.21307373046875,-0.30279541015625,-0.25341796875,-0.093597412109375,0.13153477013111115,0.2552568018436432,0.269661545753479,0.1980040967464447,-0.022369384765625,-0.233612060546875,-0.29010009765625,-0.233917236328125,-0.054931640625,0.15439313650131226,0.24970243871212006,0.26453444361686707,0.174016535282135,-0.04998779296875,-0.23406982421875,-0.278594970703125,-0.210235595703125,-0.02880859375,0.1580858826637268,0.2383495569229126,0.24994659423828125,0.1506088376045227,-0.073944091796875,-0.23248291015625,-0.258209228515625,-0.190338134765625,-0.012786865234375,0.1506088376045227,0.21765801310539246,0.2375560700893402,0.12958158552646637,-0.08148193359375,-0.2061767578125,-0.22674560546875,-0.164215087890625,-0.009857177734375,0.12262336909770966,0.18912319839000702,0.21146275103092194,0.1112094521522522,-0.06640625,-0.164337158203125,-0.183868408203125,-0.1435546875,-0.02581787109375,0.07776115834712982,0.14157536625862122,0.1827143132686615,0.11014129966497421,-0.031219482421875,-0.10821533203125,-0.143829345703125,-0.137603759765625,-0.062652587890625,0.014465773478150368,0.0946989357471466,0.16843165457248688,0.1343729943037033,0.02847376838326454,-0.0455322265625,-0.106109619140625,-0.146820068359375,-0.11962890625,-0.049041748046875,0.06006042659282684,0.17337565124034882,0.17676320672035217,0.09183019399642944,0.006683553569018841,-0.09814453125,-0.1923828125,-0.197235107421875,-0.110931396484375,0.04525895044207573,0.1978514939546585,0.2373119294643402,0.16574601829051971,0.04281746968626976,-0.11541748046875,-0.257293701171875,-0.27935791015625,-0.155914306640625,0.050386060029268265,0.24738304316997528,0.32004761695861816,0.23374126851558685,0.05807672441005707,-0.157440185546875,-0.338165283203125,-0.357513427734375,-0.186004638671875,0.08215582370758057,0.3190710246562958,0.4054994285106659,0.28867459297180176,0.04538102447986603,-0.219268798828125,-0.426483154296875,-0.429962158203125,-0.18536376953125,0.13791313767433167,0.3974730670452118,0.48081910610198975,0.3095492422580719,0.0060731833800673485,-0.296295166015625,-0.512115478515625,-0.464324951171875,-0.147613525390625,0.21680349111557007,0.48133793473243713,0.5342570543289185,0.3033234775066376,-0.0609130859375,-0.3875732421875,-0.582855224609375,-0.47100830078125,-0.082489013671875,0.3013092577457428,0.5550096035003662,0.5714285969734192,0.2606891095638275,-0.15087890625,-0.4764404296875,-0.638824462890625,-0.44903564453125,-0.006134033203125,0.38520461320877075,0.6274605393409729,0.5855891704559326,0.20358897745609283,-0.238372802734375,-0.558441162109375,-0.67919921875,-0.421173095703125,0.0710165724158287,0.4673909842967987,0.6878871917724609,0.5951109528541565,0.1499984711408615,-0.313232421875,-0.629364013671875,-0.724761962890625,-0.398773193359375,0.13260293006896973,0.5265663862228394,0.7430951595306396,0.6146122813224792,0.11767937242984772,-0.37005615234375,-0.691741943359375,-0.76409912109375,-0.390625,0.16519668698310852,0.5595873594284058,0.7841425538063049,0.6480910778045654,0.11621448397636414,-0.389801025390625,-0.7132568359375,-0.789398193359375,-0.4090576171875,0.15338602662086487,0.5510727167129517,0.7983642220497131,0.6816309094429016,0.14429152011871338,-0.36517333984375,-0.69580078125,-0.80548095703125,-0.450897216796875,0.11246071010828018,0.5168004631996155,0.7869197726249695,0.713126003742218,0.20343638956546783,-0.30902099609375,-0.665191650390625,-0.821258544921875,-0.50543212890625,0.048677023500204086,0.45649585127830505,0.7583544254302979,0.7494735717773438,0.2760399281978607,-0.24114990234375,-0.6158447265625,-0.813262939453125,-0.54974365234375,-0.023284912109375,0.3900875747203827,0.7271339893341064,0.7723624110221863,0.3339640498161316,-0.178863525390625,-0.558807373046875,-0.795867919921875,-0.597747802734375,-0.092193603515625,0.335337370634079,0.6940214037895203,0.7814264297485352,0.3816950023174286,-0.117950439453125,-0.50701904296875,-0.782135009765625,-0.63427734375,-0.152862548828125,0.2769249677658081,0.652241587638855,0.7856074571609497,0.43116551637649536,-0.0623779296875,-0.459747314453125,-0.759796142578125,-0.658721923828125,-0.208892822265625,0.21585741639137268,0.6158635020256042,0.8025147318840027,0.4854884445667267,-0.00933837890625,-0.414581298828125,-0.734405517578125,-0.690216064453125,-0.27947998046875,0.1505172848701477,0.573351263999939,0.8156377077102661,0.5500351190567017,0.0634784996509552,-0.3460693359375,-0.704437255859375,-0.734100341796875,-0.35894775390625,0.07522812485694885,0.5092623829841614,0.8103579878807068,0.6327097415924072,0.16565446555614471,-0.267913818359375,-0.66339111328125,-0.778350830078125,-0.458282470703125,-0.0262451171875,0.4108707010746002,0.7881100177764893,0.729880690574646,0.2947172522544861,-0.158447265625,-0.581146240234375,-0.799835205078125,-0.588134765625,-0.161102294921875,0.2926114797592163,0.7201758027076721,0.8015991449356079,0.4460890591144562,-0.015594482421875,-0.45758056640625,-0.781005859375,-0.709197998046875,-0.315032958984375,0.143559068441391,0.5932188034057617,0.8225348591804504,0.616870641708374,0.16196173429489136,-0.30621337890625,-0.6959228515625,-0.78668212890625,-0.491912841796875,-0.044830322265625,0.41471603512763977,0.7711417078971863,0.7493209838867188,0.3586229979991913,-0.111968994140625,-0.533203125,-0.776031494140625,-0.64971923828125,-0.25079345703125,0.20392468571662903,0.6223945021629333,0.7973265647888184,0.5646229386329651,0.1191137433052063,-0.329925537109375,-0.685302734375,-0.74566650390625,-0.463623046875,-0.0386962890625,0.40845972299575806,0.7455672025680542,0.730765700340271,0.36774805188179016,-0.09637451171875,-0.507415771484375,-0.73968505859375,-0.651611328125,-0.2940673828125,0.16791284084320068,0.5921506285667419,0.7830439209938049,0.6014282703399658,0.16797387599945068,-0.290069580078125,-0.63787841796875,-0.74871826171875,-0.52978515625,-0.09161376953125,0.36896878480911255,0.7114169597625732,0.7605517506599426,0.4357127547264099,-0.04974365234375,-0.46234130859375,-0.7249755859375,-0.710845947265625,-0.363555908203125,0.1270790696144104,0.5631885528564453,0.8015075922012329,0.669148862361908,0.22653889656066895,-0.247100830078125,-0.619537353515625,-0.795745849609375,-0.61016845703125,-0.146636962890625,0.3427838981151581,0.7181310653686523,0.8155156373977661,0.5155797004699707,0.010620441287755966,-0.44183349609375,-0.75042724609375,-0.779296875,-0.444488525390625,0.06955168396234512,0.5378887057304382,0.8163396120071411,0.7418744564056396,0.32248908281326294,-0.18603515625,-0.598419189453125,-0.819610595703125,-0.694915771484375,-0.2486572265625,0.26520586013793945,0.670583188533783,0.8468276262283325,0.6414380073547363,0.13751640915870667,-0.3634033203125,-0.71331787109375,-0.828460693359375,-0.569915771484375,-0.065155029296875,0.40873441100120544,0.7696462869644165,0.861018717288971,0.4977263808250427,-0.05084228515625,-0.4744873046875,-0.784149169921875,-0.81494140625,-0.42266845703125,0.08984649181365967,0.5249794125556946,0.861171305179596,0.8166753053665161,0.33039337396621704,-0.202056884765625,-0.59820556640625,-0.845306396484375,-0.73297119140625,-0.278900146484375,0.22525711357593536,0.6666768193244934,0.9091158509254456,0.6977751851081848,0.16483047604560852,-0.33770751953125,-0.716033935546875,-0.87017822265625,-0.62603759765625,-0.119873046875,0.38389232754707336,0.7784356474876404,0.8897671699523926,0.5600451827049255,0.000030518509447574615,-0.4793701171875,-0.78448486328125,-0.8193359375,-0.4915771484375,0.04199346899986267,0.5230262279510498,0.8167973756790161,0.7995849251747131,0.40891751646995544,-0.141815185546875,-0.577728271484375,-0.805419921875,-0.740203857421875,-0.32733154296875,0.2058168351650238,0.5972472429275513,0.7979064583778381,0.7109591960906982,0.26654866337776184,-0.272613525390625,-0.63336181640625,-0.78021240234375,-0.63671875,-0.1842041015625,0.300027459859848,0.6132694482803345,0.7529526948928833,0.6071047186851501,0.15222632884979248,-0.34552001953125,-0.660491943359375,-0.72686767578125,-0.497467041015625,-0.063812255859375,0.33716848492622375,0.5907772779464722,0.6779686808586121,0.4991302192211151,0.06173894554376602,-0.38458251953125,-0.625244140625,-0.626068115234375,-0.39385986328125,-0.00225830078125,0.3494369387626648,0.5443281531333923,0.5833002924919128,0.40140995383262634,-0.001190185546875,-0.389129638671875,-0.551666259765625,-0.504486083984375,-0.30340576171875,0.017639698460698128,0.317239910364151,0.47221291065216064,0.4853663742542267,0.32273322343826294,-0.018035888671875,-0.33673095703125,-0.45477294921875,-0.411529541015625,-0.249755859375,0.030487991869449615,0.2788781523704529,0.3743705451488495,0.3716849386692047,0.2548905909061432,-0.009002685546875,-0.253265380859375,-0.342864990234375,-0.32550048828125,-0.207183837890625,0.020935697481036186,0.20844142138957977,0.26514482498168945,0.2634052634239197,0.19174779951572418,0.010681478306651115,-0.1688232421875,-0.242645263671875,-0.22711181640625,-0.13958740234375,-0.00128173828125,0.1033356711268425,0.13803522288799286,0.15543076395988464,0.15256202220916748,0.06860560923814774,-0.05810546875,-0.129852294921875,-0.12933349609375,-0.094635009765625,-0.050018310546875,-0.011077880859375,0.016388438642024994,0.05795465037226677,0.11249122768640518,0.12390515208244324,0.07687612622976303,0.010864589363336563,-0.04217529296875,-0.0811767578125,-0.12042236328125,-0.139739990234375,-0.104827880859375,-0.01812744140625,0.09280678629875183,0.18100528419017792,0.1898861676454544,0.12369152158498764,0.039704579859972,-0.0572509765625,-0.176055908203125,-0.239593505859375,-0.19989013671875,-0.095001220703125,0.07061982899904251,0.24222540855407715,0.28055664896965027,0.1832331269979477,0.07217627763748169,-0.04107666015625,-0.19921875,-0.3021240234375,-0.25628662109375,-0.125701904296875,0.050386060029268265,0.2526017129421234,0.33625292778015137,0.24906155467033386,0.10687582194805145,-0.0504150390625,-0.22265625,-0.327392578125,-0.3046875,-0.16302490234375,0.054414503276348114,0.2533646523952484,0.3396404981613159,0.3080843389034271,0.18811608850955963,-0.018524169921875,-0.239501953125,-0.352935791015625,-0.332763671875,-0.202545166015625,0.010559404268860817,0.22357860207557678,0.34580522775650024,0.33845028281211853,0.22559282183647156,0.031495101749897,-0.2059326171875,-0.3572998046875,-0.3436279296875,-0.214141845703125,-0.0340576171875,0.1660206913948059,0.33057647943496704,0.35990479588508606,0.22730186581611633,0.010284737683832645,-0.191986083984375,-0.307281494140625,-0.317352294921875,-0.220184326171875,-0.027313232421875,0.17160557210445404,0.3020721971988678,0.3413800597190857,0.23212377727031708,-0.01007080078125,-0.2249755859375,-0.29058837890625,-0.2593994140625,-0.1893310546875,-0.033233642578125,0.16315194964408875,0.2774132490158081,0.28223517537117004,0.18134097754955292,-0.0067138671875,-0.1676025390625,-0.218109130859375,-0.195220947265625,-0.128570556640625,-0.026123046875,0.09201330691576004,0.17654958367347717,0.1666920930147171,0.0790124237537384,-0.022216796875,-0.063995361328125,-0.050048828125,-0.057769775390625,-0.05462646484375,-0.00177001953125,0.03088473156094551,0.016479995101690292,-0.004730224609375,-0.01092529296875,-0.011962890625,0.015564439818263054,0.0796838253736496,0.08111819624900818,-0.000244140625,-0.05242919921875,-0.04327392578125,-0.05364990234375,-0.106109619140625,-0.07977294921875,0.0473952442407608,0.1498153656721115,0.17056794464588165,0.10782189667224884,-0.004150390625,-0.1163330078125,-0.17974853515625,-0.164642333984375,-0.103607177734375,-0.007232666015625,0.10965300351381302,0.20838038623332977,0.23462629318237305,0.1347697377204895,-0.02801513671875,-0.153167724609375,-0.215606689453125,-0.21490478515625,-0.134613037109375,0.012848292477428913,0.1430707722902298,0.19263282418251038,0.16888943314552307,0.09845270961523056,0.00158696249127388,-0.10113525390625,-0.134368896484375,-0.08905029296875,-0.05615234375,-0.02716064453125,0.029145177453756332,0.0792260468006134,0.06872768700122833,0.005706961266696453,-0.022796630859375,-0.0322265625,-0.01556396484375,0.04574724659323692,0.0713217556476593,0.057466354221105576,-0.0111083984375,-0.08148193359375,-0.07598876953125,-0.055206298828125,-0.02093505859375,0.0011597033590078354,0.027375102043151855,0.09836115688085556,0.11813715100288391,0.07266457378864288,-0.025543212890625,-0.103302001953125,-0.10601806640625,-0.10858154296875,-0.035400390625,0.07309182733297348,0.11636707931756973,0.13229773938655853,0.07382427155971527,0.0034485915675759315,-0.070037841796875,-0.1610107421875,-0.14532470703125,-0.0880126953125,-0.00958251953125,0.10144352912902832,0.16379283368587494,0.17273476719856262,0.1027558222413063,0.004303109832108021,-0.09393310546875,-0.188446044921875,-0.184051513671875,-0.099151611328125,0.009369182400405407,0.08792382478713989,0.11194188892841339,0.12250129878520966,0.09836115688085556,0.02307199314236641,-0.06536865234375,-0.08660888671875,-0.051239013671875,-0.038726806640625,-0.02093505859375,0.012817773967981339,0.042512282729148865,0.0237128809094429,-0.024322509765625,-0.027313232421875,-0.03973388671875,-0.00164794921875,0.0872829407453537,0.09668263792991638,0.06637775897979736,-0.00970458984375,-0.073272705078125,-0.08673095703125,-0.1060791015625,-0.048858642578125,0.003021332435309887,0.04062013700604439,0.13315226137638092,0.15234839916229248,0.09680470824241638,-0.02691650390625,-0.13055419921875,-0.142059326171875,-0.167633056640625,-0.0806884765625,0.08874782919883728,0.16864527761936188,0.1902523934841156,0.126071959733963,0.039338357746601105,-0.06842041015625,-0.200653076171875,-0.2027587890625,-0.143585205078125,-0.04266357421875,0.110721156001091,0.19232764840126038,0.21036408841609955,0.14825892448425293,0.020935697481036186,-0.1053466796875,-0.20391845703125,-0.19610595703125,-0.0911865234375,0.032074954360723495,0.1028168573975563,0.10760826617479324,0.10135196894407272,0.06601153314113617,-0.02099609375,-0.08966064453125,-0.079010009765625,-0.041015625,-0.00140380859375,0.059785760939121246,0.08215582370758057,0.050416577607393265,-0.02276611328125,-0.09027099609375,-0.102264404296875,-0.096954345703125,-0.020538330078125,0.09601122885942459,0.13644824922084808,0.13641773164272308,0.09109774976968765,0.01037629321217537,-0.081451416015625,-0.178985595703125,-0.17120361328125,-0.1075439453125,-0.050689697265625,0.07263405621051788,0.18762779235839844,0.22916348278522491,0.1661732792854309,0.02139347419142723,-0.069366455078125,-0.161468505859375,-0.236785888671875,-0.176483154296875,-0.063720703125,0.06802576035261154,0.15381328761577606,0.18622393906116486,0.2138431966304779,0.11957152187824249,-0.0194091796875,-0.153961181640625,-0.2459716796875,-0.176910400390625,-0.112640380859375,-0.02069091796875,0.13626514375209808,0.21030305325984955,0.2150028944015503,0.10193182528018951,-0.00677490234375,-0.072601318359375,-0.181304931640625,-0.19317626953125,-0.14361572265625,-0.03680419921875,0.09836115688085556,0.15707877278327942,0.19226661324501038,0.12933744490146637,0.018097475171089172,-0.070037841796875,-0.1519775390625,-0.13946533203125,-0.1063232421875,-0.043182373046875,0.06103701889514923,0.10391552746295929,0.12939848005771637,0.09842219203710556,0.016388438642024994,-0.046417236328125,-0.104949951171875,-0.106292724609375,-0.061492919921875,-0.00048828125,0.06723227351903915,0.0716879814863205,0.055146947503089905,0.03909420967102051,-0.009429931640625,-0.048736572265625,-0.083709716796875,-0.047882080078125,0.04461806267499924,0.04522842913866043,0.03781243413686752,0.04434339329600334,0.017090365290641785,-0.013946533203125,-0.0841064453125,-0.076019287109375,-0.022979736328125,0.0011291848495602608,0.07217627763748169,0.08102664351463318,0.08426160365343094,0.0639057606458664,-0.044158935546875,-0.083343505859375,-0.115692138671875,-0.0865478515625,-0.01708984375,-0.010284423828125,0.07217627763748169,0.10663167387247086,0.1032441183924675,0.0948820486664772,-0.01776123046875,-0.055023193359375,-0.08966064453125,-0.1292724609375,-0.065582275390625,-0.029266357421875,0.04156620800495148,0.08212530612945557,0.06579791009426117,0.09326456487178802,0.036805324256420135,-0.009002685546875,-0.0316162109375,-0.0926513671875,-0.062530517578125,-0.0426025390625,-0.012908935546875,0.04046754539012909,0.019501328468322754,0.05166783556342125,0.044007688760757446,-0.024322509765625,-0.0196533203125,-0.019073486328125,0.010895107872784138,0.011993774212896824,-0.020751953125,0.032929472625255585,0.021179845556616783,-0.023590087890625,-0.02679443359375,-0.050537109375,-0.015838623046875,-0.0001220703125,0.009643848985433578,0.06213568523526192,0.047975096851587296,0.05401775985956192,0.0158391073346138,-0.076416015625,-0.057342529296875,-0.0477294921875,-0.03094482421875,0.01071199681609869,0.02233954891562462,0.08273568004369736,0.04904324561357498,-0.017913818359375,-0.012176513671875,-0.0450439453125,-0.029449462890625,-0.0281982421875,-0.011260986328125,0.0795312374830246,0.054353464394807816,0.03308206424117088,0.0010071108117699623,-0.075531005859375,-0.047607421875,-0.05755615234375,-0.033233642578125,0.03305154666304588,0.04147465527057648,0.10238959640264511,0.059083834290504456,-0.00836181640625,0.0023194067180156708,-0.05914306640625,-0.072052001953125,-0.077545166015625,-0.0391845703125,0.061525315046310425,0.028077028691768646,0.04693746566772461,0.07263405621051788,0.03103732317686081,0.035370953381061554,-0.058258056640625,-0.064453125,-0.009735107421875,-0.067138671875,-0.035797119140625,-0.01397705078125,0.034363843500614166,0.095828115940094,0.031220436096191406,0.045594654977321625,0.026581622660160065,-0.015716552734375,-0.023681640625,-0.109527587890625,-0.05322265625,-0.01287841796875,-0.034454345703125,0.03811761736869812,0.039307840168476105,0.08670308440923691,0.06985686719417572,-0.027313232421875,0.004058961756527424,-0.020721435546875,-0.0133056640625,-0.018035888671875,-0.0699462890625,0.003418073058128357,-0.018096923828125,-0.023529052734375,0.007965330965816975,-0.027099609375,0.060792870819568634,0.06973479688167572,0.04824976250529289,0.07312235236167908,0.006195257417857647,0.0038453321903944016,-0.07781982421875,-0.15728759765625,-0.0838623046875,-0.0684814453125,0.003875850699841976,0.06601153314113617,0.09949034452438354,0.1751457303762436,0.08417005091905594,0.020996734499931335,-0.01007080078125,-0.098663330078125,-0.090667724609375,-0.1351318359375,-0.0958251953125,0.022431105375289917,0.020966216921806335,0.07040619850158691,0.06601153314113617,0.05948057398200035,0.09305093437433243,0.0032959990203380585,-0.003753662109375,-0.00958251953125,-0.035888671875,-0.0130615234375,-0.0986328125,-0.07635498046875,-0.018341064453125,-0.03167724609375,0.020813623443245888,0.01828058809041977,0.09714041650295258,0.14612261950969696,0.043336283415555954,0.04266487807035446,0.005645924247801304,-0.047698974609375,-0.09930419921875,-0.171173095703125,-0.071533203125,-0.031890869140625,-0.0135498046875,0.06927701830863953,0.0717490166425705,0.14499343931674957,0.12527848780155182,0.029511399567127228,0.0024414807558059692,-0.066375732421875,-0.055572509765625,-0.10406494140625,-0.149200439453125,-0.03717041015625,-0.006988525390625,0.02786339819431305,0.044862210750579834,0.060853905975818634,0.13272500038146973,0.06164738908410072,0.043214209377765656,0.04440443217754364,-0.022918701171875,-0.0389404296875,-0.128509521484375,-0.132843017578125,-0.090118408203125,-0.1048583984375,-0.02093505859375,0.0553910955786705,0.16379283368587494,0.2138126790523529,0.1510360985994339,0.13629566133022308,0.022461622953414917,-0.0982666015625,-0.18621826171875,-0.2584228515625,-0.180419921875,-0.1180419921875,-0.016143798828125,0.11502426117658615,0.18570512533187866,0.2547074854373932,0.18390454351902008,0.1112094521522522,0.04605242982506752,-0.079193115234375,-0.157501220703125,-0.2525634765625,-0.20849609375,-0.130523681640625,-0.111724853515625,0.03027436137199402,0.15417951345443726,0.25089266896247864,0.25714895129203796,0.19177831709384918,0.1506088376045227,-0.014923095703125,-0.165740966796875,-0.27484130859375,-0.3021240234375,-0.216094970703125,-0.16009521484375,0.023316141217947006,0.20276497304439545,0.27555161714553833,0.29108554124832153,0.19171728193759918,0.11243018507957458,-0.036773681640625,-0.175689697265625,-0.21624755859375,-0.2379150390625,-0.152008056640625,-0.098968505859375,-0.00048828125,0.11691641062498093,0.11691641062498093,0.16528823971748352,0.1429792195558548,0.11505477875471115,0.09695730358362198,-0.00579833984375,-0.0419921875,-0.128326416015625,-0.188385009765625,-0.184478759765625,-0.184356689453125,-0.07061767578125,0.011780144646763802,0.1346476674079895,0.25821709632873535,0.2222357839345932,0.21951964497566223,0.14011047780513763,-0.020263671875,-0.15008544921875,-0.28271484375,-0.2796630859375,-0.2264404296875,-0.135467529296875,0.02139347419142723,0.1419721096754074,0.28336435556411743,0.2854090929031372,0.20105594396591187,0.15512558817863464,-0.0037841796875,-0.13629150390625,-0.240142822265625,-0.28564453125,-0.193084716796875,-0.1365966796875,-0.029022216796875,0.09799493104219437,0.20035400986671448,0.2538834810256958,0.1675466150045395,0.14889980852603912,0.07766960561275482,-0.062774658203125,-0.128204345703125,-0.217498779296875,-0.188140869140625,-0.150726318359375,-0.13189697265625,-0.01751708984375,0.07538072019815445,0.20215460658073425,0.2149723768234253,0.18448439240455627,0.1896420121192932,0.052827540785074234,-0.046539306640625,-0.17498779296875,-0.26348876953125,-0.213287353515625,-0.21002197265625,-0.093902587890625,0.04541154205799103,0.16953031718730927,0.2787865698337555,0.22388377785682678,0.1980956494808197,0.10190130025148392,-0.037841796875,-0.12200927734375,-0.253692626953125,-0.22796630859375,-0.182037353515625,-0.14044189453125,0.0024109622463583946,0.0790124237537384,0.20355845987796783,0.24307993054389954,0.18878750503063202,0.17856380343437195,0.05496383458375931,-0.04241943359375,-0.160491943359375,-0.26971435546875,-0.222442626953125,-0.207794189453125,-0.114715576171875,0.021149326115846634,0.14618365466594696,0.2946256995201111,0.25882747769355774,0.2150639295578003,0.15216529369354248,-0.0135498046875,-0.136810302734375,-0.286865234375,-0.29248046875,-0.21771240234375,-0.175445556640625,-0.009307861328125,0.143406480550766,0.2779625952243805,0.3032929599285126,0.21710868179798126,0.1750236451625824,0.019989624619483948,-0.136138916015625,-0.243499755859375,-0.297149658203125,-0.224578857421875,-0.173736572265625,-0.040313720703125,0.11545152217149734,0.21698659658432007,0.28797265887260437,0.21842096745967865,0.17047639191150665,0.07599108666181564,-0.085662841796875,-0.178070068359375,-0.25518798828125,-0.22686767578125,-0.19171142578125,-0.118133544921875,0.04211554303765297,0.14694662392139435,0.25879696011543274,0.2547380030155182,0.20896023511886597,0.16995757818222046,0.0009155552834272385,-0.13568115234375,-0.2457275390625,-0.271209716796875,-0.23675537109375,-0.19976806640625,-0.02740478515625,0.12021240592002869,0.2465285211801529,0.2952665686607361,0.23340556025505066,0.20804467797279358,0.05386516824364662,-0.116973876953125,-0.22113037109375,-0.2808837890625,-0.23785400390625,-0.217498779296875,-0.092315673828125,0.07388531416654587,0.18790246546268463,0.28061768412590027,0.24472792446613312,0.23361918330192566,0.143711656332016,-0.04364013671875,-0.1632080078125,-0.267181396484375,-0.26043701171875,-0.25164794921875,-0.188934326171875,-0.00750732421875,0.1355021893978119,0.28266242146492004,0.2934659719467163,0.2616657018661499,0.2222052663564682,0.030701620504260063,-0.135101318359375,-0.274566650390625,-0.302734375,-0.267791748046875,-0.2364501953125,-0.050323486328125,0.12369152158498764,0.269631028175354,0.31299781799316406,0.2555925250053406,0.2385326623916626,0.06439405679702759,-0.125396728515625,-0.23809814453125,-0.282958984375,-0.229522705078125,-0.218902587890625,-0.094696044921875,0.06427197903394699,0.1814020276069641,0.26496168971061707,0.2145756334066391,0.22659993171691895,0.15472884476184845,-0.01611328125,-0.125244140625,-0.229583740234375,-0.227813720703125,-0.253997802734375,-0.221923828125,-0.061492919921875,0.07788323611021042,0.2471083700656891,0.27466657757759094,0.2862025797367096,0.28983429074287415,0.09851375222206116,-0.091949462890625,-0.271270751953125,-0.320770263671875,-0.306488037109375,-0.304168701171875,-0.111663818359375,0.09653004258871078,0.28299814462661743,0.3573412299156189,0.317545086145401,0.2917569577693939,0.08609271794557571,-0.12841796875,-0.270782470703125,-0.338043212890625,-0.27447509765625,-0.2401123046875,-0.09637451171875,0.09149449318647385,0.23413801193237305,0.30451369285583496,0.2292550504207611,0.21976378560066223,0.11984618753194809,-0.067291259765625,-0.16949462890625,-0.240234375,-0.21112060546875,-0.216339111328125,-0.163055419921875,-0.014495849609375,0.1031220406293869,0.23136082291603088,0.22559282183647156,0.24207282066345215,0.23276467621326447,0.05252235382795334,-0.08984375,-0.217041015625,-0.249786376953125,-0.2662353515625,-0.258026123046875,-0.082275390625,0.07779168337583542,0.24097415804862976,0.2862025797367096,0.2628864347934723,0.26566362380981445,0.08621478825807571,-0.090728759765625,-0.22979736328125,-0.290374755859375,-0.257476806640625,-0.25457763671875,-0.101593017578125,0.06897182762622833,0.21024201810359955,0.2923367917537689,0.25037384033203125,0.25699636340141296,0.12060914933681488,-0.0679931640625,-0.19012451171875,-0.28729248046875,-0.2525634765625,-0.2459716796875,-0.151153564453125,0.03012176975607872,0.17755669355392456,0.3035981357097626,0.2627948820590973,0.24481947720050812,0.16879788041114807,-0.038818359375,-0.169921875,-0.277008056640625,-0.266815185546875,-0.244049072265625,-0.18212890625,0.017761772498488426,0.16074098646640778,0.28064820170402527,0.2681356370449066,0.22092348337173462,0.18854334950447083,-0.0078125,-0.146728515625,-0.235748291015625,-0.25579833984375,-0.211578369140625,-0.19085693359375,-0.038238525390625,0.10986663401126862,0.22482985258102417,0.25647756457328796,0.1991027593612671,0.20828883349895477,0.08136234432458878,-0.08953857421875,-0.19219970703125,-0.24896240234375,-0.227447509765625,-0.2371826171875,-0.123260498046875,0.05862605571746826,0.19391460716724396,0.28034302592277527,0.2472304403781891,0.2461622953414917,0.14673298597335815,-0.0560302734375,-0.19805908203125,-0.292083740234375,-0.27288818359375,-0.261077880859375,-0.159271240234375,0.058229316025972366,0.21155430376529694,0.3179723620414734,0.2951750159263611,0.25116732716560364,0.1513107717037201,-0.073760986328125,-0.227203369140625,-0.31396484375,-0.298614501953125,-0.249755859375,-0.14959716796875,0.08005005121231079,0.24396497011184692,0.316995769739151,0.2924588620662689,0.22873622179031372,0.125736266374588,-0.090423583984375,-0.241607666015625,-0.288848876953125,-0.260009765625,-0.204254150390625,-0.109375,0.07864619791507721,0.2142094224691391,0.2628864347934723,0.23426008224487305,0.18466749787330627,0.10718100517988205,-0.054840087890625,-0.169189453125,-0.21783447265625,-0.210205078125,-0.182525634765625,-0.128814697265625,0.007202368229627609,0.1264992207288742,0.20816674828529358,0.2232123762369156,0.20368053019046783,0.15655995905399323,0.011078218929469585,-0.1204833984375,-0.203216552734375,-0.22802734375,-0.21832275390625,-0.182342529296875,-0.0386962890625,0.12323374301195145,0.2294991910457611,0.2537919282913208,0.22833949327468872,0.16501358151435852,0.012970366515219212,-0.130462646484375,-0.21832275390625,-0.246673583984375,-0.22906494140625,-0.16552734375,-0.0133056640625,0.1425824761390686,0.22711874544620514,0.2383495569229126,0.22504349052906036,0.15717032551765442,0.0009765923023223877,-0.1368408203125,-0.20953369140625,-0.223907470703125,-0.220184326171875,-0.165557861328125,-0.025665283203125,0.1192968562245369,0.22452467679977417,0.2530899941921234,0.23682363331317902,0.15701773762702942,-0.000885009765625,-0.140716552734375,-0.22637939453125,-0.238525390625,-0.234527587890625,-0.170013427734375,0.007232886739075184,0.16275520622730255,0.2469252645969391,0.25907161831855774,0.22806482017040253,0.12259285151958466,-0.052215576171875,-0.170440673828125,-0.22662353515625,-0.23333740234375,-0.20880126953125,-0.119384765625,0.04525895044207573,0.17069002985954285,0.2230597883462906,0.22571489214897156,0.20111697912216187,0.10126041620969772,-0.054229736328125,-0.16400146484375,-0.209320068359375,-0.209381103515625,-0.197906494140625,-0.10894775390625,0.04412976652383804,0.15619373321533203,0.21271401643753052,0.22714926302433014,0.2131717950105667,0.10257270932197571,-0.0545654296875,-0.1531982421875,-0.203521728515625,-0.21588134765625,-0.20281982421875,-0.10174560546875,0.0474562831223011,0.15210425853729248,0.20838038623332977,0.22379222512245178,0.20856349170207977,0.09875789284706116,-0.049713134765625,-0.1553955078125,-0.204010009765625,-0.20880126953125,-0.209716796875,-0.11212158203125,0.03497420996427536,0.13644824922084808,0.19568468630313873,0.22553178668022156,0.23551133275032043,0.11984618753194809,-0.04229736328125,-0.152252197265625,-0.212158203125,-0.22418212890625,-0.230316162109375,-0.13525390625,0.020050659775733948,0.15680409967899323,0.24451430141925812,0.2525711953639984,0.23700673878192902,0.11502426117658615,-0.05657958984375,-0.180023193359375,-0.240997314453125,-0.23468017578125,-0.22418212890625,-0.104705810546875,0.06421094387769699,0.18033386766910553,0.25034332275390625,0.23935666680335999,0.20786157250404358,0.0869777500629425,-0.077728271484375,-0.18609619140625,-0.23797607421875,-0.21417236328125,-0.191925048828125,-0.093505859375,0.06775109469890594,0.18079164624214172,0.23929563164710999,0.23697622120380402,0.2132328301668167,0.08651997148990631,-0.089385986328125,-0.2015380859375,-0.24871826171875,-0.2274169921875,-0.20166015625,-0.090484619140625,0.08465834707021713,0.21073031425476074,0.2683492600917816,0.24790185689926147,0.20416882634162903,0.05926694720983505,-0.133544921875,-0.23309326171875,-0.256866455078125,-0.225616455078125,-0.178253173828125,-0.04510498046875,0.13156528770923615,0.22400586307048798,0.2455519288778305,0.21726126968860626,0.158757284283638,0.02615436166524887,-0.1329345703125,-0.2132568359375,-0.216949462890625,-0.188232421875,-0.14093017578125,-0.029937744140625,0.09289833903312683,0.17065951228141785,0.1991637945175171,0.20145268738269806,0.1673635095357895,0.04593035578727722,-0.0816650390625,-0.169219970703125,-0.195648193359375,-0.1944580078125,-0.183135986328125,-0.073516845703125,0.05798516795039177,0.16388440132141113,0.21927548944950104,0.22464674711227417,0.20374156534671783,0.07599108666181564,-0.07781982421875,-0.191986083984375,-0.238250732421875,-0.228179931640625,-0.199615478515625,-0.06243896484375,0.09680470824241638,0.1980956494808197,0.2455214112997055,0.24393445253372192,0.1988586038351059,0.04049806296825409,-0.13275146484375,-0.226409912109375,-0.243682861328125,-0.221588134765625,-0.1654052734375,-0.011810302734375,0.1342814415693283,0.2069460153579712,0.23319193720817566,0.22367015480995178,0.1506393551826477,-0.007720947265625,-0.14569091796875,-0.218170166015625,-0.214813232421875,-0.181915283203125,-0.127899169921875,0.004577776417136192,0.12421033531427383,0.19251075387001038,0.206549271941185,0.1893978714942932,0.1279641091823578,-0.008026123046875,-0.11376953125,-0.177398681640625,-0.189910888671875,-0.176483154296875,-0.136505126953125,-0.00946044921875,0.09982604533433914,0.16235846281051636,0.19299905002117157,0.20172734558582306,0.15662099421024323,0.02291940152645111,-0.097320556640625,-0.178558349609375,-0.20849609375,-0.2135009765625,-0.1671142578125,-0.026214599609375,0.09781182557344437,0.18881802260875702,0.23651844263076782,0.24259163439273834,0.16962186992168427,0.003814813680946827,-0.133270263671875,-0.22332763671875,-0.238983154296875,-0.225250244140625,-0.1614990234375,0.007812738418579102,0.14697714149951935,0.2307504564523697,0.24924466013908386,0.2221442312002182,0.13644824922084808,-0.031219482421875,-0.159332275390625,-0.228546142578125,-0.224700927734375,-0.199798583984375,-0.135894775390625,0.02841273322701454,0.15338602662086487,0.2144840806722641,0.22418896853923798,0.21027253568172455,0.14059877395629883,-0.026336669921875,-0.156646728515625,-0.217620849609375,-0.212677001953125,-0.196929931640625,-0.140594482421875,0.017883846536278725,0.14093448221683502,0.21030305325984955,0.2371288239955902,0.21881771087646484,0.13113804161548615,-0.026611328125,-0.14630126953125,-0.21343994140625,-0.21600341796875,-0.195892333984375,-0.135894775390625,0.0029602954164147377,0.12417981773614883,0.2071291208267212,0.2308114916086197,0.21213415265083313,0.13339640200138092,-0.003814697265625,-0.11865234375,-0.207275390625,-0.222015380859375,-0.213623046875,-0.160797119140625,-0.016387939453125,0.11200293153524399,0.20651875436306,0.24433118104934692,0.251960813999176,0.17868587374687195,0.0066225165501236916,-0.136474609375,-0.2333984375,-0.246368408203125,-0.237548828125,-0.18048095703125,-0.012939453125,0.13977476954460144,0.2449415624141693,0.2706076204776764,0.2553178369998932,0.16537980735301971,-0.02227783203125,-0.16552734375,-0.24774169921875,-0.240631103515625,-0.21173095703125,-0.15533447265625,0.004608294926583767,0.14877773821353912,0.23590807616710663,0.24033325910568237,0.21103549003601074,0.1422467678785324,-0.009185791015625,-0.13848876953125,-0.22528076171875,-0.22027587890625,-0.186676025390625,-0.146453857421875,-0.0147705078125,0.11279641091823578,0.1986754983663559,0.2220831960439682,0.21616260707378387,0.15393535792827606,-0.0025634765625,-0.124725341796875,-0.205963134765625,-0.210479736328125,-0.18243408203125,-0.14910888671875,-0.030181884765625,0.0874660462141037,0.1829279512166977,0.21570482850074768,0.19998779892921448,0.15488143265247345,0.02700887992978096,-0.085906982421875,-0.170562744140625,-0.185760498046875,-0.169586181640625,-0.174346923828125,-0.075225830078125,0.05374309420585632,0.15628528594970703,0.21240882575511932,0.21759697794914246,0.19537949562072754,0.07998901605606079,-0.049163818359375,-0.169921875,-0.2330322265625,-0.209625244140625,-0.195281982421875,-0.100372314453125,0.05053865164518356,0.1748405396938324,0.24484999477863312,0.24439221620559692,0.206366166472435,0.06842249631881714,-0.08514404296875,-0.182647705078125,-0.226806640625,-0.19500732421875,-0.170379638671875,-0.096832275390625,0.041718803346157074,0.16006958484649658,0.21778008341789246,0.20490127801895142,0.18451490998268127,0.10046693682670593,-0.0335693359375,-0.14105224609375,-0.202880859375,-0.196319580078125,-0.20098876953125,-0.150054931640625,-0.003021240234375,0.1348002552986145,0.2221137136220932,0.2387463003396988,0.2295297086238861,0.1358378827571869,-0.034393310546875,-0.169525146484375,-0.241546630859375,-0.215423583984375,-0.185272216796875,-0.12353515625,0.02853480726480484,0.1580553650856018,0.22635579109191895,0.2060914933681488,0.16141240298748016,0.08655048906803131,-0.0404052734375,-0.123809814453125,-0.16925048828125,-0.139404296875,-0.11871337890625,-0.126708984375,-0.044708251953125,0.05001983791589737,0.13339640200138092,0.16418957710266113,0.17197179794311523,0.17911313474178314,0.0873439759016037,-0.0247802734375,-0.140106201171875,-0.192413330078125,-0.196533203125,-0.226104736328125,-0.12451171875,0.03241065889596939,0.17078158259391785,0.25760674476623535,0.24481947720050812,0.21048615872859955,0.07535020262002945,-0.078857421875,-0.189056396484375,-0.24212646484375,-0.178741455078125,-0.1590576171875,-0.086334228515625,0.06118961051106453,0.1577196568250656,0.2146366834640503,0.1666310578584671,0.13760796189308167,0.08853419870138168,-0.0299072265625,-0.103179931640625,-0.17242431640625,-0.154083251953125,-0.149261474609375,-0.156494140625,-0.03839111328125,0.0709555372595787,0.18131045997142792,0.21683400869369507,0.19690541923046112,0.16986602544784546,0.026520583778619766,-0.094268798828125,-0.198974609375,-0.23065185546875,-0.174041748046875,-0.16009521484375,-0.039794921875,0.10135196894407272,0.1980346143245697,0.23447370529174805,0.15695668756961823,0.11459700018167496,0.014099551364779472,-0.08404541015625,-0.127655029296875,-0.18109130859375,-0.124053955078125,-0.111358642578125,-0.088531494140625,0.0139469588175416,0.07818841934204102,0.16339610517024994,0.16571550071239471,0.16080202162265778,0.13788262009620667,0.017700735479593277,-0.05279541015625,-0.16497802734375,-0.208343505859375,-0.178253173828125,-0.179107666015625,-0.05059814453125,0.08453626930713654,0.20126956701278687,0.2525406777858734,0.18649861216545105,0.14133121073246002,0.015594958327710629,-0.092437744140625,-0.16558837890625,-0.22564697265625,-0.1485595703125,-0.11602783203125,-0.05157470703125,0.06030457466840744,0.11511582136154175,0.18024231493473053,0.14093448221683502,0.11395611613988876,0.08920560032129288,-0.0045166015625,-0.05523681640625,-0.15045166015625,-0.163909912109375,-0.148956298828125,-0.168548583984375,-0.05859375,0.04672383889555931,0.1669667661190033,0.2211066037416458,0.17642749845981598,0.174077570438385,0.06552323698997498,-0.053802490234375,-0.164459228515625,-0.24298095703125,-0.177215576171875,-0.15789794921875,-0.0728759765625,0.05737479776144028,0.13629566133022308,0.22565385699272156,0.17276528477668762,0.126102477312088,0.08801537752151489,-0.017852783203125,-0.0809326171875,-0.181884765625,-0.174713134765625,-0.1341552734375,-0.140594482421875,-0.028900146484375,0.05163731798529625,0.15680409967899323,0.22006897628307343,0.1589709222316742,0.15366069972515106,0.0640583485364914,-0.0494384765625,-0.14630126953125,-0.23590087890625,-0.177032470703125,-0.1436767578125,-0.062652587890625,0.06631672382354736,0.1194494441151619,0.20908230543136597,0.17062897980213165,0.09701833873987198,0.06659138947725296,-0.037933349609375,-0.07318115234375,-0.138641357421875,-0.16156005859375,-0.089447021484375,-0.091278076171875,-0.030792236328125,0.021729178726673126,0.08166752755641937,0.16785180568695068,0.13016144931316376,0.1351664811372757,0.0950346365571022,-0.002899169921875,-0.063629150390625,-0.1966552734375,-0.20147705078125,-0.144195556640625,-0.117645263671875,0.002929776906967163,0.08972442150115967,0.19598986208438873,0.23233741521835327,0.13895078003406525,0.08996856212615967,-0.01885986328125,-0.101043701171875,-0.1549072265625,-0.218658447265625,-0.115997314453125,-0.04998779296875,-0.007293701171875,0.08432263880968094,0.09674367308616638,0.15552231669425964,0.13309122622013092,0.051911983639001846,0.03817865625023842,-0.03228759765625,-0.04815673828125,-0.10394287109375,-0.16082763671875,-0.075775146484375,-0.065826416015625,-0.01763916015625,0.049592576920986176,0.0712912380695343,0.16876736283302307,0.13275551795959473,0.06784264743328094,0.03836176544427872,-0.049468994140625,-0.0638427734375,-0.14447021484375,-0.166473388671875,-0.0562744140625,-0.040618896484375,0.0239570289850235,0.07388531416654587,0.09839167445898056,0.16895046830177307,0.08829005062580109,0.023621326312422752,-0.006378173828125,-0.071258544921875,-0.067626953125,-0.1378173828125,-0.123443603515625,-0.015411376953125,-0.008453369140625,0.05209509655833244,0.07397686690092087,0.0876491591334343,0.13620410859584808,0.03595080226659775,-0.01373291015625,-0.030426025390625,-0.07977294921875,-0.055145263671875,-0.106781005859375,-0.089630126953125,0.0158696249127388,0.016876734793186188,0.05105746537446976,0.06720175594091415,0.07043671607971191,0.10489211976528168,0.023163549602031708,-0.030426025390625,-0.0438232421875,-0.0697021484375,-0.04425048828125,-0.093231201171875,-0.06683349609375,0.04531998559832573,0.04156620800495148,0.06567583233118057,0.056733909994363785,0.03311258181929588,0.0789208635687828,-0.01214599609375,-0.06793212890625,-0.033111572265625,-0.043304443359375,-0.008697509765625,-0.04571533203125,-0.052337646484375,0.03869746997952461,0.02450636401772499,0.02710043638944626,0.0317697674036026,0.03262428566813469,0.09192174673080444,0.018463697284460068,-0.043487548828125,-0.034515380859375,-0.066986083984375,-0.049652099609375,-0.0885009765625,-0.06158447265625,0.07345805317163467,0.08075197786092758,0.09183019399642944,0.07513657212257385,0.02233954891562462,0.0316782146692276,-0.068084716796875,-0.1275634765625,-0.0699462890625,-0.044219970703125,0.02212591841816902,0.026581622660160065,0.024262215942144394,0.09173864126205444,0.04287850484251976,-0.005096435546875,-0.034332275390625,-0.04620361328125,0.031220436096191406,0.0037537766620516777,-0.018524169921875,0.019592883065342903,-0.00933837890625,-0.007781982421875,-0.063232421875,-0.080413818359375,0.030701620504260063,0.04626606032252312,0.06842249631881714,0.0875576063990593,0.041688285768032074,0.053529463708400726,-0.034942626953125,-0.133880615234375,-0.105621337890625,-0.0869140625,-0.016937255859375,0.03704947233200073,0.055116429924964905,0.13299965858459473,0.11481063067913055,0.03717154264450073,-0.027618408203125,-0.087005615234375,-0.0557861328125,-0.054901123046875,-0.067901611328125,-0.0052490234375,0.022644734010100365,0.0475478395819664,0.02145451307296753,-0.03326416015625,0.026337474584579468,0.03732413798570633,0.01821954920887947,0.04589983820915222,0.01434369944036007,0.032898955047130585,0.008209479041397572,-0.113555908203125,-0.10687255859375,-0.0814208984375,-0.060577392578125,0.022705771028995514,0.04858546704053879,0.11511582136154175,0.1658681035041809,0.08624530583620071,0.01666310615837574,-0.05389404296875,-0.095458984375,-0.0863037109375,-0.115478515625,-0.079986572265625,0.0036011841148138046,0.04605242982506752,0.07296975702047348,0.05093539133667946,0.042420729994773865,0.05621509253978729,0.029541917145252228,0.020386364310979843,-0.002716064453125,-0.01837158203125,-0.00701904296875,-0.068359375,-0.100341796875,-0.0787353515625,-0.07049560546875,0.008819849230349064,0.0639667958021164,0.07855464518070221,0.14587847888469696,0.1271706223487854,0.057466354221105576,-0.001922607421875,-0.10955810546875,-0.12591552734375,-0.109588623046875,-0.13262939453125,-0.048675537109375,0.029175695031881332,0.07861568033695221,0.13904233276844025,0.08017212152481079,0.05325479805469513,0.06448560953140259,-0.013580322265625,-0.0380859375,-0.062408447265625,-0.08270263671875,-0.02630615234375,-0.049285888671875,-0.064239501953125,-0.010284423828125,0.01821954920887947,0.06048768758773804,0.06122013181447983,0.059877313673496246,0.10565508157014847,0.0795922726392746,0.016113772988319397,-0.057647705078125,-0.1082763671875,-0.085418701171875,-0.104248046875,-0.10284423828125,-0.02691650390625,0.03643909841775894,0.1271095871925354,0.13306069374084473,0.07412946224212646,0.10577715188264847,0.050294503569602966,-0.041351318359375,-0.072601318359375,-0.1429443359375,-0.088043212890625,-0.032012939453125,-0.0811767578125,-0.00537109375,0.04931791126728058,0.0712607204914093,0.11420026421546936,0.0394604317843914,0.046510208398103714,0.08188115805387497,0.004211554303765297,-0.024444580078125,-0.07440185546875,-0.0958251953125,-0.047882080078125,-0.094879150390625,-0.09686279296875,-0.01373291015625,0.05389568954706192,0.12012085318565369,0.10730308294296265,0.09039582312107086,0.1114535927772522,0.057466354221105576,-0.022003173828125,-0.114410400390625,-0.145965576171875,-0.08447265625,-0.09423828125,-0.080780029296875,-0.003082275390625,0.0556047260761261,0.13898129761219025,0.10711997002363205,0.045655690133571625,0.09640797227621078,0.05236976221203804,-0.00921630859375,-0.047210693359375,-0.131622314453125,-0.082611083984375,-0.06182861328125,-0.12579345703125,-0.047515869140625,0.02301095612347126,0.07995849847793579,0.14951017498970032,0.0874965637922287,0.09051790088415146,0.11798455566167831,0.007354960776865482,-0.061553955078125,-0.1204833984375,-0.146636962890625,-0.069061279296875,-0.079620361328125,-0.077789306640625,0.02536088228225708,0.08084353059530258,0.12103641033172607,0.10907315462827682,0.059175390750169754,0.08877834677696228,0.06674397736787796,-0.028076171875,-0.09210205078125,-0.13055419921875,-0.110595703125,-0.089202880859375,-0.096588134765625,-0.036529541015625,0.06909390538930893,0.14676351845264435,0.1428266167640686,0.09268471598625183,0.07547227293252945,0.038605913519859314,-0.03125,-0.105712890625,-0.150390625,-0.09039306640625,-0.031158447265625,-0.037384033203125,-0.01409912109375,0.017151402309536934,0.05883968621492386,0.0869777500629425,0.037659838795661926,0.042359691113233566,0.09311196953058243,0.06857509166002274,0.026337474584579468,-0.050445556640625,-0.1187744140625,-0.0965576171875,-0.12640380859375,-0.1480712890625,-0.05322265625,0.03555406257510185,0.14856410026550293,0.20496231317520142,0.12411877512931824,0.110721156001091,0.06659138947725296,-0.069000244140625,-0.11968994140625,-0.17657470703125,-0.155059814453125,-0.026214599609375,-0.028045654296875,-0.000579833984375,0.08069093525409698,0.063081756234169,0.0874660462141037,0.05737479776144028,-0.00970458984375,0.06418042629957199,0.061372723430395126,0.0033570360392332077,-0.00250244140625,-0.086181640625,-0.09912109375,-0.081146240234375,-0.150360107421875,-0.079864501953125,0.026703696697950363,0.07272560894489288,0.16888943314552307,0.1509445458650589,0.10406811535358429,0.11358989030122757,-0.008544921875,-0.10467529296875,-0.128448486328125,-0.167144775390625,-0.08563232421875,-0.033416748046875,-0.047821044921875,0.04385509714484215,0.08313241600990295,0.07678456604480743,0.09765923023223877,0.03796502575278282,0.039246805012226105,0.07461775839328766,-0.001007080078125,-0.0330810546875,-0.055267333984375,-0.10589599609375,-0.0789794921875,-0.095245361328125,-0.102569580078125,-0.006439208984375,0.04928739368915558,0.10217596590518951,0.14508499205112457,0.11343730241060257,0.11038544774055481,0.06671345978975296,-0.036651611328125,-0.085357666015625,-0.131927490234375,-0.144134521484375,-0.0955810546875,-0.078765869140625,-0.026153564453125,0.062257759273052216,0.10199286043643951,0.1346171498298645,0.1186559647321701,0.06485183537006378,0.052858058363199234,0.0008239997550845146,-0.064788818359375,-0.08245849609375,-0.10595703125,-0.085479736328125,-0.046112060546875,-0.04656982421875,-0.011505126953125,0.02615436166524887,0.04141361638903618,0.0795312374830246,0.08478041738271713,0.07605212926864624,0.08624530583620071,0.05233924463391304,0.0009460737928748131,-0.0557861328125,-0.12518310546875,-0.1302490234375,-0.1138916015625,-0.106170654296875,-0.03228759765625,0.055116429924964905,0.13061922788619995,0.1816156506538391,0.13229773938655853,0.07382427155971527,0.034516435116529465,-0.049468994140625,-0.094970703125,-0.12109375,-0.131622314453125,-0.045318603515625,0.003479110077023506,0.0027466658502817154,0.0399487279355526,0.02710043638944626,0.03500473126769066,0.06210516765713692,0.010162663646042347,0.025696584954857826,0.061403241008520126,0.0318002849817276,0.031556136906147,-0.0323486328125,-0.10052490234375,-0.069580078125,-0.08819580078125,-0.091400146484375,-0.030853271484375,0.00006103701889514923,0.08554337918758392,0.1351969987154007,0.07663197815418243,0.07422101497650146,0.04895168915390968,-0.016204833984375,-0.023193359375,-0.083099365234375,-0.096466064453125,-0.029754638671875,-0.0531005859375,-0.042205810546875,-0.00518798828125,-0.010101318359375,0.06714072078466415,0.0796838253736496,0.02609332650899887,0.0634479820728302,0.05642872303724289,0.036042358726263046,0.023621326312422752,-0.07171630859375,-0.076416015625,-0.03594970703125,-0.07208251953125,-0.05548095703125,-0.03778076171875,-0.01348876953125,0.06640827655792236,0.05780205875635147,0.03799554333090782,0.07037568092346191,0.059877313673496246,0.057496871799230576,0.022553179413080215,-0.058258056640625,-0.05865478515625,-0.0465087890625,-0.06939697265625,-0.06500244140625,-0.061187744140625,-0.024261474609375,0.04208502545952797,0.04898220673203468,0.04260383918881416,0.05636768788099289,0.06787316501140594,0.07629626989364624,0.04058961570262909,-0.011871337890625,-0.028472900390625,-0.0374755859375,-0.069610595703125,-0.110443115234375,-0.107818603515625,-0.059112548828125,0.00555436871945858,0.05966368690133095,0.07501449435949326,0.09414960443973541,0.1114535927772522,0.08468886464834213,0.04379406198859215,-0.020538330078125,-0.065765380859375,-0.04681396484375,-0.05908203125,-0.085784912109375,-0.06671142578125,-0.05548095703125,-0.026947021484375,-0.002288818359375,-0.01617431640625,0.04696798697113991,0.1281472146511078,0.13779106736183167,0.14902187883853912,0.0953703448176384,0.010620441287755966,-0.021759033203125,-0.122955322265625,-0.20941162109375,-0.192474365234375,-0.15753173828125,-0.050689697265625,0.04818872734904289,0.08038575202226639,0.17392498254776,0.2060914933681488,0.1511887013912201,0.12125004082918167,0.02301095612347126,-0.05804443359375,-0.060394287109375,-0.122100830078125,-0.177032470703125,-0.173431396484375,-0.147430419921875,-0.0677490234375,0.012970366515219212,0.06118961051106453,0.13370159268379211,0.21265298128128052,0.22046571969985962,0.17044587433338165,0.0869472324848175,-0.04010009765625,-0.11724853515625,-0.1517333984375,-0.22216796875,-0.214508056640625,-0.132781982421875,-0.066741943359375,0.03253272920846939,0.08835108578205109,0.1105075255036354,0.19718009233474731,0.20288705825805664,0.15482039749622345,0.14099551737308502,0.03573717549443245,-0.069244384765625,-0.11407470703125,-0.216583251953125,-0.282196044921875,-0.24176025390625,-0.16644287109375,-0.038909912109375,0.11041596531867981,0.19589830935001373,0.26514482498168945,0.29615160822868347,0.20978423953056335,0.11252174526453018,0.010193182155489922,-0.133392333984375,-0.186767578125,-0.200958251953125,-0.2412109375,-0.1986083984375,-0.121856689453125,-0.061553955078125,0.041749320924282074,0.12317270040512085,0.1742912083864212,0.25910213589668274,0.2789086699485779,0.22385326027870178,0.14755699038505554,-0.020538330078125,-0.175811767578125,-0.2352294921875,-0.318878173828125,-0.351318359375,-0.23956298828125,-0.09649658203125,0.05459761247038841,0.21008941531181335,0.28022095561027527,0.3036591708660126,0.2948698401451111,0.18881802260875702,0.07736442238092422,-0.01959228515625,-0.1544189453125,-0.208831787109375,-0.218231201171875,-0.2841796875,-0.258453369140625,-0.16326904296875,-0.090240478515625,0.0713827908039093,0.20789209008216858,0.2684102952480316,0.36146122217178345,0.34437087178230286,0.24301889538764954,0.12527848780155182,-0.1021728515625,-0.27447509765625,-0.333648681640625,-0.39410400390625,-0.36138916015625,-0.219451904296875,-0.066192626953125,0.10864589363336563,0.26700642704963684,0.32819604873657227,0.33594775199890137,0.31244850158691406,0.21774956583976746,0.10458692908287048,-0.029449462890625,-0.197296142578125,-0.254058837890625,-0.265625,-0.3450927734375,-0.3057861328125,-0.195098876953125,-0.091796875,0.1273232251405716,0.2712180018424988,0.33610033988952637,0.4349192678928375,0.36194953322410583,0.2451857030391693,0.12283699959516525,-0.15692138671875,-0.31512451171875,-0.35546875,-0.4344482421875,-0.375335693359375,-0.238067626953125,-0.11248779296875,0.09305093437433243,0.26776939630508423,0.32129886746406555,0.3658253848552704,0.37598803639411926,0.287606418132782,0.1908932775259018,0.024903103709220886,-0.2047119140625,-0.290313720703125,-0.349945068359375,-0.4539794921875,-0.38653564453125,-0.260986328125,-0.122467041015625,0.15237891674041748,0.32074952125549316,0.4050111472606659,0.5261085629463196,0.43253883719444275,0.26499220728874207,0.13275551795959473,-0.143890380859375,-0.326171875,-0.365631103515625,-0.456787109375,-0.435394287109375,-0.29241943359375,-0.1693115234375,0.026612140238285065,0.23401592671871185,0.3187047839164734,0.41569262742996216,0.4899441599845886,0.3901180922985077,0.2603228986263275,0.08844263851642609,-0.193389892578125,-0.349884033203125,-0.41766357421875,-0.519744873046875,-0.4598388671875,-0.279571533203125,-0.113861083984375,0.1267433762550354,0.3231604993343353,0.3886532187461853,0.4777062237262726,0.48039186000823975,0.3165684938430786,0.16217535734176636,-0.032958984375,-0.25274658203125,-0.325042724609375,-0.388946533203125,-0.489349365234375,-0.4249267578125,-0.256805419921875,-0.083343505859375,0.14902187883853912,0.3182165026664734,0.3881954550743103,0.49729910492897034,0.5051729083061218,0.3253883421421051,0.14050722122192383,-0.069091796875,-0.2904052734375,-0.370819091796875,-0.429168701171875,-0.494110107421875,-0.38128662109375,-0.189605712890625,-0.049163818359375,0.1349223256111145,0.3018280565738678,0.3808099627494812,0.48753318190574646,0.5197302103042603,0.3553575277328491,0.14804528653621674,-0.06927490234375,-0.28973388671875,-0.40411376953125,-0.48443603515625,-0.55072021484375,-0.454925537109375,-0.2161865234375,0.020416881889104843,0.23502303659915924,0.4040040373802185,0.45719778537750244,0.47367778420448303,0.4678487479686737,0.3037507236003876,0.06418042629957199,-0.1087646484375,-0.29107666015625,-0.436309814453125,-0.455596923828125,-0.46710205078125,-0.413116455078125,-0.19183349609375,0.016113772988319397,0.18036438524723053,0.37559130787849426,0.47025972604751587,0.48133793473243713,0.4853358566761017,0.33030182123184204,0.05310220643877983,-0.15625,-0.33636474609375,-0.454833984375,-0.436767578125,-0.42236328125,-0.380523681640625,-0.171722412109375,0.055146947503089905,0.221869558095932,0.3804132342338562,0.413129061460495,0.3724783957004547,0.3864558935165405,0.3082369565963745,0.10815759748220444,-0.072906494140625,-0.252960205078125,-0.399810791015625,-0.41278076171875,-0.411102294921875,-0.42205810546875,-0.259429931640625,-0.002960205078125,0.17685475945472717,0.3413800597190857,0.4508804678916931,0.44926297664642334,0.4447157084941864,0.3632007837295532,0.09292886406183243,-0.17352294921875,-0.301116943359375,-0.38446044921875,-0.4097900390625,-0.36700439453125,-0.34881591796875,-0.239501953125,0.01235999632626772,0.1821649819612503,0.27329325675964355,0.36979278922080994,0.3733939528465271,0.35914182662963867,0.36835840344429016,0.22022156417369843,-0.040924072265625,-0.22344970703125,-0.37567138671875,-0.488006591796875,-0.442230224609375,-0.368255615234375,-0.2733154296875,-0.012176513671875,0.22534868121147156,0.32856225967407227,0.4190191328525543,0.4196905493736267,0.317606121301651,0.23395489156246185,0.10263374447822571,-0.09393310546875,-0.199371337890625,-0.246124267578125,-0.333251953125,-0.345855712890625,-0.29681396484375,-0.27410888671875,-0.1378173828125,0.08844263851642609,0.22373118996620178,0.3259987235069275,0.4139835834503174,0.38346508145332336,0.29895931482315063,0.20050661265850067,0.0002441480755805969,-0.21038818359375,-0.308013916015625,-0.366424560546875,-0.3587646484375,-0.254425048828125,-0.184234619140625,-0.104217529296875,0.05612353980541229,0.1747489869594574,0.24466688930988312,0.31992554664611816,0.3194372355937958,0.24768821895122528,0.19690541923046112,0.10773033648729324,-0.0648193359375,-0.20220947265625,-0.294525146484375,-0.37030029296875,-0.340240478515625,-0.24114990234375,-0.1505126953125,-0.01470947265625,0.14947965741157532,0.2594988942146301,0.3238929510116577,0.3481856882572174,0.29642629623413086,0.1983397901058197,0.0950346365571022,-0.041473388671875,-0.1865234375,-0.275726318359375,-0.3297119140625,-0.341339111328125,-0.271331787109375,-0.157440185546875,-0.028656005859375,0.1192663311958313,0.24771873652935028,0.31284523010253906,0.3195898234844208,0.2795190215110779,0.19244971871376038,0.07626575231552124,-0.042572021484375,-0.1512451171875,-0.24114990234375,-0.27911376953125,-0.271026611328125,-0.246185302734375,-0.16143798828125,-0.04119873046875,0.06720175594091415,0.1910763829946518,0.2775048017501831,0.2954191565513611,0.2782372534275055,0.19238868355751038,0.05722220614552498,-0.055145263671875,-0.15606689453125,-0.230072021484375,-0.23095703125,-0.18994140625,-0.12664794921875,-0.061279296875,-0.014617919921875,0.027497176080942154,0.054383985698223114,0.08615375310182571,0.11777092516422272,0.14444410800933838,0.19196142256259918,0.1825006902217865,0.11453596502542496,0.04031495004892349,-0.07635498046875,-0.196136474609375,-0.25921630859375,-0.2587890625,-0.19720458984375,-0.088348388671875,0.0318613238632679,0.11502426117658615,0.16187018156051636,0.16776025295257568,0.1269875168800354,0.08029419928789139,0.047822505235672,0.03869746997952461,0.039155248552560806,0.026612140238285065,-0.004180908203125,-0.0648193359375,-0.1248779296875,-0.177154541015625,-0.214752197265625,-0.169403076171875,-0.066650390625,0.04690694808959961,0.17044587433338165,0.22644734382629395,0.20102542638778687,0.1666310578584671,0.10156559944152832,-0.00592041015625,-0.08294677734375,-0.110870361328125,-0.11175537109375,-0.0771484375,-0.04730224609375,-0.064605712890625,-0.079742431640625,-0.077789306640625,-0.064605712890625,-0.00189208984375,0.07312235236167908,0.12012085318565369,0.1592455804347992,0.16171757876873016,0.11194188892841339,0.043916136026382446,-0.037017822265625,-0.115631103515625,-0.14886474609375,-0.124786376953125,-0.068817138671875,-0.021697998046875,-0.0032958984375,0.003418073058128357,0.0032349620014429092,0.0003662221133708954,0.0198370311409235,0.05090487375855446,0.06833094358444214,0.08612323552370071,0.10010071098804474,0.06927701830863953,0.010803552344441414,-0.046356201171875,-0.103912353515625,-0.10894775390625,-0.06695556640625,-0.03619384765625,0.004303109832108021,0.032837916165590286,0.029602954164147377,0.01919614151120186,-0.02252197265625,-0.04931640625,-0.01861572265625,0.023529771715402603,0.06649982929229736,0.09845270961523056,0.10797448456287384,0.08239997923374176,0.007721182890236378,-0.06146240234375,-0.108551025390625,-0.131134033203125,-0.09552001953125,-0.039764404296875,0.0007324442267417908,0.030549027025699615,0.04257332161068916,0.02694784477353096,0.0005798516795039177,-0.005279541015625,0.0031434064731001854,0.03393658250570297,0.0867946445941925,0.1110568568110466,0.09424115717411041,0.03738517314195633,-0.055023193359375,-0.126495361328125,-0.15191650390625,-0.156005859375,-0.115692138671875,-0.02081298828125,0.06204412877559662,0.10956145077943802,0.126194030046463,0.09640797227621078,0.04382457956671715,-0.000732421875,-0.014312744140625,-0.00787353515625,-0.0032958984375,0.022034363821148872,0.03585924953222275,-0.000762939453125,-0.056365966796875,-0.1124267578125,-0.13580322265625,-0.092010498046875,-0.02294921875,0.039979249238967896,0.10632649064064026,0.14798425137996674,0.1507309228181839,0.11621448397636414,0.017792291939258575,-0.08990478515625,-0.117889404296875,-0.09228515625,-0.058929443359375,-0.004486083984375,0.03427228704094887,0.014465773478150368,-0.002899169921875,-0.011810302734375,-0.047698974609375,-0.047760009765625,-0.010162353515625,0.029786065220832825,0.09198278933763504,0.14117862284183502,0.13196203112602234,0.06466872245073318,-0.041412353515625,-0.140899658203125,-0.173736572265625,-0.13360595703125,-0.09088134765625,-0.049224853515625,0.03576769307255745,0.11450544744729996,0.14871670305728912,0.1424909234046936,0.08215582370758057,0.010925626382231712,-0.018585205078125,-0.0234375,-0.045196533203125,-0.076507568359375,-0.0806884765625,-0.084716796875,-0.09381103515625,-0.068145751953125,-0.027740478515625,0.019226660951972008,0.08368175476789474,0.1345255970954895,0.15625476837158203,0.14865565299987793,0.09988708049058914,0.01992858573794365,-0.059326171875,-0.1121826171875,-0.134979248046875,-0.135894775390625,-0.117462158203125,-0.086700439453125,-0.03839111328125,0.014709921553730965,0.03006073087453842,0.042451247572898865,0.09356974810361862,0.13684499263763428,0.14471876621246338,0.12179937213659286,0.07593005150556564,0.026032287627458572,-0.029510498046875,-0.10406494140625,-0.16937255859375,-0.175384521484375,-0.14178466796875,-0.0958251953125,-0.034576416015625,0.01666310615837574,0.06125064939260483,0.09753715991973877,0.11023285984992981,0.11813715100288391,0.11316263675689697,0.09738456457853317,0.07324442267417908,0.02459791861474514,-0.019195556640625,-0.062286376953125,-0.121826171875,-0.15753173828125,-0.155975341796875,-0.129302978515625,-0.07470703125,-0.00787353515625,0.043946653604507446,0.09186071157455444,0.143375962972641,0.1593676507472992,0.13998840749263763,0.1111789271235466,0.06598101556301117,0.018402662128210068,-0.0301513671875,-0.09783935546875,-0.152557373046875,-0.164825439453125,-0.145965576171875,-0.112701416015625,-0.0577392578125,0.025696584954857826,0.09823907911777496,0.1347392201423645,0.13638721406459808,0.10782189667224884,0.07766960561275482,0.0395519882440567,-0.015655517578125,-0.0552978515625,-0.061553955078125,-0.0467529296875,-0.044586181640625,-0.047698974609375,-0.04071044921875,-0.042144775390625,-0.0306396484375,-0.004486083984375,0.01547288428992033,0.04586932063102722,0.06741538643836975,0.05951109528541565,0.048890650272369385,0.033692434430122375,-0.000701904296875,-0.030426025390625,-0.046844482421875,-0.049468994140625,-0.020660400390625,0.0054322946816682816,0.006042664870619774,0.007629627361893654,0.00317392498254776,-0.00628662109375,-0.0111083984375,-0.01971435546875,-0.014984130859375,0.014130069874227047,0.03707998991012573,0.030487991869449615,0.02047792077064514,0.010437330231070518,-0.01568603515625,-0.023712158203125,-0.02606201171875,-0.037017822265625,-0.008148193359375,0.02529984340071678,0.03314310312271118,0.041718803346157074,0.027924437075853348,0.008362071588635445,0.0011291848495602608,-0.017791748046875,-0.0284423828125,-0.026336669921875,-0.02734375,-0.0286865234375,-0.02410888671875,-0.011871337890625,-0.005126953125,0.011993774212896824,0.04269539564847946,0.05053865164518356,0.046388134360313416,0.046418651938438416,0.030426952987909317,-0.0009765625,-0.026947021484375,-0.045318603515625,-0.058349609375,-0.049835205078125,-0.032470703125,-0.017913818359375,0.00039674062281847,-0.002197265625,-0.00506591796875,0.018066957592964172,0.0397656187415123,0.05844294652342796,0.06646931171417236,0.058290354907512665,0.04519791156053543,0.014954069629311562,-0.035003662109375,-0.088043212890625,-0.106170654296875,-0.080047607421875,-0.034393310546875,0.01904354989528656,0.055848874151706696,0.07721182703971863,0.0715048685669899,0.020386364310979843,-0.02557373046875,-0.0550537109375,-0.061553955078125,-0.01593017578125,0.029602954164147377,0.049653615802526474,0.06482131779193878,0.05313272401690483,0.008697775192558765,-0.04833984375,-0.093231201171875,-0.087890625,-0.03900146484375,0.011322367005050182,0.050233468413352966,0.07077242434024811,0.06466872245073318,0.029511399567127228,-0.0279541015625,-0.074676513671875,-0.076934814453125,-0.030303955078125,0.025605030357837677,0.06091494485735893,0.07870723307132721,0.06769005209207535,0.029725028201937675,-0.02825927734375,-0.084625244140625,-0.094451904296875,-0.056427001953125,0.001434369944036007,0.0394299142062664,0.05301064997911453,0.05792412906885147,0.029084138572216034,-0.01727294921875,-0.0540771484375,-0.060150146484375,-0.0125732421875,0.03640858083963394,0.0640888661146164,0.07205419987440109,0.04269539564847946,0.0012817773967981339,-0.058349609375,-0.112640380859375,-0.1024169921875,-0.05340576171875,0.010681478306651115,0.07477034628391266,0.1027863398194313,0.09436322748661041,0.05368205904960632,-0.00994873046875,-0.064239501953125,-0.083770751953125,-0.065826416015625,-0.021331787109375,0.027222510427236557,0.05313272401690483,0.05468916893005371,0.031189916655421257,-0.010101318359375,-0.040771484375,-0.052398681640625,-0.029205322265625,0.017670217901468277,0.04626606032252312,0.05389568954706192,0.03482161834836006,-0.0020751953125,-0.039947509765625,-0.07391357421875,-0.067657470703125,-0.0283203125,0.01910458691418171,0.06561479717493057,0.07791375368833542,0.05932798236608505,0.014770958572626114,-0.046173095703125,-0.0821533203125,-0.08099365234375,-0.04254150390625,0.0072634052485227585,0.04586932063102722,0.07809686660766602,0.07858516275882721,0.03897213563323021,-0.0186767578125,-0.06201171875,-0.06591796875,-0.048431396484375,-0.02294921875,0.010010071098804474,0.04141361638903618,0.05627613142132759,0.04040650650858879,0.007049775682389736,-0.0152587890625,-0.01458740234375,-0.005462646484375,0.0011291848495602608,0.002868739888072014,-0.004425048828125,-0.00958251953125,-0.021881103515625,-0.039459228515625,-0.033599853515625,-0.0093994140625,0.02539139986038208,0.050263985991477966,0.051911983639001846,0.05145420879125595,0.02929776906967163,-0.014251708984375,-0.043853759765625,-0.060943603515625,-0.0546875,-0.025726318359375,-0.0054931640625,0.008148442022502422,0.02386547438800335,0.02774132415652275,0.012512588873505592,-0.0010986328125,0.003906369209289551,0.014038514345884323,0.021179845556616783,0.0157475508749485,0.00079348124563694,-0.001556396484375,-0.0130615234375,-0.039154052734375,-0.04217529296875,-0.023193359375,0.002136295661330223,0.02856532484292984,0.03665272891521454,0.026337474584579468,0.01663258671760559,0.0008850367739796638,-0.021697998046875,-0.033050537109375,-0.023895263671875,0.005920590832829475,0.029969176277518272,0.03360087797045708,0.025971252471208572,0.008087405003607273,-0.007965087890625,-0.027984619140625,-0.047088623046875,-0.042388916015625,-0.019989013671875,0.012878810986876488,0.0316476933658123,0.0317697674036026,0.028962064534425735,0.016876734793186188,0.010132145136594772,-0.006805419921875,-0.02716064453125,-0.008453369140625,0.005615405738353729,0,0.0017090365290641785,-0.006378173828125,-0.01312255859375,-0.01104736328125,-0.01336669921875,-0.0048828125,0.013580736704170704,0.023987548425793648,0.027436140924692154,0.023285623639822006,0.006012146361172199,-0.013397216796875,-0.028564453125,-0.03704833984375,-0.021881103515625,0.00674459058791399,0.024323251098394394,0.03430280461907387,0.035248879343271255,0.0238044373691082,0.003875850699841976,-0.02569580078125,-0.04534912109375,-0.038970947265625,-0.0224609375,-0.005645751953125,0.015655994415283203,0.0316782146692276,0.030579546466469765,0.01812799461185932,-0.0037841796875,-0.02069091796875,-0.014007568359375,-0.00518798828125,0.0014038514345884323,0.01736503094434738,0.02304147556424141,0.013000885024666786,-0.0067138671875,-0.029998779296875,-0.0406494140625,-0.03570556640625,-0.0205078125,0.0029602954164147377,0.029908139258623123,0.043885618448257446,0.03820917382836342,0.02301095612347126,-0.002777099609375,-0.02764892578125,-0.0347900390625,-0.026153564453125,-0.00311279296875,0.019440289586782455,0.0316782146692276,0.037751395255327225,0.024109622463583946,-0.00897216796875,-0.038726806640625,-0.055145263671875,-0.051422119140625,-0.028564453125,-0.007843017578125,0.014801477082073689,0.052003540098667145,0.07272560894489288,0.05932798236608505,0.031495101749897,0.004730368964374065,-0.01214599609375,-0.025482177734375,-0.045074462890625,-0.055267333984375,-0.042633056640625,-0.024169921875,-0.0068359375,0.018097475171089172,0.03424176573753357,0.04303109645843506,0.05050813406705856,0.03274635970592499,0.009033478796482086,-0.006378173828125,-0.028656005859375,-0.0325927734375,-0.02099609375,-0.012847900390625,0.003875850699841976,0.017090365290641785,0.017090365290641785,0.008362071588635445,-0.008575439453125,-0.023468017578125,-0.02593994140625,-0.01611328125,-0.00689697265625,0.005706961266696453,0.025666065514087677,0.03399761766195297,0.03509628772735596,0.0239570289850235,-0.0008544921875,-0.00830078125,-0.0162353515625,-0.0311279296875,-0.0269775390625,-0.02703857421875,-0.024139404296875,-0.005584716796875,0.0010681478306651115,0.010437330231070518,0.025177769362926483,0.02923673205077648,0.03408917412161827,0.02768028900027275,0.005920590832829475,-0.017730712890625,-0.04473876953125,-0.053741455078125,-0.03955078125,-0.02691650390625,-0.001312255859375,0.04040650650858879,0.07055879384279251,0.08185064047574997,0.05645924061536789,0.010101626627147198,-0.02178955078125,-0.058807373046875,-0.08599853515625,-0.085968017578125,-0.06915283203125,-0.0133056640625,0.0395214706659317,0.05728324130177498,0.07437361031770706,0.07312235236167908,0.05142368748784065,0.02462843805551529,-0.01336669921875,-0.040618896484375,-0.04547119140625,-0.03582763671875,-0.028411865234375,-0.03070068359375,-0.0322265625,-0.024444580078125,-0.002685546875,0.014069032855331898,0.023621326312422752,0.040711693465709686,0.05700857564806938,0.061433758586645126,0.037720877677202225,-0.002593994140625,-0.037506103515625,-0.063446044921875,-0.06756591796875,-0.0511474609375,-0.015350341796875,0.024170659482479095,0.048829615116119385,0.060762353241443634,0.04373302310705185,0.014709921553730965,-0.016632080078125,-0.048431396484375,-0.0391845703125,-0.017242431640625,-0.00048828125,0.024109622463583946,0.024964140728116035,0.020844142884016037,0.0076601458713412285,-0.027252197265625,-0.02783203125,-0.0087890625,0.010345774702727795,0.04541154205799103,0.052034057676792145,0.03488265722990036,0.014465773478150368,-0.03350830078125,-0.073486328125,-0.084014892578125,-0.074188232421875,-0.024078369140625,0.03707998991012573,0.07351908832788467,0.08633686602115631,0.07061982899904251,0.04034546762704849,0.007629627361893654,-0.02862548828125,-0.053924560546875,-0.053924560546875,-0.02978515625,-0.00933837890625,-0.0098876953125,-0.01776123046875,-0.02044677734375,-0.008331298828125,0.006805627606809139,0.022644734010100365,0.052064575254917145,0.06970427930355072,0.06732383370399475,0.03894161805510521,-0.0250244140625,-0.069244384765625,-0.08697509765625,-0.098541259765625,-0.064727783203125,-0.01275634765625,0.03625598922371864,0.09863582253456116,0.10846278071403503,0.06961271911859512,0.03906369209289551,-0.012176513671875,-0.05804443359375,-0.070098876953125,-0.0859375,-0.060516357421875,-0.00439453125,0.00238044373691082,0.015259254723787308,0.044068727642297745,0.047883540391922,0.06875820457935333,0.05084383487701416,0.005920590832829475,0.024414807558059692,0.005371257662773132,-0.046966552734375,-0.064666748046875,-0.090972900390625,-0.05230712890625,-0.00701904296875,-0.01641845703125,0.03878902643918991,0.07281716167926788,0.07324442267417908,0.07602160423994064,0.0007019257172942162,-0.0172119140625,-0.00518798828125,-0.052490234375,-0.04205322265625,-0.041748046875,-0.029083251953125,0.0239570289850235,-0.00634765625,-0.009918212890625,0.019379254430532455,0.014465773478150368,0.0317697674036026,0.011749626137316227,0.01275673694908619,0.046418651938438416,0.00952177494764328,-0.017791748046875,-0.043701171875,-0.061614990234375,-0.02899169921875,-0.044189453125,-0.0296630859375,0.0317697674036026,0.0555742047727108,0.09268471598625183,0.06512650102376938,0.016266364604234695,0.027558214962482452,-0.026824951171875,-0.070465087890625,-0.07763671875,-0.090423583984375,-0.019561767578125,0.010437330231070518,0.00317392498254776,0.060640279203653336,0.06720175594091415,0.05874812975525856,0.040864285081624985,-0.019622802734375,-0.01043701171875,-0.00115966796875,-0.03045654296875,-0.029541015625,-0.02783203125,-0.010467529296875,-0.01129150390625,-0.04498291015625,-0.044708251953125,-0.0216064453125,0.026001770049333572,0.047151096165180206,0.04049806296825409,0.09384441375732422,0.10711997002363205,0.0556962788105011,-0.001129150390625,-0.091156005859375,-0.110504150390625,-0.100494384765625,-0.1419677734375,-0.089324951171875,0.0013122959062457085,0.07571642100811005,0.16550187766551971,0.14072084426879883,0.09762871265411377,0.1031830832362175,0.017761772498488426,-0.063720703125,-0.1197509765625,-0.16937255859375,-0.0914306640625,-0.04736328125,-0.068206787109375,0.02056947536766529,0.07458724081516266,0.10260322690010071,0.14465773105621338,0.05368205904960632,0.04116946831345558,0.0872218981385231,-0.01678466796875,-0.060394287109375,-0.095947265625,-0.1405029296875,-0.05108642578125,-0.07012939453125,-0.084320068359375,0.03820917382836342,0.0790124237537384,0.13208410143852234,0.12872707843780518,0.04602191224694252,0.08206427097320557,0.04306161776185036,-0.057281494140625,-0.087921142578125,-0.129730224609375,-0.0870361328125,-0.053070068359375,-0.083221435546875,-0.026123046875,0.03549302741885185,0.08801537752151489,0.10943937301635742,0.06994841992855072,0.0947904884815216,0.0871913805603981,0.021271400153636932,-0.043182373046875,-0.13525390625,-0.118743896484375,-0.086883544921875,-0.11614990234375,-0.037109375,0.03396710008382797,0.09634693711996078,0.16504409909248352,0.07998901605606079,0.05160680040717125,0.06842249631881714,-0.03460693359375,-0.068115234375,-0.10052490234375,-0.115264892578125,-0.004547119140625,-0.016693115234375,-0.04022216796875,0.040131840854883194,0.04574724659323692,0.07873775064945221,0.07077242434024811,-0.007843017578125,0.0473342090845108,0.05139316990971565,-0.033477783203125,-0.055328369140625,-0.08990478515625,-0.066436767578125,-0.0308837890625,-0.066986083984375,-0.017303466796875,0.062990203499794,0.10525833815336227,0.10995818674564362,0.04257332161068916,0.037568286061286926,0.04309213533997536,-0.02728271484375,-0.077972412109375,-0.123748779296875,-0.087188720703125,-0.021087646484375,-0.053436279296875,-0.02044677734375,0.04309213533997536,0.09121982753276825,0.14462721347808838,0.06552323698997498,0.039307840168476105,0.07010101526975632,-0.033203125,-0.0875244140625,-0.1400146484375,-0.159149169921875,-0.028594970703125,-0.024078369140625,-0.001953125,0.12979522347450256,0.13800470530986786,0.14847254753112793,0.06805627793073654,-0.063812255859375,-0.0338134765625,-0.08892822265625,-0.1427001953125,-0.095672607421875,-0.0584716796875,0.06601153314113617,0.08008056879043579,0.03628650680184364,0.09024323523044586,0.05963316559791565,0.03665272891521454,-0.023406982421875,-0.074737548828125,0.005218665115535259,-0.02264404296875,-0.0513916015625,-0.0528564453125,-0.063232421875,0.016266364604234695,-0.021881103515625,-0.02099609375,0.06674397736787796,0.0795617550611496,0.13397625088691711,0.05233924463391304,-0.0106201171875,0.02618488110601902,-0.091552734375,-0.125579833984375,-0.148223876953125,-0.119140625,0.03662221133708954,0.02206488326191902,0.08130130916833878,0.14859461784362793,0.11532944440841675,0.12955106794834137,-0.02020263671875,-0.074951171875,-0.043975830078125,-0.1279296875,-0.09326171875,-0.100921630859375,-0.03082275390625,0.09906308352947235,0.032959990203380585,0.07693716138601303,0.09961241483688354,0.07702872157096863,0.09363079071044922,-0.060882568359375,-0.055816650390625,-0.02239990234375,-0.115966796875,-0.077178955078125,-0.102294921875,-0.006011962890625,0.11682485044002533,0.029023103415966034,0.1035187840461731,0.12222663313150406,0.06546220183372498,0.045686207711696625,-0.12060546875,-0.1015625,-0.06365966796875,-0.128997802734375,-0.06756591796875,-0.032806396484375,0.10257270932197571,0.14960172772407532,0.06216620281338692,0.11432233452796936,0.049714650958776474,-0.005706787109375,-0.07525634765625,-0.1873779296875,-0.079376220703125,-0.082000732421875,-0.0836181640625,0.01748710498213768,0.06970427930355072,0.1892758011817932,0.12472914904356003,0.07083345949649811,0.09314249455928802,-0.018524169921875,-0.052581787109375,-0.165924072265625,-0.18072509765625,-0.075286865234375,-0.1146240234375,-0.029266357421875,0.05096591264009476,0.1504867672920227,0.23303933441638947,0.12430188804864883,0.1340678185224533,0.07541123777627945,-0.041412353515625,-0.127227783203125,-0.26611328125,-0.1951904296875,-0.16009521484375,-0.13409423828125,0.01892147585749626,0.13229773938655853,0.29773858189582825,0.27402570843696594,0.1983092725276947,0.17600023746490479,-0.006561279296875,-0.1324462890625,-0.288482666015625,-0.337738037109375,-0.230804443359375,-0.200927734375,-0.04443359375,0.12903225421905518,0.3030793070793152,0.3874019682407379,0.2715842127799988,0.23258155584335327,0.07550279051065445,-0.120513916015625,-0.262725830078125,-0.40576171875,-0.315765380859375,-0.253692626953125,-0.14617919921875,0.09225745499134064,0.2635578513145447,0.42359691858291626,0.3664662539958954,0.27378153800964355,0.17136143147945404,-0.089019775390625,-0.26025390625,-0.414794921875,-0.41888427734375,-0.3243408203125,-0.222320556640625,0.05175939202308655,0.2609637677669525,0.42616045475006104,0.4506668150424957,0.34766685962677,0.269112229347229,-0.01434326171875,-0.26068115234375,-0.39862060546875,-0.449432373046875,-0.38311767578125,-0.33935546875,-0.08331298828125,0.20871607959270477,0.3983581066131592,0.47987303137779236,0.395367294549942,0.3784905672073364,0.17368084192276,-0.141876220703125,-0.340362548828125,-0.47186279296875,-0.429290771484375,-0.4183349609375,-0.269561767578125,0.05691701918840408,0.3182775378227234,0.503524899482727,0.46491897106170654,0.44050416350364685,0.3261513113975525,-0.011871337890625,-0.27783203125,-0.490325927734375,-0.50189208984375,-0.47235107421875,-0.392181396484375,-0.043701171875,0.27408674359321594,0.5203405618667603,0.5515304803848267,0.4849086105823517,0.4144413471221924,0.0712912380695343,-0.254241943359375,-0.4954833984375,-0.573974609375,-0.508087158203125,-0.451263427734375,-0.120574951171875,0.251533567905426,0.503311276435852,0.599658191204071,0.5173192620277405,0.4426709711551666,0.13861507177352905,-0.238372802734375,-0.475433349609375,-0.57391357421875,-0.519561767578125,-0.468048095703125,-0.1868896484375,0.21170690655708313,0.47245705127716064,0.5773797035217285,0.5094454884529114,0.4513382315635681,0.20303964614868164,-0.18017578125,-0.426422119140625,-0.5355224609375,-0.511322021484375,-0.48602294921875,-0.2598876953125,0.12353892624378204,0.3905453681945801,0.5331583619117737,0.5313272476196289,0.49501022696495056,0.2766807973384857,-0.084747314453125,-0.345489501953125,-0.50177001953125,-0.532501220703125,-0.5244140625,-0.322906494140625,0.058351390063762665,0.347514271736145,0.5109103918075562,0.5486922860145569,0.5191198587417603,0.2855921983718872,-0.09185791015625,-0.3516845703125,-0.480865478515625,-0.505523681640625,-0.49029541015625,-0.2752685546875,0.10757774859666824,0.3729667067527771,0.47816401720046997,0.48771628737449646,0.4537797272205353,0.21155430376529694,-0.15179443359375,-0.36529541015625,-0.439300537109375,-0.45538330078125,-0.4312744140625,-0.199462890625,0.143650621175766,0.36155277490615845,0.4516739249229431,0.4767296314239502,0.4353465437889099,0.1666005402803421,-0.18212890625,-0.382568359375,-0.459625244140625,-0.479522705078125,-0.42218017578125,-0.14691162109375,0.19321268796920776,0.41273233294487,0.5017548203468323,0.5102999806404114,0.41706594824790955,0.08529923111200333,-0.25750732421875,-0.432098388671875,-0.48980712890625,-0.48028564453125,-0.365814208984375,-0.03875732421875,0.27350687980651855,0.42417675256729126,0.47355571389198303,0.47868281602859497,0.3562730848789215,0.008362071588635445,-0.29522705078125,-0.42486572265625,-0.458892822265625,-0.46710205078125,-0.332977294921875,0.010528885759413242,0.27256080508232117,0.4051026999950409,0.4941557049751282,0.5255287289619446,0.34626302123069763,-0.044830322265625,-0.321380615234375,-0.453765869140625,-0.548431396484375,-0.55621337890625,-0.31158447265625,0.10565508157014847,0.3707998991012573,0.48960843682289124,0.5856196880340576,0.5708792209625244,0.2610553205013275,-0.17742919921875,-0.437042236328125,-0.54541015625,-0.599639892578125,-0.513946533203125,-0.157470703125,0.2550126612186432,0.46528518199920654,0.52177494764328,0.5590075254440308,0.4757225215435028,0.10470900684595108,-0.28460693359375,-0.46826171875,-0.522796630859375,-0.540771484375,-0.40887451171875,-0.038055419921875,0.2951139807701111,0.45551925897598267,0.4988250434398651,0.5316629409790039,0.41608935594558716,0.022644734010100365,-0.302154541015625,-0.459014892578125,-0.538116455078125,-0.563812255859375,-0.392822265625,0.019989624619483948,0.3341776728630066,0.4843592643737793,0.557176411151886,0.5684682726860046,0.36155277490615845,-0.077301025390625,-0.389984130859375,-0.52947998046875,-0.60455322265625,-0.567962646484375,-0.277374267578125,0.1669362485408783,0.46330147981643677,0.5683462023735046,0.5914182066917419,0.5275124311447144,0.191228985786438,-0.254119873046875,-0.50225830078125,-0.5908203125,-0.60638427734375,-0.4822998046875,-0.10174560546875,0.3238929510116577,0.5451826453208923,0.5876339077949524,0.5894955396652222,0.4544205963611603,0.03564561903476715,-0.35467529296875,-0.544586181640625,-0.61004638671875,-0.595306396484375,-0.405609130859375,0.024140141904354095,0.3908200263977051,0.555772602558136,0.6189458966255188,0.6098208427429199,0.3583483397960663,-0.10498046875,-0.42529296875,-0.56793212890625,-0.645965576171875,-0.588348388671875,-0.262115478515625,0.18097476661205292,0.46333199739456177,0.5858638286590576,0.6540116667747498,0.5496688485145569,0.1423078030347824,-0.2762451171875,-0.486541748046875,-0.594573974609375,-0.644500732421875,-0.46258544921875,-0.036346435546875,0.32227545976638794,0.4990386664867401,0.5965757966041565,0.6194341778755188,0.37009796500205994,-0.064483642578125,-0.351776123046875,-0.5050048828125,-0.61541748046875,-0.575225830078125,-0.25628662109375,0.13690602779388428,0.3810235857963562,0.5236670970916748,0.617450475692749,0.5379192233085632,0.15521714091300964,-0.2222900390625,-0.42059326171875,-0.58062744140625,-0.643310546875,-0.44818115234375,-0.03857421875,0.29682302474975586,0.47337260842323303,0.6020386219024658,0.6388744711875916,0.37702566385269165,-0.076324462890625,-0.376129150390625,-0.538665771484375,-0.66082763671875,-0.600372314453125,-0.240631103515625,0.18640705943107605,0.44138920307159424,0.5676137804985046,0.651570200920105,0.556718647480011,0.13602100312709808,-0.287384033203125,-0.49505615234375,-0.61273193359375,-0.662322998046875,-0.460540771484375,-0.00079345703125,0.3633228540420532,0.5309915542602539,0.6214178800582886,0.6439100503921509,0.38535723090171814,-0.10589599609375,-0.42578125,-0.568817138671875,-0.66461181640625,-0.61688232421875,-0.261199951171875,0.206427201628685,0.47819453477859497,0.6056703329086304,0.6749778985977173,0.5676137804985046,0.1428571492433548,-0.30511474609375,-0.51910400390625,-0.632781982421875,-0.680816650390625,-0.4736328125,-0.0020751953125,0.395458847284317,0.5844904780387878,0.6685079336166382,0.6392406821250916,0.33545947074890137,-0.144866943359375,-0.462127685546875,-0.611114501953125,-0.689605712890625,-0.573150634765625,-0.17620849609375,0.269661545753479,0.5359050035476685,0.6472365260124207,0.6599627733230591,0.4591814875602722,0.020081179216504097,-0.36474609375,-0.574798583984375,-0.683013916015625,-0.63848876953125,-0.32244873046875,0.12070070207118988,0.43299660086631775,0.6006653308868408,0.6797997951507568,0.5895870923995972,0.20737327635288239,-0.22613525390625,-0.4910888671875,-0.6546630859375,-0.70135498046875,-0.490753173828125,-0.052886962890625,0.32200080156326294,0.5319070816040039,0.6634418964385986,0.6940519213676453,0.42432934045791626,-0.044830322265625,-0.40191650390625,-0.621490478515625,-0.734832763671875,-0.650848388671875,-0.261932373046875,0.18134097754955292,0.46241647005081177,0.635486900806427,0.7285073399543762,0.616412878036499,0.17215491831302643,-0.284698486328125,-0.5479736328125,-0.71197509765625,-0.737640380859375,-0.467803955078125,0.00015259254723787308,0.37034210562705994,0.5805535912513733,0.6969817280769348,0.7036042213439941,0.3734855055809021,-0.130615234375,-0.4595947265625,-0.648284912109375,-0.732269287109375,-0.605804443359375,-0.19329833984375,0.2526017129421234,0.5334635376930237,0.6717123985290527,0.7095248103141785,0.5114902257919312,0.03091524913907051,-0.37408447265625,-0.5975341796875,-0.709747314453125,-0.662628173828125,-0.355621337890625,0.1188695952296257,0.4821009039878845,0.6602679491043091,0.7111423015594482,0.5817438364028931,0.18445387482643127,-0.26947021484375,-0.559417724609375,-0.6943359375,-0.7020263671875,-0.473663330078125,-0.034423828125,0.3671071529388428,0.6316720843315125,0.7200232148170471,0.6439710855484009,0.347636342048645,-0.113983154296875,-0.457916259765625,-0.64111328125,-0.71942138671875,-0.574432373046875,-0.194549560546875,0.21143223345279694,0.52116459608078,0.669423520565033,0.6762291193008423,0.48927274346351624,0.0631427988409996,-0.320220947265625,-0.544097900390625,-0.67547607421875,-0.62530517578125,-0.33843994140625,0.05652027949690819,0.40894803404808044,0.5839106440544128,0.635670006275177,0.5581225156784058,0.20343638956546783,-0.190887451171875,-0.4654541015625,-0.6341552734375,-0.632781982421875,-0.42681884765625,-0.04864501953125,0.3275856673717499,0.5364543795585632,0.6054872274398804,0.5823236703872681,0.3158970773220062,-0.0970458984375,-0.432708740234375,-0.624664306640625,-0.64404296875,-0.496307373046875,-0.14617919921875,0.26593828201293945,0.5299538969993591,0.6186407208442688,0.6055482625961304,0.41770684719085693,0.01901303231716156,-0.379425048828125,-0.601104736328125,-0.637420654296875,-0.543731689453125,-0.262725830078125,0.13971373438835144,0.45616015791893005,0.5761589407920837,0.5580309629440308,0.4589373469352722,0.15564440190792084,-0.242279052734375,-0.4654541015625,-0.52325439453125,-0.488433837890625,-0.306365966796875,-0.013336181640625,0.2778710424900055,0.4189275801181793,0.3974425494670868,0.3659474551677704,0.21304970979690552,-0.091461181640625,-0.28289794921875,-0.331756591796875,-0.325897216796875,-0.223663330078125,-0.06683349609375,0.126041442155838,0.25788140296936035,0.2309945970773697,0.20975372195243835,0.14838099479675293,-0.04083251953125,-0.17974853515625,-0.20025634765625,-0.167022705078125,-0.090484619140625,-0.011749267578125,0.08572649210691452,0.17255164682865143,0.12430188804864883,0.07852412760257721,0.04119998961687088,-0.07232666015625,-0.135345458984375,-0.1314697265625,-0.06280517578125,0.03726309910416603,0.06888027489185333,0.0787987932562828,0.08789330720901489,0.025025177747011185,-0.024078369140625,-0.0391845703125,-0.06884765625,-0.065093994140625,-0.029266357421875,0.06634724140167236,0.14502395689487457,0.10446485877037048,0.01989806815981865,-0.052886962890625,-0.12493896484375,-0.16021728515625,-0.1181640625,-0.047210693359375,0.015259254723787308,0.10177922993898392,0.2138737142086029,0.2383495569229126,0.1423078030347824,0.006988738663494587,-0.129119873046875,-0.219451904296875,-0.246337890625,-0.188873291015625,-0.07769775390625,0.006408886983990669,0.11700796335935593,0.251838743686676,0.2714011073112488,0.18903164565563202,0.07010101526975632,-0.076995849609375,-0.177276611328125,-0.2288818359375,-0.219329833984375,-0.145111083984375,-0.06707763671875,0.059236425906419754,0.20187993347644806,0.25846126675605774,0.23319193720817566,0.13800470530986786,-0.022308349609375,-0.147186279296875,-0.21380615234375,-0.242431640625,-0.19403076171875,-0.095184326171875,0.06561479717493057,0.22666096687316895,0.2848597764968872,0.2532120645046234,0.13879817724227905,-0.051177978515625,-0.21844482421875,-0.292144775390625,-0.2808837890625,-0.177398681640625,-0.030670166015625,0.15488143265247345,0.31452375650405884,0.3408001959323883,0.26456496119499207,0.09372234344482422,-0.130523681640625,-0.29986572265625,-0.345428466796875,-0.28387451171875,-0.15301513671875,0.019989624619483948,0.2071596384048462,0.3338724970817566,0.3275856673717499,0.2311166673898697,0.06509598344564438,-0.142608642578125,-0.28204345703125,-0.30303955078125,-0.244781494140625,-0.1319580078125,0.01657155156135559,0.16791284084320068,0.2681966722011566,0.269356369972229,0.20090334117412567,0.06817834824323654,-0.10369873046875,-0.218414306640625,-0.24688720703125,-0.210113525390625,-0.1268310546875,-0.0029296875,0.13919492065906525,0.23648792505264282,0.25107577443122864,0.1910763829946518,0.06524857133626938,-0.0987548828125,-0.2227783203125,-0.265960693359375,-0.23614501953125,-0.141326904296875,0.020264290273189545,0.191167950630188,0.2762840688228607,0.27341532707214355,0.19519639015197754,0.0477614663541317,-0.122589111328125,-0.26348876953125,-0.314849853515625,-0.248809814453125,-0.114532470703125,0.06723227351903915,0.23960082232952118,0.29752495884895325,0.25803399085998535,0.14545121788978577,-0.00860595703125,-0.156219482421875,-0.2669677734375,-0.278076171875,-0.187225341796875,-0.037322998046875,0.13653981685638428,0.2601092457771301,0.26453444361686707,0.17261269688606262,0.0394299142062664,-0.094970703125,-0.19476318359375,-0.242462158203125,-0.207061767578125,-0.0865478515625,0.05783257633447647,0.1898556500673294,0.2630390226840973,0.21256141364574432,0.0788598284125328,-0.055419921875,-0.1552734375,-0.203521728515625,-0.203155517578125,-0.12652587890625,0.011474959552288055,0.12457655370235443,0.21100497245788574,0.2378917783498764,0.143498033285141,-0.01318359375,-0.14947509765625,-0.211151123046875,-0.20263671875,-0.157806396484375,-0.040740966796875,0.11349833756685257,0.21146275103092194,0.25830864906311035,0.22638630867004395,0.08215582370758057,-0.10906982421875,-0.252349853515625,-0.286041259765625,-0.2386474609375,-0.135498046875,0.0394299142062664,0.21854305267333984,0.3235267102718353,0.32923367619514465,0.22894985973834991,0.04907376319169998,-0.188446044921875,-0.3670654296875,-0.379669189453125,-0.2847900390625,-0.122039794921875,0.09329508244991302,0.29715871810913086,0.4051942527294159,0.37571337819099426,0.2454298585653305,0.017914365977048874,-0.26007080078125,-0.424560546875,-0.415313720703125,-0.295501708984375,-0.103607177734375,0.14145329594612122,0.35343486070632935,0.4276558756828308,0.36964017152786255,0.2222663015127182,-0.018890380859375,-0.294464111328125,-0.443389892578125,-0.41229248046875,-0.27276611328125,-0.065093994140625,0.18054750561714172,0.37690359354019165,0.43284401297569275,0.3567918837070465,0.1904354989528656,-0.06280517578125,-0.310211181640625,-0.429412841796875,-0.416412353515625,-0.271820068359375,-0.04083251953125,0.1984618604183197,0.3885616660118103,0.4445631206035614,0.3634449243545532,0.16837061941623688,-0.09222412109375,-0.306793212890625,-0.431060791015625,-0.437835693359375,-0.277740478515625,-0.0228271484375,0.21298867464065552,0.3866389989852905,0.4528031349182129,0.36896878480911255,0.14050722122192383,-0.128631591796875,-0.3280029296875,-0.44146728515625,-0.42633056640625,-0.233612060546875,0.036835841834545135,0.25699636340141296,0.4033631384372711,0.44041261076927185,0.31360819935798645,0.055207982659339905,-0.2073974609375,-0.378692626953125,-0.451171875,-0.369598388671875,-0.12554931640625,0.14490188658237457,0.3398236036300659,0.43369853496551514,0.3979003131389618,0.2058473527431488,-0.07159423828125,-0.292205810546875,-0.414093017578125,-0.4271240234375,-0.261138916015625,0.016815699636936188,0.25095370411872864,0.3908810615539551,0.4195379614830017,0.3015228807926178,0.04818872734904289,-0.21197509765625,-0.35577392578125,-0.407318115234375,-0.338043212890625,-0.090118408203125,0.17880794405937195,0.3419904112815857,0.41563159227371216,0.364879310131073,0.15433210134506226,-0.142181396484375,-0.350067138671875,-0.41351318359375,-0.395904541015625,-0.228271484375,0.08532975614070892,0.334818571805954,0.4375133514404297,0.43925291299819946,0.30436110496520996,0.013611255213618279,-0.2958984375,-0.451629638671875,-0.46954345703125,-0.3822021484375,-0.115234375,0.22052675485610962,0.43150120973587036,0.4978789687156677,0.4384594261646271,0.21939755976200104,-0.121124267578125,-0.396240234375,-0.488922119140625,-0.4627685546875,-0.297821044921875,0.02865688130259514,0.33112582564353943,0.47056490182876587,0.46510207653045654,0.3323770761489868,0.0557267963886261,-0.277496337890625,-0.466827392578125,-0.4713134765625,-0.352569580078125,-0.09515380859375,0.21915341913700104,0.42591631412506104,0.4694052040576935,0.3710440397262573,0.14603106677532196,-0.161529541015625,-0.4017333984375,-0.461395263671875,-0.39251708984375,-0.200347900390625,0.1032136008143425,0.3558152914047241,0.4522843062877655,0.39466536045074463,0.2211676388978958,-0.025146484375,-0.275787353515625,-0.40655517578125,-0.3917236328125,-0.281463623046875,-0.056304931640625,0.20758689939975739,0.36002686619758606,0.3895992934703827,0.3079622685909271,0.11352885514497757,-0.12750244140625,-0.299560546875,-0.343902587890625,-0.323944091796875,-0.21197509765625,0.028778955340385437,0.25138095021247864,0.3583178222179413,0.365611732006073,0.2628864347934723,0.04281746968626976,-0.19781494140625,-0.3349609375,-0.377532958984375,-0.3365478515625,-0.145050048828125,0.12506484985351562,0.32813501358032227,0.430249959230423,0.40852075815200806,0.21243934333324432,-0.084869384765625,-0.31585693359375,-0.426971435546875,-0.44049072265625,-0.295928955078125,0.014496291987597942,0.3015533983707428,0.4521622359752655,0.4850306808948517,0.33811455965042114,0.02932828664779663,-0.27642822265625,-0.456451416015625,-0.4888916015625,-0.366119384765625,-0.07696533203125,0.25772881507873535,0.4677877128124237,0.5124667882919312,0.37720876932144165,0.0874355286359787,-0.230682373046875,-0.45904541015625,-0.521270751953125,-0.406585693359375,-0.138641357421875,0.20227667689323425,0.46491897106170654,0.5531479716300964,0.4285409152507782,0.1429792195558548,-0.177459716796875,-0.440887451171875,-0.55596923828125,-0.47174072265625,-0.216796875,0.11224707961082458,0.4041871428489685,0.5794854760169983,0.5334025025367737,0.2607806622982025,-0.07440185546875,-0.35504150390625,-0.5384521484375,-0.53802490234375,-0.322357177734375,0.008362071588635445,0.3026825785636902,0.5018768906593323,0.5609607100486755,0.36213263869285583,0.009033478796482086,-0.274017333984375,-0.46771240234375,-0.536102294921875,-0.3641357421875,-0.030120849609375,0.26718956232070923,0.46290475130081177,0.5446333289146423,0.3738212287425995,0.004211554303765297,-0.287994384765625,-0.461669921875,-0.5428466796875,-0.39501953125,-0.033843994140625,0.3009430170059204,0.504104733467102,0.5811334848403931,0.41731008887290955,0.04110843315720558,-0.316314697265625,-0.5325927734375,-0.58441162109375,-0.432159423828125,-0.099273681640625,0.2602007985115051,0.5142673850059509,0.6052125692367554,0.46617022156715393,0.13754692673683167,-0.2352294921875,-0.49810791015625,-0.5667724609375,-0.4532470703125,-0.16876220703125,0.17725150287151337,0.431134968996048,0.5406354069709778,0.4426404535770416,0.16516616940498352,-0.149139404296875,-0.397705078125,-0.49365234375,-0.41259765625,-0.178497314453125,0.13156528770923615,0.36771753430366516,0.4757530391216278,0.42606890201568604,0.1669362485408783,-0.156219482421875,-0.358062744140625,-0.4376220703125,-0.39434814453125,-0.18170166015625,0.11597033590078354,0.3331400454044342,0.43369853496551514,0.41477707028388977,0.1977599412202835,-0.1246337890625,-0.34283447265625,-0.42413330078125,-0.37542724609375,-0.15618896484375,0.1266518086194992,0.32084110379219055,0.4142582416534424,0.3879207670688629,0.15372173488140106,-0.17132568359375,-0.36749267578125,-0.4403076171875,-0.3839111328125,-0.1195068359375,0.20416882634162903,0.41587573289871216,0.5139622092247009,0.4351024031639099,0.12497329711914062,-0.2467041015625,-0.503082275390625,-0.59600830078125,-0.47607421875,-0.1524658203125,0.23319193720817566,0.5254371762275696,0.6649677753448486,0.5853755474090576,0.2449110448360443,-0.212310791015625,-0.5814208984375,-0.736358642578125,-0.642608642578125,-0.31317138671875,0.14923551678657532,0.5443586707115173,0.7447126507759094,0.7009796500205994,0.3969237208366394,-0.087127685546875,-0.537689208984375,-0.75054931640625,-0.716552734375,-0.443328857421875,0.033631399273872375,0.4852137863636017,0.7454146146774292,0.7598498463630676,0.48136845231056213,-0.011383056640625,-0.48565673828125,-0.74200439453125,-0.743255615234375,-0.484222412109375,-0.02362060546875,0.4198126196861267,0.7067171335220337,0.7807550430297852,0.5229346752166748,0.02841273322701454,-0.4136962890625,-0.686859130859375,-0.74639892578125,-0.4940185546875,-0.0181884765625,0.39216285943984985,0.6295357942581177,0.7253333926200867,0.49754324555397034,-0.008758544921875,-0.408935546875,-0.6212158203125,-0.675933837890625,-0.42803955078125,0.04428235813975334,0.4280526041984558,0.6287728548049927,0.6779686808586121,0.4109317362308502,-0.1019287109375,-0.481536865234375,-0.6697998046875,-0.684539794921875,-0.367523193359375,0.1267738938331604,0.4980315566062927,0.7084566950798035,0.7205114960670471,0.3967711329460144,-0.1214599609375,-0.528778076171875,-0.747314453125,-0.738067626953125,-0.409210205078125,0.09668263792991638,0.52122563123703,0.7585070133209229,0.7603381276130676,0.44865259528160095,-0.0797119140625,-0.52838134765625,-0.7486572265625,-0.738433837890625,-0.44464111328125,0.052064575254917145,0.48796045780181885,0.7213049530982971,0.7403180003166199,0.45786920189857483,-0.068572998046875,-0.512481689453125,-0.7032470703125,-0.681396484375,-0.397125244140625,0.09106723219156265,0.48722800612449646,0.6589251160621643,0.6426892876625061,0.34583574533462524,-0.1527099609375,-0.52655029296875,-0.666900634765625,-0.591827392578125,-0.23779296875,0.23245948553085327,0.5508285760879517,0.6722006797790527,0.5555589199066162,0.16272468864917755,-0.309661865234375,-0.6275634765625,-0.71734619140625,-0.516510009765625,-0.06719970703125,0.37763604521751404,0.670247495174408,0.7539902925491333,0.5182347893714905,0.04693746566772461,-0.424163818359375,-0.74249267578125,-0.783416748046875,-0.494720458984375,-0.0184326171875,0.4442579448223114,0.7543870210647583,0.7882626056671143,0.4989471137523651,0.018433179706335068,-0.44927978515625,-0.764312744140625,-0.77630615234375,-0.444122314453125,0.01541184727102518,0.4284493625164032,0.7286294102668762,0.7513352036476135,0.42262032628059387,-0.047637939453125,-0.449371337890625,-0.724884033203125,-0.717010498046875,-0.34271240234375,0.12240973860025406,0.46415600180625916,0.6914273500442505,0.6725668907165527,0.29795220494270325,-0.1798095703125,-0.516876220703125,-0.711944580078125,-0.635650634765625,-0.21728515625,0.24951933324337006,0.555986225605011,0.7210302948951721,0.6046632528305054,0.14835047721862793,-0.3204345703125,-0.617034912109375,-0.76287841796875,-0.567230224609375,-0.0567626953125,0.3883480429649353,0.6555986404418945,0.7792596220970154,0.5520493388175964,0.005615405738353729,-0.451507568359375,-0.72100830078125,-0.812103271484375,-0.5115966796875,0.05157627910375595,0.5063020586967468,0.7685781717300415,0.8062685132026672,0.47114473581314087,-0.089019775390625,-0.54034423828125,-0.802642822265625,-0.7989501953125,-0.415130615234375,0.13022248446941376,0.556382954120636,0.8054139614105225,0.7768791913986206,0.36875516176223755,-0.178436279296875,-0.577789306640625,-0.798126220703125,-0.7274169921875,-0.299041748046875,0.2135074883699417,0.5889157056808472,0.7818536758422852,0.6735129952430725,0.24347667396068573,-0.25213623046875,-0.5892333984375,-0.74603271484375,-0.61669921875,-0.17938232421875,0.28046509623527527,0.5893734693527222,0.7222815752029419,0.557084858417511,0.110873743891716,-0.329986572265625,-0.578948974609375,-0.6578369140625,-0.48382568359375,-0.053253173828125,0.35129857063293457,0.5771965980529785,0.6308786273002625,0.4197515845298767,-0.02154541015625,-0.405548095703125,-0.57562255859375,-0.573577880859375,-0.33380126953125,0.08798485994338989,0.4188360273838043,0.5768913626670837,0.5590380430221558,0.26429030299186707,-0.17596435546875,-0.46697998046875,-0.565032958984375,-0.5010986328125,-0.185943603515625,0.22797326743602753,0.4835047423839569,0.5717337727546692,0.46296578645706177,0.10650959610939026,-0.297637939453125,-0.53387451171875,-0.57147216796875,-0.38934326171875,-0.0252685546875,0.3328959047794342,0.5542466640472412,0.5772576332092285,0.3399761915206909,-0.048004150390625,-0.39508056640625,-0.5953369140625,-0.5521240234375,-0.27459716796875,0.08630634844303131,0.41621142625808716,0.6123539209365845,0.5528427958488464,0.24897000193595886,-0.141754150390625,-0.4656982421875,-0.61663818359375,-0.500213623046875,-0.17706298828125,0.16409802436828613,0.44712668657302856,0.599810779094696,0.4866481423377991,0.14569535851478577,-0.219451904296875,-0.479461669921875,-0.575653076171875,-0.42169189453125,-0.080963134765625,0.25086215138435364,0.4861903786659241,0.5624866485595703,0.3965880274772644,0.04657124727964401,-0.300689697265625,-0.51812744140625,-0.549346923828125,-0.348602294921875,-0.003662109375,0.3104953169822693,0.5021210312843323,0.5282448530197144,0.34357738494873047,-0.004913330078125,-0.349273681640625,-0.5330810546875,-0.5101318359375,-0.294525146484375,0.04385509714484215,0.3506881892681122,0.5085604190826416,0.491073340177536,0.2847987413406372,-0.062652587890625,-0.3798828125,-0.5321044921875,-0.495880126953125,-0.2623291015625,0.09024323523044586,0.37781915068626404,0.5181737542152405,0.5149693489074707,0.3003326654434204,-0.083465576171875,-0.39642333984375,-0.534393310546875,-0.523529052734375,-0.296173095703125,0.07388531416654587,0.35224464535713196,0.4990081489086151,0.5430463552474976,0.3508712947368622,-0.0372314453125,-0.338226318359375,-0.4918212890625,-0.542694091796875,-0.349639892578125,0.015259254723787308,0.28308969736099243,0.4517655074596405,0.5406659245491028,0.3741264045238495,0.012146366760134697,-0.261199951171875,-0.438140869140625,-0.535858154296875,-0.363922119140625,-0.028472900390625,0.21677297353744507,0.4142887592315674,0.5432904958724976,0.3975951373577118,0.05957213044166565,-0.216064453125,-0.420440673828125,-0.53887939453125,-0.397613525390625,-0.080474853515625,0.17697682976722717,0.3910641670227051,0.5421308279037476,0.43345439434051514,0.11749625951051712,-0.1727294921875,-0.401123046875,-0.53619384765625,-0.4307861328125,-0.139129638671875,0.15213477611541748,0.3901180922985077,0.5310220718383789,0.4526810646057129,0.15482039749622345,-0.165924072265625,-0.395721435546875,-0.533233642578125,-0.458404541015625,-0.162628173828125,0.16092410683631897,0.40907010436058044,0.5496383309364319,0.48945584893226624,0.18884854018688202,-0.168212890625,-0.41510009765625,-0.563507080078125,-0.51007080078125,-0.210662841796875,0.14569535851478577,0.4213080108165741,0.5700552463531494,0.5314493179321289,0.2562944293022156,-0.11846923828125,-0.4041748046875,-0.56939697265625,-0.54296875,-0.283416748046875,0.07324442267417908,0.3787041902542114,0.5502487421035767,0.5480208992958069,0.32877591252326965,-0.038482666015625,-0.349822998046875,-0.51849365234375,-0.52716064453125,-0.34228515625,-0.020751953125,0.29779961705207825,0.48768576979637146,0.5153050422668457,0.36906033754348755,0.07052827626466751,-0.248931884765625,-0.457305908203125,-0.485595703125,-0.342926025390625,-0.103515625,0.16235846281051636,0.37699514627456665,0.4528031349182129,0.3485518991947174,0.12903225421905518,-0.113739013671875,-0.323974609375,-0.405487060546875,-0.303619384765625,-0.1126708984375,0.060731835663318634,0.22684408724308014,0.33777886629104614,0.27985474467277527,0.10861537605524063,-0.05474853515625,-0.184478759765625,-0.25933837890625,-0.218902587890625,-0.08905029296875,0.03512680530548096,0.1276284009218216,0.18778039515018463,0.16971343755722046,0.07306130975484848,-0.0330810546875,-0.109466552734375,-0.12152099609375,-0.07379150390625,-0.0269775390625,0.006317331455647945,0.043885618448257446,0.05850398167967796,0.02059999480843544,-0.0255126953125,-0.0362548828125,-0.01446533203125,0.01342814415693283,0.0638447254896164,0.11584825813770294,0.07422101497650146,-0.008514404296875,-0.058837890625,-0.120269775390625,-0.170440673828125,-0.137939453125,-0.02447509765625,0.10003967583179474,0.17719046771526337,0.2152775675058365,0.18628498911857605,0.057649463415145874,-0.0855712890625,-0.19024658203125,-0.256591796875,-0.220977783203125,-0.079986572265625,0.079378642141819,0.20954008400440216,0.26801353693008423,0.22476881742477417,0.09735404700040817,-0.07232666015625,-0.211944580078125,-0.28350830078125,-0.2515869140625,-0.0941162109375,0.0874965637922287,0.2213202267885208,0.3091830313205719,0.2759178578853607,0.1112399697303772,-0.077117919921875,-0.2333984375,-0.334930419921875,-0.322998046875,-0.16015625,0.06115909293293953,0.22687460482120514,0.334574431180954,0.3486434519290924,0.221778005361557,0.012268440797924995,-0.190765380859375,-0.32647705078125,-0.3668212890625,-0.291229248046875,-0.100006103515625,0.12231818586587906,0.2797021269798279,0.3395794630050659,0.3085116147994995,0.19623401761054993,-0.009185791015625,-0.200958251953125,-0.27752685546875,-0.2940673828125,-0.253387451171875,-0.10791015625,0.09088411927223206,0.21832941472530365,0.24982452392578125,0.22766807675361633,0.16364024579524994,0.043214209377765656,-0.094390869140625,-0.16552734375,-0.18707275390625,-0.179412841796875,-0.125518798828125,-0.018829345703125,0.09610278904438019,0.14798425137996674,0.12417981773614883,0.11288796365261078,0.12869656085968018,0.048127688467502594,-0.0675048828125,-0.109283447265625,-0.118927001953125,-0.154083251953125,-0.14691162109375,-0.0286865234375,0.07428205013275146,0.09677419066429138,0.13608203828334808,0.21674245595932007,0.18088319897651672,0.01889095827937126,-0.0968017578125,-0.157562255859375,-0.232208251953125,-0.268035888671875,-0.146942138671875,0.03396710008382797,0.1426435112953186,0.2229071855545044,0.31223487854003906,0.30436110496520996,0.09610278904438019,-0.119537353515625,-0.2205810546875,-0.30511474609375,-0.3614501953125,-0.25811767578125,-0.013885498046875,0.17975401878356934,0.28070923686027527,0.3560899794101715,0.3709219694137573,0.19531846046447754,-0.067291259765625,-0.227264404296875,-0.3282470703125,-0.383575439453125,-0.320098876953125,-0.113494873046875,0.1115756705403328,0.2555314898490906,0.34589678049087524,0.3788262605667114,0.287270724773407,0.05954161286354065,-0.158538818359375,-0.29071044921875,-0.35601806640625,-0.35101318359375,-0.234344482421875,-0.014251708984375,0.18439283967018127,0.3024384379386902,0.35917234420776367,0.35200047492980957,0.19647815823554993,-0.061065673828125,-0.227996826171875,-0.30596923828125,-0.369537353515625,-0.334259033203125,-0.127349853515625,0.11273537576198578,0.24781030416488647,0.3230994641780853,0.3811456561088562,0.2938932478427887,0.042329173535108566,-0.163787841796875,-0.2679443359375,-0.35223388671875,-0.3741455078125,-0.219207763671875,0.03732413798570633,0.2056947499513626,0.27570420503616333,0.3427533805370331,0.334574431180954,0.1348612904548645,-0.10064697265625,-0.224334716796875,-0.287017822265625,-0.3287353515625,-0.26300048828125,-0.04803466796875,0.1428876668214798,0.221808522939682,0.2613910436630249,0.28797265887260437,0.2068849802017212,0.010193182155489922,-0.141265869140625,-0.20404052734375,-0.238433837890625,-0.25933837890625,-0.178802490234375,-0.003509521484375,0.12436292320489883,0.17828913033008575,0.23191015422344208,0.28015992045402527,0.19418928027153015,0.01675466075539589,-0.105987548828125,-0.182647705078125,-0.269805908203125,-0.321014404296875,-0.22705078125,-0.036376953125,0.12549211084842682,0.23642688989639282,0.3485518991947174,0.3799554407596588,0.22089296579360962,-0.010955810546875,-0.183135986328125,-0.29638671875,-0.408843994140625,-0.395538330078125,-0.180328369140625,0.063051238656044,0.2624286711215973,0.3893856704235077,0.4388561546802521,0.33750420808792114,0.079317606985569,-0.15643310546875,-0.32720947265625,-0.3841552734375,-0.359405517578125,-0.25030517578125,-0.0045166015625,0.2229071855545044,0.35364848375320435,0.3499557375907898,0.2629169523715973,0.12305063009262085,-0.0970458984375,-0.25421142578125,-0.301483154296875,-0.248382568359375,-0.154571533203125,-0.044708251953125,0.11789300292730331,0.20777001976966858,0.21234779059886932,0.1593981683254242,0.08294931054115295,0.0032959990203380585,-0.115631103515625,-0.146026611328125,-0.11773681640625,-0.085723876953125,-0.03448486328125,-0.00701904296875,0.0393993966281414,0.043885618448257446,0.043366800993680954,0.0632038339972496,0.04199346899986267,0.04998932033777237,0.036835841834545135,0.016357921063899994,-0.00274658203125,-0.0574951171875,-0.069305419921875,-0.09759521484375,-0.118896484375,-0.084869384765625,-0.0435791015625,0.06991790235042572,0.16937772929668427,0.17847225069999695,0.16922514140605927,0.10904263705015182,0.014435254968702793,-0.1103515625,-0.215118408203125,-0.217010498046875,-0.210113525390625,-0.1444091796875,0.012054811231791973,0.17224647104740143,0.2845850884914398,0.2611468732357025,0.18564409017562866,0.08233893662691116,-0.08245849609375,-0.208892822265625,-0.26318359375,-0.20526123046875,-0.119476318359375,-0.045318603515625,0.09866634011268616,0.20096439123153687,0.2152165323495865,0.14050722122192383,0.03561510145664215,-0.025970458984375,-0.09930419921875,-0.108795166015625,-0.08282470703125,-0.03143310546875,0.02526932582259178,-0.0054931640625,0.012024292722344398,0.00006103701889514923,-0.036865234375,-0.006256103515625,0.0012817773967981339,0.06033509224653244,0.08627582341432571,0.09356974810361862,0.12161625921726227,0.03030487895011902,-0.0634765625,-0.14959716796875,-0.208160400390625,-0.16851806640625,-0.102569580078125,0.043244726955890656,0.16425061225891113,0.19977416098117828,0.23920407891273499,0.17899106442928314,0.05951109528541565,-0.085845947265625,-0.23883056640625,-0.24493408203125,-0.219879150390625,-0.16107177734375,0.0025940733030438423,0.1506698876619339,0.2773522138595581,0.2601397633552551,0.1516769975423813,0.08633686602115631,-0.04217529296875,-0.160247802734375,-0.236297607421875,-0.220306396484375,-0.113555908203125,-0.0498046875,0.06884975731372833,0.1663258820772171,0.1837824583053589,0.15243995189666748,0.05783257633447647,0.021210364997386932,-0.060394287109375,-0.12109375,-0.08721923828125,-0.10260009765625,-0.061676025390625,-0.02642822265625,0.004547257907688618,0.06863612681627274,0.045625172555446625,0.06634724140167236,0.08813745528459549,0.05929746478796005,0.041627246886491776,-0.0128173828125,-0.01806640625,-0.05548095703125,-0.145294189453125,-0.118194580078125,-0.06561279296875,-0.0101318359375,0.05047761648893356,0.08023316413164139,0.16541032493114471,0.15491195023059845,0.048158206045627594,-0.00146484375,-0.083740234375,-0.117645263671875,-0.127288818359375,-0.1558837890625,-0.046661376953125,0.0476393923163414,0.09723196923732758,0.13641773164272308,0.08474989980459213,0.07217627763748169,0.01654103212058544,-0.0721435546875,-0.0753173828125,-0.09521484375,-0.04779052734375,0.009338663890957832,0.011139255948364735,0.0554521307349205,0.04599139466881752,0.04144413769245148,0.021698661148548126,-0.069610595703125,-0.045654296875,-0.00238037109375,-0.011627197265625,0.013580736704170704,0.0157475508749485,0.051973022520542145,0.07000946253538132,-0.01556396484375,-0.029754638671875,-0.003326416015625,-0.029388427734375,-0.0396728515625,-0.063232421875,-0.021209716796875,0.05417035520076752,0.015259254723787308,0.013214514590799809,0.05020294710993767,0.05859553813934326,0.06033509224653244,-0.02093505859375,-0.037261962890625,-0.02032470703125,-0.07940673828125,-0.080535888671875,-0.091156005859375,-0.0142822265625,0.09808649122714996,0.05847346410155296,0.09366130828857422,0.1105075255036354,0.06759849935770035,0.028839990496635437,-0.1209716796875,-0.1339111328125,-0.107635498046875,-0.127960205078125,-0.02392578125,0.025788139551877975,0.12320322543382645,0.1898861676454544,0.10773033648729324,0.08627582341432571,-0.00006103515625,-0.0797119140625,-0.134429931640625,-0.194427490234375,-0.103759765625,-0.049713134765625,0.03259376809000969,0.1358073651790619,0.13364055752754211,0.158848837018013,0.08890041708946228,0.010132145136594772,-0.053619384765625,-0.16448974609375,-0.141082763671875,-0.12353515625,-0.071014404296875,0.03473006188869476,0.05719168484210968,0.14410839974880219,0.1595812886953354,0.08365123718976974,0.039338357746601105,-0.049041748046875,-0.086151123046875,-0.115570068359375,-0.1387939453125,-0.069366455078125,-0.022918701171875,0.03094576857984066,0.0874660462141037,0.09067048877477646,0.09451582282781601,0.07046724110841751,0.03515732288360596,-0.0018310546875,-0.06036376953125,-0.077362060546875,-0.072418212890625,-0.076751708984375,-0.067901611328125,-0.0452880859375,0.008850367739796638,0.06576738506555557,0.10397656261920929,0.12836085259914398,0.11606188863515854,0.08938871324062347,0.0237739197909832,-0.077911376953125,-0.13043212890625,-0.160614013671875,-0.175048828125,-0.128021240234375,-0.031402587890625,0.10965300351381302,0.19458600878715515,0.19470809400081635,0.1983092725276947,0.13696706295013428,0.019501328468322754,-0.1016845703125,-0.226104736328125,-0.234283447265625,-0.17816162109375,-0.128814697265625,-0.01800537109375,0.09637745469808578,0.20480971038341522,0.2463759332895279,0.15289773046970367,0.08459730446338654,0.030610065907239914,-0.07049560546875,-0.148162841796875,-0.196044921875,-0.14495849609375,-0.060943603515625,-0.0311279296875,0.018860438838601112,0.05490279942750931,0.10980559885501862,0.12872707843780518,0.050355538725852966,0.04922635480761528,0.04974517226219177,0.019653920084238052,0.012665181420743465,-0.080718994140625,-0.097686767578125,-0.06585693359375,-0.119964599609375,-0.096466064453125,-0.069000244140625,-0.0101318359375,0.12540055811405182,0.13660085201263428,0.14096499979496002,0.16275520622730255,0.095583975315094,0.03805658221244812,-0.073883056640625,-0.187408447265625,-0.166473388671875,-0.146270751953125,-0.121490478515625,-0.031005859375,0.04046754539012909,0.12469863146543503,0.1826227605342865,0.12454603612422943,0.07620471715927124,0.05722220614552498,-0.01177978515625,-0.05474853515625,-0.094512939453125,-0.11773681640625,-0.055145263671875,-0.056243896484375,-0.071075439453125,-0.014434814453125,-0.007354736328125,0.03473006188869476,0.08130130916833878,0.06530961394309998,0.11188085377216339,0.1191442608833313,0.07068087160587311,0.03344828635454178,-0.072784423828125,-0.136871337890625,-0.14892578125,-0.18402099609375,-0.136138916015625,-0.0496826171875,0.040040284395217896,0.16116824746131897,0.2133549004793167,0.19721060991287231,0.15277566015720367,0.0554826483130455,-0.045318603515625,-0.132110595703125,-0.227508544921875,-0.2213134765625,-0.111602783203125,-0.04876708984375,0.016510512679815292,0.10779137909412384,0.1597949117422104,0.19669179618358612,0.12991729378700256,0.018555253744125366,0.0005188146606087685,-0.047271728515625,-0.099090576171875,-0.1119384765625,-0.14312744140625,-0.06549072265625,0.020355846732854843,0.0008545182645320892,0.03888057917356491,0.07757805287837982,0.09723196923732758,0.12103641033172607,0.032258063554763794,-0.01544189453125,-0.000518798828125,-0.046295166015625,-0.05792236328125,-0.075653076171875,-0.06671142578125,0.01547288428992033,0.021973326802253723,0.01104770042002201,0.026734214276075363,0.020203253254294395,0.020142216235399246,-0.005828857421875,-0.0123291015625,0.009247108362615108,0.018799401819705963,0.05642872303724289,0.04892117157578468,0.014496291987597942,-0.005645751953125,-0.0665283203125,-0.081268310546875,-0.08294677734375,-0.09796142578125,-0.04156494140625,0.013122959062457085,0.08984649181365967,0.15421003103256226,0.10766930133104324,0.08392590284347534,0.05722220614552498,-0.034576416015625,-0.087158203125,-0.128143310546875,-0.136077880859375,-0.081756591796875,-0.043853759765625,0.0007019257172942162,0.04586932063102722,0.08020263910293579,0.1115451529622078,0.08255256712436676,0.048677023500204086,0.0398266538977623,0.015198217704892159,-0.013458251953125,-0.061279296875,-0.082489013671875,-0.082977294921875,-0.094268798828125,-0.054840087890625,-0.02685546875,0.0020447401329874992,0.0789819061756134,0.10452589392662048,0.11386455595493317,0.10007019340991974,0.04193243384361267,0.029145177453756332,-0.0194091796875,-0.08978271484375,-0.096588134765625,-0.108856201171875,-0.0819091796875,-0.032867431640625,-0.037933349609375,0.00317392498254776,0.07266457378864288,0.09167760610580444,0.10730308294296265,0.10251167416572571,0.07766960561275482,0.06921598315238953,0.008301034569740295,-0.080841064453125,-0.123199462890625,-0.1455078125,-0.128021240234375,-0.090728759765625,-0.0614013671875,0.026367992162704468,0.1189916655421257,0.14923551678657532,0.14700765907764435,0.10666219145059586,0.06506545841693878,0.03094576857984066,-0.055084228515625,-0.12823486328125,-0.133453369140625,-0.11309814453125,-0.0780029296875,-0.05181884765625,-0.02947998046875,0.02929776906967163,0.09735404700040817,0.12247078120708466,0.09384441375732422,0.06952116638422012,0.0636921301484108,0.030610065907239914,-0.01715087890625,-0.076690673828125,-0.10638427734375,-0.078521728515625,-0.078277587890625,-0.07122802734375,-0.0311279296875,-0.00640869140625,0.05423139035701752,0.08359019458293915,0.061464279890060425,0.0798974558711052,0.06985686719417572,0.05893124267458916,0.054353464394807816,-0.0220947265625,-0.05145263671875,-0.06304931640625,-0.10955810546875,-0.089508056640625,-0.08575439453125,-0.0810546875,-0.00836181640625,0.032959990203380585,0.08148442208766937,0.13876765966415405,0.13727225363254547,0.13351847231388092,0.10446485877037048,0.024414807558059692,-0.04510498046875,-0.108062744140625,-0.159759521484375,-0.177398681640625,-0.16729736328125,-0.115875244140625,-0.02166748046875,0.08227790147066116,0.14758750796318054,0.1820123940706253,0.19403667747974396,0.15277566015720367,0.09338663518428802,0.0098574785515666,-0.091888427734375,-0.134796142578125,-0.1627197265625,-0.18255615234375,-0.138214111328125,-0.0947265625,-0.04412841796875,0.04538102447986603,0.1028778925538063,0.15262307226657867,0.1907406896352768,0.17200231552124023,0.16092410683631897,0.10495315492153168,-0.02728271484375,-0.11572265625,-0.196136474609375,-0.26251220703125,-0.2239990234375,-0.17657470703125,-0.10052490234375,0.0552690215408802,0.1595507711172104,0.23633533716201782,0.2782372534275055,0.2061525285243988,0.14468824863433838,0.07431256771087646,-0.071014404296875,-0.16265869140625,-0.210174560546875,-0.233428955078125,-0.186279296875,-0.1461181640625,-0.09649658203125,0.01742606982588768,0.11841181665658951,0.18082216382026672,0.22864466905593872,0.2212591916322708,0.17654958367347717,0.13647878170013428,0.028992583975195885,-0.1072998046875,-0.185302734375,-0.257171630859375,-0.2674560546875,-0.198394775390625,-0.148406982421875,-0.04779052734375,0.10983611643314362,0.21298867464065552,0.26688435673713684,0.2713095545768738,0.22464674711227417,0.1581774353981018,0.0473647266626358,-0.09820556640625,-0.21539306640625,-0.266387939453125,-0.265625,-0.2325439453125,-0.15472412109375,-0.04833984375,0.08108767867088318,0.20010986924171448,0.24039429426193237,0.25025177001953125,0.23505355417728424,0.16220587491989136,0.08420056849718094,-0.036285400390625,-0.158203125,-0.19793701171875,-0.251708984375,-0.271484375,-0.20001220703125,-0.13360595703125,-0.005096435546875,0.14557328820228577,0.2135990411043167,0.299661248922348,0.31431013345718384,0.21781060099601746,0.1425214409828186,-0.007904052734375,-0.171051025390625,-0.221343994140625,-0.27691650390625,-0.2821044921875,-0.188232421875,-0.103424072265625,-0.00006103515625,0.10773033648729324,0.15570543706417084,0.20151372253894806,0.22693563997745514,0.18857386708259583,0.1513718068599701,0.0946073830127716,-0.01220703125,-0.097747802734375,-0.175384521484375,-0.26739501953125,-0.28509521484375,-0.230621337890625,-0.1571044921875,-0.028472900390625,0.10525833815336227,0.1984313428401947,0.28901028633117676,0.30521562695503235,0.2383495569229126,0.15491195023059845,0.02310251072049141,-0.103271484375,-0.169036865234375,-0.243560791015625,-0.288421630859375,-0.247528076171875,-0.194091796875,-0.109832763671875,0.03405865654349327,0.13379314541816711,0.2153691202402115,0.31473737955093384,0.3161717653274536,0.25128939747810364,0.1594592183828354,-0.00836181640625,-0.1512451171875,-0.222747802734375,-0.294830322265625,-0.330718994140625,-0.260528564453125,-0.13372802734375,0.0012207403779029846,0.1277504861354828,0.17773979902267456,0.21793267130851746,0.28955960273742676,0.27558213472366333,0.206732377409935,0.1114230751991272,-0.02545166015625,-0.114013671875,-0.193389892578125,-0.313323974609375,-0.36175537109375,-0.300933837890625,-0.18475341796875,-0.0296630859375,0.13727225363254547,0.2553483545780182,0.3426923453807831,0.40192878246307373,0.3157444894313812,0.14166691899299622,0.00027466658502817154,-0.15625,-0.266204833984375,-0.287353515625,-0.302825927734375,-0.27685546875,-0.16986083984375,-0.035614013671875,0.07528916001319885,0.158787801861763,0.21131016314029694,0.22891934216022491,0.251686155796051,0.24124881625175476,0.14844202995300293,0.03741569072008133,-0.07696533203125,-0.182373046875,-0.23553466796875,-0.285919189453125,-0.310272216796875,-0.227264404296875,-0.099639892578125,0.02523880824446678,0.16574601829051971,0.24948881566524506,0.2940458357334137,0.35132908821105957,0.2936491072177887,0.143620103597641,0.013763847760856152,-0.136962890625,-0.252593994140625,-0.287750244140625,-0.32159423828125,-0.31683349609375,-0.19964599609375,-0.038116455078125,0.1027253046631813,0.23184911906719208,0.29779961705207825,0.299752801656723,0.29786065220832825,0.22855311632156372,0.08810693770647049,-0.03857421875,-0.17352294921875,-0.27850341796875,-0.282867431640625,-0.2701416015625,-0.2529296875,-0.146148681640625,-0.00048828125,0.12158574163913727,0.22437208890914917,0.25663015246391296,0.24207282066345215,0.24475844204425812,0.1836298704147339,0.05163731798529625,-0.0589599609375,-0.15948486328125,-0.220947265625,-0.20782470703125,-0.208221435546875,-0.2159423828125,-0.144744873046875,-0.03118896484375,0.06649982929229736,0.15598009526729584,0.21237830817699432,0.22428052127361298,0.24405652284622192,0.22550126910209656,0.11325418949127197,-0.010894775390625,-0.12005615234375,-0.2200927734375,-0.268280029296875,-0.272735595703125,-0.244598388671875,-0.15655517578125,-0.005645751953125,0.1343119591474533,0.21240882575511932,0.252357542514801,0.24857325851917267,0.21289712190628052,0.15289773046970367,0.028015991672873497,-0.104522705078125,-0.171051025390625,-0.195526123046875,-0.185516357421875,-0.15277099609375,-0.130462646484375,-0.087646484375,0.0028382213786244392,0.08868678659200668,0.125766783952713,0.14825892448425293,0.17065951228141785,0.16562394797801971,0.14185002446174622,0.08465834707021713,-0.01397705078125,-0.098419189453125,-0.1611328125,-0.20941162109375,-0.20269775390625,-0.1427001953125,-0.06219482421875,0.02221747487783432,0.09845270961523056,0.1508529931306839,0.16064943373203278,0.13919492065906525,0.08859523385763168,0.021851252764463425,-0.00469970703125,-0.02142333984375,-0.052276611328125,-0.054229736328125,-0.061065673828125,-0.0765380859375,-0.0792236328125,-0.095916748046875,-0.090118408203125,-0.04010009765625,0.02237006649374962,0.08059938251972198,0.12399670481681824,0.15363018214702606,0.14822840690612793,0.09949034452438354,0.024323251098394394,-0.061859130859375,-0.110992431640625,-0.127716064453125,-0.134368896484375,-0.109161376953125,-0.0692138671875,-0.020233154296875,0.0395214706659317,0.07464827597141266,0.07034516334533691,0.06448560953140259,0.0798059031367302,0.07721182703971863,0.05697805806994438,0.02462843805551529,-0.022247314453125,-0.036773681640625,-0.048126220703125,-0.077484130859375,-0.0751953125,-0.067047119140625,-0.0567626953125,-0.018402099609375,0.007629627361893654,0.01828058809041977,0.04257332161068916,0.0796533077955246,0.10263374447822571,0.09726248681545258,0.08355967700481415,0.052827540785074234,0.008606219664216042,-0.0322265625,-0.098663330078125,-0.16009521484375,-0.15594482421875,-0.10845947265625,-0.035858154296875,0.05255287140607834,0.10953093320131302,0.12408825755119324,0.12469863146543503,0.110721156001091,0.04937894642353058,-0.033233642578125,-0.0863037109375,-0.1068115234375,-0.067352294921875,-0.001373291015625,0.020416881889104843,0.02612384408712387,0.02047792077064514,-0.007232666015625,-0.030731201171875,-0.056640625,-0.075469970703125,-0.050048828125,0.0139469588175416,0.07031464576721191,0.10498367249965668,0.12042603641748428,0.08935819566249847,0.0276497695595026,-0.033294677734375,-0.09228515625,-0.122802734375,-0.11297607421875,-0.078155517578125,-0.027923583984375,0.01989806815981865,0.047944579273462296,0.056031983345746994,0.05609302222728729,0.04663228243589401,0.02853480726480484,0.018524736166000366,0.01733451336622238,0.01678518019616604,0.0159916989505291,0.010345774702727795,-0.018585205078125,-0.060516357421875,-0.0738525390625,-0.063201904296875,-0.047210693359375,-0.015716552734375,0.021088290959596634,0.0475783571600914,0.06814783066511154,0.07086397707462311,0.04217658191919327,0.007507553324103355,-0.00872802734375,-0.01092529296875,-0.00439453125,0.0023499252274632454,0.007507553324103355,0.00866725668311119,-0.011566162109375,-0.0430908203125,-0.075469970703125,-0.0982666015625,-0.074737548828125,-0.016693115234375,0.040040284395217896,0.09405804425477982,0.13907285034656525,0.1516769975423813,0.11288796365261078,0.034455396234989166,-0.054840087890625,-0.12860107421875,-0.15496826171875,-0.1392822265625,-0.10009765625,-0.028167724609375,0.058290354907512665,0.11743522435426712,0.11786248534917831,0.07473982870578766,0.0277718435972929,-0.022735595703125,-0.0552978515625,-0.0574951171875,-0.046356201171875,0.0018616290763020515,0.05700857564806938,0.07568590342998505,0.06982634961605072,0.024842066690325737,-0.04022216796875,-0.093170166015625,-0.128265380859375,-0.11712646484375,-0.071990966796875,-0.008331298828125,0.06982634961605072,0.12182988971471786,0.14593951404094696,0.1423993706703186,0.09033478796482086,0.01388592179864645,-0.0548095703125,-0.102447509765625,-0.123992919921875,-0.1190185546875,-0.0885009765625,-0.044158935546875,-0.0030517578125,0.032929472625255585,0.06033509224653244,0.0635700523853302,0.05789361149072647,0.05615405738353729,0.04220709949731827,0.0316782146692276,0.0318308062851429,0.018463697284460068,-0.006011962890625,-0.0323486328125,-0.060455322265625,-0.08966064453125,-0.104644775390625,-0.094757080078125,-0.064910888671875,-0.0001220703125,0.07397686690092087,0.11813715100288391,0.1511581838130951,0.15381328761577606,0.10190130025148392,0.025574510917067528,-0.061920166015625,-0.133575439453125,-0.157928466796875,-0.143707275390625,-0.09979248046875,-0.029205322265625,0.055177465081214905,0.1116672232747078,0.12002930045127869,0.09961241483688354,0.055146947503089905,0.010895107872784138,-0.024383544921875,-0.05828857421875,-0.060821533203125,-0.039642333984375,-0.012451171875,0.017792291939258575,0.022492140531539917,0.006134220398962498,-0.00836181640625,-0.014984130859375,-0.016448974609375,-0.023834228515625,-0.0224609375,-0.0045166015625,0.02298043668270111,0.049592576920986176,0.047242652624845505,0.034577470272779465,0.025757621973752975,-0.001251220703125,-0.03173828125,-0.0540771484375,-0.066253662109375,-0.062164306640625,-0.040191650390625,-0.004547119140625,0.02386547438800335,0.0476088747382164,0.06772056967020035,0.06472975760698318,0.04370250552892685,0.009643848985433578,-0.025543212890625,-0.040496826171875,-0.048126220703125,-0.047943115234375,-0.030364990234375,-0.015960693359375,-0.00274658203125,0.012054811231791973,0.015381328761577606,0.01748710498213768,0.022583696991205215,0.025635547935962677,0.030579546466469765,0.034546952694654465,0.032258063554763794,0.021942809224128723,0.0006714072078466415,-0.029449462890625,-0.052490234375,-0.060577392578125,-0.061737060546875,-0.047637939453125,-0.014129638671875,0.02471999265253544,0.056581318378448486,0.07049775868654251,0.07293923944234848,0.06805627793073654,0.0473647266626358,0.013977477326989174,-0.021820068359375,-0.0460205078125,-0.059478759765625,-0.065887451171875,-0.058837890625,-0.047088623046875,-0.03106689453125,-0.005035400390625,0.025696584954857826,0.05233924463391304,0.062349315732717514,0.06686605513095856,0.06753746420145035,0.04611346870660782,0.016205329447984695,-0.01416015625,-0.041290283203125,-0.058197021484375,-0.0716552734375,-0.0670166015625,-0.049957275390625,-0.03375244140625,-0.006683349609375,0.01980651170015335,0.03634754568338394,0.04693746566772461,0.05697805806994438,0.0637531653046608,0.05294961482286453,0.03473006188869476,0.012817773967981339,-0.02166748046875,-0.054718017578125,-0.077239990234375,-0.08502197265625,-0.07415771484375,-0.050262451171875,-0.016448974609375,0.02468947321176529,0.06424146145582199,0.0798669382929802,0.07199316471815109,0.05685598403215408,0.0277718435972929,-0.00396728515625,-0.02520751953125,-0.038970947265625,-0.04046630859375,-0.034820556640625,-0.025360107421875,-0.01080322265625,0.0004272591322660446,0.0031128879636526108,0.003479110077023506,0.010437330231070518,0.016144290566444397,0.01474044006317854,0.01388592179864645,0.011474959552288055,0.012604144401848316,0.020142216235399246,0.017151402309536934,0.0072634052485227585,0.005401776172220707,0.005371257662773132,-0.006500244140625,-0.028778076171875,-0.045318603515625,-0.04571533203125,-0.032989501953125,-0.012908935546875,0.01593066193163395,0.04898220673203468,0.07589953392744064,0.08136234432458878,0.052858058363199234,0.006042664870619774,-0.04473876953125,-0.0838623046875,-0.096038818359375,-0.086639404296875,-0.045166015625,0.02072206884622574,0.08001953363418579,0.11542100459337234,0.1035187840461731,0.055207982659339905,-0.0009765625,-0.0682373046875,-0.1209716796875,-0.128814697265625,-0.095733642578125,-0.032196044921875,0.039307840168476105,0.09811700880527496,0.12527848780155182,0.11017181724309921,0.05887020379304886,-0.01141357421875,-0.06951904296875,-0.10113525390625,-0.106292724609375,-0.0794677734375,-0.021148681640625,0.04135258123278618,0.0716269388794899,0.07431256771087646,0.0632343515753746,0.028778955340385437,-0.015594482421875,-0.044219970703125,-0.056121826171875,-0.044891357421875,-0.01007080078125,0.01904354989528656,0.03515732288360596,0.04416028410196304,0.035981323570013046,0.01825006864964962,-0.003936767578125,-0.0294189453125,-0.035614013671875,-0.022705078125,-0.004058837890625,0.0076601458713412285,0.005890072323381901,0.011413922533392906,0.016479995101690292,0.0029602954164147377,-0.013397216796875,-0.0130615234375,0.0009155552834272385,0.011810663156211376,0.029725028201937675,0.04367198795080185,0.02932828664779663,0.017639698460698128,0.00839259009808302,-0.029388427734375,-0.06353759765625,-0.066253662109375,-0.0555419921875,-0.032745361328125,-0.000640869140625,0.02847376838326454,0.058381907641887665,0.07330545783042908,0.06125064939260483,0.03393658250570297,-0.002593994140625,-0.02667236328125,-0.03875732421875,-0.049468994140625,-0.034942626953125,-0.01702880859375,-0.0089111328125,0.010498367249965668,0.012939848005771637,-0.00201416015625,-0.00811767578125,-0.0076904296875,-0.001983642578125,0.006958220154047012,0.024750512093305588,0.040192876011133194,0.03466902673244476,0.020874660462141037,0.0016479995101690292,-0.018463134765625,-0.03631591796875,-0.053466796875,-0.040252685546875,-0.01361083984375,-0.0030517578125,0.007477034814655781,0.013519699685275555,0.01821954920887947,0.0138248847797513,-0.005767822265625,-0.00201416015625,0.015228736214339733,0.021668141707777977,0.02859584242105484,0.028199102729558945,0.012573625892400742,-0.01043701171875,-0.030120849609375,-0.04248046875,-0.04962158203125,-0.0400390625,-0.010162353515625,0.019684437662363052,0.0318613238632679,0.02847376838326454,0.0198370311409235,0.009552293457090855,-0.00238037109375,-0.012115478515625,-0.003631591796875,0.02386547438800335,0.04663228243589401,0.05236976221203804,0.03717154264450073,0.00555436871945858,-0.03546142578125,-0.079345703125,-0.105712890625,-0.10107421875,-0.06292724609375,-0.00347900390625,0.05801568552851677,0.11032441258430481,0.13788262009620667,0.13284707069396973,0.09405804425477982,0.025147251784801483,-0.04913330078125,-0.104156494140625,-0.12896728515625,-0.129730224609375,-0.11102294921875,-0.058349609375,0.00827051606029272,0.06198309361934662,0.10184026509523392,0.1109958216547966,0.0955534502863884,0.06942960619926453,0.026490066200494766,-0.02142333984375,-0.061676025390625,-0.08123779296875,-0.0721435546875,-0.051971435546875,-0.034271240234375,-0.01336669921875,0.012909329496324062,0.03320413827896118,0.0393993966281414,0.03006073087453842,0.01748710498213768,0.018433179706335068,0.021759696304798126,0.01229895930737257,-0.00079345703125,-0.005096435546875,-0.007965087890625,-0.015045166015625,-0.020660400390625,-0.030364990234375,-0.03179931640625,-0.017791748046875,-0.009490966796875,-0.002227783203125,0.00866725668311119,0.01757866144180298,0.03259376809000969,0.04593035578727722,0.04229865223169327,0.029541917145252228,0.017944883555173874,-0.000396728515625,-0.02532958984375,-0.05120849609375,-0.068878173828125,-0.063232421875,-0.04290771484375,-0.012237548828125,0.02700887992978096,0.056672871112823486,0.07678456604480743,0.0791955292224884,0.05642872303724289,0.02212591841816902,-0.022003173828125,-0.058349609375,-0.075836181640625,-0.08343505859375,-0.064666748046875,-0.02545166015625,0.010834070853888988,0.043885618448257446,0.06424146145582199,0.06646931171417236,0.0553300566971302,0.02768028900027275,-0.0074462890625,-0.0306396484375,-0.04095458984375,-0.0426025390625,-0.028472900390625,-0.008758544921875,0.005096591077744961,0.014038514345884323,0.009399700909852982,-0.002471923828125,-0.012939453125,-0.023193359375,-0.015472412109375,0.006439405493438244,0.02465895563364029,0.04196295142173767,0.04940946772694588,0.040070801973342896,0.01309244055300951,-0.027130126953125,-0.05426025390625,-0.0621337890625,-0.055328369140625,-0.0289306640625,0.005890072323381901,0.04065065458416939,0.060640279203653336,0.05151524394750595,0.027466658502817154,-0.00152587890625,-0.0281982421875,-0.040771484375,-0.034423828125,-0.012481689453125,0.007629627361893654,0.02554399147629738,0.03576769307255745,0.019409772008657455,-0.0047607421875,-0.023101806640625,-0.0343017578125,-0.0284423828125,-0.014923095703125,0.006775109097361565,0.035279396921396255,0.04608295112848282,0.03329569473862648,0.010925626382231712,-0.00732421875,-0.023712158203125,-0.036529541015625,-0.029876708984375,-0.00830078125,0.016815699636936188,0.033783990889787674,0.03268532454967499,0.018829919397830963,-0.00738525390625,-0.034271240234375,-0.04498291015625,-0.044677734375,-0.0289306640625,0.008941923268139362,0.05084383487701416,0.07818841934204102,0.07757805287837982,0.04818872734904289,0.0074159977957606316,-0.041595458984375,-0.08746337890625,-0.104583740234375,-0.088958740234375,-0.04168701171875,0.022614214569330215,0.07657094299793243,0.10885952413082123,0.10904263705015182,0.07455671578645706,0.020081179216504097,-0.0400390625,-0.088836669921875,-0.1070556640625,-0.08489990234375,-0.03753662109375,0.009735404513776302,0.04843287542462349,0.0714438334107399,0.06912442296743393,0.04062013700604439,0.002227851189672947,-0.023834228515625,-0.0400390625,-0.0445556640625,-0.0257568359375,-0.001220703125,0.011139255948364735,0.01547288428992033,0.01144444104284048,-0.001068115234375,-0.011016845703125,-0.01397705078125,-0.009246826171875,0.007049775682389736,0.023590806871652603,0.028992583975195885,0.02453688159584999,0.009308145381510258,-0.010101318359375,-0.03131103515625,-0.0458984375,-0.0372314453125,-0.018524169921875,0.01065095979720354,0.048036135733127594,0.059877313673496246,0.05423139035701752,0.037720877677202225,-0.001220703125,-0.040771484375,-0.068267822265625,-0.07470703125,-0.051025390625,-0.010009765625,0.03833124786615372,0.07626575231552124,0.09121982753276825,0.0795617550611496,0.03595080226659775,-0.019317626953125,-0.067138671875,-0.0955810546875,-0.0911865234375,-0.05877685546875,-0.00616455078125,0.043183691799640656,0.07217627763748169,0.08182012289762497,0.0557878352701664,0.008636738173663616,-0.030975341796875,-0.061279296875,-0.067626953125,-0.04583740234375,-0.011993408203125,0.02468947321176529,0.05172887444496155,0.05856502056121826,0.0397961363196373,0.004791405983269215,-0.027587890625,-0.0518798828125,-0.05999755859375,-0.055084228515625,-0.039642333984375,-0.0029296875,0.03100680559873581,0.048890650272369385,0.06118961051106453,0.06128116697072983,0.05468916893005371,0.03491317480802536,-0.00433349609375,-0.041046142578125,-0.0712890625,-0.09002685546875,-0.08905029296875,-0.0697021484375,-0.025177001953125,0.03277687728404999,0.08978545665740967,0.1279335916042328,0.125797301530838,0.09305093437433243,0.03491317480802536,-0.03460693359375,-0.09130859375,-0.13067626953125,-0.128997802734375,-0.080169677734375,-0.010498046875,0.05804620683193207,0.1029694527387619,0.12237922102212906,0.10669270902872086,0.05243080109357834,-0.01019287109375,-0.068389892578125,-0.09814453125,-0.08905029296875,-0.0589599609375,-0.0050048828125,0.04623554274439812,0.0795922726392746,0.09271523356437683,0.06280709058046341,0.018524736166000366,-0.026611328125,-0.0711669921875,-0.08514404296875,-0.07708740234375,-0.0438232421875,0.005706961266696453,0.0399182103574276,0.06756798177957535,0.07510605454444885,0.05740531533956528,0.0318002849817276,-0.00482177734375,-0.03466796875,-0.05206298828125,-0.059234619140625,-0.049041748046875,-0.038238525390625,-0.026153564453125,-0.004547119140625,0.018555253744125366,0.03784295171499252,0.047120578587055206,0.05377361178398132,0.05484176054596901,0.03430280461907387,-0.000946044921875,-0.043182373046875,-0.080841064453125,-0.10028076171875,-0.099273681640625,-0.06488037109375,-0.00482177734375,0.0555436871945858,0.1105990782380104,0.14087343215942383,0.1279641091823578,0.07260353118181229,-0.009857177734375,-0.081512451171875,-0.135498046875,-0.1622314453125,-0.13226318359375,-0.0628662109375,0.02606280706822872,0.10245063900947571,0.13910336792469025,0.1508529931306839,0.11569567024707794,0.03900265693664551,-0.0345458984375,-0.094482421875,-0.12225341796875,-0.114532470703125,-0.074951171875,-0.007598876953125,0.05172887444496155,0.08908353000879288,0.10119937360286713,0.08850367367267609,0.05645924061536789,0.0012817773967981339,-0.04791259765625,-0.072723388671875,-0.084808349609375,-0.075897216796875,-0.0440673828125,0.0009155552834272385,0.04586932063102722,0.07586901634931564,0.09646900743246078,0.095736563205719,0.05804620683193207,0.003936887718737125,-0.052825927734375,-0.100067138671875,-0.127777099609375,-0.12860107421875,-0.08331298828125,-0.006561279296875,0.07522812485694885,0.14069032669067383,0.1669362485408783,0.15561388432979584,0.10025330632925034,0.002288888208568096,-0.101318359375,-0.17242431640625,-0.19305419921875,-0.1680908203125,-0.09564208984375,0.01071199681609869,0.1105380430817604,0.1745658814907074,0.18118838965892792,0.13873714208602905,0.0636921301484108,-0.036895751953125,-0.12274169921875,-0.15997314453125,-0.150604248046875,-0.10369873046875,-0.028594970703125,0.0554521307349205,0.11703848093748093,0.13187047839164734,0.10632649064064026,0.061555832624435425,0.00030518509447574615,-0.068511962890625,-0.110870361328125,-0.107513427734375,-0.079254150390625,-0.0435791015625,0.009308145381510258,0.06469924002885818,0.09656056761741638,0.09869685769081116,0.07654042541980743,0.0475783571600914,0.007721182890236378,-0.0450439453125,-0.083770751953125,-0.09710693359375,-0.091522216796875,-0.07476806640625,-0.03594970703125,0.02844325080513954,0.08087404817342758,0.10519730299711227,0.11682485044002533,0.10837122797966003,0.060670796781778336,-0.01611328125,-0.082122802734375,-0.116851806640625,-0.13189697265625,-0.116912841796875,-0.054046630859375,0.03106784261763096,0.10028382390737534,0.1357463300228119,0.14105655252933502,0.10995818674564362,0.03030487895011902,-0.0628662109375,-0.125946044921875,-0.14892578125,-0.139190673828125,-0.09136962890625,-0.00054931640625,0.09186071157455444,0.14413891732692719,0.1518601030111313,0.13071078062057495,0.07348857074975967,-0.029144287109375,-0.114501953125,-0.14874267578125,-0.152740478515625,-0.121826171875,-0.05535888671875,0.038544878363609314,0.12057863175868988,0.15436261892318726,0.15243995189666748,0.12054811418056488,0.053529463708400726,-0.041015625,-0.1201171875,-0.152496337890625,-0.1553955078125,-0.127685546875,-0.05596923828125,0.04412976652383804,0.12372203916311264,0.15717032551765442,0.16855372488498688,0.1418805569410324,0.05087435618042946,-0.056640625,-0.130279541015625,-0.174468994140625,-0.186798095703125,-0.139617919921875,-0.038299560546875,0.07608264684677124,0.15555284917354584,0.1901303082704544,0.1900997906923294,0.1269264817237854,0.006561479531228542,-0.109344482421875,-0.1771240234375,-0.19976806640625,-0.179290771484375,-0.091339111328125,0.03476058319211006,0.1359599530696869,0.18396557867527008,0.18747520446777344,0.14740440249443054,0.039704579859972,-0.085845947265625,-0.158203125,-0.1815185546875,-0.164886474609375,-0.098480224609375,0.015594958327710629,0.12549211084842682,0.17645801603794098,0.17676320672035217,0.14084291458129883,0.058259833604097366,-0.062896728515625,-0.1583251953125,-0.1875,-0.17572021484375,-0.125213623046875,-0.02508544921875,0.0949430838227272,0.17807550728321075,0.19983519613742828,0.18109683692455292,0.11957152187824249,0.0058290353044867516,-0.115142822265625,-0.1861572265625,-0.20574951171875,-0.18743896484375,-0.113189697265625,0.007446516305208206,0.1186559647321701,0.17914365231990814,0.19458600878715515,0.17044587433338165,0.08886989951133728,-0.028656005859375,-0.1251220703125,-0.171905517578125,-0.177032470703125,-0.141876220703125,-0.05535888671875,0.05240027979016304,0.1272621899843216,0.15335550904273987,0.14719076454639435,0.10122989863157272,0.007324442267417908,-0.08538818359375,-0.134552001953125,-0.144805908203125,-0.12506103515625,-0.063446044921875,0.03393658250570297,0.11642811447381973,0.15216529369354248,0.1511276662349701,0.12125004082918167,0.04593035578727722,-0.057281494140625,-0.1295166015625,-0.162445068359375,-0.16961669921875,-0.129364013671875,-0.034912109375,0.07284767925739288,0.14847254753112793,0.1906186044216156,0.20014038681983948,0.14807580411434174,0.038483839482069016,-0.077117919921875,-0.161285400390625,-0.21478271484375,-0.221771240234375,-0.149871826171875,-0.023101806640625,0.09695730358362198,0.1832941621541977,0.23426008224487305,0.21805475652217865,0.1185338944196701,-0.013763427734375,-0.125457763671875,-0.200103759765625,-0.226959228515625,-0.175506591796875,-0.051239013671875,0.07672353088855743,0.16251106560230255,0.2068544626235962,0.19537949562072754,0.1028168573975563,-0.0328369140625,-0.138458251953125,-0.1925048828125,-0.1990966796875,-0.142303466796875,-0.02142333984375,0.10406811535358429,0.17917416989803314,0.20419934391975403,0.17694631218910217,0.08124027401208878,-0.0540771484375,-0.15777587890625,-0.201904296875,-0.2022705078125,-0.143157958984375,-0.018035888671875,0.11209448426961899,0.18790246546268463,0.20865504443645477,0.18579667806625366,0.09418012201786041,-0.0487060546875,-0.157379150390625,-0.203277587890625,-0.20697021484375,-0.152191162109375,-0.028106689453125,0.10910367220640182,0.18854334950447083,0.19965209066867828,0.17398601770401,0.09302041679620743,-0.04791259765625,-0.158203125,-0.195526123046875,-0.183013916015625,-0.12640380859375,-0.017486572265625,0.11175878345966339,0.18475905060768127,0.18420971930027008,0.14545121788978577,0.0712912380695343,-0.047821044921875,-0.156097412109375,-0.1922607421875,-0.173065185546875,-0.12335205078125,-0.028533935546875,0.0950346365571022,0.18054750561714172,0.19977416098117828,0.18070009350776672,0.12503433227539062,0.008209479041397572,-0.12261962890625,-0.196624755859375,-0.21856689453125,-0.2069091796875,-0.130889892578125,0.012970366515219212,0.14801476895809174,0.2220831960439682,0.2526932656764984,0.23569445312023163,0.126010924577713,-0.04278564453125,-0.176849365234375,-0.25213623046875,-0.282867431640625,-0.23846435546875,-0.090850830078125,0.08468886464834213,0.20441298186779022,0.269478440284729,0.28192999958992004,0.19544053077697754,0.02066102996468544,-0.141448974609375,-0.23992919921875,-0.281707763671875,-0.250762939453125,-0.11553955078125,0.06952116638422012,0.20426037907600403,0.27234718203544617,0.28208258748054504,0.20072023570537567,0.022675253450870514,-0.15997314453125,-0.266326904296875,-0.303466796875,-0.267974853515625,-0.124298095703125,0.08160649240016937,0.24073000252246857,0.3164159059524536,0.3240760564804077,0.2379222959280014,0.04208502545952797,-0.168853759765625,-0.29931640625,-0.34722900390625,-0.316497802734375,-0.17327880859375,0.0475783571600914,0.22919400036334991,0.32215338945388794,0.3431806266307831,0.27515488862991333,0.09109774976968765,-0.126251220703125,-0.267425537109375,-0.3250732421875,-0.312530517578125,-0.204376220703125,-0.013092041015625,0.16525772213935852,0.2639850974082947,0.29145175218582153,0.25125887989997864,0.11517685651779175,-0.0714111328125,-0.202392578125,-0.257904052734375,-0.261505126953125,-0.190093994140625,-0.033203125,0.12921537458896637,0.21921445429325104,0.25037384033203125,0.2374339997768402,0.13663136959075928,-0.0328369140625,-0.1680908203125,-0.2310791015625,-0.247955322265625,-0.206756591796875,-0.07537841796875,0.08545182645320892,0.18720053136348724,0.23520615696907043,0.2464064508676529,0.1755119413137436,0.019592883065342903,-0.124542236328125,-0.19915771484375,-0.229949951171875,-0.2135009765625,-0.110260009765625,0.040742211043834686,0.1499374359846115,0.20209357142448425,0.21811579167842865,0.16870632767677307,0.03512680530548096,-0.10247802734375,-0.171722412109375,-0.1934814453125,-0.174407958984375,-0.0823974609375,0.05233924463391304,0.1501510739326477,0.1897030472755432,0.18881802260875702,0.12527848780155182,-0.00653076171875,-0.1302490234375,-0.187469482421875,-0.191741943359375,-0.148162841796875,-0.0418701171875,0.09247108548879623,0.17825861275196075,0.20105594396591187,0.18039490282535553,0.09649952501058578,-0.041717529296875,-0.160980224609375,-0.2052001953125,-0.189117431640625,-0.1268310546875,-0.01043701171875,0.11291848123073578,0.17654958367347717,0.17932675778865814,0.13950011134147644,0.0476393923163414,-0.077972412109375,-0.166168212890625,-0.175140380859375,-0.133941650390625,-0.059906005859375,0.044770654290914536,0.12979522347450256,0.14642781019210815,0.1114230751991272,0.056031983345746994,-0.024810791015625,-0.114044189453125,-0.14813232421875,-0.11077880859375,-0.0477294921875,0.02230903133749962,0.0946684181690216,0.12857447564601898,0.09845270961523056,0.04184087738394737,-0.006072998046875,-0.05902099609375,-0.101776123046875,-0.091094970703125,-0.038970947265625,0.015503402799367905,0.05853450298309326,0.08380382508039474,0.0714133083820343,0.02386547438800335,-0.018463134765625,-0.04083251953125,-0.055450439453125,-0.052490234375,-0.01953125,0.024323251098394394,0.054475538432598114,0.06808679550886154,0.059022799134254456,0.018768884241580963,-0.030181884765625,-0.058135986328125,-0.065399169921875,-0.06072998046875,-0.03729248046875,0.005493331700563431,0.046479690819978714,0.07263405621051788,0.08609271794557571,0.07409894466400146,0.031281471252441406,-0.01947021484375,-0.057861328125,-0.082794189453125,-0.0926513671875,-0.078399658203125,-0.04248046875,0.0017090365290641785,0.052797019481658936,0.10150456428527832,0.11365093290805817,0.08615375310182571,0.045686207711696625,-0.004608154296875,-0.06591796875,-0.110748291015625,-0.119659423828125,-0.101104736328125,-0.055267333984375,0.02075258642435074,0.09982604533433914,0.13715018332004547,0.1274758130311966,0.09100619703531265,0.022492140531539917,-0.06805419921875,-0.13226318359375,-0.14727783203125,-0.127899169921875,-0.067138671875,0.03878902643918991,0.1346171498298645,0.16556291282176971,0.1427350640296936,0.08404797315597534,-0.018035888671875,-0.13055419921875,-0.185394287109375,-0.1661376953125,-0.105255126953125,-0.005126953125,0.1274147778749466,0.21820734441280365,0.20978423953056335,0.13141269981861115,0.021576587110757828,-0.113922119140625,-0.230010986328125,-0.251983642578125,-0.176605224609375,-0.0567626953125,0.08331552892923355,0.21842096745967865,0.2759178578853607,0.21860408782958984,0.09411908686161041,-0.04888916015625,-0.187530517578125,-0.269012451171875,-0.2410888671875,-0.123291015625,0.023255104199051857,0.16101565957069397,0.2542496919631958,0.24933622777462006,0.14719076454639435,0.0056764427572488785,-0.132049560546875,-0.23052978515625,-0.24444580078125,-0.16009521484375,-0.021453857421875,0.11719107627868652,0.22070986032485962,0.2472609579563141,0.16974395513534546,0.03097628802061081,-0.104217529296875,-0.208343505859375,-0.248687744140625,-0.19329833984375,-0.060394287109375,0.08935819566249847,0.20657978951931,0.2619403600692749,0.2219916433095932,0.09216590225696564,-0.064605712890625,-0.19207763671875,-0.26214599609375,-0.24908447265625,-0.14739990234375,0.005127109587192535,0.1508224755525589,0.2467116266489029,0.2634662985801697,0.18591876327991486,0.043214209377765656,-0.103485107421875,-0.21002197265625,-0.250823974609375,-0.209930419921875,-0.097412109375,0.04367198795080185,0.16144292056560516,0.22678303718566895,0.21634571254253387,0.12436292320489883,-0.004302978515625,-0.120452880859375,-0.194976806640625,-0.20367431640625,-0.138916015625,-0.02239990234375,0.09820856153964996,0.1836603879928589,0.21063874661922455,0.1596423238515854,0.048890650272369385,-0.076324462890625,-0.178802490234375,-0.2220458984375,-0.18353271484375,-0.077178955078125,0.0555131696164608,0.17154453694820404,0.2383190393447876,0.21915341913700104,0.11331522464752197,-0.025634765625,-0.159088134765625,-0.249176025390625,-0.2493896484375,-0.155426025390625,-0.00885009765625,0.1358073651790619,0.24130985140800476,0.2689901292324066,0.1911374181509018,0.04452650621533394,-0.110076904296875,-0.229827880859375,-0.272857666015625,-0.21875,-0.082366943359375,0.08026368170976639,0.20813623070716858,0.2687459886074066,0.23249000310897827,0.1114230751991272,-0.04339599609375,-0.1865234375,-0.259429931640625,-0.2357177734375,-0.13641357421875,0.011352885514497757,0.15686513483524323,0.2449415624141693,0.24027222394943237,0.15280617773532867,0.025849178433418274,-0.11712646484375,-0.2232666015625,-0.237640380859375,-0.169677734375,-0.0518798828125,0.08191168308258057,0.19528794288635254,0.2375255525112152,0.1816461682319641,0.07379375398159027,-0.0516357421875,-0.177703857421875,-0.243927001953125,-0.217742919921875,-0.11676025390625,0.018585771322250366,0.14880825579166412,0.2462538480758667,0.25843074917793274,0.16974395513534546,0.03268532454967499,-0.11920166015625,-0.247802734375,-0.292510986328125,-0.236297607421875,-0.102569580078125,0.06494338810443878,0.221564382314682,0.31376078724861145,0.29044464230537415,0.16830958425998688,-0.003875732421875,-0.182098388671875,-0.301055908203125,-0.31353759765625,-0.216400146484375,-0.045623779296875,0.13931699097156525,0.28189948201179504,0.3194982707500458,0.23541978001594543,0.07583849877119064,-0.113067626953125,-0.266571044921875,-0.317138671875,-0.250823974609375,-0.09466552734375,0.09625537693500519,0.2602923810482025,0.3325296640396118,0.27249976992607117,0.1190527081489563,-0.07000732421875,-0.2467041015625,-0.34051513671875,-0.307037353515625,-0.16290283203125,0.033692434430122375,0.21973326802253723,0.3404645025730133,0.33802300691604614,0.21198156476020813,0.025879696011543274,-0.167083740234375,-0.308349609375,-0.343414306640625,-0.25933837890625,-0.08514404296875,0.11514633893966675,0.2765282094478607,0.3394879102706909,0.2763756215572357,0.12469863146543503,-0.06561279296875,-0.2392578125,-0.32537841796875,-0.294708251953125,-0.160858154296875,0.032258063554763794,0.21906186640262604,0.32895901799201965,0.3090914487838745,0.17188024520874023,-0.022613525390625,-0.215057373046875,-0.337646484375,-0.33258056640625,-0.20098876953125,0.006012146361172199,0.21585741639137268,0.3564256727695465,0.3642689287662506,0.22446364164352417,-0.00006103515625,-0.22662353515625,-0.381256103515625,-0.399078369140625,-0.26507568359375,-0.03106689453125,0.21585741639137268,0.39402446150779724,0.43229469656944275,0.3016449511051178,0.06472975760698318,-0.186187744140625,-0.37567138671875,-0.435272216796875,-0.33331298828125,-0.107269287109375,0.14801476895809174,0.34583574533462524,0.42612993717193604,0.3406781256198883,0.12283699959516525,-0.117462158203125,-0.306854248046875,-0.394775390625,-0.3338623046875,-0.14190673828125,0.09595019370317459,0.28968170285224915,0.38468581438064575,0.33875545859336853,0.1516769975423813,-0.08502197265625,-0.276458740234375,-0.375244140625,-0.341583251953125,-0.174835205078125,0.0634174644947052,0.2777794599533081,0.39344462752342224,0.37009796500205994,0.20410779118537903,-0.037689208984375,-0.26678466796875,-0.410125732421875,-0.40863037109375,-0.26043701171875,-0.0191650390625,0.23639637231826782,0.4142277240753174,0.4420911371707916,0.3026215434074402,0.059755243360996246,-0.194244384765625,-0.387725830078125,-0.445892333984375,-0.333343505859375,-0.10064697265625,0.16107669472694397,0.3727225661277771,0.45686209201812744,0.3560594618320465,0.11496322602033615,-0.14617919921875,-0.34820556640625,-0.437744140625,-0.35870361328125,-0.130828857421875,0.13882869482040405,0.3486129343509674,0.43980222940444946,0.365367591381073,0.1343424767255783,-0.143218994140625,-0.34991455078125,-0.436431884765625,-0.37066650390625,-0.150665283203125,0.1357158124446869,0.3637501001358032,0.45747244358062744,0.382641077041626,0.15295876562595367,-0.131561279296875,-0.3555908203125,-0.45574951171875,-0.396636962890625,-0.17828369140625,0.11319315433502197,0.3564256727695465,0.47233498096466064,0.4114810526371002,0.1742912083864212,-0.128509521484375,-0.361663818359375,-0.467498779296875,-0.4127197265625,-0.187408447265625,0.12048707902431488,0.3752861022949219,0.4994964301586151,0.44785913825035095,0.20200201869010925,-0.13494873046875,-0.399688720703125,-0.5184326171875,-0.469024658203125,-0.234344482421875,0.10473952442407608,0.395458847284317,0.5445722937583923,0.5080111026763916,0.269447922706604,-0.0762939453125,-0.373626708984375,-0.53106689453125,-0.5111083984375,-0.30108642578125,0.027985472232103348,0.33585619926452637,0.5171361565589905,0.5134128928184509,0.3073213994503021,-0.015655517578125,-0.30810546875,-0.47869873046875,-0.4844970703125,-0.3062744140625,-0.006011962890625,0.2864467203617096,0.47138890624046326,0.490768164396286,0.31406599283218384,0.005737479776144028,-0.28778076171875,-0.465057373046875,-0.48583984375,-0.324005126953125,-0.02899169921875,0.26758629083633423,0.460768461227417,0.503830075263977,0.3562425673007965,0.05148472636938095,-0.25775146484375,-0.451507568359375,-0.502593994140625,-0.3780517578125,-0.0916748046875,0.21735282242298126,0.4273812174797058,0.4980925917625427,0.38450270891189575,0.09585864096879959,-0.216644287109375,-0.412109375,-0.47265625,-0.375274658203125,-0.104339599609375,0.2070680856704712,0.4109927713871002,0.4762413501739502,0.3707998991012573,0.08789330720901489,-0.229705810546875,-0.425689697265625,-0.473388671875,-0.3564453125,-0.071044921875,0.24460585415363312,0.44679099321365356,0.5002593994140625,0.365245521068573,0.054475538432598114,-0.271514892578125,-0.4737548828125,-0.51641845703125,-0.364501953125,-0.042144775390625,0.28971222043037415,0.4998321533203125,0.5476851463317871,0.3797113001346588,0.02999969571828842,-0.317230224609375,-0.527435302734375,-0.55682373046875,-0.37091064453125,-0.022430419921875,0.32947781682014465,0.5555589199066162,0.5898007154464722,0.383159875869751,0.006042664870619774,-0.360931396484375,-0.591094970703125,-0.610992431640625,-0.386932373046875,-0.008453369140625,0.3664662539958954,0.6147648692131042,0.6431165337562561,0.4113284647464752,0.013245033100247383,-0.373809814453125,-0.622955322265625,-0.650665283203125,-0.42071533203125,-0.025787353515625,0.3637806177139282,0.6200750470161438,0.6555070877075195,0.43125706911087036,0.032929472625255585,-0.364715576171875,-0.6181640625,-0.64697265625,-0.4285888671875,-0.04608154296875,0.34580522775650024,0.6075929999351501,0.6434522271156311,0.4273506999015808,0.04501480236649513,-0.343536376953125,-0.598907470703125,-0.632843017578125,-0.420806884765625,-0.052459716796875,0.3246864080429077,0.5919980406761169,0.6428113579750061,0.4297311305999756,0.04898220673203468,-0.326751708984375,-0.5787353515625,-0.626617431640625,-0.427398681640625,-0.067047119140625,0.3017059862613678,0.5678274035453796,0.6294747591018677,0.4297311305999756,0.06247138977050781,-0.298004150390625,-0.540679931640625,-0.5968017578125,-0.41180419921875,-0.0643310546875,0.27997681498527527,0.5192114114761353,0.5700247287750244,0.3711355924606323,0.02288888208568096,-0.29168701171875,-0.488189697265625,-0.5142822265625,-0.31072998046875,0.026734214276075363,0.3194982707500458,0.49491867423057556,0.4861903786659241,0.2379528135061264,-0.115264892578125,-0.3841552734375,-0.515899658203125,-0.4595947265625,-0.17523193359375,0.17889949679374695,0.43156224489212036,0.5519883036613464,0.4600360095500946,0.1263771504163742,-0.245452880859375,-0.486602783203125,-0.57305908203125,-0.432098388671875,-0.072723388671875,0.2917874753475189,0.5239722728729248,0.5902279615402222,0.4031189978122711,0.014191106893122196,-0.351531982421875,-0.572998046875,-0.594482421875,-0.346923828125,0.05090487375855446,0.3963744044303894,0.6124149560928345,0.6068300604820251,0.3108004927635193,-0.114044189453125,-0.463226318359375,-0.656707763671875,-0.598602294921875,-0.2666015625,0.15225684642791748,0.4937894940376282,0.6755272150039673,0.5791192054748535,0.221686452627182,-0.19677734375,-0.52972412109375,-0.674896240234375,-0.513519287109375,-0.1336669921875,0.24848170578479767,0.5482650399208069,0.6626483798027039,0.4525589644908905,0.03656117618083954,-0.34228515625,-0.603729248046875,-0.65399169921875,-0.3748779296875,0.07089449465274811,0.43925291299819946,0.6647846698760986,0.651875376701355,0.3252357542514801,-0.14239501953125,-0.526397705078125,-0.733489990234375,-0.656646728515625,-0.273468017578125,0.20014038681983948,0.5730155110359192,0.765373706817627,0.6542252898216248,0.24137088656425476,-0.24420166015625,-0.6177978515625,-0.79180908203125,-0.642730712890625,-0.1959228515625,0.2925809621810913,0.6404004096984863,0.7806940078735352,0.6099734306335449,0.1584215760231018,-0.331787109375,-0.678802490234375,-0.79315185546875,-0.57562255859375,-0.10101318359375,0.38392284512519836,0.712332546710968,0.7948240637779236,0.5461592674255371,0.05880916863679886,-0.41839599609375,-0.736572265625,-0.800201416015625,-0.515472412109375,-0.008056640625,0.4588763117790222,0.7465132474899292,0.7788323760032654,0.4826197028160095,-0.026611328125,-0.483154296875,-0.743377685546875,-0.74102783203125,-0.41668701171875,0.09259315580129623,0.5242774486541748,0.7445295453071594,0.6909390687942505,0.3343607783317566,-0.160247802734375,-0.55145263671875,-0.736785888671875,-0.639923095703125,-0.237640380859375,0.25083163380622864,0.5879696011543274,0.7114779949188232,0.5596789717674255,0.13208410143852234,-0.334625244140625,-0.622222900390625,-0.6824951171875,-0.461395263671875,-0.011749267578125,0.41682180762290955,0.65306556224823,0.6361888647079468,0.3320108652114868,-0.117950439453125,-0.48651123046875,-0.66650390625,-0.574127197265625,-0.196044921875,0.24997711181640625,0.5628223419189453,0.6721091270446777,0.48036134243011475,0.04684591293334961,-0.373687744140625,-0.638153076171875,-0.6585693359375,-0.36041259765625,0.0871913805603981,0.4617145359516144,0.6878566741943359,0.6225470900535583,0.23154392838478088,-0.21307373046875,-0.540924072265625,-0.701995849609375,-0.533599853515625,-0.099365234375,0.30536821484565735,0.5866572856903076,0.6721701622009277,0.4125491976737976,-0.027313232421875,-0.385406494140625,-0.6119384765625,-0.5811767578125,-0.241363525390625,0.143406480550766,0.4221625328063965,0.5782341957092285,0.4497512876987457,0.07574693858623505,-0.25860595703125,-0.462249755859375,-0.498931884765625,-0.261322021484375,0.09967344999313354,0.35172581672668457,0.46403393149375916,0.3728141188621521,0.05972472205758095,-0.26055908203125,-0.43292236328125,-0.431488037109375,-0.21307373046875,0.1345866322517395,0.40223395824432373,0.4828638434410095,0.35193943977355957,0.03482161834836006,-0.312347412109375,-0.515380859375,-0.4918212890625,-0.241302490234375,0.12497329711914062,0.4506973624229431,0.5896176099777222,0.4526505470275879,0.11670278012752533,-0.268341064453125,-0.556488037109375,-0.584014892578125,-0.34539794921875,0.006530961021780968,0.36973175406455994,0.6082338690757751,0.5354167222976685,0.21134068071842194,-0.146484375,-0.455474853515625,-0.58697509765625,-0.399322509765625,-0.060150146484375,0.251716673374176,0.5108798742294312,0.5248573422431946,0.23416852951049805,-0.10064697265625,-0.3726806640625,-0.52545166015625,-0.385498046875,-0.061004638671875,0.2308420091867447,0.4600054919719696,0.4921720027923584,0.23471786081790924,-0.1043701171875,-0.372833251953125,-0.5101318359375,-0.3861083984375,-0.0728759765625,0.24207282066345215,0.48802149295806885,0.5233924388885498,0.27463605999946594,-0.073699951171875,-0.378509521484375,-0.549835205078125,-0.45263671875,-0.157501220703125,0.17569506168365479,0.47953733801841736,0.5711538791656494,0.36094242334365845,0.04260383918881416,-0.2764892578125,-0.520538330078125,-0.4971923828125,-0.25079345703125,0.04147465527057648,0.34571367502212524,0.5128635764122009,0.38615068793296814,0.12341685593128204,-0.1356201171875,-0.37750244140625,-0.428955078125,-0.248779296875,-0.025299072265625,0.20868556201457977,0.3786736726760864,0.3034150302410126,0.09585864096879959,-0.08563232421875,-0.25946044921875,-0.30792236328125,-0.162384033203125,0.01678518019616604,0.18066957592964172,0.2948088049888611,0.20896023511886597,0.012268440797924995,-0.125732421875,-0.239837646484375,-0.26080322265625,-0.104827880859375,0.07599108666181564,0.20987579226493835,0.2855921983718872,0.18689535558223724,-0.00946044921875,-0.143157958984375,-0.23651123046875,-0.239501953125,-0.090484619140625,0.07757805287837982,0.19428083300590515,0.24301889538764954,0.14566484093666077,-0.02740478515625,-0.149810791015625,-0.208343505859375,-0.17034912109375,-0.035003662109375,0.1115451529622078,0.21958068013191223,0.2225714921951294,0.07840204983949661,-0.091766357421875,-0.20001220703125,-0.253936767578125,-0.182464599609375,-0.001922607421875,0.15427106618881226,0.26499220728874207,0.2785729467868805,0.12253181636333466,-0.0689697265625,-0.193023681640625,-0.269317626953125,-0.226165771484375,-0.06048583984375,0.09894100576639175,0.20935697853565216,0.24011963605880737,0.13119907677173615,-0.0313720703125,-0.1282958984375,-0.17413330078125,-0.15838623046875,-0.035400390625,0.10547196865081787,0.16177861392498016,0.13653981685638428,0.040833763778209686,-0.088958740234375,-0.169952392578125,-0.1651611328125,-0.085693359375,0.04275643080472946,0.17059846222400665,0.22510452568531036,0.15616321563720703,0.003265480510890484,-0.139862060546875,-0.22021484375,-0.214813232421875,-0.10888671875,0.05874812975525856,0.20801416039466858,0.2685323655605316,0.19663076102733612,0.020905178040266037,-0.15887451171875,-0.263885498046875,-0.26141357421875,-0.147979736328125,0.03353984281420708,0.21951964497566223,0.3274025619029999,0.2625812590122223,0.06915494054555893,-0.109130859375,-0.24212646484375,-0.306304931640625,-0.211334228515625,-0.0093994140625,0.16565446555614471,0.2705160677433014,0.2633137106895447,0.11395611613988876,-0.07989501953125,-0.204803466796875,-0.233673095703125,-0.1583251953125,0.005249183624982834,0.17993712425231934,0.2684713304042816,0.21045564115047455,0.03405865654349327,-0.15863037109375,-0.286376953125,-0.302520751953125,-0.177703857421875,0.049623094499111176,0.2797326445579529,0.3969542384147644,0.3275551497936249,0.11966307461261749,-0.126800537109375,-0.34649658203125,-0.432952880859375,-0.311798095703125,-0.06915283203125,0.1901608258485794,0.3964964747428894,0.4216742515563965,0.23346659541130066,-0.0203857421875,-0.234405517578125,-0.37945556640625,-0.35638427734375,-0.132476806640625,0.13272500038146973,0.3024079203605652,0.34498122334480286,0.22385326027870178,-0.018280029296875,-0.2437744140625,-0.357086181640625,-0.30694580078125,-0.10125732421875,0.1674550622701645,0.37687307596206665,0.4050721824169159,0.22837001085281372,-0.04290771484375,-0.307281494140625,-0.469818115234375,-0.424072265625,-0.180267333984375,0.15540024638175964,0.4460585415363312,0.5413067936897278,0.39942625164985657,0.10217596590518951,-0.25115966796875,-0.527923583984375,-0.57562255859375,-0.369049072265625,-0.029144287109375,0.3194677531719208,0.5583056211471558,0.5488143563270569,0.28818628191947937,-0.06207275390625,-0.37139892578125,-0.548858642578125,-0.474273681640625,-0.174468994140625,0.15256202220916748,0.3967100977897644,0.5027313828468323,0.35993531346321106,0.03726309910416603,-0.253204345703125,-0.427947998046875,-0.42974853515625,-0.20458984375,0.11032441258430481,0.3408001959323883,0.43333232402801514,0.33838921785354614,0.05969420447945595,-0.2508544921875,-0.438018798828125,-0.427337646484375,-0.213836669921875,0.09680470824241638,0.3631092309951782,0.4900967478752136,0.4033021032810211,0.11716055870056152,-0.2264404296875,-0.4791259765625,-0.52923583984375,-0.33831787109375,-0.004486083984375,0.3328348696231842,0.5521714091300964,0.5356608629226685,0.28308969736099243,-0.0794677734375,-0.420654296875,-0.600555419921875,-0.510162353515625,-0.205352783203125,0.15356913208961487,0.460860013961792,0.6084780693054199,0.47807246446609497,0.1356852948665619,-0.224395751953125,-0.494964599609375,-0.580841064453125,-0.399658203125,-0.06298828125,0.2628559172153473,0.503585934638977,0.5491195321083069,0.3328959047794342,-0.009490966796875,-0.31256103515625,-0.5008544921875,-0.496612548828125,-0.269287109375,0.05893124267458916,0.33890804648399353,0.5005950927734375,0.4691305160522461,0.22608111798763275,-0.09033203125,-0.346221923828125,-0.485809326171875,-0.4375,-0.20513916015625,0.08542130887508392,0.33118686079978943,0.46613970398902893,0.41544845700263977,0.19998779892921448,-0.070098876953125,-0.315185546875,-0.45037841796875,-0.396728515625,-0.19354248046875,0.05951109528541565,0.2917569577693939,0.42493972182273865,0.39445173740386963,0.20853297412395477,-0.06109619140625,-0.307769775390625,-0.431732177734375,-0.396331787109375,-0.210845947265625,0.06857509166002274,0.32221442461013794,0.461043119430542,0.443617045879364,0.23291726410388947,-0.096282958984375,-0.368194580078125,-0.4996337890625,-0.472381591796875,-0.24884033203125,0.10266426205635071,0.4109012186527252,0.5757316946983337,0.538651704788208,0.26670125126838684,-0.11651611328125,-0.44146728515625,-0.62286376953125,-0.58074951171875,-0.291015625,0.11597033590078354,0.47193822264671326,0.6578570008277893,0.5902584791183472,0.2847682237625122,-0.121734619140625,-0.479949951171875,-0.66973876953125,-0.596527099609375,-0.267913818359375,0.15729239583015442,0.49549850821495056,0.6561174392700195,0.5688955187797546,0.23487044870853424,-0.1820068359375,-0.510040283203125,-0.659423828125,-0.544921875,-0.182525634765625,0.2221747487783432,0.504196286201477,0.6310617327690125,0.5232093334197998,0.17026276886463165,-0.229217529296875,-0.51239013671875,-0.62091064453125,-0.4857177734375,-0.1483154296875,0.20847193896770477,0.4696188271045685,0.5815607309341431,0.46342357993125916,0.1660206913948059,-0.154937744140625,-0.41412353515625,-0.521697998046875,-0.41253662109375,-0.17840576171875,0.07516708970069885,0.3112888038158417,0.4366588294506073,0.37058624625205994,0.18887905776500702,-0.005584716796875,-0.192169189453125,-0.3157958984375,-0.308441162109375,-0.19622802734375,-0.051025390625,0.07617419958114624,0.1744132786989212,0.22482985258102417,0.18680380284786224,0.09021271765232086,0.011932737194001675,-0.0560302734375,-0.137603759765625,-0.158447265625,-0.10601806640625,-0.07025146484375,-0.04058837890625,0.04470961540937424,0.12216559052467346,0.1274147778749466,0.10867641121149063,0.0876491591334343,0.02841273322701454,-0.05853271484375,-0.1263427734375,-0.1483154296875,-0.12884521484375,-0.078948974609375,0.0119022186845541,0.11331522464752197,0.1583300232887268,0.15460677444934845,0.13315226137638092,0.05462813377380371,-0.082366943359375,-0.176849365234375,-0.185821533203125,-0.1688232421875,-0.117340087890625,0.016998808830976486,0.15411847829818726,0.2062135636806488,0.2055726796388626,0.16962186992168427,0.05706961452960968,-0.1014404296875,-0.2078857421875,-0.234130859375,-0.212982177734375,-0.126190185546875,0.04412976652383804,0.19541001319885254,0.2449415624141693,0.24027222394943237,0.1834467649459839,0.031220436096191406,-0.154815673828125,-0.265960693359375,-0.272796630859375,-0.2119140625,-0.087158203125,0.09595019370317459,0.24784082174301147,0.2943204939365387,0.25711843371391296,0.14502395689487457,-0.052642822265625,-0.237457275390625,-0.305206298828125,-0.281982421875,-0.19793701171875,-0.022247314453125,0.19611194729804993,0.3240760564804077,0.32844018936157227,0.251533567905426,0.0797448679804802,-0.141204833984375,-0.29736328125,-0.35693359375,-0.315521240234375,-0.157684326171875,0.0709860548377037,0.27253028750419617,0.36844995617866516,0.34473708271980286,0.221900075674057,0.01507614366710186,-0.213714599609375,-0.35455322265625,-0.36224365234375,-0.268402099609375,-0.091033935546875,0.1418805569410324,0.31232643127441406,0.3393658399581909,0.27439191937446594,0.1501205414533615,-0.0472412109375,-0.234100341796875,-0.295867919921875,-0.243743896484375,-0.151214599609375,-0.025848388671875,0.12356944382190704,0.20908230543136597,0.19281594455242157,0.12442396581172943,0.054445020854473114,-0.01446533203125,-0.0811767578125,-0.1025390625,-0.072479248046875,-0.041900634765625,-0.050872802734375,-0.05670166015625,-0.03118896484375,-0.00360107421875,0.021576587110757828,0.0636310949921608,0.14178898930549622,0.18472853302955627,0.1340678185224533,0.034455396234989166,-0.06500244140625,-0.16900634765625,-0.273406982421875,-0.2713623046875,-0.145294189453125,0.01974547654390335,0.17642749845981598,0.29895931482315063,0.36140018701553345,0.2864467203617096,0.08023316413164139,-0.141632080078125,-0.295074462890625,-0.37994384765625,-0.393402099609375,-0.24261474609375,0.025940733030438423,0.24835963547229767,0.3739738166332245,0.42588579654693604,0.3734244704246521,0.15256202220916748,-0.127685546875,-0.3243408203125,-0.429840087890625,-0.449371337890625,-0.32958984375,-0.048583984375,0.23194067180156708,0.395336776971817,0.47087007761001587,0.4462111294269562,0.25675222277641296,-0.06341552734375,-0.329681396484375,-0.46588134765625,-0.500396728515625,-0.39617919921875,-0.12933349609375,0.191625714302063,0.41047394275665283,0.5007171630859375,0.47355571389198303,0.286690890789032,-0.02789306640625,-0.31005859375,-0.4451904296875,-0.462646484375,-0.375946044921875,-0.1436767578125,0.15659047663211823,0.35380107164382935,0.3978392779827118,0.3555711507797241,0.23441267013549805,0.014984588138759136,-0.201446533203125,-0.296783447265625,-0.288543701171875,-0.243499755859375,-0.14093017578125,0.016449477523565292,0.1353495866060257,0.17856380343437195,0.18131045997142792,0.1817072033882141,0.13950011134147644,0.04455702379345894,-0.037017822265625,-0.095428466796875,-0.15380859375,-0.22467041015625,-0.227569580078125,-0.1304931640625,-0.010040283203125,0.10721152275800705,0.22629474103450775,0.33054596185684204,0.31247901916503906,0.15408796072006226,-0.0352783203125,-0.206939697265625,-0.339996337890625,-0.406585693359375,-0.3173828125,-0.084503173828125,0.14691610634326935,0.32233649492263794,0.4219183921813965,0.40916165709495544,0.2371898591518402,-0.02947998046875,-0.2412109375,-0.36724853515625,-0.408538818359375,-0.337249755859375,-0.136474609375,0.10946989059448242,0.2711569666862488,0.33866390585899353,0.3396099805831909,0.25074008107185364,0.07007049769163132,-0.11871337890625,-0.238037109375,-0.277496337890625,-0.270538330078125,-0.20306396484375,-0.062255859375,0.07864619791507721,0.1901303082704544,0.24387340247631073,0.24054689705371857,0.19226661324501038,0.08383434265851974,-0.044036865234375,-0.1741943359375,-0.232086181640625,-0.216552734375,-0.181793212890625,-0.07806396484375,0.05011139065027237,0.1673635095357895,0.22406689822673798,0.19293801486492157,0.13806574046611786,0.03561510145664215,-0.067535400390625,-0.143524169921875,-0.173675537109375,-0.120391845703125,-0.073944091796875,-0.011627197265625,0.05722220614552498,0.08362071216106415,0.08890041708946228,0.047181613743305206,0.032227545976638794,0.029053620994091034,0.004577776417136192,0.007812738418579102,-0.006256103515625,-0.0164794921875,-0.051422119140625,-0.104522705078125,-0.109130859375,-0.100830078125,-0.028656005859375,0.06283760815858841,0.11819818615913391,0.18491165339946747,0.19324320554733276,0.1270180344581604,-0.011993408203125,-0.15399169921875,-0.204376220703125,-0.247955322265625,-0.227203369140625,-0.08013916015625,0.10650959610939026,0.25034332275390625,0.27460554242134094,0.2546159327030182,0.17868587374687195,-0.003692626953125,-0.178375244140625,-0.28948974609375,-0.283294677734375,-0.20404052734375,-0.09356689453125,0.07199316471815109,0.20075075328350067,0.269051194190979,0.22833949327468872,0.12164677679538727,0.029541917145252228,-0.09332275390625,-0.161376953125,-0.178680419921875,-0.1453857421875,-0.071533203125,-0.0289306640625,0.045716725289821625,0.06863612681627274,0.07519760727882385,0.0954618975520134,0.0557573176920414,0.06558427959680557,0.05221717059612274,0.02929776906967163,0.007629627361893654,-0.072479248046875,-0.094635009765625,-0.14141845703125,-0.15625,-0.10113525390625,-0.055633544921875,0.07837153226137161,0.16449476778507233,0.20157475769519806,0.23157444596290588,0.15662099421024323,0.07400738447904587,-0.084716796875,-0.23455810546875,-0.25787353515625,-0.276885986328125,-0.1943359375,-0.0528564453125,0.10901211202144623,0.28189948201179504,0.30692464113235474,0.29081088304519653,0.20838038623332977,0.032868433743715286,-0.13604736328125,-0.309478759765625,-0.3377685546875,-0.28167724609375,-0.19903564453125,-0.004852294921875,0.17352823913097382,0.3083895444869995,0.3252662718296051,0.24735252559185028,0.16553239524364471,-0.01348876953125,-0.1748046875,-0.269012451171875,-0.284820556640625,-0.20538330078125,-0.127960205078125,0.014954069629311562,0.14017151296138763,0.2054811269044876,0.2303537130355835,0.16418957710266113,0.12155522406101227,0.026703696697950363,-0.08331298828125,-0.126220703125,-0.181427001953125,-0.1702880859375,-0.1475830078125,-0.07666015625,0.0397656187415123,0.0877101942896843,0.1676381677389145,0.20206305384635925,0.17865535616874695,0.11691641062498093,-0.027587890625,-0.11181640625,-0.18218994140625,-0.2335205078125,-0.18927001953125,-0.099761962890625,0.06161687150597572,0.1749626100063324,0.1987365335226059,0.2142399400472641,0.14572587609291077,0.021149326115846634,-0.1072998046875,-0.214447021484375,-0.209259033203125,-0.136627197265625,-0.058349609375,0.05142368748784065,0.15594957768917084,0.19647815823554993,0.1579332798719406,0.0555436871945858,-0.046142578125,-0.09783935546875,-0.129425048828125,-0.137481689453125,-0.087493896484375,0.005096591077744961,0.09341716021299362,0.09921567142009735,0.06256294250488281,0.05874812975525856,0.032807398587465286,-0.020477294921875,-0.078704833984375,-0.0697021484375,0.012207403779029846,0.0017700735479593277,-0.02691650390625,0.0014038514345884323,0.015259254723787308,0.03265480697154999,-0.01824951171875,-0.028594970703125,0.05050813406705856,0.034394361078739166,0.01974547654390335,0.0005493331700563431,-0.026824951171875,0.0058290353044867516,-0.058929443359375,-0.076324462890625,-0.011474609375,0.005706961266696453,0.07278664410114288,0.06463820487260818,0.03268532454967499,0.05136265233159065,-0.015411376953125,-0.06024169921875,-0.108489990234375,-0.10406494140625,0.00198370311409235,0.019287697970867157,0.06595049798488617,0.12466811388731003,0.12372203916311264,0.10660115629434586,-0.039459228515625,-0.1270751953125,-0.133697509765625,-0.165863037109375,-0.107147216796875,-0.04400634765625,0.08847315609455109,0.21835993230342865,0.19241920113563538,0.17062897980213165,0.06772056967020035,-0.06634521484375,-0.1566162109375,-0.268768310546875,-0.233978271484375,-0.133758544921875,0.0025025177747011185,0.17944884300231934,0.2376171201467514,0.26770836114883423,0.20786157250404358,0.060823388397693634,-0.07757568359375,-0.255340576171875,-0.294281005859375,-0.223114013671875,-0.13580322265625,0.02526932582259178,0.1593676507472992,0.27298808097839355,0.28928494453430176,0.1673635095357895,0.045503098517656326,-0.100311279296875,-0.200408935546875,-0.2281494140625,-0.226165771484375,-0.11004638671875,0.024018067866563797,0.12518692016601562,0.2060304582118988,0.18066957592964172,0.1357463300228119,0.0872218981385231,-0.023834228515625,-0.109344482421875,-0.14898681640625,-0.12408447265625,-0.076263427734375,-0.0765380859375,-0.0272216796875,0.044892728328704834,0.08252204954624176,0.09875789284706116,0.07196264714002609,0.0877407118678093,0.09906308352947235,0.0399182103574276,-0.0208740234375,-0.09405517578125,-0.11822509765625,-0.12420654296875,-0.156463623046875,-0.11187744140625,-0.032073974609375,0.08484145998954773,0.18109683692455292,0.17398601770401,0.18051698803901672,0.13852351903915405,0.042390208691358566,-0.0572509765625,-0.204071044921875,-0.22735595703125,-0.17340087890625,-0.14605712890625,-0.041015625,0.0473647266626358,0.13998840749263763,0.2382274866104126,0.1814935803413391,0.09866634011268616,0.052827540785074234,-0.02459716796875,-0.083740234375,-0.1563720703125,-0.187225341796875,-0.09613037109375,-0.038848876953125,-0.034149169921875,0.02615436166524887,0.07785271853208542,0.11828973889350891,0.1281166970729828,0.058198798447847366,0.047090061008930206,0.05642872303724289,-0.012176513671875,-0.06329345703125,-0.105560302734375,-0.11474609375,-0.077880859375,-0.0899658203125,-0.069549560546875,0.006103701889514923,0.06570634990930557,0.12317270040512085,0.12512588500976562,0.10531937330961227,0.11243018507957458,0.05688650161027908,-0.035888671875,-0.105804443359375,-0.141876220703125,-0.132232666015625,-0.12213134765625,-0.08575439453125,-0.007232666015625,0.06698812544345856,0.14053773880004883,0.14496292173862457,0.10742515325546265,0.09649952501058578,0.02999969571828842,-0.028533935546875,-0.072357177734375,-0.132598876953125,-0.08868408203125,-0.064605712890625,-0.072479248046875,-0.008331298828125,-0.003997802734375,0.03317362070083618,0.08801537752151489,0.04229865223169327,0.08221686631441116,0.1105990782380104,0.06454664468765259,0.06936857104301453,-0.007843017578125,-0.0845947265625,-0.109710693359375,-0.1812744140625,-0.162078857421875,-0.109710693359375,-0.054107666015625,0.09076204895973206,0.17719046771526337,0.2152470499277115,0.22763755917549133,0.1356547772884369,0.036164432764053345,-0.0714111328125,-0.207275390625,-0.25372314453125,-0.20330810546875,-0.125457763671875,-0.02728271484375,0.07855464518070221,0.15338602662086487,0.20175786316394806,0.1754203885793686,0.07486190646886826,0.013397625647485256,-0.04364013671875,-0.090789794921875,-0.08465576171875,-0.10064697265625,-0.0572509765625,0.005706961266696453,-0.023681640625,-0.006378173828125,0.010437330231070518,-0.002532958984375,0.0473036915063858,0.04199346899986267,0.04522842913866043,0.09121982753276825,0.0554216131567955,0.03878902643918991,0.0008239997550845146,-0.076690673828125,-0.07122802734375,-0.098297119140625,-0.112335205078125,-0.04339599609375,-0.016937255859375,0.034485913813114166,0.08816797286272049,0.0798669382929802,0.10647907853126526,0.09445478767156601,0.04037598893046379,0.021912289783358574,-0.037109375,-0.084136962890625,-0.085601806640625,-0.113555908203125,-0.098419189453125,-0.0443115234375,-0.009063720703125,0.0557267963886261,0.10199286043643951,0.1035187840461731,0.11539048701524734,0.07757805287837982,0.006134220398962498,-0.027191162109375,-0.07513427734375,-0.100341796875,-0.069488525390625,-0.055145263671875,-0.02239990234375,0.015320291742682457,0.015259254723787308,0.036957915872335434,0.03402813896536827,0.010162663646042347,0.0317392498254776,0.03268532454967499,0.04129154235124588,0.06268502026796341,0.02288888208568096,-0.00408935546875,-0.031585693359375,-0.09124755859375,-0.103851318359375,-0.107666015625,-0.086456298828125,-0.001068115234375,0.05139316990971565,0.08917508274316788,0.13132114708423615,0.11285744607448578,0.07855464518070221,0.031281471252441406,-0.041961669921875,-0.07659912109375,-0.08740234375,-0.087677001953125,-0.06524658203125,-0.0469970703125,-0.028594970703125,0.0018616290763020515,0.031434066593647,0.04055909812450409,0.05294961482286453,0.08618427067995071,0.09826959669589996,0.08917508274316788,0.0554826483130455,-0.00799560546875,-0.052093505859375,-0.1033935546875,-0.1636962890625,-0.157806396484375,-0.116119384765625,-0.047271728515625,0.05307168886065483,0.1111484095454216,0.16095462441444397,0.19275490939617157,0.14685507118701935,0.08655048906803131,-0.005279541015625,-0.10211181640625,-0.127838134765625,-0.162322998046875,-0.167144775390625,-0.096527099609375,-0.04315185546875,0.027527695521712303,0.09332560002803802,0.09250160306692123,0.11487166583538055,0.11709952354431152,0.05893124267458916,0.03817865625023842,0.007202368229627609,-0.038543701171875,-0.034149169921875,-0.059051513671875,-0.10076904296875,-0.0985107421875,-0.100555419921875,-0.08782958984375,-0.047882080078125,-0.0050048828125,0.07779168337583542,0.15588854253292084,0.18112735450267792,0.19235816597938538,0.15445417165756226,0.05847346410155296,-0.03369140625,-0.1375732421875,-0.234954833984375,-0.248626708984375,-0.203369140625,-0.1312255859375,-0.01031494140625,0.10040589421987534,0.17719046771526337,0.24765770137310028,0.2376476377248764,0.1664784699678421,0.1029389351606369,0.0006103701889514923,-0.100250244140625,-0.159423828125,-0.210357666015625,-0.21826171875,-0.177215576171875,-0.11346435546875,-0.02862548828125,0.0637531653046608,0.14911343157291412,0.2149113416671753,0.24167607724666595,0.20468764007091522,0.13272500038146973,0.05389568954706192,-0.05596923828125,-0.1551513671875,-0.20660400390625,-0.2340087890625,-0.20849609375,-0.141510009765625,-0.07879638671875,0.018799401819705963,0.11206396669149399,0.1594286859035492,0.21897029876708984,0.22608111798763275,0.18488113582134247,0.1590929925441742,0.055085908621549606,-0.06488037109375,-0.14208984375,-0.25860595703125,-0.308013916015625,-0.27130126953125,-0.227325439453125,-0.095550537109375,0.06857509166002274,0.19360941648483276,0.32892850041389465,0.382488489151001,0.32996612787246704,0.24909207224845886,0.09344767779111862,-0.101837158203125,-0.23974609375,-0.34930419921875,-0.4090576171875,-0.3497314453125,-0.232177734375,-0.092376708984375,0.09790337830781937,0.2542496919631958,0.34778892993927,0.4123966097831726,0.3628040552139282,0.22919400036334991,0.09283730387687683,-0.09356689453125,-0.259796142578125,-0.34698486328125,-0.40252685546875,-0.359344482421875,-0.223663330078125,-0.07806396484375,0.09854426980018616,0.24839015305042267,0.32142093777656555,0.3640247881412506,0.3232520520687103,0.20218512415885925,0.08313241600990295,-0.060211181640625,-0.19482421875,-0.25146484375,-0.285247802734375,-0.291839599609375,-0.208831787109375,-0.105438232421875,-0.0164794921875,0.10074160248041153,0.18073061108589172,0.23599962890148163,0.29865413904190063,0.25684377551078796,0.17224647104740143,0.10916470736265182,-0.0198974609375,-0.135406494140625,-0.21441650390625,-0.3133544921875,-0.31854248046875,-0.24652099609375,-0.171356201171875,-0.0274658203125,0.12137211114168167,0.2211676388978958,0.32215338945388794,0.3505966365337372,0.286843478679657,0.1980346143245697,0.05743583291769028,-0.106689453125,-0.2158203125,-0.30096435546875,-0.3580322265625,-0.31109619140625,-0.208984375,-0.098785400390625,0.05710013210773468,0.17987608909606934,0.251991331577301,0.3394879102706909,0.33860287070274353,0.2529679238796234,0.1591845452785492,-0.00677490234375,-0.14605712890625,-0.217193603515625,-0.33050537109375,-0.36859130859375,-0.297393798828125,-0.211395263671875,-0.055938720703125,0.11694692820310593,0.21823786199092865,0.3091525137424469,0.3750419616699219,0.3333841860294342,0.22446364164352417,0.09686575084924698,-0.068145751953125,-0.196258544921875,-0.261962890625,-0.3428955078125,-0.357666015625,-0.26153564453125,-0.149200439453125,-0.00836181640625,0.13632617890834808,0.2140873372554779,0.28974273800849915,0.3636280298233032,0.3344828486442566,0.22092348337173462,0.08539079129695892,-0.07708740234375,-0.21099853515625,-0.28668212890625,-0.371795654296875,-0.38482666015625,-0.264190673828125,-0.13006591796875,0.020203253254294395,0.19391460716724396,0.2953276038169861,0.3489181101322174,0.3674123287200928,0.29563280940055847,0.16010010242462158,0.010895107872784138,-0.133209228515625,-0.24578857421875,-0.302337646484375,-0.33203125,-0.333282470703125,-0.2342529296875,-0.07330322265625,0.06836146116256714,0.20065920054912567,0.287484347820282,0.3162328004837036,0.3407086431980133,0.29725027084350586,0.14526811242103577,-0.02093505859375,-0.167572021484375,-0.277069091796875,-0.3028564453125,-0.3052978515625,-0.2918701171875,-0.177032470703125,-0.023895263671875,0.09073153138160706,0.19510483741760254,0.2543412446975708,0.26554155349731445,0.28226569294929504,0.24283577501773834,0.12265388667583466,0.0074159977957606316,-0.10040283203125,-0.206878662109375,-0.263580322265625,-0.31304931640625,-0.3419189453125,-0.245758056640625,-0.0880126953125,0.05948057398200035,0.2143009752035141,0.3116550147533417,0.3486434519290924,0.3641468584537506,0.29074984788894653,0.12372203916311264,-0.05462646484375,-0.214447021484375,-0.328460693359375,-0.353271484375,-0.3271484375,-0.269683837890625,-0.130950927734375,0.03335672989487648,0.15698722004890442,0.2600482106208801,0.3030182719230652,0.2769860029220581,0.24054689705371857,0.16855372488498688,0.04297006130218506,-0.08099365234375,-0.17572021484375,-0.229583740234375,-0.232330322265625,-0.22314453125,-0.21466064453125,-0.140960693359375,-0.010772705078125,0.09961241483688354,0.18497268855571747,0.23416852951049805,0.23474837839603424,0.2303537130355835,0.20532852411270142,0.10159611701965332,-0.041839599609375,-0.1478271484375,-0.221160888671875,-0.26190185546875,-0.250244140625,-0.21588134765625,-0.136871337890625,-0.00372314453125,0.10419019311666489,0.18054750561714172,0.24228644371032715,0.2464369684457779,0.20029297471046448,0.13931699097156525,0.04992828145623207,-0.066741943359375,-0.147857666015625,-0.178863525390625,-0.196380615234375,-0.176239013671875,-0.12689208984375,-0.082977294921875,-0.006866455078125,0.07602160423994064,0.11221656203269958,0.1281166970729828,0.1355021893978119,0.13095492124557495,0.11688589304685593,0.08838160336017609,0.036927394568920135,-0.034637451171875,-0.0904541015625,-0.133392333984375,-0.171112060546875,-0.173248291015625,-0.1502685546875,-0.09844970703125,-0.001373291015625,0.09704886376857758,0.16245003044605255,0.20123904943466187,0.20477919280529022,0.15353861451148987,0.0716879814863205,-0.010986328125,-0.09149169921875,-0.14208984375,-0.152191162109375,-0.139801025390625,-0.09893798828125,-0.0462646484375,-0.009490966796875,0.018066957592964172,0.04043702408671379,0.0557573176920414,0.06982634961605072,0.08441419899463654,0.09653004258871078,0.10150456428527832,0.08572649210691452,0.04129154235124588,-0.013458251953125,-0.072601318359375,-0.134796142578125,-0.16668701171875,-0.157470703125,-0.1168212890625,-0.039642333984375,0.04367198795080185,0.09720145165920258,0.1341593712568283,0.1516159474849701,0.13074129819869995,0.0874050110578537,0.03323465585708618,-0.02294921875,-0.05792236328125,-0.07293701171875,-0.084197998046875,-0.094940185546875,-0.100189208984375,-0.089935302734375,-0.056671142578125,-0.005035400390625,0.04196295142173767,0.07858516275882721,0.11832026392221451,0.13364055752754211,0.11264381557703018,0.07342753559350967,0.004577776417136192,-0.0650634765625,-0.096221923828125,-0.10308837890625,-0.090545654296875,-0.05999755859375,-0.022308349609375,0.01342814415693283,0.033631399273872375,0.029541917145252228,0.006012146361172199,0.0036011841148138046,0.027558214962482452,0.03732413798570633,0.05493331700563431,0.07559435069561005,0.05774101987481117,0.036164432764053345,0.010864589363336563,-0.048004150390625,-0.10260009765625,-0.122161865234375,-0.10498046875,-0.058258056640625,-0.0013427734375,0.0394604317843914,0.05865657329559326,0.08246101438999176,0.09128086268901825,0.06604205071926117,0.04046754539012909,0.012451551854610443,-0.01617431640625,-0.021942138671875,-0.024658203125,-0.043487548828125,-0.0634765625,-0.066741943359375,-0.0570068359375,-0.035552978515625,-0.00384521484375,0.017120882868766785,0.03665272891521454,0.06259346008300781,0.06463820487260818,0.04416028410196304,0.02545243687927723,0.01223792228847742,0.0025635547935962677,-0.0023193359375,-0.009124755859375,-0.0224609375,-0.031005859375,-0.041168212890625,-0.0565185546875,-0.0609130859375,-0.052886962890625,-0.0235595703125,0.021820735186338425,0.06134220212697983,0.09039582312107086,0.09775078296661377,0.08041626960039139,0.046357616782188416,0.009704886004328728,-0.02288818359375,-0.06170654296875,-0.07696533203125,-0.06256103515625,-0.055389404296875,-0.046112060546875,-0.033935546875,-0.023101806640625,-0.000946044921875,0.0158696249127388,0.03707998991012573,0.07312235236167908,0.0952787846326828,0.09741508215665817,0.08020263910293579,0.04156620800495148,-0.01080322265625,-0.069427490234375,-0.112335205078125,-0.129150390625,-0.12030029296875,-0.078765869140625,-0.02459716796875,0.02618488110601902,0.07724234461784363,0.10415967553853989,0.09976501017808914,0.08346812427043915,0.051911983639001846,0.020905178040266037,-0.00042724609375,-0.02899169921875,-0.0419921875,-0.03857421875,-0.043731689453125,-0.04644775390625,-0.050323486328125,-0.0543212890625,-0.03887939453125,-0.014984130859375,0.008117923513054848,0.03411969542503357,0.05935849994421005,0.08905301243066788,0.10757774859666824,0.0874355286359787,0.047059543430805206,0.0013733329251408577,-0.04522705078125,-0.076416015625,-0.106903076171875,-0.12591552734375,-0.104248046875,-0.06005859375,-0.00726318359375,0.041779838502407074,0.07379375398159027,0.09909360110759735,0.11230811476707458,0.09726248681545258,0.056001465767621994,0.010071108117699623,-0.02392578125,-0.05548095703125,-0.082550048828125,-0.0880126953125,-0.080780029296875,-0.063232421875,-0.02734375,0.007904293946921825,0.036164432764053345,0.05887020379304886,0.06671345978975296,0.07324442267417908,0.0796533077955246,0.06161687150597572,0.017975401133298874,-0.02410888671875,-0.048736572265625,-0.06683349609375,-0.079498291015625,-0.0792236328125,-0.06158447265625,-0.016693115234375,0.034516435116529465,0.06100650131702423,0.06854457408189774,0.06836146116256714,0.05395672470331192,0.021271400153636932,-0.012542724609375,-0.031982421875,-0.0369873046875,-0.027984619140625,-0.017578125,-0.01080322265625,-0.004852294921875,-0.01287841796875,-0.0264892578125,-0.031219482421875,-0.03131103515625,-0.01739501953125,0.01907406747341156,0.06036560982465744,0.0870082676410675,0.09671315550804138,0.0789819061756134,0.029755547642707825,-0.029541015625,-0.0882568359375,-0.129425048828125,-0.134368896484375,-0.107635498046875,-0.047271728515625,0.028901029378175735,0.08893093466758728,0.12347789108753204,0.12955106794834137,0.10580766946077347,0.051149021834135056,-0.009552001953125,-0.051544189453125,-0.080291748046875,-0.0830078125,-0.065216064453125,-0.04620361328125,-0.019927978515625,-0.00262451171875,0.0018616290763020515,0.005706961266696453,0.004394665360450745,0.010101626627147198,0.027344584465026855,0.045564133673906326,0.06210516765713692,0.06964323669672012,0.05935849994421005,0.032258063554763794,-0.00677490234375,-0.052825927734375,-0.092315673828125,-0.11163330078125,-0.1046142578125,-0.072998046875,-0.02630615234375,0.03006073087453842,0.07837153226137161,0.1035493016242981,0.1111178919672966,0.09094515442848206,0.0475478395819664,0.0030518509447574615,-0.03887939453125,-0.067352294921875,-0.0750732421875,-0.06439208984375,-0.040435791015625,-0.01763916015625,0.0026551103219389915,0.016235847026109695,0.018494216725230217,0.014191106893122196,0.004699850454926491,0.005890072323381901,0.016327403485774994,0.024170659482479095,0.036805324256420135,0.04135258123278618,0.03094576857984066,0.014038514345884323,-0.01593017578125,-0.048126220703125,-0.06201171875,-0.058685302734375,-0.041961669921875,-0.010528564453125,0.023255104199051857,0.045625172555446625,0.05261391028761864,0.04058961570262909,0.016937773674726486,-0.0103759765625,-0.031097412109375,-0.034027099609375,-0.02301025390625,0.0029908139258623123,0.022675253450870514,0.02050843834877014,0.020447401329874992,0.007782219909131527,-0.018157958984375,-0.02685546875,-0.030303955078125,-0.01947021484375,0.010223700664937496,0.032990507781505585,0.04693746566772461,0.03637806326150894,0.0040894802659749985,-0.024505615234375,-0.050445556640625,-0.063873291015625,-0.054931640625,-0.026519775390625,0.01654103212058544,0.05725272372364998,0.07736442238092422,0.0711386427283287,0.04916531965136528,0.016510512679815292,-0.017669677734375,-0.038238525390625,-0.0521240234375,-0.050537109375,-0.029876708984375,-0.019744873046875,-0.020751953125,-0.02398681640625,-0.02459716796875,-0.01202392578125,0.006897183135151863,0.03595080226659775,0.0709555372595787,0.09677419066429138,0.10592974722385406,0.07690664380788803,0.01889095827937126,-0.04718017578125,-0.113494873046875,-0.1495361328125,-0.14947509765625,-0.11468505859375,-0.042144775390625,0.039216283708810806,0.10751670598983765,0.14084291458129883,0.13284707069396973,0.09848322719335556,0.0394909530878067,-0.021484375,-0.06488037109375,-0.08197021484375,-0.067291259765625,-0.04486083984375,-0.01568603515625,0.01666310615837574,0.026367992162704468,0.021179845556616783,0.0079348124563694,-0.004119873046875,-0.00653076171875,-0.013580322265625,-0.012786865234375,0.0028992583975195885,0.014984588138759136,0.02072206884622574,0.01837214268743992,0.012787255458533764,0.014374217949807644,0.013061922043561935,0.0006408886983990669,-0.01153564453125,-0.016204833984375,-0.0223388671875,-0.02886962890625,-0.029632568359375,-0.02886962890625,-0.01666259765625,0.004791405983269215,0.017181921750307083,0.024903103709220886,0.028107546269893646,0.024445325136184692,0.018646810203790665,0.007232886739075184,-0.001373291015625,-0.003387451171875,-0.003662109375,0.0014648884534835815,0.002227851189672947,-0.00860595703125,-0.020416259765625,-0.025421142578125,-0.022216796875,-0.012481689453125,0.003875850699841976,0.024323251098394394,0.04129154235124588,0.0475783571600914,0.030701620504260063,-0.003265380859375,-0.0325927734375,-0.054901123046875,-0.0621337890625,-0.039459228515625,0.0029908139258623123,0.047853022813797,0.08151493966579437,0.08874782919883728,0.06735435128211975,0.02386547438800335,-0.037750244140625,-0.089447021484375,-0.102935791015625,-0.089202880859375,-0.0548095703125,-0.00341796875,0.04583880305290222,0.0796227902173996,0.08148442208766937,0.0554826483130455,0.022797327488660812,-0.00909423828125,-0.022918701171875,-0.017364501953125,-0.00946044921875,0.0048829615116119385,0.015503402799367905,0.009338663890957832,-0.00616455078125,-0.0335693359375,-0.05401611328125,-0.049285888671875,-0.038848876953125,-0.014434814453125,0.025696584954857826,0.04696798697113991,0.0555742047727108,0.056642353534698486,0.03473006188869476,0.013580736704170704,-0.000396728515625,-0.0137939453125,-0.00811767578125,-0.00408935546875,-0.0140380859375,-0.017852783203125,-0.02935791015625,-0.047607421875,-0.057464599609375,-0.054351806640625,-0.025482177734375,0.01156651508063078,0.047120578587055206,0.08413953334093094,0.09851375222206116,0.08636738359928131,0.051179539412260056,0.0012207403779029846,-0.042083740234375,-0.073760986328125,-0.082733154296875,-0.069061279296875,-0.044921875,-0.01251220703125,0.01666310615837574,0.030610065907239914,0.025055695325136185,0.014038514345884323,0.01150547806173563,0.011322367005050182,0.017975401133298874,0.03317362070083618,0.047090061008930206,0.04943998530507088,0.030762657523155212,-0.003173828125,-0.04071044921875,-0.072479248046875,-0.090240478515625,-0.082611083984375,-0.0458984375,0.002868739888072014,0.05090487375855446,0.08026368170976639,0.08059938251972198,0.06546220183372498,0.03100680559873581,-0.01068115234375,-0.03729248046875,-0.048309326171875,-0.034454345703125,-0.011199951171875,0.0010071108117699623,0.006164738908410072,-0.000518798828125,-0.0135498046875,-0.0262451171875,-0.029449462890625,-0.01495361328125,0.0099795525893569,0.04696798697113991,0.06942960619926453,0.057466354221105576,0.02941984310746193,-0.015106201171875,-0.061187744140625,-0.086639404296875,-0.092376708984375,-0.06591796875,-0.009429931640625,0.04599139466881752,0.08102664351463318,0.09051790088415146,0.06964323669672012,0.03003021329641342,-0.0086669921875,-0.043060302734375,-0.056396484375,-0.03955078125,-0.016357421875,0.005767998285591602,0.017639698460698128,0.0034485915675759315,-0.015899658203125,-0.02972412109375,-0.037139892578125,-0.0201416015625,0.01263466291129589,0.04892117157578468,0.08236945420503616,0.08966337889432907,0.06848353147506714,0.0237739197909832,-0.03765869140625,-0.0831298828125,-0.099884033203125,-0.0931396484375,-0.06158447265625,-0.015960693359375,0.028168585151433945,0.059968870133161545,0.07040619850158691,0.0553300566971302,0.03509628772735596,0.025757621973752975,0.01184118166565895,0.0032044434919953346,0.004516739398241043,-0.00579833984375,-0.01947021484375,-0.0364990234375,-0.061431884765625,-0.0767822265625,-0.07269287109375,-0.044677734375,-0.00311279296875,0.04135258123278618,0.08157597482204437,0.1032441183924675,0.10440382361412048,0.07629626989364624,0.02609332650899887,-0.020416259765625,-0.06365966796875,-0.09381103515625,-0.09942626953125,-0.086151123046875,-0.054290771484375,-0.018402099609375,0.01501510664820671,0.04861598461866379,0.07031464576721191,0.07611316442489624,0.06497390568256378,0.04373302310705185,0.022827845066785812,-0.0023193359375,-0.02734375,-0.0428466796875,-0.047027587890625,-0.04150390625,-0.032867431640625,-0.02691650390625,-0.021209716796875,-0.01129150390625,-0.006134033203125,-0.001617431640625,0.014709921553730965,0.03518784046173096,0.05883968621492386,0.07412946224212646,0.06515701860189438,0.04660176485776901,0.0198370311409235,-0.023773193359375,-0.06829833984375,-0.094024658203125,-0.0960693359375,-0.077484130859375,-0.0400390625,0.004669331945478916,0.042390208691358566,0.06463820487260818,0.06884975731372833,0.06436353921890259,0.05240027979016304,0.032135989516973495,0.0159001424908638,0.004974517039954662,-0.00970458984375,-0.027984619140625,-0.045562744140625,-0.066131591796875,-0.080291748046875,-0.07171630859375,-0.04638671875,-0.003936767578125,0.047914057970047,0.08224738389253616,0.10074160248041153,0.09939878433942795,0.0638142004609108,0.011261329986155033,-0.037445068359375,-0.0675048828125,-0.073944091796875,-0.0648193359375,-0.04583740234375,-0.02099609375,0.0042420728132128716,0.014831995591521263,0.01263466291129589,0.015564439818263054,0.0237128809094429,0.04184087738394737,0.06198309361934662,0.062990203499794,0.05145420879125595,0.02301095612347126,-0.0277099609375,-0.07391357421875,-0.1024169921875,-0.108123779296875,-0.0771484375,-0.022064208984375,0.03640858083963394,0.08996856212615967,0.11490219086408615,0.09884945303201675,0.060670796781778336,0.015106662176549435,-0.026397705078125,-0.053802490234375,-0.064422607421875,-0.05975341796875,-0.046783447265625,-0.0345458984375,-0.031494140625,-0.02923583984375,-0.015655517578125,0.009491256438195705,0.0473342090845108,0.08261360228061676,0.10058900713920593,0.10049745440483093,0.06952116638422012,0.00952177494764328,-0.059539794921875,-0.11737060546875,-0.1383056640625,-0.120574951171875,-0.077056884765625,-0.012725830078125,0.047151096165180206,0.0798974558711052,0.0867946445941925,0.06778161227703094,0.039704579859972,0.021179845556616783,0.007965330965816975,0.00872829370200634,0.019501328468322754,0.014831995591521263,-0.0062255859375,-0.04254150390625,-0.08514404296875,-0.105865478515625,-0.09942626953125,-0.063995361328125,0.0009765923023223877,0.07400738447904587,0.13089388608932495,0.14444410800933838,0.1115451529622078,0.052888575941324234,-0.01910400390625,-0.076324462890625,-0.1009521484375,-0.0970458984375,-0.059600830078125,-0.0101318359375,0.023285623639822006,0.03729362040758133,0.02307199314236641,-0.00640869140625,-0.020904541015625,-0.020050048828125,-0.004852294921875,0.02850428782403469,0.059968870133161545,0.07415997982025146,0.06570634990930557,0.02624591812491417,-0.02716064453125,-0.06988525390625,-0.091461181640625,-0.0826416015625,-0.051239013671875,-0.010345458984375,0.031464584171772,0.05453657731413841,0.052064575254917145,0.033845026046037674,0.011017181910574436,-0.002685546875,-0.001251220703125,0.008911404758691788,0.019379254430532455,0.02288888208568096,0.008117923513054848,-0.022430419921875,-0.05279541015625,-0.07537841796875,-0.0755615234375,-0.042633056640625,0.009094515815377235,0.06457716226577759,0.10538041591644287,0.10928678512573242,0.07754753530025482,0.021942809224128723,-0.046112060546875,-0.098236083984375,-0.113525390625,-0.09417724609375,-0.04058837890625,0.02612384408712387,0.0712607204914093,0.09115878492593765,0.08081301301717758,0.03802606463432312,-0.0089111328125,-0.045684814453125,-0.06414794921875,-0.050079345703125,-0.014739990234375,0.020874660462141037,0.04269539564847946,0.04461806267499924,0.02713095396757126,-0.002899169921875,-0.0308837890625,-0.045654296875,-0.03619384765625,-0.00555419921875,0.02694784477353096,0.0556352436542511,0.0711081251502037,0.05969420447945595,0.02923673205077648,-0.009735107421875,-0.048370361328125,-0.070404052734375,-0.071441650390625,-0.057342529296875,-0.029205322265625,0.006653035059571266,0.03567613661289215,0.05404828116297722,0.06057924032211304,0.05298013240098953,0.041627246886491776,0.023377178236842155,-0.004791259765625,-0.028045654296875,-0.04705810546875,-0.058929443359375,-0.059356689453125,-0.053802490234375,-0.030242919921875,0.006500442512333393,0.036896876990795135,0.05951109528541565,0.0715048685669899,0.06933805346488953,0.051149021834135056,0.020050659775733948,-0.013763427734375,-0.04156494140625,-0.053619384765625,-0.0550537109375,-0.04949951171875,-0.03057861328125,-0.0096435546875,0.008301034569740295,0.025086214765906334,0.033021025359630585,0.034394361078739166,0.03003021329641342,0.018005920574069023,0.004211554303765297,-0.013641357421875,-0.02777099609375,-0.02728271484375,-0.024932861328125,-0.0150146484375,0.008941923268139362,0.02545243687927723,0.03335672989487648,0.026795251294970512,0.0036011841148138046,-0.01312255859375,-0.03369140625,-0.05218505859375,-0.0419921875,-0.013946533203125,0.02148503065109253,0.048677023500204086,0.059907834976911545,0.05887020379304886,0.03259376809000969,-0.0069580078125,-0.04461669921875,-0.066925048828125,-0.06011962890625,-0.038909912109375,-0.002685546875,0.03897213563323021,0.06002990901470184,0.059053316712379456,0.03555406257510185,0.0010681478306651115,-0.034637451171875,-0.062347412109375,-0.06573486328125,-0.047119140625,-0.0111083984375,0.020081179216504097,0.040711693465709686,0.059816278517246246,0.05609302222728729,0.03814813494682312,0.01739555038511753,-0.005523681640625,-0.016876220703125,-0.029449462890625,-0.040618896484375,-0.04364013671875,-0.0478515625,-0.04339599609375,-0.031585693359375,-0.007537841796875,0.029908139258623123,0.05938901752233505,0.08096560835838318,0.08844263851642609,0.06970427930355072,0.029175695031881332,-0.0272216796875,-0.07928466796875,-0.109283447265625,-0.112701416015625,-0.086700439453125,-0.03533935546875,0.02859584242105484,0.0796838253736496,0.10623493045568466,0.10663167387247086,0.07080294191837311,0.016937773674726486,-0.037322998046875,-0.08123779296875,-0.09405517578125,-0.085052490234375,-0.05426025390625,-0.000946044921875,0.04821924492716789,0.07739493995904922,0.07736442238092422,0.05880916863679886,0.027253028005361557,-0.01715087890625,-0.0546875,-0.079559326171875,-0.07342529296875,-0.042572021484375,-0.012420654296875,0.03024384379386902,0.06634724140167236,0.08090456575155258,0.07531967759132385,0.04364147037267685,0.015320291742682457,-0.017059326171875,-0.0567626953125,-0.07440185546875,-0.077392578125,-0.060394287109375,-0.035797119140625,-0.01409912109375,0.026703696697950363,0.0634784996509552,0.08273568004369736,0.09213537722826004,0.08301034569740295,0.05475020408630371,0.0030518509447574615,-0.05902099609375,-0.1092529296875,-0.140228271484375,-0.14239501953125,-0.104888916015625,-0.023223876953125,0.0710165724158287,0.1432538777589798,0.18890957534313202,0.19171728193759918,0.13663136959075928,0.031220436096191406,-0.086669921875,-0.17236328125,-0.216064453125,-0.211151123046875,-0.144744873046875,-0.028045654296875,0.09134189784526825,0.17072054743766785,0.20999786257743835,0.20062868297100067,0.1342814415693283,0.02871791645884514,-0.079864501953125,-0.143035888671875,-0.1712646484375,-0.1732177734375,-0.118988037109375,-0.033111572265625,0.050386060029268265,0.10565508157014847,0.12997832894325256,0.13800470530986786,0.10394604504108429,0.037690360099077225,-0.028533935546875,-0.071868896484375,-0.088897705078125,-0.102325439453125,-0.081390380859375,-0.02410888671875,0.02850428782403469,0.06201361119747162,0.07290872186422348,0.079378642141819,0.05740531533956528,0.002868739888072014,-0.040008544921875,-0.06573486328125,-0.06976318359375,-0.068084716796875,-0.047454833984375,0.0098574785515666,0.052766501903533936,0.07586901634931564,0.0869167149066925,0.0789208635687828,0.04864650219678879,-0.011993408203125,-0.066741943359375,-0.101959228515625,-0.121734619140625,-0.111785888671875,-0.066802978515625,0.0159611813724041,0.09418012201786041,0.1418805569410324,0.16855372488498688,0.14642781019210815,0.06799523532390594,-0.041290283203125,-0.13946533203125,-0.18994140625,-0.19775390625,-0.150848388671875,-0.039459228515625,0.08844263851642609,0.1816461682319641,0.21784111857414246,0.19443342089653015,0.11410870403051376,-0.009979248046875,-0.12823486328125,-0.189239501953125,-0.186798095703125,-0.138519287109375,-0.049072265625,0.06128116697072983,0.13708914816379547,0.1520126909017563,0.12433240562677383,0.06988738477230072,-0.003509521484375,-0.07403564453125,-0.105133056640625,-0.0909423828125,-0.0618896484375,-0.0291748046875,0.016235847026109695,0.05255287140607834,0.053529463708400726,0.04422131925821304,0.04358043149113655,0.03402813896536827,0.0064699240028858185,-0.025787353515625,-0.04107666015625,-0.055267333984375,-0.082489013671875,-0.080596923828125,-0.035888671875,0.017792291939258575,0.06439405679702759,0.11340677738189697,0.14932706952095032,0.12460707128047943,0.04055909812450409,-0.0523681640625,-0.12567138671875,-0.1834716796875,-0.199493408203125,-0.128753662109375,-0.0042724609375,0.10782189667224884,0.19183935225009918,0.23572497069835663,0.20404675602912903,0.09039582312107086,-0.054473876953125,-0.167755126953125,-0.229248046875,-0.23370361328125,-0.156890869140625,-0.01361083984375,0.12451551854610443,0.20798364281654358,0.23249000310897827,0.191503643989563,0.07705923914909363,-0.070770263671875,-0.183074951171875,-0.22357177734375,-0.200653076171875,-0.125213623046875,0.007202368229627609,0.14383374154567719,0.2131717950105667,0.21222572028636932,0.1584215760231018,0.05783257633447647,-0.074188232421875,-0.1787109375,-0.2081298828125,-0.180084228515625,-0.10919189453125,-0.001678466796875,0.11554307490587234,0.18906216323375702,0.1898251324892044,0.1514633595943451,0.0798059031367302,-0.029327392578125,-0.1317138671875,-0.18280029296875,-0.180419921875,-0.148468017578125,-0.07635498046875,0.03750724717974663,0.1355632245540619,0.17990660667419434,0.18771934509277344,0.16418957710266113,0.08001953363418579,-0.04547119140625,-0.14727783203125,-0.1995849609375,-0.210784912109375,-0.17041015625,-0.059967041015625,0.07654042541980743,0.1743827611207962,0.2233039289712906,0.22074037790298462,0.14432203769683838,0.004516739398241043,-0.131195068359375,-0.2091064453125,-0.230133056640625,-0.18975830078125,-0.073577880859375,0.07470931112766266,0.17978453636169434,0.21982482075691223,0.20374156534671783,0.12045655399560928,-0.017730712890625,-0.143035888671875,-0.19970703125,-0.1981201171875,-0.15069580078125,-0.040679931640625,0.09292886406183243,0.17117832601070404,0.18521682918071747,0.1659901738166809,0.09912411868572235,-0.0145263671875,-0.115020751953125,-0.158538818359375,-0.159912109375,-0.14080810546875,-0.072540283203125,0.03399761766195297,0.10541093349456787,0.13370159268379211,0.14893032610416412,0.13376262784004211,0.06216620281338692,-0.03515625,-0.10028076171875,-0.13580322265625,-0.159942626953125,-0.132415771484375,-0.04058837890625,0.05645924061536789,0.12125004082918167,0.16519668698310852,0.17206335067749023,0.1033356711268425,-0.016021728515625,-0.11553955078125,-0.1708984375,-0.193634033203125,-0.15277099609375,-0.0322265625,0.10013122856616974,0.1826837956905365,0.2143620103597641,0.1904965341091156,0.0875270813703537,-0.062713623046875,-0.177734375,-0.22442626953125,-0.216064453125,-0.140899658203125,0.0004272591322660446,0.14136174321174622,0.2146977186203003,0.2227851152420044,0.17960143089294434,0.07208471745252609,-0.066497802734375,-0.1629638671875,-0.19384765625,-0.17913818359375,-0.11798095703125,-0.010040283203125,0.09439375251531601,0.14548173546791077,0.15250098705291748,0.13177892565727234,0.06912442296743393,-0.023468017578125,-0.093414306640625,-0.122100830078125,-0.130523681640625,-0.1109619140625,-0.047943115234375,0.028870509937405586,0.08020263910293579,0.110934779047966,0.12906277179718018,0.10214544832706451,0.030365917831659317,-0.036163330078125,-0.082763671875,-0.120635986328125,-0.127105712890625,-0.076629638671875,0.00030518509447574615,0.057679980993270874,0.09863582253456116,0.12332529574632645,0.09930723160505295,0.02606280706822872,-0.045166015625,-0.080535888671875,-0.100128173828125,-0.09466552734375,-0.0355224609375,0.03656117618083954,0.07364116609096527,0.079378642141819,0.06558427959680557,0.024323251098394394,-0.040313720703125,-0.081756591796875,-0.076324462890625,-0.051727294921875,-0.017059326171875,0.03393658250570297,0.07553330808877945,0.07470931112766266,0.04226813465356827,0.007629627361893654,-0.027069091796875,-0.056121826171875,-0.055999755859375,-0.028778076171875,-0.00048828125,0.017822809517383575,0.030610065907239914,0.026795251294970512,0.0006714072078466415,-0.0198974609375,-0.0196533203125,-0.011077880859375,0.005066072568297386,0.03500473126769066,0.059144869446754456,0.04934842884540558,0.015503402799367905,-0.0177001953125,-0.05438232421875,-0.090362548828125,-0.093505859375,-0.0546875,0.0003662221133708954,0.05047761648893356,0.09372234344482422,0.1189611479640007,0.10220649093389511,0.04907376319169998,-0.01190185546875,-0.0703125,-0.118011474609375,-0.132965087890625,-0.10504150390625,-0.04742431640625,0.01889095827937126,0.08395642042160034,0.1351359635591507,0.14786218106746674,0.11450544744729996,0.05017242953181267,-0.0267333984375,-0.1016845703125,-0.15435791015625,-0.158447265625,-0.1112060546875,-0.03472900390625,0.05331583693623543,0.13357952237129211,0.17206335067749023,0.14774011075496674,0.07715079188346863,-0.013824462890625,-0.1072998046875,-0.170623779296875,-0.170867919921875,-0.109161376953125,-0.0152587890625,0.08420056849718094,0.16489151120185852,0.1895504593849182,0.14114810526371002,0.04693746566772461,-0.056121826171875,-0.14495849609375,-0.19140625,-0.168182373046875,-0.08758544921875,0.012970366515219212,0.10934782028198242,0.17398601770401,0.17743460834026337,0.12347789108753204,0.04028443247079849,-0.049468994140625,-0.1265869140625,-0.16156005859375,-0.1385498046875,-0.079864501953125,-0.011871337890625,0.05713064968585968,0.110904261469841,0.1267738938331604,0.1029084175825119,0.05737479776144028,0.0030518509447574615,-0.05377197265625,-0.093231201171875,-0.09552001953125,-0.0709228515625,-0.03289794921875,0.02078310400247574,0.07199316471815109,0.09454634040594101,0.08313241600990295,0.046479690819978714,-0.0067138671875,-0.068603515625,-0.109527587890625,-0.103607177734375,-0.06158447265625,0.002471999265253544,0.07641834765672684,0.13098543882369995,0.13681447505950928,0.08865626901388168,0.007507553324103355,-0.081634521484375,-0.148834228515625,-0.1627197265625,-0.116058349609375,-0.025299072265625,0.07733390480279922,0.15494246780872345,0.17600023746490479,0.125980406999588,0.025635547935962677,-0.082733154296875,-0.160675048828125,-0.176971435546875,-0.122650146484375,-0.016998291015625,0.09796441346406937,0.17584764957427979,0.18665120005607605,0.1189001128077507,-0.003265380859375,-0.126617431640625,-0.2061767578125,-0.21185302734375,-0.132598876953125,0.005645924247801304,0.14639729261398315,0.23465682566165924,0.24304941296577454,0.16333505511283875,0.0157780684530735,-0.1417236328125,-0.249420166015625,-0.269683837890625,-0.196624755859375,-0.053863525390625,0.1111484095454216,0.2370677888393402,0.2786034643650055,0.22540971636772156,0.09796441346406937,-0.06109619140625,-0.19769287109375,-0.259429931640625,-0.227783203125,-0.125885009765625,0.014313180930912495,0.1509140282869339,0.2293466031551361,0.21936704218387604,0.13666188716888428,0.014954069629311562,-0.11474609375,-0.20391845703125,-0.211151123046875,-0.146484375,-0.037841796875,0.0872218981385231,0.18488113582134247,0.21613208949565887,0.1672414243221283,0.063020721077919,-0.059326171875,-0.17230224609375,-0.23175048828125,-0.204833984375,-0.10919189453125,0.017670217901468277,0.14429152011871338,0.23148289322853088,0.24121829867362976,0.16818749904632568,0.04199346899986267,-0.097137451171875,-0.20770263671875,-0.249053955078125,-0.20416259765625,-0.09393310546875,0.046357616782188416,0.17313151061534882,0.23694570362567902,0.21732230484485626,0.1263771504163742,-0.0069580078125,-0.13922119140625,-0.2186279296875,-0.21392822265625,-0.135711669921875,-0.01458740234375,0.11328470706939697,0.1982787549495697,0.20343638956546783,0.12927640974521637,0.008453627116978168,-0.1143798828125,-0.199310302734375,-0.208526611328125,-0.135162353515625,-0.013519287109375,0.11423078179359436,0.20505386590957642,0.2232734113931656,0.1577501744031906,0.02853480726480484,-0.110260009765625,-0.20660400390625,-0.231475830078125,-0.17236328125,-0.05255126953125,0.08377330750226974,0.19437238574028015,0.2370983064174652,0.19348734617233276,0.08474989980459213,-0.051727294921875,-0.17242431640625,-0.228057861328125,-0.196502685546875,-0.102142333984375,0.01733451336622238,0.13376262784004211,0.2057557851076126,0.19534897804260254,0.11285744607448578,0.0026551103219389915,-0.10430908203125,-0.181640625,-0.188140869140625,-0.116729736328125,-0.01177978515625,0.08664204925298691,0.16025269031524658,0.1816461682319641,0.125827819108963,0.018005920574069023,-0.083587646484375,-0.152374267578125,-0.174896240234375,-0.128753662109375,-0.0281982421875,0.07785271853208542,0.15359966456890106,0.17981505393981934,0.14047670364379883,0.03872798755764961,-0.08245849609375,-0.166015625,-0.18658447265625,-0.1407470703125,-0.03985595703125,0.08032471686601639,0.17700734734535217,0.21036408841609955,0.16019165515899658,0.04596087336540222,-0.090911865234375,-0.2042236328125,-0.24749755859375,-0.195281982421875,-0.066680908203125,0.08368175476789474,0.20929594337940216,0.2709738314151764,0.23337504267692566,0.10428174585103989,-0.062469482421875,-0.205718994140625,-0.27947998046875,-0.254119873046875,-0.1312255859375,0.03827021270990372,0.18826869130134583,0.2760399281978607,0.26789146661758423,0.15555284917354584,-0.01507568359375,-0.172821044921875,-0.263214111328125,-0.25726318359375,-0.152984619140625,0.006958220154047012,0.1597643941640854,0.2594683766365051,0.26697590947151184,0.1673329919576645,0.003021332435309887,-0.16082763671875,-0.271087646484375,-0.28814697265625,-0.197784423828125,-0.037872314453125,0.12869656085968018,0.25757622718811035,0.3035371005535126,0.2386547476053238,0.09137241542339325,-0.07904052734375,-0.222564697265625,-0.294464111328125,-0.25799560546875,-0.13177490234375,0.02386547438800335,0.16962186992168427,0.26676228642463684,0.26493117213249207,0.16269417107105255,0.016846217215061188,-0.122589111328125,-0.22430419921875,-0.241973876953125,-0.165008544921875,-0.0423583984375,0.08594012260437012,0.1905880868434906,0.21994689106941223,0.15320292115211487,0.032197028398513794,-0.092864990234375,-0.186798095703125,-0.208160400390625,-0.13983154296875,-0.019683837890625,0.10596026480197906,0.20426037907600403,0.23191015422344208,0.16165654361248016,0.025879696011543274,-0.119354248046875,-0.22845458984375,-0.256439208984375,-0.1817626953125,-0.039031982421875,0.11270485818386078,0.23422956466674805,0.2779015600681305,0.2067934274673462,0.05612353980541229,-0.108428955078125,-0.24029541015625,-0.28900146484375,-0.220794677734375,-0.067840576171875,0.09967344999313354,0.23474837839603424,0.29599902033805847,0.23636585474014282,0.07370220124721527,-0.112823486328125,-0.254974365234375,-0.310577392578125,-0.251220703125,-0.088104248046875,0.10788293182849884,0.2608111798763275,0.3325602114200592,0.28882718086242676,0.12457655370235443,-0.090301513671875,-0.266448974609375,-0.34930419921875,-0.3143310546875,-0.16290283203125,0.047090061008930206,0.2311471849679947,0.33622241020202637,0.3262123465538025,0.1908322423696518,-0.012969970703125,-0.19927978515625,-0.30694580078125,-0.300872802734375,-0.178558349609375,0.008514664135873318,0.1834467649459839,0.2923978269100189,0.2923978269100189,0.16855372488498688,-0.02587890625,-0.204864501953125,-0.305267333984375,-0.291290283203125,-0.158935546875,0.03833124786615372,0.22092348337173462,0.33036285638809204,0.3234961926937103,0.18433180451393127,-0.036590576171875,-0.243896484375,-0.361602783203125,-0.354827880859375,-0.213897705078125,0.013214514590799809,0.23133030533790588,0.36820581555366516,0.3799554407596588,0.24823755025863647,0.0157780684530735,-0.217376708984375,-0.36187744140625,-0.374969482421875,-0.2496337890625,-0.029571533203125,0.1977904587984085,0.35184788703918457,0.3740653693675995,0.24979400634765625,0.02774132415652275,-0.20526123046875,-0.359100341796875,-0.37054443359375,-0.235076904296875,-0.01556396484375,0.20932646095752716,0.36924344301223755,0.39359721541404724,0.25733208656311035,0.0199591051787138,-0.22259521484375,-0.390472412109375,-0.417877197265625,-0.279693603515625,-0.03875732421875,0.20639668405056,0.3875850737094879,0.44029054045677185,0.32224494218826294,0.0795617550611496,-0.178131103515625,-0.36602783203125,-0.430267333984375,-0.33209228515625,-0.110809326171875,0.13208410143852234,0.32206183671951294,0.40226447582244873,0.3262123465538025,0.12042603641748428,-0.115570068359375,-0.294342041015625,-0.364593505859375,-0.288238525390625,-0.10015869140625,0.10693685710430145,0.2714926600456238,0.3424482047557831,0.269325852394104,0.0797753855586052,-0.12835693359375,-0.282470703125,-0.339111328125,-0.2574462890625,-0.0645751953125,0.13791313767433167,0.28354746103286743,0.3422650694847107,0.2684408128261566,0.0715964213013649,-0.1436767578125,-0.288177490234375,-0.336822509765625,-0.26287841796875,-0.07354736328125,0.1350138783454895,0.2772301435470581,0.33024078607559204,0.26487013697624207,0.07831049710512161,-0.138916015625,-0.282745361328125,-0.32061767578125,-0.242828369140625,-0.0599365234375,0.14407788217067719,0.28150272369384766,0.32071900367736816,0.24024170637130737,0.047853022813797,-0.169525146484375,-0.311798095703125,-0.336395263671875,-0.234771728515625,-0.03057861328125,0.1894589066505432,0.33802300691604614,0.36826685070991516,0.2558671832084656,0.03006073087453842,-0.21539306640625,-0.380096435546875,-0.4039306640625,-0.275360107421875,-0.038360595703125,0.21802422404289246,0.3982665538787842,0.4361095130443573,0.3092135488986969,0.055207982659339905,-0.230072021484375,-0.429168701171875,-0.4619140625,-0.32275390625,-0.062835693359375,0.22830897569656372,0.4363536536693573,0.4759056270122528,0.33613085746765137,0.06714072078466415,-0.23883056640625,-0.458099365234375,-0.489837646484375,-0.32965087890625,-0.051055908203125,0.251991331577301,0.4743492007255554,0.5127720236778259,0.3407391607761383,0.04113895073533058,-0.27386474609375,-0.50079345703125,-0.533233642578125,-0.340667724609375,-0.02716064453125,0.28037354350090027,0.5020294785499573,0.5461897850036621,0.35889768600463867,0.03103732317686081,-0.29071044921875,-0.511962890625,-0.545166015625,-0.348388671875,-0.021636962890625,0.28870511054992676,0.49739065766334534,0.5254676938056946,0.33124789595603943,0.00674459058791399,-0.301971435546875,-0.501373291015625,-0.510101318359375,-0.296142578125,0.032074954360723495,0.32813501358032227,0.5131992697715759,0.5140537619590759,0.28852197527885437,-0.05810546875,-0.3648681640625,-0.546356201171875,-0.535858154296875,-0.2919921875,0.07388531416654587,0.3864558935165405,0.5672780275344849,0.5650196671485901,0.32847070693969727,-0.049560546875,-0.387939453125,-0.591888427734375,-0.599273681640625,-0.36297607421875,0.0159611813724041,0.3576769232749939,0.5712759494781494,0.5974608659744263,0.38496047258377075,0.02050843834877014,-0.3250732421875,-0.55023193359375,-0.583953857421875,-0.37786865234375,-0.025970458984375,0.30610063672065735,0.5264137983322144,0.5657521486282349,0.36933499574661255,0.02539139986038208,-0.302886962890625,-0.52215576171875,-0.55657958984375,-0.350799560546875,-0.002777099609375,0.317209392786026,0.5264748334884644,0.5606555342674255,0.36014893651008606,0.010742515325546265,-0.319671630859375,-0.536834716796875,-0.567138671875,-0.360809326171875,-0.0101318359375,0.317819744348526,0.5260170102119446,0.5482650399208069,0.3424787223339081,0.0002136295661330223,-0.323638916015625,-0.531280517578125,-0.53985595703125,-0.312957763671875,0.03466902673244476,0.34522539377212524,0.5356608629226685,0.5265663862228394,0.2789086699485779,-0.080078125,-0.387939453125,-0.567901611328125,-0.5343017578125,-0.253021240234375,0.12991729378700256,0.44157230854034424,0.6067385077476501,0.5487533211708069,0.24741356074810028,-0.15008544921875,-0.47601318359375,-0.644561767578125,-0.566680908203125,-0.23828125,0.17300942540168762,0.504562497138977,0.6642353534698486,0.5609912276268005,0.21619312465190887,-0.195098876953125,-0.5240478515625,-0.67547607421875,-0.55181884765625,-0.184478759765625,0.23654896020889282,0.556260883808136,0.6800134181976318,0.5270546674728394,0.14716024696826935,-0.2786865234375,-0.59649658203125,-0.697601318359375,-0.512176513671875,-0.110382080078125,0.3243507146835327,0.635181725025177,0.7115695476531982,0.4921109676361084,0.07235938310623169,-0.356597900390625,-0.6597900390625,-0.72705078125,-0.490325927734375,-0.05419921875,0.3745231628417969,0.6574602723121643,0.7036652565002441,0.4535965919494629,0.015045625157654285,-0.395050048828125,-0.647064208984375,-0.6634521484375,-0.39886474609375,0.034546952694654465,0.4263741075992584,0.6465651392936707,0.6198614239692688,0.32218390703201294,-0.101104736328125,-0.455902099609375,-0.646392822265625,-0.5845947265625,-0.25152587890625,0.17175817489624023,0.49717703461647034,0.65324866771698,0.5500046014785767,0.17865535616874695,-0.243896484375,-0.534393310546875,-0.6510009765625,-0.51214599609375,-0.1231689453125,0.29602953791618347,0.5722830891609192,0.65300452709198,0.46455276012420654,0.059175390750169754,-0.3402099609375,-0.59222412109375,-0.636993408203125,-0.405303955078125,0.008209479041397572,0.38612017035484314,0.617633581161499,0.6245613098144531,0.34461501240730286,-0.079345703125,-0.43646240234375,-0.6365966796875,-0.600799560546875,-0.297393798828125,0.12317270040512085,0.47267067432403564,0.6492812633514404,0.5678884387016296,0.23947873711585999,-0.168212890625,-0.495849609375,-0.640533447265625,-0.51837158203125,-0.17919921875,0.20474867522716522,0.504074215888977,0.6183965802192688,0.46314889192581177,0.11624500155448914,-0.2393798828125,-0.491302490234375,-0.5526123046875,-0.3687744140625,-0.03546142578125,0.2842188775539398,0.4861598610877991,0.4866176247596741,0.2638019919395447,-0.05902099609375,-0.3363037109375,-0.47882080078125,-0.409637451171875,-0.15313720703125,0.14694662392139435,0.3750724792480469,0.45554977655410767,0.3265785574913025,0.043275244534015656,-0.23931884765625,-0.41522216796875,-0.42010498046875,-0.22589111328125,0.06836146116256714,0.31995606422424316,0.4439222514629364,0.3731803297996521,0.12320322543382645,-0.169830322265625,-0.38653564453125,-0.4503173828125,-0.29998779296875,-0.00518798828125,0.27555161714553833,0.4498428404331207,0.4426099359989166,0.21884822845458984,-0.099151611328125,-0.362152099609375,-0.49578857421875,-0.412841796875,-0.121917724609375,0.20151372253894806,0.4352855086326599,0.5187231302261353,0.3581041991710663,0.020447401329874992,-0.291229248046875,-0.488525390625,-0.510406494140625,-0.279754638671875,0.08127079159021378,0.3707083463668823,0.5243690013885498,0.47270119190216064,0.17859432101249695,-0.18170166015625,-0.434326171875,-0.53662109375,-0.4107666015625,-0.070404052734375,0.2702108919620514,0.4767296314239502,0.5197607278823853,0.3228248059749603,-0.040313720703125,-0.343780517578125,-0.489654541015625,-0.45074462890625,-0.1962890625,0.1515549123287201,0.4059877395629883,0.48799097537994385,0.3584704101085663,0.048860132694244385,-0.272796630859375,-0.45989990234375,-0.45416259765625,-0.23626708984375,0.10480055958032608,0.39344462752342224,0.5090792775154114,0.40705588459968567,0.11185033619403839,-0.24688720703125,-0.502410888671875,-0.54132080078125,-0.3394775390625,0.010040589608252048,0.3584704101085663,0.5684377551078796,0.5318765640258789,0.2527543008327484,-0.128997802734375,-0.45831298828125,-0.604766845703125,-0.478912353515625,-0.1448974609375,0.23596911132335663,0.5306253433227539,0.5973387956619263,0.382366418838501,0.019989624619483948,-0.339630126953125,-0.57861328125,-0.553985595703125,-0.263275146484375,0.11597033590078354,0.43971067667007446,0.5965757966041565,0.47141942381858826,0.12918485701084137,-0.243743896484375,-0.52264404296875,-0.577301025390625,-0.35003662109375,0.018646810203790665,0.37043365836143494,0.5872371792793274,0.5283364057540894,0.21185949444770813,-0.171905517578125,-0.49029541015625,-0.61956787109375,-0.4473876953125,-0.075408935546875,0.3118076026439667,0.5959349274635315,0.6226996779441833,0.347575306892395,-0.056671142578125,-0.43475341796875,-0.663604736328125,-0.584747314453125,-0.236053466796875,0.173833429813385,0.52201908826828,0.6747947335243225,0.5008392333984375,0.11438336968421936,-0.286407470703125,-0.58721923828125,-0.63031005859375,-0.368804931640625,0.021057771518826485,0.39118626713752747,0.6241950988769531,0.5551316738128662,0.2227240800857544,-0.163665771484375,-0.493011474609375,-0.63427734375,-0.458099365234375,-0.089813232421875,0.28125858306884766,0.5612048506736755,0.5971251726150513,0.3393963575363159,-0.03057861328125,-0.371612548828125,-0.584228515625,-0.513214111328125,-0.206695556640625,0.13672292232513428,0.430616170167923,0.5519577860832214,0.382610559463501,0.05789361149072647,-0.24957275390625,-0.46978759765625,-0.472900390625,-0.232147216796875,0.08035523444414139,0.35145115852355957,0.4937894940376282,0.37647634744644165,0.0791344940662384,-0.20947265625,-0.42828369140625,-0.475006103515625,-0.27337646484375,0.029633473604917526,0.29645681381225586,0.46403393149375916,0.4118472933769226,0.15659047663211823,-0.126617431640625,-0.3487548828125,-0.4322509765625,-0.293609619140625,-0.03564453125,0.2054811269044876,0.3740043342113495,0.36231574416160583,0.15610218048095703,-0.094635009765625,-0.293426513671875,-0.376220703125,-0.270263671875,-0.041717529296875,0.18594928085803986,0.34604936838150024,0.3482772409915924,0.17267373204231262,-0.055267333984375,-0.244537353515625,-0.340606689453125,-0.2705078125,-0.0816650390625,0.11615344882011414,0.2616657018661499,0.27564316987991333,0.14676351845264435,-0.02276611328125,-0.167388916015625,-0.231689453125,-0.156524658203125,-0.005859375,0.13296914100646973,0.2233344465494156,0.18829920887947083,0.029175695031881332,-0.134002685546875,-0.2396240234375,-0.24664306640625,-0.1138916015625,0.07824945449829102,0.23264259099960327,0.3095187246799469,0.23908200860023499,0.031434066593647,-0.17755126953125,-0.308868408203125,-0.31744384765625,-0.162139892578125,0.06521805375814438,0.2541276216506958,0.36002686619758606,0.29111605882644653,0.05639820545911789,-0.180877685546875,-0.340179443359375,-0.375946044921875,-0.215179443359375,0.052705466747283936,0.2783898413181305,0.41328164935112,0.3723258078098297,0.12854395806789398,-0.1534423828125,-0.35919189453125,-0.443450927734375,-0.3138427734375,-0.034576416015625,0.22583696246147156,0.40964993834495544,0.43202000856399536,0.22342601418495178,-0.072265625,-0.304656982421875,-0.428619384765625,-0.35943603515625,-0.10882568359375,0.16306039690971375,0.36970123648643494,0.4366588294506073,0.2709738314151764,-0.014007568359375,-0.2508544921875,-0.405120849609375,-0.392303466796875,-0.17181396484375,0.10086367279291153,0.31244850158691406,0.413556307554245,0.3107394576072693,0.055970944464206696,-0.183990478515625,-0.34381103515625,-0.364105224609375,-0.196990966796875,0.04605242982506752,0.24878689646720886,0.35364848375320435,0.2777184247970581,0.05780205875635147,-0.161346435546875,-0.309967041015625,-0.328216552734375,-0.173004150390625,0.05929746478796005,0.2612689733505249,0.3715628385543823,0.29728078842163086,0.07003998011350632,-0.155731201171875,-0.32171630859375,-0.3746337890625,-0.238372802734375,-0.0003662109375,0.2143314927816391,0.35496076941490173,0.3329874575138092,0.14383374154567719,-0.071441650390625,-0.2403564453125,-0.32720947265625,-0.2476806640625,-0.04901123046875,0.13821832835674286,0.26474806666374207,0.269478440284729,0.126041442155838,-0.055999755859375,-0.19476318359375,-0.25927734375,-0.18994140625,-0.01904296875,0.14764854311943054,0.2553178369998932,0.24475844204425812,0.10089419037103653,-0.071197509765625,-0.199310302734375,-0.26104736328125,-0.197662353515625,-0.0316162109375,0.13263344764709473,0.2384105920791626,0.23441267013549805,0.10425122827291489,-0.0550537109375,-0.17041015625,-0.228424072265625,-0.1785888671875,-0.0274658203125,0.12518692016601562,0.21155430376529694,0.19949950277805328,0.08462782949209213,-0.0634765625,-0.170684814453125,-0.205413818359375,-0.144256591796875,-0.008392333984375,0.13162633776664734,0.21033357083797455,0.17963194847106934,0.052888575941324234,-0.087493896484375,-0.1826171875,-0.200469970703125,-0.115966796875,0.032258063554763794,0.17041535675525665,0.24137088656425476,0.1899777203798294,0.031220436096191406,-0.13189697265625,-0.23663330078125,-0.25384521484375,-0.1488037109375,0.03244117647409439,0.20288705825805664,0.29929500818252563,0.252174437046051,0.07666249573230743,-0.112152099609375,-0.250274658203125,-0.301483154296875,-0.20697021484375,-0.011138916015625,0.1747795045375824,0.29575487971305847,0.2849818468093872,0.11609241366386414,-0.08953857421875,-0.236541748046875,-0.303955078125,-0.2244873046875,-0.017669677734375,0.18442335724830627,0.3187658190727234,0.3272804915904999,0.1514938771724701,-0.094207763671875,-0.273284912109375,-0.366363525390625,-0.311737060546875,-0.08868408203125,0.16440321505069733,0.347331166267395,0.4048890769481659,0.2617572546005249,-0.00115966796875,-0.229583740234375,-0.381317138671875,-0.389739990234375,-0.196502685546875,0.07315286993980408,0.28778955340385437,0.39967039227485657,0.3241981267929077,0.08523819595575333,-0.155487060546875,-0.32830810546875,-0.381011962890625,-0.2337646484375,0.02453688159584999,0.24906155467033386,0.3822138011455536,0.3403729498386383,0.11432233452796936,-0.13983154296875,-0.324859619140625,-0.40093994140625,-0.280426025390625,-0.012359619140625,0.24469740688800812,0.40961942076683044,0.39976194500923157,0.18726158142089844,-0.091278076171875,-0.31915283203125,-0.439453125,-0.358795166015625,-0.0965576171875,0.1898861676454544,0.395916610956192,0.44126713275909424,0.269753098487854,-0.01422119140625,-0.274200439453125,-0.434539794921875,-0.39599609375,-0.162445068359375,0.1270790696144104,0.3673818111419678,0.4588457942008972,0.3167515993118286,0.029755547642707825,-0.247222900390625,-0.4400634765625,-0.449859619140625,-0.23046875,0.08188115805387497,0.35319072008132935,0.4945829510688782,0.3988463878631592,0.11542100459337234,-0.190277099609375,-0.4296875,-0.500701904296875,-0.31707763671875,0.0025025177747011185,0.2945951819419861,0.4836573302745819,0.45649585127830505,0.19595934450626373,-0.1256103515625,-0.3868408203125,-0.502899169921875,-0.3636474609375,-0.049163818359375,0.2602007985115051,0.48127689957618713,0.4988250434398651,0.24805444478988647,-0.102386474609375,-0.391845703125,-0.553009033203125,-0.45947265625,-0.128662109375,0.2298348993062973,0.5001068115234375,0.5843989253044128,0.3723868429660797,-0.005401611328125,-0.351226806640625,-0.587493896484375,-0.5699462890625,-0.254150390625,0.13864558935165405,0.4597308337688446,0.6334116458892822,0.503585934638977,0.12298959493637085,-0.2745361328125,-0.574310302734375,-0.652435302734375,-0.4024658203125,0.0159916989505291,0.3984801769256592,0.6582232117652893,0.6372569799423218,0.28839990496635437,-0.154144287109375,-0.51690673828125,-0.71575927734375,-0.584930419921875,-0.168060302734375,0.2719809412956238,0.6080507636070251,0.7286904454231262,0.49656665325164795,0.047059543430805206,-0.3829345703125,-0.683074951171875,-0.69830322265625,-0.37005615234375,0.08374278992414474,0.4820093512535095,0.7277138829231262,0.6446424722671509,0.24393445253372192,-0.2191162109375,-0.58685302734375,-0.752166748046875,-0.568572998046875,-0.124359130859375,0.3316446542739868,0.6733909249305725,0.7635731101036072,0.491164892911911,0.02450636401772499,-0.417694091796875,-0.729461669921875,-0.741943359375,-0.404571533203125,0.06002990901470184,0.47355571389198303,0.7387920618057251,0.6865138411521912,0.3191625773906708,-0.13348388671875,-0.5152587890625,-0.71649169921875,-0.599853515625,-0.224273681640625,0.19977416098117828,0.539048433303833,0.6742148995399475,0.5056917071342468,0.13303017616271973,-0.25927734375,-0.55670166015625,-0.6343994140625,-0.425018310546875,-0.055908203125,0.3018280565738678,0.5517746210098267,0.5886104702949524,0.3710440397262573,0.01760917901992798,-0.3197021484375,-0.535980224609375,-0.541961669921875,-0.328948974609375,-0.003662109375,0.30460524559020996,0.49522385001182556,0.4945219159126282,0.3079927861690521,0.020203253254294395,-0.2657470703125,-0.44189453125,-0.440460205078125,-0.281494140625,-0.03448486328125,0.21881771087646484,0.38621172308921814,0.4056214988231659,0.28049561381340027,0.06118961051106453,-0.175689697265625,-0.342132568359375,-0.381866455078125,-0.2884521484375,-0.09234619140625,0.13608203828334808,0.31296730041503906,0.38334301114082336,0.3252052366733551,0.1423383355140686,-0.09771728515625,-0.293609619140625,-0.394317626953125,-0.370941162109375,-0.19903564453125,0.055970944464206696,0.2785424292087555,0.41483810544013977,0.4222235679626465,0.25663015246391296,-0.013671875,-0.26141357421875,-0.42877197265625,-0.459503173828125,-0.29803466796875,-0.019012451171875,0.24848170578479767,0.44187748432159424,0.4866786599159241,0.3236792981624603,0.038575395941734314,-0.241455078125,-0.451446533203125,-0.502288818359375,-0.334930419921875,-0.046600341796875,0.2376171201467514,0.4512466788291931,0.5002288818359375,0.3331705629825592,0.045564133673906326,-0.23828125,-0.446807861328125,-0.49072265625,-0.326568603515625,-0.047637939453125,0.22791223227977753,0.42564165592193604,0.460860013961792,0.30713826417922974,0.048768579959869385,-0.21099853515625,-0.391326904296875,-0.42132568359375,-0.284515380859375,-0.0517578125,0.17691579461097717,0.33121737837791443,0.365428626537323,0.2601397633552551,0.06088442727923393,-0.133392333984375,-0.256744384765625,-0.294952392578125,-0.22796630859375,-0.071868896484375,0.07730338722467422,0.16315194964408875,0.2058473527431488,0.18747520446777344,0.09189122915267944,-0.01153564453125,-0.073089599609375,-0.112274169921875,-0.12799072265625,-0.103759765625,-0.062469482421875,-0.024505615234375,0.01657155156135559,0.06118961051106453,0.10110782086849213,0.12152470648288727,0.1105685606598854,0.07718130946159363,0.01907406747341156,-0.07080078125,-0.151214599609375,-0.17340087890625,-0.144500732421875,-0.081756591796875,0.02233954891562462,0.13702811300754547,0.19330424070358276,0.17654958367347717,0.11529892683029175,0.012787255458533764,-0.109893798828125,-0.183563232421875,-0.176849365234375,-0.12420654296875,-0.0411376953125,0.07263405621051788,0.15680409967899323,0.15671254694461823,0.10873744636774063,0.050355538725852966,-0.036102294921875,-0.119598388671875,-0.134063720703125,-0.098907470703125,-0.05828857421875,-0.000335693359375,0.06921598315238953,0.10702840983867645,0.1033661887049675,0.08340708911418915,0.05386516824364662,0.0009765923023223877,-0.063385009765625,-0.105682373046875,-0.12115478515625,-0.124359130859375,-0.0948486328125,-0.011383056640625,0.08462782949209213,0.14801476895809174,0.18836024403572083,0.1900387555360794,0.1029389351606369,-0.03851318359375,-0.157562255859375,-0.23968505859375,-0.264373779296875,-0.180419921875,-0.014862060546875,0.14966276288032532,0.269753098487854,0.317300945520401,0.24912258982658386,0.06558427959680557,-0.143951416015625,-0.288177490234375,-0.340911865234375,-0.281585693359375,-0.09881591796875,0.13696706295013428,0.31379130482673645,0.36826685070991516,0.2947782874107361,0.11004974693059921,-0.134490966796875,-0.3328857421875,-0.394439697265625,-0.312530517578125,-0.121337890625,0.1357158124446869,0.35453352332115173,0.4211554229259491,0.3269142806529999,0.1347697377204895,-0.109100341796875,-0.336944580078125,-0.427490234375,-0.339111328125,-0.15087890625,0.07708975672721863,0.2918179929256439,0.38492995500564575,0.31339457631111145,0.14679403603076935,-0.045928955078125,-0.219207763671875,-0.3006591796875,-0.24609375,-0.101470947265625,0.05056916922330856,0.158757284283638,0.19324320554733276,0.13849300146102905,0.020874660462141037,-0.0975341796875,-0.1475830078125,-0.106536865234375,-0.014007568359375,0.0872829407453537,0.16037476062774658,0.16272468864917755,0.07269509136676788,-0.072235107421875,-0.197906494140625,-0.247711181640625,-0.1968994140625,-0.063720703125,0.11822870373725891,0.2793053984642029,0.32767724990844727,0.24127933382987976,0.06610309332609177,-0.133819580078125,-0.308929443359375,-0.384033203125,-0.291748046875,-0.07879638671875,0.14612261950969696,0.3186742663383484,0.40910062193870544,0.34717857837677,0.11307107657194138,-0.1497802734375,-0.32135009765625,-0.405609130859375,-0.374725341796875,-0.175872802734375,0.10596026480197906,0.3095187246799469,0.39210182428359985,0.37668997049331665,0.2302621603012085,-0.02947998046875,-0.259490966796875,-0.362091064453125,-0.361114501953125,-0.26885986328125,-0.069366455078125,0.16431164741516113,0.300057977437973,0.31205177307128906,0.26435133814811707,0.15683461725711823,-0.02783203125,-0.193359375,-0.245330810546875,-0.22967529296875,-0.194610595703125,-0.103271484375,0.03234962001442909,0.13333536684513092,0.16812646389007568,0.18018127977848053,0.1825922429561615,0.12436292320489883,0.01919614151120186,-0.071258544921875,-0.13702392578125,-0.20025634765625,-0.23736572265625,-0.183563232421875,-0.058380126953125,0.07358012348413467,0.18707846105098724,0.2703024446964264,0.2946867346763611,0.20743431150913239,0.030762657523155212,-0.144805908203125,-0.260589599609375,-0.319183349609375,-0.303131103515625,-0.14892578125,0.07385478913784027,0.2305063009262085,0.29911190271377563,0.30646687746047974,0.22351756691932678,0.028351694345474243,-0.163299560546875,-0.247222900390625,-0.253997802734375,-0.2183837890625,-0.110015869140625,0.05719168484210968,0.1667226105928421,0.17630542814731598,0.15543076395988464,0.12164677679538727,0.042512282729148865,-0.044189453125,-0.06842041015625,-0.056243896484375,-0.067626953125,-0.0869140625,-0.08148193359375,-0.068328857421875,-0.051544189453125,-0.001953125,0.08087404817342758,0.16135135293006897,0.19617298245429993,0.17554247379302979,0.0947294533252716,-0.044677734375,-0.190826416015625,-0.28955078125,-0.297119140625,-0.203277587890625,-0.02215576171875,0.19263282418251038,0.3323465585708618,0.365276038646698,0.2929776906967163,0.10596026480197906,-0.13916015625,-0.33404541015625,-0.387969970703125,-0.3291015625,-0.183868408203125,0.05465865135192871,0.2778099775314331,0.3752250671386719,0.3335368037223816,0.20319223403930664,0.015320291742682457,-0.19122314453125,-0.308197021484375,-0.2921142578125,-0.180084228515625,-0.0362548828125,0.10095523297786713,0.20529800653457642,0.21622364223003387,0.14102603495121002,0.028351694345474243,-0.067626953125,-0.11724853515625,-0.12347412109375,-0.065765380859375,0.014007995836436749,0.06952116638422012,0.0798974558711052,0.03741569072008133,-0.01531982421875,-0.07073974609375,-0.0946044921875,-0.064605712890625,-0.00634765625,0.07364116609096527,0.12326426059007645,0.12909328937530518,0.09811700880527496,0.012176885269582272,-0.08270263671875,-0.15179443359375,-0.171112060546875,-0.13214111328125,-0.053131103515625,0.06912442296743393,0.1581774353981018,0.17246009409427643,0.158482626080513,0.09646900743246078,-0.000274658203125,-0.102142333984375,-0.173583984375,-0.165618896484375,-0.131378173828125,-0.0697021484375,0.0317087322473526,0.12234870344400406,0.17709891498088837,0.15295876562595367,0.10193182528018951,0.046449169516563416,-0.04974365234375,-0.127197265625,-0.163360595703125,-0.1341552734375,-0.079803466796875,-0.033782958984375,0.06173894554376602,0.14062929153442383,0.15427106618881226,0.1033661887049675,0.03244117647409439,-0.0145263671875,-0.08892822265625,-0.131744384765625,-0.104949951171875,-0.04241943359375,0.01156651508063078,0.031159397214651108,0.07397686690092087,0.07583849877119064,0.016357921063899994,-0.0321044921875,-0.0545654296875,-0.03546142578125,-0.01123046875,0.03653065487742424,0.08880886435508728,0.079439677298069,0.03662221133708954,-0.043487548828125,-0.11614990234375,-0.150115966796875,-0.14776611328125,-0.0614013671875,0.05401775985956192,0.15509507060050964,0.221594899892807,0.2151860147714615,0.14410839974880219,-0.01776123046875,-0.1815185546875,-0.250457763671875,-0.27191162109375,-0.206390380859375,-0.04534912109375,0.13370159268379211,0.2597430348396301,0.27295756340026855,0.22830897569656372,0.1193884089589119,-0.054901123046875,-0.190032958984375,-0.25927734375,-0.222259521484375,-0.1285400390625,-0.026123046875,0.11590930074453354,0.1894283890724182,0.1833552122116089,0.12421033531427383,0.03396710008382797,-0.028076171875,-0.101959228515625,-0.116241455078125,-0.0819091796875,-0.054443359375,0.004394665360450745,0.021179845556616783,0.03668324649333954,0.054353464394807816,0.029511399567127228,0.0237739197909832,0.008056886494159698,0.008941923268139362,0.01229895930737257,-0.019073486328125,-0.03228759765625,-0.04974365234375,-0.046234130859375,-0.027984619140625,-0.019287109375,0.031525619328022,0.06891079246997833,0.062990203499794,0.04425183683633804,0.0068666646257042885,-0.02423095703125,-0.05511474609375,-0.08111572265625,-0.0535888671875,-0.006805419921875,0.022614214569330215,0.054414503276348114,0.063081756234169,0.039704579859972,0.002471999265253544,-0.04107666015625,-0.05224609375,-0.0394287109375,-0.017730712890625,0.024903103709220886,0.049714650958776474,0.05426190793514252,0.03491317480802536,-0.01763916015625,-0.04620361328125,-0.058135986328125,-0.054779052734375,-0.01470947265625,0.02218695729970932,0.07196264714002609,0.09396649152040482,0.0475173182785511,0.002685628831386566,-0.0487060546875,-0.083099365234375,-0.0845947265625,-0.0670166015625,0.0236518457531929,0.08618427067995071,0.09173864126205444,0.09787286072969437,0.04446546733379364,-0.02178955078125,-0.088348388671875,-0.1312255859375,-0.092315673828125,-0.04486083984375,0.03466902673244476,0.12048707902431488,0.13721121847629547,0.11764885485172272,0.04263435676693916,-0.044708251953125,-0.109130859375,-0.159454345703125,-0.12548828125,-0.04522705078125,0.026764731854200363,0.10415967553853989,0.13907285034656525,0.1352275162935257,0.08227790147066116,-0.02923583984375,-0.085693359375,-0.10986328125,-0.12896728515625,-0.075958251953125,-0.012359619140625,0.060701314359903336,0.10528885573148727,0.08029419928789139,0.0718100517988205,0.025757621973752975,-0.02996826171875,-0.061553955078125,-0.099151611328125,-0.057769775390625,-0.0296630859375,-0.01361083984375,0.047791987657547,0.05972472205758095,0.07345805317163467,0.04947050288319588,0.006988738663494587,0.01025421917438507,-0.04241943359375,-0.06524658203125,-0.059814453125,-0.0635986328125,-0.0162353515625,0.0014038514345884323,0.04519791156053543,0.09378337860107422,0.08026368170976639,0.08209478855133057,0.031403545290231705,-0.018402099609375,-0.041961669921875,-0.10888671875,-0.107391357421875,-0.087188720703125,-0.059600830078125,0.02926725149154663,0.07629626989364624,0.12179937213659286,0.14609210193157196,0.10223700851202011,0.05652027949690819,-0.02801513671875,-0.103912353515625,-0.13531494140625,-0.16522216796875,-0.134735107421875,-0.05438232421875,0.03552354499697685,0.12448500096797943,0.174016535282135,0.18390454351902008,0.13791313767433167,0.04123050719499588,-0.055816650390625,-0.143524169921875,-0.192169189453125,-0.174530029296875,-0.116302490234375,-0.02728271484375,0.07278664410114288,0.15491195023059845,0.18625445663928986,0.1423993706703186,0.0789208635687828,0.0010986663401126862,-0.08935546875,-0.13006591796875,-0.138519287109375,-0.0968017578125,-0.032562255859375,0.0023194067180156708,0.05725272372364998,0.0797753855586052,0.07632679492235184,0.0635090172290802,0.013000885024666786,0.011688589118421078,-0.000091552734375,-0.02960205078125,-0.019500732421875,-0.0396728515625,-0.042205810546875,-0.04925537109375,-0.060516357421875,-0.02142333984375,-0.001922607421875,0.04916531965136528,0.0874660462141037,0.08224738389253616,0.10138248652219772,0.0396130234003067,-0.0218505859375,-0.043731689453125,-0.112152099609375,-0.11376953125,-0.08441162109375,-0.04547119140625,0.03579821065068245,0.063020721077919,0.09344767779111862,0.11624500155448914,0.0633259043097496,0.017151402309536934,-0.02215576171875,-0.05413818359375,-0.0570068359375,-0.065216064453125,-0.047119140625,-0.003173828125,0.012146366760134697,0.010956144891679287,0.01388592179864645,0.013306070119142532,0.014069032855331898,0.007110812701284885,-0.001434326171875,0.02621540054678917,0.048890650272369385,0.03393658250570297,0.020172733813524246,-0.001678466796875,-0.031707763671875,-0.0621337890625,-0.09368896484375,-0.09039306640625,-0.056610107421875,-0.011322021484375,0.045686207711696625,0.09872737526893616,0.12930692732334137,0.13098543882369995,0.10043641179800034,0.026001770049333572,-0.062164306640625,-0.124114990234375,-0.1636962890625,-0.16265869140625,-0.112640380859375,-0.03936767578125,0.056794945150613785,0.14630573987960815,0.17288735508918762,0.1590624749660492,0.12308114767074585,0.04116946831345558,-0.043060302734375,-0.115875244140625,-0.16510009765625,-0.136474609375,-0.09588623046875,-0.056884765625,0.011780144646763802,0.05154576152563095,0.0951261967420578,0.11575670540332794,0.0795922726392746,0.079256571829319,0.059053316712379456,0.005096591077744961,-0.0235595703125,-0.082122802734375,-0.111480712890625,-0.10546875,-0.12158203125,-0.0712890625,-0.000946044921875,0.049653615802526474,0.14053773880004883,0.1658986210823059,0.12323374301195145,0.09173864126205444,0.010803552344441414,-0.074371337890625,-0.119293212890625,-0.1597900390625,-0.11871337890625,-0.030853271484375,0.00634784996509552,0.05847346410155296,0.0948210060596466,0.07513657212257385,0.05957213044166565,0.001434369944036007,-0.0418701171875,-0.009735107421875,-0.0074462890625,0.011627552099525928,0.04281746968626976,0.013367107138037682,0.0070192571729421616,-0.03204345703125,-0.1011962890625,-0.0911865234375,-0.077301025390625,-0.0262451171875,0.06646931171417236,0.09442427009344101,0.13263344764709473,0.14087343215942383,0.05972472205758095,-0.0052490234375,-0.079833984375,-0.1395263671875,-0.118988037109375,-0.09136962890625,-0.038787841796875,0.03341776877641678,0.05795465037226677,0.07855464518070221,0.0713827908039093,0.015503402799367905,0.00198370311409235,0.00866725668311119,0.0013733329251408577,0.017914365977048874,0.01742606982588768,0.003021332435309887,-0.01123046875,-0.069091796875,-0.10479736328125,-0.097900390625,-0.07769775390625,-0.00238037109375,0.07028412818908691,0.12094485014677048,0.16568498313426971,0.125980406999588,0.052858058363199234,-0.01953125,-0.12213134765625,-0.155120849609375,-0.127960205078125,-0.0992431640625,-0.0198974609375,0.055238500237464905,0.08575700968503952,0.10177922993898392,0.06164738908410072,0.006958220154047012,-0.0079345703125,-0.02642822265625,-0.01959228515625,0.012390514835715294,0.02133243903517723,0.03515732288360596,0.011627552099525928,-0.0595703125,-0.087493896484375,-0.096832275390625,-0.083984375,-0.01763916015625,0.03738517314195633,0.1105685606598854,0.1663869172334671,0.12555314600467682,0.07467879354953766,0.0016174810007214546,-0.08856201171875,-0.11260986328125,-0.1312255859375,-0.111419677734375,-0.0264892578125,0.02145451307296753,0.05212561413645744,0.06872768700122833,0.05050813406705856,0.04217658191919327,0.02935880608856678,0.022614214569330215,0.03433332219719887,0.030762657523155212,0.018860438838601112,-0.0076904296875,-0.057525634765625,-0.107940673828125,-0.1275634765625,-0.099029541015625,-0.04620361328125,0.02710043638944626,0.1113925576210022,0.16425061225891113,0.1669667661190033,0.10727255791425705,0.018402662128210068,-0.058074951171875,-0.124420166015625,-0.14300537109375,-0.104278564453125,-0.05010986328125,0.016083255410194397,0.06582842767238617,0.06616412848234177,0.05053865164518356,0.017944883555173874,-0.028656005859375,-0.021392822265625,0.00839259009808302,0.026703696697950363,0.07275612652301788,0.08081301301717758,0.04434339329600334,0.0052797021344304085,-0.07763671875,-0.135345458984375,-0.138641357421875,-0.12347412109375,-0.043975830078125,0.03637806326150894,0.09344767779111862,0.16446425020694733,0.158665731549263,0.10638752579689026,0.05682546645402908,-0.03411865234375,-0.082672119140625,-0.091094970703125,-0.121917724609375,-0.107757568359375,-0.067840576171875,-0.0377197265625,0.008056886494159698,0.03521835803985596,0.05215613171458244,0.09186071157455444,0.11590930074453354,0.10122989863157272,0.06970427930355072,0.02774132415652275,-0.02130126953125,-0.0667724609375,-0.11456298828125,-0.14007568359375,-0.115692138671875,-0.075408935546875,-0.028411865234375,0.02926725149154663,0.06161687150597572,0.09216590225696564,0.12860499322414398,0.11825922131538391,0.09338663518428802,0.0636310949921608,0.003936887718737125,-0.03619384765625,-0.08538818359375,-0.16033935546875,-0.17474365234375,-0.148468017578125,-0.10308837890625,-0.012054443359375,0.06012146174907684,0.12906277179718018,0.21002838015556335,0.20163579285144806,0.14404736459255219,0.08224738389253616,-0.02178955078125,-0.09088134765625,-0.127410888671875,-0.178497314453125,-0.170135498046875,-0.123077392578125,-0.08148193359375,-0.009979248046875,0.04840235412120819,0.07797478884458542,0.13980528712272644,0.19455549120903015,0.1820123940706253,0.14487136900424957,0.08270516246557236,-0.018280029296875,-0.096435546875,-0.183319091796875,-0.269683837890625,-0.243011474609375,-0.162994384765625,-0.07562255859375,0.05883968621492386,0.15555284917354584,0.21268349885940552,0.2620929479598999,0.2223273366689682,0.1340983361005783,0.04602191224694252,-0.060760498046875,-0.123138427734375,-0.156768798828125,-0.205841064453125,-0.210113525390625,-0.16070556640625,-0.099212646484375,-0.020751953125,0.06790368258953094,0.13928647339344025,0.22025208175182343,0.2763756215572357,0.2377391904592514,0.16455580294132233,0.05786309391260147,-0.091400146484375,-0.184539794921875,-0.261566162109375,-0.32513427734375,-0.265106201171875,-0.148834228515625,-0.0267333984375,0.11542100459337234,0.20270393788814545,0.2540665864944458,0.2916959226131439,0.24301889538764954,0.13730277121067047,0.0318613238632679,-0.08416748046875,-0.179473876953125,-0.21893310546875,-0.250030517578125,-0.25518798828125,-0.166961669921875,-0.058258056640625,0.039216283708810806,0.14542070031166077,0.19656972587108612,0.2387463003396988,0.2629169523715973,0.18027283251285553,0.09088411927223206,0.007843256928026676,-0.105621337890625,-0.160003662109375,-0.206512451171875,-0.259735107421875,-0.2220458984375,-0.149871826171875,-0.07342529296875,0.04144413769245148,0.13324381411075592,0.21069979667663574,0.2944425940513611,0.28968170285224915,0.21036408841609955,0.11206396669149399,-0.03155517578125,-0.1602783203125,-0.239105224609375,-0.306396484375,-0.3023681640625,-0.20660400390625,-0.09429931640625,0.03250221163034439,0.15219581127166748,0.20307016372680664,0.23984496295452118,0.2604754865169525,0.19953002035617828,0.1279641091823578,0.05374309420585632,-0.059326171875,-0.131988525390625,-0.189727783203125,-0.27288818359375,-0.27880859375,-0.21209716796875,-0.1270751953125,0.01071199681609869,0.1432538777589798,0.22574540972709656,0.30664998292922974,0.317850261926651,0.2228156328201294,0.10736411809921265,-0.027587890625,-0.160003662109375,-0.2117919921875,-0.226715087890625,-0.23443603515625,-0.185455322265625,-0.109954833984375,-0.04364013671875,0.03714102506637573,0.10199286043643951,0.14050722122192383,0.20148320496082306,0.24387340247631073,0.22565385699272156,0.1755119413137436,0.07757805287837982,-0.059906005859375,-0.182403564453125,-0.279052734375,-0.3365478515625,-0.316375732421875,-0.205230712890625,-0.03985595703125,0.1194494441151619,0.23398540914058685,0.2863856852054596,0.28366953134536743,0.24030274152755737,0.1424604058265686,0.009369182400405407,-0.093994140625,-0.15386962890625,-0.182525634765625,-0.174652099609375,-0.160003662109375,-0.1605224609375,-0.12811279296875,-0.0526123046875,0.01745658740401268,0.09720145165920258,0.17911313474178314,0.21985533833503723,0.251655638217926,0.2385937124490738,0.1275368481874466,-0.000274658203125,-0.1131591796875,-0.22662353515625,-0.28167724609375,-0.26922607421875,-0.22491455078125,-0.12408447265625,0.019440289586782455,0.12970367074012756,0.1979125291109085,0.2310861498117447,0.2133243829011917,0.18427075445652008,0.13724173605442047,0.036896876990795135,-0.056732177734375,-0.124420166015625,-0.18115234375,-0.18841552734375,-0.17132568359375,-0.1563720703125,-0.099151611328125,-0.006805419921875,0.07663197815418243,0.14505447447299957,0.18500320613384247,0.18002869188785553,0.16180913150310516,0.13223670423030853,0.06103701889514923,-0.017578125,-0.08465576171875,-0.14739990234375,-0.173980712890625,-0.1781005859375,-0.17779541015625,-0.133697509765625,-0.04290771484375,0.06201361119747162,0.14941862225532532,0.1978514939546585,0.21762749552726746,0.20868556201457977,0.15405744314193726,0.05481124296784401,-0.06884765625,-0.16937255859375,-0.212646484375,-0.210418701171875,-0.171844482421875,-0.1107177734375,-0.039886474609375,0.05063020810484886,0.1269264817237854,0.15619373321533203,0.1575975865125656,0.1344035118818283,0.0950346365571022,0.054445020854473114,-0.00262451171875,-0.06878662109375,-0.110382080078125,-0.126007080078125,-0.1279296875,-0.107818603515625,-0.070709228515625,-0.026519775390625,0.02688680589199066,0.07275612652301788,0.0950651541352272,0.09314249455928802,0.07870723307132721,0.06851405650377274,0.05490279942750931,0.028168585151433945,-0.00762939453125,-0.042999267578125,-0.06787109375,-0.09259033203125,-0.113922119140625,-0.109649658203125,-0.08062744140625,-0.03082275390625,0.03729362040758133,0.10226752609014511,0.13687551021575928,0.13699759542942047,0.11236914992332458,0.05932798236608505,-0.0115966796875,-0.07568359375,-0.11151123046875,-0.104705810546875,-0.07781982421875,-0.04669189453125,-0.002655029296875,0.03018280491232872,0.03830073028802872,0.03585924953222275,0.023407697677612305,0.012054811231791973,0.01580858789384365,0.02533036284148693,0.03341776877641678,0.0394299142062664,0.0319833979010582,0.007049775682389736,-0.02301025390625,-0.05206298828125,-0.069183349609375,-0.062042236328125,-0.0394287109375,-0.009521484375,0.021942809224128723,0.04095584154129028,0.045655690133571625,0.039338357746601105,0.02066102996468544,0.004608294926583767,0.003936887718737125,0.009491256438195705,0.0159611813724041,0.016510512679815292,0.004150517284870148,-0.01397705078125,-0.035247802734375,-0.054412841796875,-0.059295654296875,-0.04461669921875,-0.01214599609375,0.028077028691768646,0.05874812975525856,0.06476027518510818,0.05374309420585632,0.03427228704094887,0.0023499252274632454,-0.0262451171875,-0.041290283203125,-0.0413818359375,-0.021820068359375,-0.001495361328125,0.007568590342998505,0.0074159977957606316,-0.00213623046875,-0.0091552734375,-0.01123046875,-0.01239013671875,-0.007354736328125,0.004455702379345894,0.020416881889104843,0.026764731854200363,0.018494216725230217,0.010162663646042347,0.0039674062281847,0.002075258642435074,0.00674459058791399,0.00787377543747425,0.0014648884534835815,-0.00946044921875,-0.019561767578125,-0.038177490234375,-0.062713623046875,-0.06201171875,-0.034393310546875,0.011017181910574436,0.062227241694927216,0.09237952530384064,0.10055848956108093,0.08313241600990295,0.03332621231675148,-0.02813720703125,-0.08013916015625,-0.10968017578125,-0.103515625,-0.058135986328125,-0.00042724609375,0.04046754539012909,0.06427197903394699,0.06707968562841415,0.04382457956671715,0.007110812701284885,-0.02667236328125,-0.03875732421875,-0.0184326171875,0.013275551609694958,0.03463850915431976,0.048036135733127594,0.040772728621959686,0.009277626872062683,-0.027862548828125,-0.067230224609375,-0.0897216796875,-0.07745361328125,-0.042022705078125,0.005737479776144028,0.051942504942417145,0.08346812427043915,0.09320352971553802,0.07666249573230743,0.043214209377765656,0.0038453321903944016,-0.03350830078125,-0.056793212890625,-0.061492919921875,-0.056671142578125,-0.04632568359375,-0.02728271484375,-0.00762939453125,0.007293923757970333,0.02145451307296753,0.03320413827896118,0.04361094906926155,0.049684133380651474,0.04501480236649513,0.03399761766195297,0.016846217215061188,-0.008392333984375,-0.036102294921875,-0.055419921875,-0.059173583984375,-0.055450439453125,-0.04327392578125,-0.016448974609375,0.01229895930737257,0.03628650680184364,0.05331583693623543,0.05789361149072647,0.05102694779634476,0.03277687728404999,0.009002960287034512,-0.015594482421875,-0.0382080078125,-0.05059814453125,-0.05108642578125,-0.03857421875,-0.01715087890625,0.006591998040676117,0.028015991672873497,0.034577470272779465,0.02938932552933693,0.01812799461185932,-0.001312255859375,-0.01019287109375,-0.006500244140625,-0.004913330078125,0.007446516305208206,0.02612384408712387,0.029145177453756332,0.017883846536278725,-0.0086669921875,-0.0390625,-0.05279541015625,-0.05743408203125,-0.044586181640625,-0.005767822265625,0.03338725119829178,0.06469924002885818,0.08264411985874176,0.06964323669672012,0.03576769307255745,-0.002288818359375,-0.03662109375,-0.05615234375,-0.05963134765625,-0.04803466796875,-0.02276611328125,0.0013122959062457085,0.015167699195444584,0.0158391073346138,0.006775109097361565,0.006378368474543095,0.01342814415693283,0.02133243903517723,0.03622547164559364,0.04446546733379364,0.03778191655874252,0.019470809027552605,-0.01629638671875,-0.054443359375,-0.079071044921875,-0.087677001953125,-0.0657958984375,-0.0223388671875,0.025025177747011185,0.06988738477230072,0.09082308411598206,0.08819849044084549,0.06280709058046341,0.00827051606029272,-0.03851318359375,-0.0626220703125,-0.072265625,-0.057373046875,-0.029815673828125,0.0012512588873505592,0.029908139258623123,0.038575395941734314,0.03350932151079178,0.016846217215061188,-0.010467529296875,-0.025146484375,-0.023895263671875,-0.01580810546875,0.0023499252274632454,0.0239265114068985,0.036866359412670135,0.03912472724914551,0.027283547446131706,0.00119022186845541,-0.02410888671875,-0.04278564453125,-0.05596923828125,-0.048980712890625,-0.0244140625,0.0008239997550845146,0.0319833979010582,0.057649463415145874,0.057466354221105576,0.04376354068517685,0.02053895592689514,-0.0120849609375,-0.035003662109375,-0.04541015625,-0.046234130859375,-0.03253173828125,-0.010162353515625,0.010406811721622944,0.0238044373691082,0.02710043638944626,0.01733451336622238,0.0031434064731001854,-0.005401611328125,-0.00848388671875,-0.00396728515625,0.0028992583975195885,0.008239997550845146,0.010742515325546265,0.00476088747382164,-0.005615234375,-0.019927978515625,-0.02880859375,-0.0234375,-0.013214111328125,0.0066225165501236916,0.02868739888072014,0.03820917382836342,0.04025391489267349,0.029084138572216034,0.00714133121073246,-0.015655517578125,-0.034027099609375,-0.035369873046875,-0.02490234375,-0.0107421875,0.004730368964374065,0.013611255213618279,0.01663258671760559,0.012146366760134697,0.0035096285864710808,0.0014954069629311562,0.005188146606087685,0.01315347757190466,0.021210364997386932,0.02468947321176529,0.01913510635495186,-0.001800537109375,-0.0238037109375,-0.037109375,-0.04644775390625,-0.03997802734375,-0.016265869140625,0.011780144646763802,0.03729362040758133,0.0477004311978817,0.04300057888031006,0.031373027712106705,0.011017181910574436,-0.008880615234375,-0.0184326171875,-0.02020263671875,-0.016204833984375,-0.010833740234375,-0.008697509765625,-0.00848388671875,-0.0086669921875,-0.007568359375,-0.00244140625,0.0076601458713412285,0.018402662128210068,0.02462843805551529,0.022797327488660812,0.01025421917438507,-0.007568359375,-0.023284912109375,-0.0302734375,-0.022369384765625,-0.00445556640625,0.01580858789384365,0.02865688130259514,0.02462843805551529,0.00787377543747425,-0.018524169921875,-0.046600341796875,-0.057464599609375,-0.044647216796875,-0.0135498046875,0.027588732540607452,0.06466872245073318,0.08105716109275818,0.06726279854774475,0.026673177257180214,-0.024993896484375,-0.065155029296875,-0.082183837890625,-0.07354736328125,-0.035430908203125,0.016296884045004845,0.054445020854473114,0.06723227351903915,0.05334635451436043,0.01919614151120186,-0.019012451171875,-0.045166015625,-0.04901123046875,-0.02880859375,0.006164738908410072,0.040162358433008194,0.053590502589941025,0.036988433450460434,0.0013733329251408577,-0.03607177734375,-0.0587158203125,-0.058563232421875,-0.03509521484375,0.012085329741239548,0.05893124267458916,0.0798364207148552,0.0711691677570343,0.03491317480802536,-0.014007568359375,-0.0601806640625,-0.0849609375,-0.06982421875,-0.03082275390625,0.01422162540256977,0.057618945837020874,0.07699819654226303,0.06183049827814102,0.0236518457531929,-0.018157958984375,-0.047515869140625,-0.056610107421875,-0.041351318359375,-0.0078125,0.02688680589199066,0.044099245220422745,0.04025391489267349,0.024781029671430588,-0.00341796875,-0.0322265625,-0.0382080078125,-0.0245361328125,-0.000946044921875,0.022675253450870514,0.03332621231675148,0.029786065220832825,0.011688589118421078,-0.01629638671875,-0.03729248046875,-0.041168212890625,-0.02838134765625,-0.002044677734375,0.027314066886901855,0.044099245220422745,0.044099245220422745,0.026703696697950363,-0.004364013671875,-0.032012939453125,-0.0499267578125,-0.05291748046875,-0.03485107421875,-0.010498046875,0.014069032855331898,0.034424878656864166,0.03714102506637573,0.029541917145252228,0.017151402309536934,0.0014038514345884323,-0.008270263671875,-0.0123291015625,-0.0126953125,-0.01123046875,-0.009368896484375,-0.0079345703125,-0.013824462890625,-0.020111083984375,-0.016510009765625,-0.009185791015625,-0.001373291015625,0.008941923268139362,0.018036440014839172,0.0238044373691082,0.02700887992978096,0.024994660168886185,0.016144290566444397,0.00436414685100317,-0.007568359375,-0.020965576171875,-0.034423828125,-0.042877197265625,-0.042694091796875,-0.03179931640625,-0.00994873046875,0.019501328468322754,0.049653615802526474,0.06976531445980072,0.0712302029132843,0.05142368748784065,0.0139469588175416,-0.02880859375,-0.062255859375,-0.07672119140625,-0.066009521484375,-0.03125,0.012604144401848316,0.045625172555446625,0.05945005640387535,0.05136265233159065,0.020294807851314545,-0.01715087890625,-0.042724609375,-0.0474853515625,-0.024017333984375,0.017059847712516785,0.052858058363199234,0.06915494054555893,0.056764427572488785,0.01553392130881548,-0.03863525390625,-0.082122802734375,-0.097137451171875,-0.078582763671875,-0.027313232421875,0.040894802659749985,0.09454634040594101,0.11371196806430817,0.0949736014008522,0.04141361638903618,-0.027923583984375,-0.084075927734375,-0.1070556640625,-0.089752197265625,-0.0413818359375,0.016388438642024994,0.0633869469165802,0.08056886494159698,0.06060975790023804,0.017639698460698128,-0.03021240234375,-0.061126708984375,-0.06085205078125,-0.03363037109375,0.010864589363336563,0.05459761247038841,0.07687612622976303,0.06534013152122498,0.024964140728116035,-0.0260009765625,-0.07147216796875,-0.089935302734375,-0.074432373046875,-0.03668212890625,0.01428266242146492,0.05816827714443207,0.0796838253736496,0.07443464547395706,0.04129154235124588,0.0009460737928748131,-0.030792236328125,-0.048858642578125,-0.045196533203125,-0.02764892578125,-0.0072021484375,0.007202368229627609,0.006805627606809139,0.00012207403779029846,-0.00634765625,-0.013641357421875,-0.009246826171875,0.010834070853888988,0.029908139258623123,0.0397351011633873,0.04049806296825409,0.028229620307683945,0.0029908139258623123,-0.02679443359375,-0.045928955078125,-0.047454833984375,-0.036285400390625,-0.014892578125,0.010223700664937496,0.02841273322701454,0.03350932151079178,0.027222510427236557,0.018066957592964172,0.012024292722344398,0.009704886004328728,0.008636738173663616,0.007812738418579102,0.006012146361172199,-0.00311279296875,-0.018768310546875,-0.033477783203125,-0.041168212890625,-0.034881591796875,-0.015350341796875,0.013122959062457085,0.04287850484251976,0.056581318378448486,0.04895168915390968,0.028168585151433945,0.00033570360392332077,-0.0277099609375,-0.04461669921875,-0.03985595703125,-0.019073486328125,0.0046388134360313416,0.021088290959596634,0.020996734499931335,0.007721182890236378,-0.011688232421875,-0.030181884765625,-0.034576416015625,-0.019256591796875,0.010956144891679287,0.044892728328704834,0.06665242463350296,0.06247138977050781,0.031311988830566406,-0.01416015625,-0.05889892578125,-0.08709716796875,-0.087677001953125,-0.060333251953125,-0.011871337890625,0.04031495004892349,0.07510605454444885,0.08194220066070557,0.062410350888967514,0.026703696697950363,-0.010986328125,-0.03717041015625,-0.044342041015625,-0.033477783203125,-0.013275146484375,0.0024109622463583946,0.004974517039954662,-0.00506591796875,-0.02142333984375,-0.032135009765625,-0.0255126953125,-0.000946044921875,0.032959990203380585,0.06567583233118057,0.08243049681186676,0.0717490166425705,0.03259376809000969,-0.023681640625,-0.075164794921875,-0.104644775390625,-0.10107421875,-0.061553955078125,-0.001861572265625,0.0557878352701664,0.09198278933763504,0.0951567143201828,0.06671345978975296,0.017059847712516785,-0.03375244140625,-0.065277099609375,-0.067657470703125,-0.043121337890625,-0.005340576171875,0.02935880608856678,0.04693746566772461,0.03881954401731491,0.01275673694908619,-0.017547607421875,-0.040435791015625,-0.044158935546875,-0.025634765625,0.009491256438195705,0.04342783987522125,0.057618945837020874,0.05169835686683655,0.02774132415652275,-0.009765625,-0.04412841796875,-0.06231689453125,-0.058349609375,-0.03277587890625,0.0030518509447574615,0.03500473126769066,0.051942504942417145,0.04855494946241379,0.029786065220832825,0.005218665115535259,-0.0185546875,-0.033050537109375,-0.032470703125,-0.020050048828125,-0.001739501953125,0.012085329741239548,0.015198217704892159,0.011535996571183205,0.00277718435972929,-0.007171630859375,-0.01165771484375,-0.011932373046875,-0.0072021484375,0.002868739888072014,0.010071108117699623,0.010895107872784138,0.007965330965816975,0.003936887718737125,0.00012207403779029846,-0.004241943359375,-0.0068359375,-0.0074462890625,-0.009918212890625,-0.01190185546875,-0.012847900390625,-0.013397216796875,-0.008758544921875,0.0021668141707777977,0.01666310615837574,0.02865688130259514,0.032105471938848495,0.027191992849111557,0.012451551854610443,-0.010345458984375,-0.030914306640625,-0.043426513671875,-0.044708251953125,-0.030426025390625,-0.006103515625,0.017822809517383575,0.03488265722990036,0.04110843315720558,0.03473006188869476,0.018463697284460068,-0.000091552734375,-0.014801025390625,-0.02130126953125,-0.018463134765625,-0.010650634765625,-0.002410888671875,0.0021057771518826485,0.0020447401329874992,0.0001831110566854477,-0.00262451171875,-0.003326416015625,0.0023194067180156708,0.01104770042002201,0.017639698460698128,0.021576587110757828,0.01736503094434738,0.00277718435972929,-0.011993408203125,-0.023040771484375,-0.029510498046875,-0.025421142578125,-0.0128173828125,0.0031128879636526108,0.01812799461185932,0.024750512093305588,0.02139347419142723,0.012878810986876488,0.0030518509447574615,-0.00531005859375,-0.00927734375,-0.00714111328125,-0.002166748046875,0.0010986663401126862,-0.000091552734375,-0.0067138671875,-0.013641357421875,-0.01593017578125,-0.013031005859375,-0.00396728515625,0.008056886494159698,0.01898251287639141,0.02542191743850708,0.021759696304798126,0.008697775192558765,-0.006683349609375,-0.018798828125,-0.02362060546875,-0.018707275390625,-0.006744384765625,0.005401776172220707,0.012390514835715294,0.011658070608973503,0.0024109622463583946,-0.011505126953125,-0.02069091796875,-0.018310546875,-0.004974365234375,0.0157475508749485,0.03585924953222275,0.04452650621533394,0.037690360099077225,0.0159001424908638,-0.016998291015625,-0.0482177734375,-0.06524658203125,-0.06219482421875,-0.03509521484375,0.005645924247801304,0.041779838502407074,0.06631672382354736,0.07083345949649811,0.049592576920986176,0.013214514590799809,-0.0247802734375,-0.0518798828125,-0.05804443359375,-0.043212890625,-0.014312744140625,0.01507614366710186,0.03344828635454178,0.03631702810525894,0.02288888208568096,0.00039674062281847,-0.02142333984375,-0.032257080078125,-0.024871826171875,-0.0045166015625,0.01986755058169365,0.039307840168476105,0.04583880305290222,0.036133915185928345,0.010559404268860817,-0.0201416015625,-0.044647216796875,-0.0576171875,-0.052032470703125,-0.03094482421875,-0.001556396484375,0.029602954164147377,0.05014191195368767,0.05694753676652908,0.050416577607393265,0.02948088012635708,0.0014038514345884323,-0.0262451171875,-0.045379638671875,-0.050628662109375,-0.043975830078125,-0.026031494140625,-0.000885009765625,0.022736288607120514,0.03869746997952461,0.04193243384361267,0.031250953674316406,0.011200292967259884,-0.01214599609375,-0.030303955078125,-0.03546142578125,-0.027191162109375,-0.009613037109375,0.013519699685275555,0.033845026046037674,0.03796502575278282,0.024933621287345886,0.0028992583975195885,-0.022613525390625,-0.041748046875,-0.0458984375,-0.033203125,-0.006103515625,0.024872586131095886,0.04693746566772461,0.05169835686683655,0.03704947233200073,0.00753807183355093,-0.0257568359375,-0.048553466796875,-0.053253173828125,-0.038482666015625,-0.0081787109375,0.02471999265253544,0.047151096165180206,0.05078279972076416,0.033722952008247375,0.004303109832108021,-0.026123046875,-0.04736328125,-0.0491943359375,-0.030517578125,-0.00030517578125,0.029877621680498123,0.047883540391922,0.045686207711696625,0.02624591812491417,-0.001708984375,-0.02862548828125,-0.042633056640625,-0.037841796875,-0.017333984375,0.011719107627868652,0.036103397607803345,0.044984281063079834,0.036805324256420135,0.014191106893122196,-0.014617919921875,-0.037689208984375,-0.04541015625,-0.03533935546875,-0.012786865234375,0.014587847515940666,0.036866359412670135,0.04354991391301155,0.03314310312271118,0.0119022186845541,-0.0115966796875,-0.0286865234375,-0.03375244140625,-0.024658203125,-0.006195068359375,0.010895107872784138,0.02151554822921753,0.02206488326191902,0.010071108117699623,-0.005096435546875,-0.015838623046875,-0.019622802734375,-0.011871337890625,0.0025025177747011185,0.01733451336622238,0.028015991672873497,0.024170659482479095,0.00839259009808302,-0.00994873046875,-0.027801513671875,-0.03662109375,-0.03155517578125,-0.014984130859375,0.008972441777586937,0.029816582798957825,0.0394299142062664,0.03668324649333954,0.020874660462141037,-0.003326416015625,-0.023590087890625,-0.03302001953125,-0.0322265625,-0.01885986328125,0.00317392498254776,0.021149326115846634,0.02841273322701454,0.02456739917397499,0.012054811231791973,-0.00469970703125,-0.020111083984375,-0.0262451171875,-0.01959228515625,-0.004791259765625,0.011200292967259884,0.024262215942144394,0.02847376838326454,0.019592883065342903,0.002471999265253544,-0.0155029296875,-0.028656005859375,-0.03204345703125,-0.023651123046875,-0.00604248046875,0.013794366270303726,0.02841273322701454,0.03360087797045708,0.02844325080513954,0.014252143912017345,-0.00457763671875,-0.021697998046875,-0.031951904296875,-0.032379150390625,-0.024322509765625,-0.011322021484375,0.003265480510890484,0.014313180930912495,0.020111698657274246,0.021088290959596634,0.016083255410194397,0.00906399730592966,0.0037842951714992523,-0.001495361328125,-0.005828857421875,-0.0067138671875,-0.007415771484375,-0.009735107421875,-0.009613037109375,-0.0079345703125,-0.008331298828125,-0.0067138671875,-0.002777099609375,0.0005798516795039177,0.006897183135151863,0.013519699685275555,0.0159916989505291,0.01760917901992798,0.01736503094434738,0.012054811231791973,0.0028077028691768646,-0.0098876953125,-0.022308349609375,-0.030670166015625,-0.0350341796875,-0.031280517578125,-0.01708984375,0.0019226660951972008,0.02221747487783432,0.040131840854883194,0.0474257618188858,0.04272591322660446,0.02856532484292984,0.005310220643877983,-0.019989013671875,-0.037994384765625,-0.044952392578125,-0.040618896484375,-0.025848388671875,-0.003936767578125,0.015564439818263054,0.027253028005361557,0.031311988830566406,0.024811547249555588,0.011749626137316227,0.0005188146606087685,-0.0074462890625,-0.01080322265625,-0.008331298828125,-0.002777099609375,0.002075258642435074,0.002624591812491417,-0.00103759765625,-0.006561279296875,-0.012786865234375,-0.014923095703125,-0.010986328125,-0.005035400390625,0.0040894802659749985,0.014557329006493092,0.019501328468322754,0.020386364310979843,0.016846217215061188,0.008423108607530594,0.0008239997550845146,-0.006195068359375,-0.012847900390625,-0.01666259765625,-0.01861572265625,-0.018768310546875,-0.016357421875,-0.01031494140625,-0.000396728515625,0.012787255458533764,0.02691732533276081,0.03631702810525894,0.03787346929311752,0.028778955340385437,0.00799584947526455,-0.016571044921875,-0.038116455078125,-0.05108642578125,-0.048828125,-0.03143310546875,-0.00286865234375,0.028015991672873497,0.04934842884540558,0.05499435216188431,0.04354991391301155,0.017975401133298874,-0.011932373046875,-0.03509521484375,-0.04425048828125,-0.036773681640625,-0.014678955078125,0.011810663156211376,0.03006073087453842,0.03567613661289215,0.027253028005361557,0.005615405738353729,-0.018951416015625,-0.034698486328125,-0.036376953125,-0.0233154296875,0.00009155552834272385,0.023255104199051857,0.036133915185928345,0.03433332219719887,0.018738364800810814,-0.004058837890625,-0.02532958984375,-0.03570556640625,-0.030242919921875,-0.01275634765625,0.008758812211453915,0.024994660168886185,0.02853480726480484,0.017273476347327232,-0.00360107421875,-0.024383544921875,-0.0362548828125,-0.0322265625,-0.0120849609375,0.01553392130881548,0.038453321903944016,0.04602191224694252,0.03488265722990036,0.007202368229627609,-0.028228759765625,-0.055084228515625,-0.063140869140625,-0.0501708984375,-0.017333984375,0.0238044373691082,0.056001465767621994,0.06796471774578094,0.05621509253978729,0.02462843805551529,-0.014617919921875,-0.046905517578125,-0.061798095703125,-0.053680419921875,-0.02593994140625,0.00866725668311119,0.03726309910416603,0.04995879903435707,0.04278694838285446,0.020935697481036186,-0.005615234375,-0.02703857421875,-0.034515380859375,-0.02532958984375,-0.00592041015625,0.015625476837158203,0.030457472428679466,0.03103732317686081,0.020294807851314545,0.002685628831386566,-0.01641845703125,-0.026397705078125,-0.023956298828125,-0.011688232421875,0.006805627606809139,0.023407697677612305,0.031281471252441406,0.028260139748454094,0.015381328761577606,-0.002349853515625,-0.01727294921875,-0.024139404296875,-0.022064208984375,-0.012481689453125,0.0017700735479593277,0.0158391073346138,0.023255104199051857,0.022400585934519768,0.015320291742682457,0.0032044434919953346,-0.00921630859375,-0.016937255859375,-0.01910400390625,-0.014007568359375,-0.00286865234375,0.009796441532671452,0.020813623443245888,0.025208288803696632,0.020264290273189545,0.007782219909131527,-0.009613037109375,-0.026702880859375,-0.038177490234375,-0.038299560546875,-0.02325439453125,0.001342814415693283,0.02771080657839775,0.047212135046720505,0.05047761648893356,0.03595080226659775,0.00714133121073246,-0.02813720703125,-0.056549072265625,-0.06756591796875,-0.055816650390625,-0.02301025390625,0.017700735479593277,0.05151524394750595,0.06769005209207535,0.057588428258895874,0.023987548425793648,-0.0174560546875,-0.052520751953125,-0.068878173828125,-0.058441162109375,-0.025970458984375,0.01580858789384365,0.05008087307214737,0.062288276851177216,0.050263985991477966,0.01919614151120186,-0.01995849609375,-0.05010986328125,-0.0587158203125,-0.0440673828125,-0.013153076171875,0.02136295661330223,0.044801171869039536,0.047883540391922,0.03082369454205036,0.0014954069629311562,-0.025848388671875,-0.0401611328125,-0.0386962890625,-0.021240234375,0.005218665115535259,0.02551347389817238,0.0319223627448082,0.025177769362926483,0.007721182890236378,-0.012542724609375,-0.02447509765625,-0.023193359375,-0.01275634765625,0.0012207403779029846,0.013977477326989174,0.018097475171089172,0.011230811476707458,-0.000213623046875,-0.009368896484375,-0.011322021484375,-0.00396728515625,0.008301034569740295,0.017975401133298874,0.019440289586782455,0.011261329986155033,-0.0045166015625,-0.02203369140625,-0.031494140625,-0.026397705078125,-0.009063720703125,0.014038514345884323,0.03360087797045708,0.0399182103574276,0.029114658012986183,0.0058290353044867516,-0.0189208984375,-0.0361328125,-0.038726806640625,-0.022796630859375,0.00357066560536623,0.026764731854200363,0.037751395255327225,0.0315866582095623,0.0098574785515666,-0.01702880859375,-0.0361328125,-0.03997802734375,-0.0269775390625,-0.00079345703125,0.02612384408712387,0.0399487279355526,0.036072880029678345,0.01669362559914589,-0.010345458984375,-0.032318115234375,-0.0390625,-0.028106689453125,-0.00537109375,0.018646810203790665,0.032837916165590286,0.02935880608856678,0.0099795525893569,-0.014617919921875,-0.032470703125,-0.03466796875,-0.0185546875,0.00839259009808302,0.03338725119829178,0.04522842913866043,0.03744621202349663,0.01077303383499384,-0.02325439453125,-0.04779052734375,-0.052581787109375,-0.0347900390625,0.00027466658502817154,0.03588976711034775,0.056001465767621994,0.05392620712518692,0.03012176975607872,-0.00628662109375,-0.038421630859375,-0.05157470703125,-0.041290283203125,-0.012786865234375,0.021088290959596634,0.04379406198859215,0.04467909783124924,0.024964140728116035,-0.00628662109375,-0.034423828125,-0.04388427734375,-0.0302734375,-0.000518798828125,0.03259376809000969,0.05249183624982834,0.04821924492716789,0.020264290273189545,-0.019500732421875,-0.05224609375,-0.0615234375,-0.04266357421875,-0.003021240234375,0.04272591322660446,0.07339701801538467,0.0715964213013649,0.037629321217536926,-0.014312744140625,-0.06390380859375,-0.08941650390625,-0.0782470703125,-0.03375244140625,0.02523880824446678,0.07446516305208206,0.09414960443973541,0.07477034628391266,0.0238044373691082,-0.037017822265625,-0.082061767578125,-0.092010498046875,-0.064239501953125,-0.010345458984375,0.04818872734904289,0.08487197756767273,0.08407849073410034,0.04702902212738991,-0.009735107421875,-0.061737060546875,-0.087799072265625,-0.076568603515625,-0.03216552734375,0.025971252471208572,0.07306130975484848,0.08978545665740967,0.07058931142091751,0.02301095612347126,-0.03424072265625,-0.076416015625,-0.088165283203125,-0.066680908203125,-0.0203857421875,0.03091524913907051,0.06735435128211975,0.07699819654226303,0.05728324130177498,0.017700735479593277,-0.02410888671875,-0.0528564453125,-0.060546875,-0.046142578125,-0.01776123046875,0.01235999632626772,0.03500473126769066,0.041688285768032074,0.032258063554763794,0.016113772988319397,-0.00146484375,-0.01605224609375,-0.022369384765625,-0.02154541015625,-0.015899658203125,-0.007415771484375,0.0014038514345884323,0.009430219419300556,0.014496291987597942,0.01654103212058544,0.015350810252130032,0.009247108362615108,-0.00006103515625,-0.009979248046875,-0.016937255859375,-0.0174560546875,-0.011199951171875,-0.000213623046875,0.011261329986155033,0.01889095827937126,0.01818903163075447,0.008056886494159698,-0.005767822265625,-0.017608642578125,-0.02142333984375,-0.01361083984375,0.0017090365290641785,0.018738364800810814,0.028992583975195885,0.024933621287345886,0.00878933072090149,-0.013519287109375,-0.03350830078125,-0.039703369140625,-0.0277099609375,-0.001922607421875,0.028290659189224243,0.05011139065027237,0.052827540785074234,0.03314310312271118,-0.002197265625,-0.037994384765625,-0.05908203125,-0.05682373046875,-0.0301513671875,0.011017181910574436,0.04864650219678879,0.06671345978975296,0.05774101987481117,0.024323251098394394,-0.02020263671875,-0.0565185546875,-0.069427490234375,-0.05401611328125,-0.0157470703125,0.029969176277518272,0.062959685921669,0.06936857104301453,0.04849391058087349,0.009369182400405407,-0.03326416015625,-0.061859130859375,-0.0643310546875,-0.04132080078125,-0.0037841796875,0.0317392498254776,0.050447095185518265,0.04602191224694252,0.021668141707777977,-0.01068115234375,-0.035614013671875,-0.0423583984375,-0.0296630859375,-0.00439453125,0.022675253450870514,0.03830073028802872,0.03332621231675148,0.012329477816820145,-0.013641357421875,-0.034820556640625,-0.041351318359375,-0.029541015625,-0.003997802734375,0.0236823633313179,0.04034546762704849,0.04107791185379028,0.025971252471208572,-0.000457763671875,-0.02532958984375,-0.037353515625,-0.0347900390625,-0.020538330078125,0.00015259254723787308,0.018524736166000366,0.026429029181599617,0.022003844380378723,0.010681478306651115,-0.0006103515625,-0.008270263671875,-0.0091552734375,-0.0037841796875,0.0025635547935962677,0.0056764427572488785,0.0033875545486807823,-0.003814697265625,-0.0118408203125,-0.0155029296875,-0.01177978515625,-0.00225830078125,0.00918607134371996,0.01895199343562126,0.02224799245595932,0.01751762442290783,0.007385479286313057,-0.00408935546875,-0.011077880859375,-0.011749267578125,-0.008453369140625,-0.003021240234375,0.002075258642435074,0.0035096285864710808,0.0007019257172942162,-0.0023193359375,-0.00238037109375,0.00119022186845541,0.009491256438195705,0.017944883555173874,0.01895199343562126,0.011871700175106525,-0.001556396484375,-0.018524169921875,-0.03131103515625,-0.033172607421875,-0.02215576171875,-0.001007080078125,0.021820735186338425,0.03512680530548096,0.033021025359630585,0.017761772498488426,-0.00634765625,-0.029876708984375,-0.039642333984375,-0.030487060546875,-0.00701904296875,0.020813623443245888,0.040742211043834686,0.04284798726439476,0.023499252274632454,-0.010498046875,-0.04400634765625,-0.063751220703125,-0.059234619140625,-0.02813720703125,0.01663258671760559,0.056794945150613785,0.07748649269342422,0.06961271911859512,0.03405865654349327,-0.0155029296875,-0.058502197265625,-0.07958984375,-0.070709228515625,-0.03399658203125,0.0138248847797513,0.05328531563282013,0.0712607204914093,0.061494797468185425,0.02786339819431305,-0.01336669921875,-0.04345703125,-0.05279541015625,-0.039642333984375,-0.009765625,0.021179845556616783,0.03811761736869812,0.03552354499697685,0.01553392130881548,-0.012664794921875,-0.034698486328125,-0.0401611328125,-0.02685546875,-0.000091552734375,0.02694784477353096,0.04119998961687088,0.036927394568920135,0.0158391073346138,-0.0126953125,-0.036285400390625,-0.0435791015625,-0.0296630859375,-0.0029296875,0.025086214765906334,0.043916136026382446,0.042451247572898865,0.02072206884622574,-0.011627197265625,-0.04052734375,-0.05267333984375,-0.0438232421875,-0.016082763671875,0.02078310400247574,0.05059968680143356,0.060701314359903336,0.04626606032252312,0.012848292477428913,-0.026611328125,-0.057220458984375,-0.066314697265625,-0.050872802734375,-0.01629638671875,0.02462843805551529,0.05645924061536789,0.06857509166002274,0.056581318378448486,0.02548295632004738,-0.01361083984375,-0.04901123046875,-0.068267822265625,-0.065704345703125,-0.044708251953125,-0.012237548828125,0.02294991910457611,0.05093539133667946,0.06262397766113281,0.05728324130177498,0.03875850886106491,0.009033478796482086,-0.0242919921875,-0.05126953125,-0.06561279296875,-0.063934326171875,-0.045562744140625,-0.0133056640625,0.024903103709220886,0.05780205875635147,0.07599108666181564,0.07339701801538467,0.048829615116119385,0.008758812211453915,-0.034454345703125,-0.067169189453125,-0.07843017578125,-0.0638427734375,-0.028106689453125,0.01663258671760559,0.05496383458375931,0.07293923944234848,0.06460768729448318,0.03396710008382797,-0.006988525390625,-0.042022705078125,-0.05816650390625,-0.04962158203125,-0.01947021484375,0.018555253744125366,0.04828028380870819,0.05807672441005707,0.04376354068517685,0.010132145136594772,-0.028839111328125,-0.056488037109375,-0.0616455078125,-0.04217529296875,-0.005340576171875,0.034424878656864166,0.060823388397693634,0.0632038339972496,0.04147465527057648,0.005401776172220707,-0.031158447265625,-0.054229736328125,-0.05377197265625,-0.031494140625,0.0014038514345884323,0.031403545290231705,0.04614398628473282,0.04065065458416939,0.018066957592964172,-0.0111083984375,-0.033233642578125,-0.038818359375,-0.02557373046875,0.0001831110566854477,0.027375102043151855,0.04339732229709625,0.039979249238967896,0.019440289586782455,-0.00982666015625,-0.037353515625,-0.051177978515625,-0.045166015625,-0.023284912109375,0.005859553813934326,0.0316782146692276,0.044007688760757446,0.0395825058221817,0.02224799245595932,-0.000457763671875,-0.019927978515625,-0.030181884765625,-0.02947998046875,-0.020599365234375,-0.009124755859375,-0.000213623046875,0.0039674062281847,0.005127109587192535,0.005798516795039177,0.008087405003607273,0.01348918117582798,0.019501328468322754,0.02069154940545559,0.014923551119863987,0.002471999265253544,-0.0145263671875,-0.029266357421875,-0.0345458984375,-0.026702880859375,-0.008056640625,0.0139469588175416,0.031525619328022,0.037629321217536926,0.02871791645884514,0.008209479041397572,-0.01446533203125,-0.029266357421875,-0.03057861328125,-0.01715087890625,0.0050355540588498116,0.024018067866563797,0.031525619328022,0.0238959938287735,0.002685628831386566,-0.02239990234375,-0.03955078125,-0.039703369140625,-0.02105712890625,0.008636738173663616,0.03802606463432312,0.055146947503089905,0.05157627910375595,0.028229620307683945,-0.005889892578125,-0.03729248046875,-0.052276611328125,-0.0462646484375,-0.024169921875,0.005462813191115856,0.029969176277518272,0.03784295171499252,0.02780236303806305,0.006378368474543095,-0.01519775390625,-0.02569580078125,-0.020294189453125,-0.001068115234375,0.02227851189672947,0.03735465556383133,0.035340435802936554,0.013122959062457085,-0.020416259765625,-0.04962158203125,-0.062896728515625,-0.05328369140625,-0.020599365234375,0.022614214569330215,0.05771050229668617,0.07193212956190109,0.059877313673496246,0.024292733520269394,-0.020477294921875,-0.0555419921875,-0.068511962890625,-0.056884765625,-0.025054931640625,0.01388592179864645,0.04187139496207237,0.048890650272369385,0.03473006188869476,0.0068666646257042885,-0.02056884765625,-0.0347900390625,-0.029388427734375,-0.007904052734375,0.018707845360040665,0.038453321903944016,0.04062013700604439,0.02310251072049141,-0.0047607421875,-0.031585693359375,-0.04669189453125,-0.041259765625,-0.016876220703125,0.014252143912017345,0.03912472724914551,0.04901272803544998,0.03881954401731491,0.012115848250687122,-0.01715087890625,-0.03656005859375,-0.040435791015625,-0.027191162109375,-0.002838134765625,0.020142216235399246,0.03097628802061081,0.025910213589668274,0.008972441777586937,-0.011810302734375,-0.026123046875,-0.02593994140625,-0.01171875,0.01037629321217537,0.030365917831659317,0.036805324256420135,0.026032287627458572,0.0037537766620516777,-0.021697998046875,-0.04071044921875,-0.043304443359375,-0.027435302734375,-0.00091552734375,0.02471999265253544,0.04065065458416939,0.04049806296825409,0.024140141904354095,0.0006714072078466415,-0.02020263671875,-0.031829833984375,-0.029815673828125,-0.01708984375,-0.00225830078125,0.0076601458713412285,0.008758812211453915,0.00158696249127388,-0.007232666015625,-0.01025390625,-0.004730224609375,0.007599108852446079,0.022461622953414917,0.030793175101280212,0.02450636401772499,0.004119998775422573,-0.023681640625,-0.048126220703125,-0.057220458984375,-0.04510498046875,-0.013916015625,0.02548295632004738,0.05743583291769028,0.06869716197252274,0.05383465066552162,0.01834162324666977,-0.025238037109375,-0.06024169921875,-0.0706787109375,-0.053741455078125,-0.017578125,0.025208288803696632,0.05639820545911789,0.06195257604122162,0.04113895073533058,0.003662221133708954,-0.03485107421875,-0.05877685546875,-0.057342529296875,-0.030914306640625,0.00952177494764328,0.0476393923163414,0.06720175594091415,0.06131168454885483,0.033021025359630585,-0.006805419921875,-0.042694091796875,-0.0615234375,-0.05609130859375,-0.030487060546875,0.0021668141707777977,0.030457472428679466,0.04501480236649513,0.040742211043834686,0.022766808047890663,0.0016479995101690292,-0.013153076171875,-0.01715087890625,-0.010986328125,0.00015259254723787308,0.007599108852446079,0.005706961266696453,-0.006134033203125,-0.0224609375,-0.033447265625,-0.03314208984375,-0.018798828125,0.0074159977957606316,0.03561510145664215,0.054353464394807816,0.0558183528482914,0.037629321217536926,0.005890072323381901,-0.029022216796875,-0.056121826171875,-0.064849853515625,-0.052337646484375,-0.024871826171875,0.007477034814655781,0.03521835803985596,0.04928739368915558,0.04541154205799103,0.02850428782403469,0.006439405493438244,-0.013397216796875,-0.025360107421875,-0.02691650390625,-0.0191650390625,-0.008392333984375,-0.00018310546875,0.004028443247079849,0.0040894802659749985,0.0016479995101690292,-0.000091552734375,0.001037629321217537,0.005645924247801304,0.011688589118421078,0.015289773233234882,0.013580736704170704,0.007354960776865482,-0.001739501953125,-0.01123046875,-0.0166015625,-0.0157470703125,-0.0091552734375,0.0008239997550845146,0.00991851557046175,0.01467940304428339,0.013183996081352234,0.006591998040676117,-0.00103759765625,-0.0072021484375,-0.008697509765625,-0.003265380859375,0.005920590832829475,0.013733329251408577,0.016235847026109695,0.012024292722344398,0.0014954069629311562,-0.01348876953125,-0.0264892578125,-0.030609130859375,-0.024688720703125,-0.010162353515625,0.009949034079909325,0.029084138572216034,0.03891110047698021,0.03576769307255745,0.02142399363219738,-0.0001220703125,-0.022064208984375,-0.036346435546875,-0.03753662109375,-0.0255126953125,-0.006072998046875,0.013763847760856152,0.027558214962482452,0.029908139258623123,0.02069154940545559,0.004943998530507088,-0.01123046875,-0.0216064453125,-0.0213623046875,-0.01190185546875,0.0019226660951972008,0.013977477326989174,0.017883846536278725,0.01223792228847742,-0.001129150390625,-0.016998291015625,-0.02734375,-0.027069091796875,-0.015106201171875,0.004425183869898319,0.024292733520269394,0.037690360099077225,0.03808709979057312,0.024323251098394394,0.0024414807558059692,-0.02032470703125,-0.0362548828125,-0.03875732421875,-0.0274658203125,-0.007080078125,0.01461836602538824,0.03003021329641342,0.03421124815940857,0.02523880824446678,0.007110812701284885,-0.011138916015625,-0.022705078125,-0.024993896484375,-0.016632080078125,-0.00048828125,0.015259254723787308,0.02468947321176529,0.02539139986038208,0.016510512679815292,0.0015564439818263054,-0.012847900390625,-0.021942138671875,-0.022796630859375,-0.0146484375,-0.0008544921875,0.013122959062457085,0.022644734010100365,0.024811547249555588,0.0199591051787138,0.01025421917438507,-0.00164794921875,-0.0115966796875,-0.01690673828125,-0.016998291015625,-0.012420654296875,-0.005279541015625,0.003082369454205036,0.01025421917438507,0.014038514345884323,0.014770958572626114,0.012451551854610443,0.00714133121073246,0,-0.00701904296875,-0.01202392578125,-0.01422119140625,-0.012237548828125,-0.006805419921875,-0.00091552734375,0.004425183869898319,0.0076601458713412285,0.006775109097361565,0.0021973326802253723,-0.00396728515625,-0.008758544921875,-0.0108642578125,-0.009429931640625,-0.004058837890625,0.002929776906967163,0.009765923023223877,0.014130069874227047,0.013061922043561935,0.008056886494159698,0.001434369944036007,-0.006622314453125,-0.01318359375,-0.01531982421875,-0.013763427734375,-0.010345458984375,-0.0047607421875,0.002533036284148693,0.008423108607530594,0.012451551854610443,0.0158696249127388,0.016449477523565292,0.012665181420743465,0.006408886983990669,-0.001434326171875,-0.011474609375,-0.020172119140625,-0.02294921875,-0.020355224609375,-0.01263427734375,0.0008239997550845146,0.016083255410194397,0.027344584465026855,0.032166510820388794,0.028870509937405586,0.016235847026109695,-0.001190185546875,-0.016876220703125,-0.028167724609375,-0.031768798828125,-0.02459716796875,-0.010162353515625,0.005523850210011005,0.018799401819705963,0.026612140238285065,0.025696584954857826,0.017975401133298874,0.008362071588635445,-0.00213623046875,-0.0107421875,-0.013641357421875,-0.01287841796875,-0.009918212890625,-0.004974365234375,-0.00048828125,0.0023499252274632454,0.0037842951714992523,0.004303109832108021,0.0032349620014429092,0.0006103701889514923,-0.001434326171875,-0.003509521484375,-0.0054931640625,-0.006500244140625,-0.00628662109375,-0.00384521484375,-0.000762939453125,0.0012512588873505592,0.0020447401329874992,0.0007324442267417908,-0.002044677734375,-0.0059814453125,-0.009063720703125,-0.008636474609375,-0.00518798828125,0.0007019257172942162,0.007110812701284885,0.011230811476707458,0.01229895930737257,0.009247108362615108,0.00198370311409235,-0.006927490234375,-0.014007568359375,-0.017059326171875,-0.01641845703125,-0.011993408203125,-0.004608154296875,0.0026551103219389915,0.007751701399683952,0.009613330475986004,0.009033478796482086,0.007446516305208206,0.005859553813934326,0.005859553813934326,0.006042664870619774,0.0046388134360313416,0.0025940733030438423,0.00009155552834272385,-0.00445556640625,-0.010284423828125,-0.013336181640625,-0.012664794921875,-0.008880615234375,-0.001678466796875,0.006591998040676117,0.01348918117582798,0.01837214268743992,0.019989624619483948,0.016968291252851486,0.010345774702727795,0.0028382213786244392,-0.004638671875,-0.012481689453125,-0.01812744140625,-0.019866943359375,-0.01873779296875,-0.013824462890625,-0.004608154296875,0.006775109097361565,0.017273476347327232,0.02471999265253544,0.02703939937055111,0.022492140531539917,0.011658070608973503,-0.003753662109375,-0.019775390625,-0.032257080078125,-0.0377197265625,-0.033843994140625,-0.023468017578125,-0.008636474609375,0.008575701154768467,0.02206488326191902,0.028382213786244392,0.02771080657839775,0.02053895592689514,0.009704886004328728,-0.00177001953125,-0.013275146484375,-0.021331787109375,-0.0235595703125,-0.02154541015625,-0.0159912109375,-0.00811767578125,0.00039674062281847,0.008880886249244213,0.015289773233234882,0.017731253057718277,0.015564439818263054,0.010528885759413242,0.004211554303765297,-0.002197265625,-0.0067138671875,-0.008148193359375,-0.006439208984375,-0.00323486328125,-0.001556396484375,-0.00238037109375,-0.004486083984375,-0.00732421875,-0.00946044921875,-0.00750732421875,-0.000274658203125,0.010437330231070518,0.022034363821148872,0.03003021329641342,0.030426952987909317,0.020844142884016037,0.002288888208568096,-0.019317626953125,-0.038604736328125,-0.04913330078125,-0.04498291015625,-0.026824951171875,0.00079348124563694,0.03088473156094551,0.05374309420585632,0.062227241694927216,0.052858058363199234,0.028107546269893646,-0.003692626953125,-0.0333251953125,-0.05194091796875,-0.053466796875,-0.0384521484375,-0.012908935546875,0.01428266242146492,0.034485913813114166,0.04141361638903618,0.03393658250570297,0.016144290566444397,-0.0050048828125,-0.02117919921875,-0.026611328125,-0.020660400390625,-0.006103515625,0.009704886004328728,0.019287697970867157,0.01901303231716156,0.008148442022502422,-0.009552001953125,-0.025726318359375,-0.032989501953125,-0.027618408203125,-0.010833740234375,0.011932737194001675,0.03311258181929588,0.04422131925821304,0.040070801973342896,0.02154606766998768,-0.004730224609375,-0.02978515625,-0.0443115234375,-0.042999267578125,-0.02752685546875,-0.003662109375,0.020111698657274246,0.03549302741885185,0.03799554333090782,0.02685628831386566,0.008056886494159698,-0.0087890625,-0.018524169921875,-0.019622802734375,-0.011688232421875,0.0008545182645320892,0.00912503432482481,0.009155552834272385,0.002868739888072014,-0.008148193359375,-0.0189208984375,-0.02197265625,-0.015625,-0.00238037109375,0.013214514590799809,0.02545243687927723,0.029114658012986183,0.021790215745568275,0.006897183135151863,-0.009796142578125,-0.022735595703125,-0.02703857421875,-0.022064208984375,-0.0120849609375,-0.001861572265625,0.006561479531228542,0.010956144891679287,0.010559404268860817,0.009033478796482086,0.010071108117699623,0.013000885024666786,0.01501510664820671,0.013855403289198875,0.005981627851724625,-0.0087890625,-0.025238037109375,-0.037017822265625,-0.0382080078125,-0.024810791015625,0.001739555038511753,0.032288581132888794,0.054292429238557816,0.059083834290504456,0.042512282729148865,0.007446516305208206,-0.03302001953125,-0.062530517578125,-0.07086181640625,-0.053741455078125,-0.015045166015625,0.02945036068558693,0.06164738908410072,0.07003998011350632,0.05142368748784065,0.01223792228847742,-0.03125,-0.060638427734375,-0.06488037109375,-0.042877197265625,-0.003509521484375,0.03567613661289215,0.05740531533956528,0.05380413308739662,0.02685628831386566,-0.012176513671875,-0.044647216796875,-0.055023193359375,-0.039703369140625,-0.0047607421875,0.03579821065068245,0.06274605542421341,0.0632343515753746,0.03781243413686752,-0.0045166015625,-0.0479736328125,-0.07232666015625,-0.0662841796875,-0.034088134765625,0.011688589118421078,0.05404828116297722,0.07547227293252945,0.06701864302158356,0.03250221163034439,-0.012542724609375,-0.049713134765625,-0.065338134765625,-0.0540771484375,-0.022430419921875,0.0159001424908638,0.04467909783124924,0.052034057676792145,0.03781243413686752,0.010223700664937496,-0.017333984375,-0.0325927734375,-0.030426025390625,-0.013031005859375,0.009826960042119026,0.026520583778619766,0.029053620994091034,0.0159611813724041,-0.005462646484375,-0.0244140625,-0.031890869140625,-0.02362060546875,-0.00360107421875,0.018463697284460068,0.032868433743715286,0.03259376809000969,0.017120882868766785,-0.00701904296875,-0.02764892578125,-0.0345458984375,-0.025970458984375,-0.00494384765625,0.019287697970867157,0.03518784046173096,0.035340435802936554,0.01916562393307686,-0.005218505859375,-0.027191162109375,-0.0372314453125,-0.0296630859375,-0.007781982421875,0.01892147585749626,0.03866695240139961,0.04199346899986267,0.02771080657839775,0.0014648884534835815,-0.025634765625,-0.041748046875,-0.039581298828125,-0.0205078125,0.00555436871945858,0.02841273322701454,0.03888057917356491,0.031311988830566406,0.010742515325546265,-0.012542724609375,-0.02899169921875,-0.031463623046875,-0.02001953125,-0.000762939453125,0.01672414317727089,0.02291940152645111,0.01474044006317854,-0.003570556640625,-0.02392578125,-0.036041259765625,-0.031890869140625,-0.012237548828125,0.014404736459255219,0.03790398687124252,0.04843287542462349,0.039216283708810806,0.0138248847797513,-0.01715087890625,-0.0426025390625,-0.052520751953125,-0.04266357421875,-0.01617431640625,0.01660206913948059,0.04263435676693916,0.05322428047657013,0.04541154205799103,0.022858362644910812,-0.0047607421875,-0.02728271484375,-0.037628173828125,-0.03369140625,-0.0186767578125,-0.000244140625,0.014374217949807644,0.021149326115846634,0.01910458691418171,0.011688589118421078,0.003326517529785633,-0.002899169921875,-0.004913330078125,-0.003753662109375,-0.001953125,-0.001922607421875,-0.00457763671875,-0.008056640625,-0.010955810546875,-0.011474609375,-0.00775146484375,-0.001678466796875,0.00317392498254776,0.004303109832108021,0.00277718435972929,-0.00018310546875,-0.004302978515625,-0.005828857421875,-0.00201416015625,0.004791405983269215,0.009308145381510258,0.00906399730592966,0.0032959990203380585,-0.008575439453125,-0.022552490234375,-0.03070068359375,-0.027618408203125,-0.012939453125,0.009674367494881153,0.03332621231675148,0.04895168915390968,0.04904324561357498,0.0319223627448082,0.0019531846046447754,-0.03131103515625,-0.05615234375,-0.063262939453125,-0.050079345703125,-0.021453857421875,0.0139469588175416,0.04455702379345894,0.059907834976911545,0.05648976191878319,0.03640858083963394,0.00827051606029272,-0.01702880859375,-0.033355712890625,-0.037200927734375,-0.029205322265625,-0.01544189453125,-0.001983642578125,0.0070192571729421616,0.010040589608252048,0.008423108607530594,0.005340739153325558,0.005340739153325558,0.00878933072090149,0.012543107382953167,0.014526810497045517,0.01184118166565895,0.0027466658502817154,-0.01007080078125,-0.021759033203125,-0.02783203125,-0.0260009765625,-0.0157470703125,0.0008545182645320892,0.01745658740401268,0.02682577073574066,0.027466658502817154,0.02148503065109253,0.0098574785515666,-0.003509521484375,-0.012237548828125,-0.013427734375,-0.00872802734375,-0.001617431640625,0.0039674062281847,0.005462813191115856,0.0021973326802253723,-0.0042724609375,-0.009918212890625,-0.011383056640625,-0.00738525390625,0.0013733329251408577,0.012268440797924995,0.020050659775733948,0.020966216921806335,0.015655994415283203,0.006164738908410072,-0.0048828125,-0.01446533203125,-0.018768310546875,-0.016754150390625,-0.011962890625,-0.00653076171875,-0.00140380859375,0.0014038514345884323,0.0020447401329874992,0.002929776906967163,0.005249183624982834,0.008026367984712124,0.01077303383499384,0.011322367005050182,0.00634784996509552,-0.003631591796875,-0.016021728515625,-0.028106689453125,-0.035186767578125,-0.0325927734375,-0.0203857421875,-0.002410888671875,0.01663258671760559,0.030701620504260063,0.03402813896536827,0.02612384408712387,0.010803552344441414,-0.007843017578125,-0.023406982421875,-0.028900146484375,-0.023773193359375,-0.011444091796875,0.004608294926583767,0.019226660951972008,0.02624591812491417,0.023346658796072006,0.013702810741961002,0.0006714072078466415,-0.0111083984375,-0.015106201171875,-0.0108642578125,-0.0015869140625,0.011291848495602608,0.023407697677612305,0.028229620307683945,0.0239265114068985,0.013611255213618279,-0.000335693359375,-0.01629638671875,-0.02801513671875,-0.0316162109375,-0.0283203125,-0.017333984375,-0.000091552734375,0.01678518019616604,0.029572434723377228,0.03640858083963394,0.03320413827896118,0.019379254430532455,-0.00048828125,-0.0218505859375,-0.0399169921875,-0.04852294921875,-0.043182373046875,-0.026092529296875,-0.002716064453125,0.02212591841816902,0.0398266538977623,0.04339732229709625,0.03415021300315857,0.0157780684530735,-0.00604248046875,-0.02276611328125,-0.029144287109375,-0.02496337890625,-0.012451171875,0.0036927396431565285,0.015686513856053352,0.018005920574069023,0.012115848250687122,0.001037629321217537,-0.010528564453125,-0.01593017578125,-0.01220703125,-0.000732421875,0.013306070119142532,0.02304147556424141,0.024109622463583946,0.014801477082073689,-0.00177001953125,-0.0191650390625,-0.030426025390625,-0.02996826171875,-0.018402099609375,-0.000457763671875,0.017029328271746635,0.02615436166524887,0.023621326312422752,0.010925626382231712,-0.006561279296875,-0.02093505859375,-0.025115966796875,-0.016571044921875,0.00012207403779029846,0.01739555038511753,0.028229620307683945,0.02630695514380932,0.010803552344441414,-0.012420654296875,-0.033660888671875,-0.043975830078125,-0.03851318359375,-0.0169677734375,0.012817773967981339,0.03906369209289551,0.052735984325408936,0.04910428076982498,0.02868739888072014,-0.001434326171875,-0.029937744140625,-0.04730224609375,-0.04852294921875,-0.03350830078125,-0.009185791015625,0.014313180930912495,0.03021332435309887,0.035248879343271255,0.027924437075853348,0.012543107382953167,-0.002044677734375,-0.010711669921875,-0.012725830078125,-0.009307861328125,-0.003448486328125,0.0006408886983990669,0,-0.003326416015625,-0.005218505859375,-0.004302978515625,0.00079348124563694,0.010071108117699623,0.01910458691418171,0.023468732833862305,0.020020142197608948,0.009002960287034512,-0.00628662109375,-0.021392822265625,-0.02935791015625,-0.025909423828125,-0.012939453125,0.004852443002164364,0.021118808537721634,0.029206212610006332,0.026032287627458572,0.012573625892400742,-0.0064697265625,-0.023406982421875,-0.031829833984375,-0.028717041015625,-0.01513671875,0.0027466658502817154,0.01913510635495186,0.02923673205077648,0.02850428782403469,0.017792291939258575,0.0026551103219389915,-0.0115966796875,-0.02117919921875,-0.022796630859375,-0.01593017578125,-0.0042724609375,0.00787377543747425,0.017181921750307083,0.021698661148548126,0.02075258642435074,0.014801477082073689,0.006378368474543095,-0.002166748046875,-0.009002685546875,-0.01312255859375,-0.0133056640625,-0.009033203125,-0.002532958984375,0.004791405983269215,0.011535996571183205,0.01422162540256977,0.010864589363336563,0.002227851189672947,-0.008636474609375,-0.018157958984375,-0.023712158203125,-0.0223388671875,-0.013031005859375,0.0009460737928748131,0.015106662176549435,0.024353770539164543,0.02386547438800335,0.01315347757190466,-0.004486083984375,-0.023345947265625,-0.03570556640625,-0.0369873046875,-0.02581787109375,-0.005218505859375,0.016479995101690292,0.0317087322473526,0.03564561903476715,0.026429029181599617,0.008148442022502422,-0.012298583984375,-0.027435302734375,-0.03082275390625,-0.02239990234375,-0.0059814453125,0.01223792228847742,0.0236823633313179,0.02462843805551529,0.016266364604234695,0.0017700735479593277,-0.012451171875,-0.019805908203125,-0.016693115234375,-0.00469970703125,0.01031525619328022,0.02307199314236641,0.02853480726480484,0.022827845066785812,0.007904293946921825,-0.009307861328125,-0.022735595703125,-0.0284423828125,-0.023895263671875,-0.0101318359375,0.007202368229627609,0.021637622267007828,0.0278939176350832,0.02447584457695484,0.01461836602538824,0.0012817773967981339,-0.01141357421875,-0.017242431640625,-0.015960693359375,-0.011016845703125,-0.003570556640625,0.003906369209289551,0.00674459058791399,0.004577776417136192,0.0025940733030438423,0.0018921475857496262,0.0015259254723787308,0.0035096285864710808,0.007293923757970333,0.009552293457090855,0.007721182890236378,0.0013122959062457085,-0.007904052734375,-0.01751708984375,-0.023223876953125,-0.020721435546875,-0.010772705078125,0.004028443247079849,0.02075258642435074,0.03256325051188469,0.03360087797045708,0.02294991910457611,0.0027161473408341408,-0.0211181640625,-0.040191650390625,-0.047454833984375,-0.0400390625,-0.019256591796875,0.009338663890957832,0.035370953381061554,0.04913479834794998,0.04629657790064812,0.027344584465026855,-0.00244140625,-0.033050537109375,-0.05255126953125,-0.05487060546875,-0.040374755859375,-0.012359619140625,0.019440289586782455,0.041749320924282074,0.0477309487760067,0.03723258152604103,0.01269569993019104,-0.01690673828125,-0.03875732421875,-0.045745849609375,-0.03680419921875,-0.0155029296875,0.009704886004328728,0.028382213786244392,0.03360087797045708,0.024872586131095886,0.005920590832829475,-0.014801025390625,-0.02740478515625,-0.02783203125,-0.016845703125,0.002227851189672947,0.02136295661330223,0.031189916655421257,0.028962064534425735,0.017883846536278725,0.0025025177747011185,-0.011627197265625,-0.017791748046875,-0.013671875,-0.00396728515625,0.006653035059571266,0.013733329251408577,0.01269569993019104,0.004791405983269215,-0.004669189453125,-0.010711669921875,-0.009002685546875,0.0012817773967981339,0.0158696249127388,0.028138065710663795,0.031220436096191406,0.021698661148548126,0.0008850367739796638,-0.024749755859375,-0.04443359375,-0.050384521484375,-0.039581298828125,-0.0142822265625,0.017029328271746635,0.044099245220422745,0.05710013210773468,0.051240578293800354,0.02844325080513954,-0.002471923828125,-0.0291748046875,-0.0438232421875,-0.042388916015625,-0.0264892578125,-0.00445556640625,0.016083255410194397,0.027558214962482452,0.02465895563364029,0.012329477816820145,-0.00164794921875,-0.012176513671875,-0.013885498046875,-0.00567626953125,0.007751701399683952,0.019226660951972008,0.02237006649374962,0.01461836602538824,-0.00244140625,-0.0223388671875,-0.037506103515625,-0.042144775390625,-0.032867431640625,-0.012115478515625,0.013183996081352234,0.03466902673244476,0.04501480236649513,0.04147465527057648,0.02554399147629738,0.0029908139258623123,-0.019317626953125,-0.035614013671875,-0.041046142578125,-0.03594970703125,-0.024810791015625,-0.011260986328125,0.001739555038511753,0.011658070608973503,0.01745658740401268,0.02056947536766529,0.02148503065109253,0.020111698657274246,0.017242956906557083,0.01077303383499384,-0.000396728515625,-0.0133056640625,-0.024871826171875,-0.03253173828125,-0.032562255859375,-0.023193359375,-0.007415771484375,0.010834070853888988,0.026520583778619766,0.034394361078739166,0.03341776877641678,0.024445325136184692,0.009491256438195705,-0.0054931640625,-0.014862060546875,-0.019317626953125,-0.018890380859375,-0.013946533203125,-0.00909423828125,-0.00665283203125,-0.00634765625,-0.006134033203125,-0.002716064453125,0.0048829615116119385,0.0157780684530735,0.027405621483922005,0.03491317480802536,0.03332621231675148,0.021210364997386932,0.0016785180196166039,-0.020294189453125,-0.038482666015625,-0.0460205078125,-0.03948974609375,-0.020172119140625,0.006164738908410072,0.031342510133981705,0.0474868007004261,0.04937894642353058,0.037690360099077225,0.017242956906557083,-0.00567626953125,-0.023895263671875,-0.0325927734375,-0.030609130859375,-0.0201416015625,-0.006500244140625,0.005340739153325558,0.01229895930737257,0.014069032855331898,0.011627552099525928,0.007446516305208206,0.0044862208887934685,0.003082369454205036,0.002227851189672947,0.001434369944036007,-0.000091552734375,-0.00360107421875,-0.007843017578125,-0.009796142578125,-0.009674072265625,-0.008087158203125,-0.003509521484375,0.002288888208568096,0.005798516795039177,0.005798516795039177,0.003875850699841976,0.002288888208568096,0.0016174810007214546,0.0028077028691768646,0.006103701889514923,0.009613330475986004,0.010467848740518093,0.0070192571729421616,-0.00042724609375,-0.01055908203125,-0.01904296875,-0.0213623046875,-0.016998291015625,-0.0069580078125,0.005920590832829475,0.01736503094434738,0.023438215255737305,0.020935697481036186,0.010681478306651115,-0.001983642578125,-0.011871337890625,-0.0167236328125,-0.015899658203125,-0.00933837890625,-0.001190185546875,0.0035401470959186554,0.0048829615116119385,0.0027466658502817154,-0.002044677734375,-0.004913330078125,-0.00341796875,0.0013122959062457085,0.006317331455647945,0.00872829370200634,0.007354960776865482,-0.000091552734375,-0.012664794921875,-0.022705078125,-0.0244140625,-0.018096923828125,-0.005279541015625,0.011688589118421078,0.025757621973752975,0.02935880608856678,0.020935697481036186,0.004425183869898319,-0.01348876953125,-0.025665283203125,-0.02685546875,-0.01580810546875,0.003662221133708954,0.02310251072049141,0.034424878656864166,0.03311258181929588,0.018738364800810814,-0.0030517578125,-0.0224609375,-0.031158447265625,-0.02606201171875,-0.009185791015625,0.013183996081352234,0.0320139154791832,0.038636431097984314,0.029725028201937675,0.00918607134371996,-0.014739990234375,-0.032989501953125,-0.037628173828125,-0.027008056640625,-0.006072998046875,0.017944883555173874,0.035370953381061554,0.03796502575278282,0.02606280706822872,0.006103701889514923,-0.015411376953125,-0.03033447265625,-0.0308837890625,-0.018402099609375,0,0.017670217901468277,0.028168585151433945,0.02706991881132126,0.01513718068599701,-0.001434326171875,-0.01702880859375,-0.025970458984375,-0.0235595703125,-0.0133056640625,-0.0009765625,0.010101626627147198,0.015625476837158203,0.01275673694908619,0.0040894802659749985,-0.005584716796875,-0.01348876953125,-0.017822265625,-0.01611328125,-0.009674072265625,-0.00323486328125,0.0026551103219389915,0.007568590342998505,0.008423108607530594,0.006775109097361565,0.005096591077744961,0.0021057771518826485,-0.0023193359375,-0.00634765625,-0.009521484375,-0.012054443359375,-0.0123291015625,-0.009185791015625,-0.00347900390625,0.004394665360450745,0.013336588628590107,0.01889095827937126,0.01760917901992798,0.01065095979720354,-0.00067138671875,-0.014251708984375,-0.02386474609375,-0.025390625,-0.01934814453125,-0.007110595703125,0.008178960531949997,0.020020142197608948,0.023255104199051857,0.01913510635495186,0.00906399730592966,-0.00494384765625,-0.016265869140625,-0.020599365234375,-0.01776123046875,-0.008392333984375,0.0035096285864710808,0.012939848005771637,0.016907254233956337,0.01474044006317854,0.007293923757970333,-0.003143310546875,-0.011474609375,-0.014251708984375,-0.011993408203125,-0.00506591796875,0.004211554303765297,0.012085329741239548,0.01547288428992033,0.01355021819472313,0.007812738418579102,-0.0003662109375,-0.0076904296875,-0.011688232421875,-0.011810302734375,-0.006927490234375,0.0003662221133708954,0.007110812701284885,0.012573625892400742,0.014801477082073689,0.01235999632626772,0.006317331455647945,-0.00140380859375,-0.00921630859375,-0.0147705078125,-0.015716552734375,-0.012542724609375,-0.005828857421875,0.003906369209289551,0.012268440797924995,0.015167699195444584,0.011810663156211376,0.0036011841148138046,-0.00775146484375,-0.01947021484375,-0.025146484375,-0.022003173828125,-0.0123291015625,0.001434369944036007,0.0159611813724041,0.025147251784801483,0.02447584457695484,0.015686513856053352,0.0023194067180156708,-0.01226806640625,-0.021820068359375,-0.022705078125,-0.0162353515625,-0.003936767578125,0.009735404513776302,0.018005920574069023,0.017914365977048874,0.011535996571183205,0.002227851189672947,-0.0069580078125,-0.01190185546875,-0.010345458984375,-0.004852294921875,0.001434369944036007,0.005371257662773132,0.004669331945478916,-0.00030517578125,-0.006927490234375,-0.01019287109375,-0.00726318359375,0.0008545182645320892,0.010864589363336563,0.018799401819705963,0.02050843834877014,0.012482070364058018,-0.002044677734375,-0.01690673828125,-0.026580810546875,-0.0257568359375,-0.0135498046875,0.005890072323381901,0.02462843805551529,0.03469954431056976,0.03238013759255409,0.01739555038511753,-0.005279541015625,-0.02545166015625,-0.0345458984375,-0.029327392578125,-0.011138916015625,0.013367107138037682,0.03360087797045708,0.04049806296825409,0.031403545290231705,0.010193182155489922,-0.014984130859375,-0.033905029296875,-0.038330078125,-0.026947021484375,-0.0042724609375,0.02078310400247574,0.03744621202349663,0.03881954401731491,0.02465895563364029,0.0006408886983990669,-0.022216796875,-0.0347900390625,-0.03375244140625,-0.0191650390625,0.0018921475857496262,0.01989806815981865,0.02938932552933693,0.026612140238285065,0.013367107138037682,-0.00323486328125,-0.016326904296875,-0.020050048828125,-0.013702392578125,-0.002471923828125,0.008178960531949997,0.014069032855331898,0.012054811231791973,0.0032349620014429092,-0.0062255859375,-0.01055908203125,-0.008636474609375,-0.0010986328125,0.009338663890957832,0.0159001424908638,0.0138248847797513,0.0039674062281847,-0.009552001953125,-0.021209716796875,-0.02532958984375,-0.018402099609375,-0.0023193359375,0.01547288428992033,0.027497176080942154,0.02871791645884514,0.017792291939258575,-0.001678466796875,-0.021759033203125,-0.03277587890625,-0.030548095703125,-0.0169677734375,0.003936887718737125,0.0239570289850235,0.03357036039233208,0.02932828664779663,0.013702810741961002,-0.006927490234375,-0.024444580078125,-0.03173828125,-0.025665283203125,-0.00946044921875,0.008819849230349064,0.02227851189672947,0.025940733030438423,0.01754814386367798,0.00158696249127388,-0.014739990234375,-0.02545166015625,-0.0257568359375,-0.0169677734375,-0.004241943359375,0.008362071588635445,0.015503402799367905,0.01388592179864645,0.006591998040676117,-0.001007080078125,-0.006072998046875,-0.006866455078125,-0.00225830078125,0.004119998775422573,0.006805627606809139,0.004791405983269215,-0.0010986328125,-0.00946044921875,-0.01507568359375,-0.013397216796875,-0.004852294921875,0.00787377543747425,0.021149326115846634,0.02938932552933693,0.027527695521712303,0.016174810007214546,0.000030518509447574615,-0.0162353515625,-0.026519775390625,-0.02557373046875,-0.014984130859375,-0.000396728515625,0.013183996081352234,0.021210364997386932,0.02069154940545559,0.012329477816820145,0.001037629321217537,-0.008026123046875,-0.01220703125,-0.0089111328125,0.00006103701889514923,0.008178960531949997,0.012024292722344398,0.010589922778308392,0.003418073058128357,-0.007354736328125,-0.016204833984375,-0.018218994140625,-0.014007568359375,-0.00457763671875,0.008514664135873318,0.018585771322250366,0.02145451307296753,0.018555253744125366,0.010010071098804474,-0.001922607421875,-0.011260986328125,-0.015716552734375,-0.01593017578125,-0.01177978515625,-0.005218505859375,0.0004272591322660446,0.0030518509447574615,0.0027466658502817154,0.001342814415693283,-0.000030517578125,0.0001831110566854477,0.0030518509447574615,0.006530961021780968,0.009704886004328728,0.011078218929469585,0.007904293946921825,0.00119022186845541,-0.00640869140625,-0.013214111328125,-0.01727294921875,-0.016845703125,-0.01251220703125,-0.005828857421875,0.0031128879636526108,0.011749626137316227,0.01593066193163395,0.016266364604234695,0.0138248847797513,0.00787377543747425,-0.0003662109375,-0.008544921875,-0.0147705078125,-0.01739501953125,-0.016357421875,-0.01226806640625,-0.0054931640625,0.002471999265253544,0.010132145136594772,0.015198217704892159,0.016327403485774994,0.014526810497045517,0.009430219419300556,0.0022583696991205215,-0.004730224609375,-0.01019287109375,-0.01220703125,-0.011322021484375,-0.008514404296875,-0.004364013671875,0,0.003265480510890484,0.0032044434919953346,0.0012207403779029846,-0.001007080078125,-0.003997802734375,-0.005035400390625,-0.002838134765625,0.001342814415693283,0.006683553569018841,0.01110873743891716,0.012573625892400742,0.009247108362615108,0.0011291848495602608,-0.008697509765625,-0.01763916015625,-0.021942138671875,-0.0185546875,-0.0079345703125,0.007904293946921825,0.024140141904354095,0.035340435802936554,0.03738517314195633,0.028199102729558945,0.010345774702727795,-0.010986328125,-0.02880859375,-0.037200927734375,-0.03399658203125,-0.019134521484375,0.001831110566854477,0.020966216921806335,0.03308206424117088,0.03357036039233208,0.022522659972310066,0.0048829615116119385,-0.01385498046875,-0.0264892578125,-0.028839111328125,-0.02166748046875,-0.008209228515625,0.005340739153325558,0.013367107138037682,0.013122959062457085,0.00595110934227705,-0.00390625,-0.01141357421875,-0.012664794921875,-0.007568359375,0.0008545182645320892,0.008239997550845146,0.011078218929469585,0.008301034569740295,0.0006714072078466415,-0.007598876953125,-0.01141357421875,-0.009033203125,-0.00054931640625,0.010925626382231712,0.01898251287639141,0.019226660951972008,0.010956144891679287,-0.00341796875,-0.018341064453125,-0.0267333984375,-0.02386474609375,-0.010589599609375,0.008423108607530594,0.02539139986038208,0.032227545976638794,0.02529984340071678,0.006591998040676117,-0.01641845703125,-0.035247802734375,-0.042449951171875,-0.03369140625,-0.01214599609375,0.013794366270303726,0.034516435116529465,0.04144413769245148,0.03277687728404999,0.012573625892400742,-0.011322021484375,-0.029266357421875,-0.03485107421875,-0.02557373046875,-0.00567626953125,0.014801477082073689,0.02865688130259514,0.031311988830566406,0.021942809224128723,0.0052797021344304085,-0.010833740234375,-0.018890380859375,-0.0174560546875,-0.00872802734375,0.003814813680946827,0.013733329251408577,0.015594958327710629,0.008819849230349064,-0.001434326171875,-0.01031494140625,-0.015411376953125,-0.012847900390625,-0.00347900390625,0.006378368474543095,0.011932737194001675,0.01156651508063078,0.005859553813934326,-0.003143310546875,-0.0115966796875,-0.0150146484375,-0.012176513671875,-0.005523681640625,0.0016785180196166039,0.006683553569018841,0.006500442512333393,0.0013733329251408577,-0.004608154296875,-0.007904052734375,-0.006561279296875,-0.001495361328125,0.0044862208887934685,0.009094515815377235,0.008484145626425743,0.0016174810007214546,-0.00775146484375,-0.01617431640625,-0.02001953125,-0.016845703125,-0.007171630859375,0.005767998285591602,0.0159001424908638,0.019989624619483948,0.01745658740401268,0.00787377543747425,-0.004150390625,-0.012847900390625,-0.016265869140625,-0.013519287109375,-0.005828857421875,0.0023194067180156708,0.006561479531228542,0.0050355540588498116,0.00033570360392332077,-0.003570556640625,-0.005340576171875,-0.003631591796875,0.002868739888072014,0.010834070853888988,0.014587847515940666,0.011688589118421078,0.003082369454205036,-0.008514404296875,-0.0186767578125,-0.02203369140625,-0.0159912109375,-0.003082275390625,0.01116977445781231,0.021790215745568275,0.02459791861474514,0.01730399578809738,0.0025940733030438423,-0.012603759765625,-0.022064208984375,-0.02166748046875,-0.011383056640625,0.003997924737632275,0.018707845360040665,0.026459548622369766,0.023468732833862305,0.011658070608973503,-0.004913330078125,-0.019866943359375,-0.026031494140625,-0.021484375,-0.0084228515625,0.007843256928026676,0.02142399363219738,0.02700887992978096,0.022431105375289917,0.010925626382231712,-0.003204345703125,-0.01470947265625,-0.017822265625,-0.0128173828125,-0.00360107421875,0.006256294436752796,0.012878810986876488,0.012970366515219212,0.006591998040676117,-0.00250244140625,-0.01080322265625,-0.014251708984375,-0.01025390625,-0.001495361328125,0.008636738173663616,0.017700735479593277,0.021607104688882828,0.01812799461185932,0.008758812211453915,-0.003143310546875,-0.013916015625,-0.020843505859375,-0.0213623046875,-0.0147705078125,-0.004364013671875,0.0068666646257042885,0.016449477523565292,0.02133243903517723,0.02069154940545559,0.015686513856053352,0.007324442267417908,-0.00299072265625,-0.011322021484375,-0.015106201171875,-0.015167236328125,-0.011383056640625,-0.00469970703125,0.001739555038511753,0.0060731833800673485,0.008056886494159698,0.007354960776865482,0.0037842951714992523,0.0008545182645320892,0.0007019257172942162,0.0014954069629311562,0.003723258152604103,0.007202368229627609,0.007965330965816975,0.004181035794317722,-0.001983642578125,-0.0091552734375,-0.016265869140625,-0.018585205078125,-0.0137939453125,-0.004730224609375,0.0068666646257042885,0.01751762442290783,0.021851252764463425,0.019226660951972008,0.01110873743891716,-0.00054931640625,-0.01165771484375,-0.017303466796875,-0.015380859375,-0.008880615234375,-0.0009765625,0.005859553813934326,0.007293923757970333,0.0027466658502817154,-0.004425048828125,-0.010467529296875,-0.0111083984375,-0.005035400390625,0.006317331455647945,0.018707845360040665,0.025971252471208572,0.024109622463583946,0.01223792228847742,-0.005767822265625,-0.024200439453125,-0.035797119140625,-0.034332275390625,-0.0205078125,0.0009155552834272385,0.022400585934519768,0.03576769307255745,0.03646961972117424,0.023194067180156708,0.0018005920574069023,-0.01837158203125,-0.030670166015625,-0.029449462890625,-0.0150146484375,0.005005035549402237,0.021942809224128723,0.028809472918510437,0.02209540084004402,0.003723258152604103,-0.017791748046875,-0.0330810546875,-0.035858154296875,-0.02349853515625,-0.000091552734375,0.024781029671430588,0.04062013700604439,0.04119998961687088,0.02688680589199066,0.00198370311409235,-0.023895263671875,-0.0394287109375,-0.039703369140625,-0.026275634765625,-0.004241943359375,0.01742606982588768,0.029053620994091034,0.02700887992978096,0.014007995836436749,-0.00372314453125,-0.018310546875,-0.02386474609375,-0.017852783203125,-0.00341796875,0.011413922533392906,0.020386364310979843,0.01977599412202835,0.009277626872062683,-0.006011962890625,-0.0185546875,-0.02215576171875,-0.0157470703125,-0.002471923828125,0.012512588873505592,0.02224799245595932,0.021912289783358574,0.012085329741239548,-0.002716064453125,-0.015655517578125,-0.02099609375,-0.017181396484375,-0.005401611328125,0.008514664135873318,0.016876734793186188,0.016846217215061188,0.00827051606029272,-0.005523681640625,-0.01708984375,-0.021728515625,-0.017059326171875,-0.0040283203125,0.010498367249965668,0.020233772695064545,0.021576587110757828,0.013336588628590107,-0.00067138671875,-0.013763427734375,-0.0196533203125,-0.01544189453125,-0.00390625,0.008941923268139362,0.017639698460698128,0.018036440014839172,0.008972441777586937,-0.005096435546875,-0.01641845703125,-0.019805908203125,-0.013885498046875,-0.00048828125,0.01428266242146492,0.022492140531539917,0.020050659775733948,0.008178960531949997,-0.00860595703125,-0.02264404296875,-0.027435302734375,-0.020355224609375,-0.00250244140625,0.016968291252851486,0.028168585151433945,0.02703939937055111,0.01275673694908619,-0.00921630859375,-0.028778076171875,-0.037139892578125,-0.028472900390625,-0.00531005859375,0.02233954891562462,0.04364147037267685,0.04818872734904289,0.0318918414413929,0.0006714072078466415,-0.0341796875,-0.0589599609375,-0.062774658203125,-0.043487548828125,-0.008026123046875,0.030640583485364914,0.05792412906885147,0.0635090172290802,0.04538102447986603,0.01065095979720354,-0.026275634765625,-0.0516357421875,-0.05743408203125,-0.0416259765625,-0.01116943359375,0.020386364310979843,0.04107791185379028,0.04440443217754364,0.030579546466469765,0.005798516795039177,-0.018310546875,-0.03070068359375,-0.028350830078125,-0.014312744140625,0.0056764427572488785,0.022827845066785812,0.029053620994091034,0.021607104688882828,0.0054322946816682816,-0.011688232421875,-0.02386474609375,-0.026611328125,-0.019378662109375,-0.00537109375,0.009002960287034512,0.017242956906557083,0.01760917901992798,0.012176885269582272,0.0042420728132128716,-0.00250244140625,-0.004638671875,-0.00274658203125,-0.000885009765625,-0.000640869140625,-0.003082275390625,-0.009307861328125,-0.015625,-0.016082763671875,-0.0086669921875,0.0044862208887934685,0.020081179216504097,0.03341776877641678,0.03738517314195633,0.028321176767349243,0.009491256438195705,-0.0137939453125,-0.034454345703125,-0.043060302734375,-0.035797119140625,-0.016204833984375,0.009674367494881153,0.0319223627448082,0.041718803346157074,0.03662221133708954,0.01889095827937126,-0.004425048828125,-0.024993896484375,-0.0345458984375,-0.028839111328125,-0.012908935546875,0.006561479531228542,0.023499252274632454,0.029938656836748123,0.023194067180156708,0.007568590342998505,-0.0101318359375,-0.023834228515625,-0.02734375,-0.01806640625,-0.001251220703125,0.015350810252130032,0.02682577073574066,0.02859584242105484,0.018646810203790665,0.0018616290763020515,-0.01495361328125,-0.0274658203125,-0.030792236328125,-0.022613525390625,-0.007568359375,0.007629627361893654,0.01898251287639141,0.023194067180156708,0.017975401133298874,0.006408886983990669,-0.00634765625,-0.017120361328125,-0.0218505859375,-0.018890380859375,-0.011322021484375,-0.0020751953125,0.007629627361893654,0.015350810252130032,0.017914365977048874,0.015594958327710629,0.010437330231070518,0.0025025177747011185,-0.006256103515625,-0.012451171875,-0.016998291015625,-0.019134521484375,-0.01531982421875,-0.00787353515625,0.0005798516795039177,0.010040589608252048,0.017212439328432083,0.019470809027552605,0.0159611813724041,0.007080294191837311,-0.00445556640625,-0.015838623046875,-0.022613525390625,-0.022003173828125,-0.015289306640625,-0.003753662109375,0.008758812211453915,0.017700735479593277,0.020325327292084694,0.014923551119863987,0.004272591322660446,-0.006561279296875,-0.014495849609375,-0.01617431640625,-0.010528564453125,-0.00006103515625,0.01025421917438507,0.016174810007214546,0.015594958327710629,0.006958220154047012,-0.00677490234375,-0.01934814453125,-0.0262451171875,-0.024200439453125,-0.012664794921875,0.004730368964374065,0.021942809224128723,0.03271584212779999,0.033783990889787674,0.023499252274632454,0.0048829615116119385,-0.014373779296875,-0.028656005859375,-0.0335693359375,-0.02728271484375,-0.0123291015625,0.005706961266696453,0.020111698657274246,0.02700887992978096,0.02459791861474514,0.014007995836436749,0.00119022186845541,-0.008575439453125,-0.012481689453125,-0.0098876953125,-0.00323486328125,0.004303109832108021,0.008117923513054848,0.006195257417857647,0.00012207403779029846,-0.007568359375,-0.012725830078125,-0.0125732421875,-0.00640869140625,0.003906369209289551,0.014007995836436749,0.020050659775733948,0.0197149571031332,0.013061922043561935,0.0020142216235399246,-0.009002685546875,-0.01531982421875,-0.015106201171875,-0.009002685546875,-0.00030517578125,0.007232886739075184,0.011291848495602608,0.0098574785515666,0.0036011841148138046,-0.003021240234375,-0.006317138671875,-0.004547119140625,0.0023499252274632454,0.01144444104284048,0.017731253057718277,0.01745658740401268,0.0099795525893569,-0.002288818359375,-0.015380859375,-0.02435302734375,-0.0247802734375,-0.015716552734375,-0.00079345703125,0.01428266242146492,0.024842066690325737,0.02697836235165596,0.019684437662363052,0.006408886983990669,-0.007843017578125,-0.01800537109375,-0.020721435546875,-0.01617431640625,-0.006134033203125,0.004394665360450745,0.010925626382231712,0.012054811231791973,0.0076601458713412285,0.0011291848495602608,-0.003936767578125,-0.006439208984375,-0.00469970703125,0.0001831110566854477,0.0046388134360313416,0.006561479531228542,0.005096591077744961,-0.000274658203125,-0.007080078125,-0.010650634765625,-0.00921630859375,-0.004486083984375,0.002288888208568096,0.00958281196653843,0.01269569993019104,0.008972441777586937,0.00079348124563694,-0.009002685546875,-0.0169677734375,-0.0186767578125,-0.012725830078125,-0.001220703125,0.01144444104284048,0.020386364310979843,0.022553179413080215,0.016510512679815292,0.003662221133708954,-0.010650634765625,-0.02093505859375,-0.024017333984375,-0.01885986328125,-0.006988525390625,0.0072634052485227585,0.018768884241580963,0.023468732833862305,0.01913510635495186,0.007751701399683952,-0.00518798828125,-0.0155029296875,-0.019195556640625,-0.01458740234375,-0.004364013671875,0.008514664135873318,0.01913510635495186,0.02145451307296753,0.014709921553730965,0.0028077028691768646,-0.01007080078125,-0.02069091796875,-0.024505615234375,-0.017791748046875,-0.003173828125,0.01348918117582798,0.02682577073574066,0.0317087322473526,0.02548295632004738,0.01071199681609869,-0.0068359375,-0.022369384765625,-0.031036376953125,-0.029022216796875,-0.016448974609375,0.001434369944036007,0.01660206913948059,0.025025177747011185,0.02536088228225708,0.016968291252851486,0.0036927396431565285,-0.00830078125,-0.01507568359375,-0.014984130859375,-0.009124755859375,-0.000701904296875,0.005371257662773132,0.0066225165501236916,0.00357066560536623,-0.00244140625,-0.00799560546875,-0.009735107421875,-0.00653076171875,0.0008239997550845146,0.008545182645320892,0.012939848005771637,0.011749626137316227,0.004974517039954662,-0.004058837890625,-0.0115966796875,-0.013580322265625,-0.0089111328125,-0.000732421875,0.008026367984712124,0.013397625647485256,0.01156651508063078,0.0026551103219389915,-0.009063720703125,-0.01788330078125,-0.019378662109375,-0.01202392578125,0.0014038514345884323,0.015442365780472755,0.02447584457695484,0.023621326312422752,0.011139255948364735,-0.008453369140625,-0.026824951171875,-0.0362548828125,-0.032379150390625,-0.015594482421875,0.008209479041397572,0.029633473604917526,0.04065065458416939,0.036957915872335434,0.01889095827937126,-0.006134033203125,-0.027923583984375,-0.0390625,-0.035400390625,-0.018035888671875,0.005584887228906155,0.02539139986038208,0.034424878656864166,0.030793175101280212,0.015564439818263054,-0.004638671875,-0.020111083984375,-0.02630615234375,-0.023040771484375,-0.011566162109375,0.002533036284148693,0.01110873743891716,0.012543107382953167,0.009491256438195705,0.002533036284148693,-0.003814697265625,-0.00439453125,-0.00103759765625,0.00277718435972929,0.005462813191115856,0.0038453321903944016,-0.003997802734375,-0.013519287109375,-0.01898193359375,-0.01861572265625,-0.010284423828125,0.004455702379345894,0.018738364800810814,0.026459548622369766,0.024445325136184692,0.01263466291129589,-0.006134033203125,-0.023651123046875,-0.03125,-0.02783203125,-0.014801025390625,0.003814813680946827,0.01913510635495186,0.024964140728116035,0.020355846732854843,0.007202368229627609,-0.00885009765625,-0.01971435546875,-0.01995849609375,-0.010772705078125,0.0027161473408341408,0.01507614366710186,0.01986755058169365,0.014648884534835815,0.0023499252274632454,-0.01190185546875,-0.021148681640625,-0.020904541015625,-0.01055908203125,0.005523850210011005,0.01904354989528656,0.024445325136184692,0.018677327781915665,0.003418073058128357,-0.013702392578125,-0.0247802734375,-0.024139404296875,-0.01214599609375,0.006439405493438244,0.024262215942144394,0.031495101749897,0.02447584457695484,0.005340739153325558,-0.01885986328125,-0.037506103515625,-0.04327392578125,-0.03228759765625,-0.00653076171875,0.022431105375289917,0.04269539564847946,0.0474868007004261,0.03491317480802536,0.00839259009808302,-0.022186279296875,-0.0439453125,-0.049224853515625,-0.037384033203125,-0.012969970703125,0.014923551119863987,0.03500473126769066,0.0397961363196373,0.029511399567127228,0.00918607134371996,-0.01312255859375,-0.0281982421875,-0.030975341796875,-0.022247314453125,-0.005950927734375,0.010681478306651115,0.01910458691418171,0.01754814386367798,0.009216589853167534,-0.002899169921875,-0.01324462890625,-0.01666259765625,-0.01214599609375,-0.00225830078125,0.007812738418579102,0.014038514345884323,0.014465773478150368,0.008880886249244213,0.0005188146606087685,-0.005584716796875,-0.006866455078125,-0.004150390625,0.00045777764171361923,0.004943998530507088,0.006317331455647945,0.0025025177747011185,-0.004608154296875,-0.010406494140625,-0.0118408203125,-0.007537841796875,0.00238044373691082,0.014191106893122196,0.02209540084004402,0.022400585934519768,0.014465773478150368,0.00015259254723787308,-0.01593017578125,-0.0264892578125,-0.026885986328125,-0.017242431640625,-0.00042724609375,0.01815851405262947,0.0318613238632679,0.03482161834836006,0.025971252471208572,0.009277626872062683,-0.00958251953125,-0.023651123046875,-0.02783203125,-0.021636962890625,-0.007354736328125,0.009887997061014175,0.023560289293527603,0.028138065710663795,0.021851252764463425,0.008209479041397572,-0.00787353515625,-0.021026611328125,-0.025787353515625,-0.021026611328125,-0.009307861328125,0.005066072568297386,0.01745658740401268,0.02447584457695484,0.023621326312422752,0.014130069874227047,-0.000213623046875,-0.013458251953125,-0.021484375,-0.022796630859375,-0.016876220703125,-0.005279541015625,0.007965330965816975,0.01901303231716156,0.02468947321176529,0.023438215255737305,0.015564439818263054,0.003021332435309887,-0.0098876953125,-0.01910400390625,-0.02239990234375,-0.01885986328125,-0.00946044921875,0.0025635547935962677,0.01355021819472313,0.020386364310979843,0.02063051238656044,0.014404736459255219,0.00436414685100317,-0.005706787109375,-0.012481689453125,-0.01507568359375,-0.012176513671875,-0.003936767578125,0.004394665360450745,0.0099795525893569,0.012482070364058018,0.010681478306651115,0.006195257417857647,0.0013733329251408577,-0.00213623046875,-0.0029296875,-0.00140380859375,0.0010681478306651115,0.00238044373691082,0.0012207403779029846,-0.001190185546875,-0.003509521484375,-0.00439453125,-0.003143310546875,0.00045777764171361923,0.005798516795039177,0.01025421917438507,0.01144444104284048,0.007568590342998505,0.00015259254723787308,-0.007171630859375,-0.01312255859375,-0.015350341796875,-0.011138916015625,-0.003021240234375,0.005188146606087685,0.011688589118421078,0.013519699685275555,0.008911404758691788,0.0007019257172942162,-0.006500244140625,-0.011199951171875,-0.012176513671875,-0.00726318359375,0.001037629321217537,0.007904293946921825,0.010956144891679287,0.009338663890957832,0.0035401470959186554,-0.00421142578125,-0.00994873046875,-0.011566162109375,-0.00946044921875,-0.003631591796875,0.0037537766620516777,0.008514664135873318,0.009369182400405407,0.007232886739075184,0.0028077028691768646,-0.0015869140625,-0.003662109375,-0.00323486328125,-0.00164794921875,-0.00042724609375,0,-0.00140380859375,-0.004913330078125,-0.007049560546875,-0.00518798828125,-0.000457763671875,0.005859553813934326,0.012665181420743465,0.0159916989505291,0.01309244055300951,0.0054322946816682816,-0.004608154296875,-0.0150146484375,-0.021026611328125,-0.018890380859375,-0.01031494140625,0.0010681478306651115,0.011658070608973503,0.017151402309536934,0.015106662176549435,0.007324442267417908,-0.00244140625,-0.01104736328125,-0.01470947265625,-0.011322021484375,-0.00360107421875,0.004303109832108021,0.009338663890957832,0.008636738173663616,0.0019531846046447754,-0.0062255859375,-0.0123291015625,-0.0142822265625,-0.0093994140625,0.0007629627361893654,0.01116977445781231,0.017242956906557083,0.01666310615837574,0.008941923268139362,-0.002899169921875,-0.012451171875,-0.01654052734375,-0.014984130859375,-0.00677490234375,0.00436414685100317,0.01144444104284048,0.011627552099525928,0.005310220643877983,-0.005584716796875,-0.015838623046875,-0.0201416015625,-0.016357421875,-0.005401611328125,0.008178960531949997,0.018707845360040665,0.021027252078056335,0.013641773723065853,-0.000762939453125,-0.016876220703125,-0.02752685546875,-0.027740478515625,-0.017120361328125,0.0012512588873505592,0.020111698657274246,0.031250953674316406,0.030579546466469765,0.01889095827937126,-0.00006103515625,-0.019317626953125,-0.030059814453125,-0.02850341796875,-0.016815185546875,0.00079348124563694,0.01730399578809738,0.024842066690325737,0.02066102996468544,0.006988738663494587,-0.010528564453125,-0.024749755859375,-0.029449462890625,-0.022735595703125,-0.00762939453125,0.010132145136594772,0.02301095612347126,0.025696584954857826,0.018433179706335068,0.004303109832108021,-0.010528564453125,-0.02001953125,-0.02099609375,-0.01287841796875,0.00030518509447574615,0.012573625892400742,0.019348734989762306,0.018524736166000366,0.011230811476707458,0.0006714072078466415,-0.0081787109375,-0.01171875,-0.009521484375,-0.003173828125,0.0032349620014429092,0.007080294191837311,0.007049775682389736,0.002288888208568096,-0.003997802734375,-0.00775146484375,-0.00714111328125,-0.002899169921875,0.002685628831386566,0.00799584947526455,0.009613330475986004,0.00515762809664011,-0.003082275390625,-0.011566162109375,-0.01715087890625,-0.016632080078125,-0.008758544921875,0.0028077028691768646,0.01303140353411436,0.019623402506113052,0.019989624619483948,0.012268440797924995,0.0003662221133708954,-0.0103759765625,-0.016571044921875,-0.0162353515625,-0.009918212890625,-0.0001220703125,0.009277626872062683,0.01434369944036007,0.013458662666380405,0.007782219909131527,0.000030518509447574615,-0.00628662109375,-0.00848388671875,-0.006317138671875,-0.000946044921875,0.004394665360450745,0.006683553569018841,0.005645924247801304,0.0016174810007214546,-0.003448486328125,-0.006134033203125,-0.005279541015625,-0.0018310546875,0.0036011841148138046,0.009002960287034512,0.011017181910574436,0.00839259009808302,0.0023499252274632454,-0.004547119140625,-0.00946044921875,-0.00970458984375,-0.00518798828125,0.0016174810007214546,0.00839259009808302,0.012085329741239548,0.010528885759413242,0.0040894802659749985,-0.00518798828125,-0.0133056640625,-0.01641845703125,-0.01312255859375,-0.005157470703125,0.00515762809664011,0.01547288428992033,0.0198370311409235,0.0159001424908638,0.00714133121073246,-0.003936767578125,-0.014129638671875,-0.019012451171875,-0.016265869140625,-0.0072021484375,0.0037537766620516777,0.012726218439638615,0.017181921750307083,0.015442365780472755,0.008148442022502422,-0.001068115234375,-0.008453369140625,-0.011474609375,-0.009735107421875,-0.00469970703125,0.0019226660951972008,0.006591998040676117,0.005981627851724625,0.0017700735479593277,-0.004241943359375,-0.0108642578125,-0.01397705078125,-0.01116943359375,-0.00408935546875,0.003662221133708954,0.010193182155489922,0.014007995836436749,0.011597033590078354,0.003479110077023506,-0.00482177734375,-0.010528564453125,-0.01300048828125,-0.01055908203125,-0.002685546875,0.006653035059571266,0.013275551609694958,0.016113772988319397,0.0138248847797513,0.006653035059571266,-0.00213623046875,-0.008453369140625,-0.009613037109375,-0.006103515625,0.0006408886983990669,0.009277626872062683,0.015655994415283203,0.01580858789384365,0.009887997061014175,0.00030518509447574615,-0.00994873046875,-0.017333984375,-0.019134521484375,-0.014251708984375,-0.004425048828125,0.006836146116256714,0.016418958082795143,0.02053895592689514,0.017975401133298874,0.010467848740518093,0.0004272591322660446,-0.009033203125,-0.01495361328125,-0.015869140625,-0.011932373046875,-0.004974365234375,0.001739555038511753,0.006714072078466415,0.009002960287034512,0.007293923757970333,0.004211554303765297,0.001831110566854477,-0.000030517578125,-0.000335693359375,0.0004882961511611938,0.0013733329251408577,0.0006714072078466415,-0.001617431640625,-0.00390625,-0.007110595703125,-0.00927734375,-0.007415771484375,-0.00335693359375,0.0011597033590078354,0.006134220398962498,0.010010071098804474,0.01065095979720354,0.00827051606029272,0.0042420728132128716,-0.00048828125,-0.003570556640625,-0.00335693359375,-0.002044677734375,-0.001068115234375,-0.0001220703125,-0.001190185546875,-0.004852294921875,-0.007781982421875,-0.0076904296875,-0.00506591796875,0.00012207403779029846,0.00833155307918787,0.015503402799367905,0.01730399578809738,0.013733329251408577,0.005127109587192535,-0.007720947265625,-0.0196533203125,-0.025238037109375,-0.0233154296875,-0.013763427734375,0.0024414807558059692,0.018829919397830963,0.028107546269893646,0.02841273322701454,0.019623402506113052,0.0036011841148138046,-0.01263427734375,-0.022491455078125,-0.023651123046875,-0.015533447265625,-0.000457763671875,0.014587847515940666,0.02294991910457611,0.021759696304798126,0.011322367005050182,-0.005218505859375,-0.02069091796875,-0.027740478515625,-0.025054931640625,-0.01312255859375,0.0062257759273052216,0.0239265114068985,0.03234962001442909,0.030396435409784317,0.01754814386367798,-0.0029296875,-0.022491455078125,-0.033905029296875,-0.034393310546875,-0.0240478515625,-0.00567626953125,0.013702810741961002,0.027588732540607452,0.03268532454967499,0.027558214962482452,0.014648884534835815,-0.00103759765625,-0.01446533203125,-0.021484375,-0.02166748046875,-0.01580810546875,-0.00628662109375,0.002868739888072014,0.009796441532671452,0.012482070364058018,0.01031525619328022,0.005218665115535259,-0.0010986328125,-0.00677490234375,-0.010650634765625,-0.0118408203125,-0.009490966796875,-0.004364013671875,0.001831110566854477,0.006988738663494587,0.0098574785515666,0.00952177494764328,0.004303109832108021,-0.0040283203125,-0.011383056640625,-0.015716552734375,-0.01556396484375,-0.009521484375,0.001037629321217537,0.011993774212896824,0.019348734989762306,0.02139347419142723,0.01657155156135559,0.00476088747382164,-0.00927734375,-0.019378662109375,-0.02276611328125,-0.0189208984375,-0.007965087890625,0.005981627851724625,0.01663258671760559,0.02050843834877014,0.01654103212058544,0.005890072323381901,-0.006500244140625,-0.014739990234375,-0.0164794921875,-0.01214599609375,-0.00262451171875,0.007629627361893654,0.012848292477428913,0.011078218929469585,0.003326517529785633,-0.00677490234375,-0.014404296875,-0.015655517578125,-0.00885009765625,0.0028077028691768646,0.013580736704170704,0.019257180392742157,0.017120882868766785,0.007049775682389736,-0.007110595703125,-0.019012451171875,-0.023193359375,-0.01800537109375,-0.005523681640625,0.009308145381510258,0.020355846732854843,0.022705771028995514,0.014801477082073689,0.00027466658502817154,-0.013946533203125,-0.022186279296875,-0.0211181640625,-0.010772705078125,0.004425183869898319,0.01818903163075447,0.0239570289850235,0.018524736166000366,0.005218665115535259,-0.010589599609375,-0.022247314453125,-0.02423095703125,-0.015960693359375,0.00015259254723787308,0.016876734793186188,0.026367992162704468,0.02548295632004738,0.013763847760856152,-0.004180908203125,-0.020263671875,-0.027130126953125,-0.0220947265625,-0.008392333984375,0.009369182400405407,0.024964140728116035,0.030457472428679466,0.022766808047890663,0.006561479531228542,-0.011016845703125,-0.023895263671875,-0.0267333984375,-0.018524169921875,-0.00360107421875,0.011352885514497757,0.01980651170015335,0.019257180392742157,0.010437330231070518,-0.002532958984375,-0.01226806640625,-0.014739990234375,-0.0096435546875,0.00119022186845541,0.012115848250687122,0.01760917901992798,0.014984588138759136,0.00476088747382164,-0.007965087890625,-0.01708984375,-0.01873779296875,-0.01202392578125,0.0007019257172942162,0.013977477326989174,0.021027252078056335,0.018768884241580963,0.008423108607530594,-0.00592041015625,-0.0184326171875,-0.023651123046875,-0.018768310546875,-0.006317138671875,0.007812738418579102,0.018433179706335068,0.020294807851314545,0.012207403779029846,-0.000885009765625,-0.013580322265625,-0.021026611328125,-0.018951416015625,-0.0076904296875,0.007629627361893654,0.020386364310979843,0.025177769362926483,0.020203253254294395,0.0076601458713412285,-0.00762939453125,-0.0194091796875,-0.02288818359375,-0.017608642578125,-0.00537109375,0.008606219664216042,0.01748710498213768,0.018829919397830963,0.01223792228847742,0.0008850367739796638,-0.00885009765625,-0.01409912109375,-0.0125732421875,-0.003875732421875,0.006775109097361565,0.013733329251408577,0.014801477082073689,0.01031525619328022,0.0009765923023223877,-0.009490966796875,-0.01513671875,-0.014556884765625,-0.0096435546875,-0.001373291015625,0.007354960776865482,0.012390514835715294,0.012176885269582272,0.008087405003607273,0.002227851189672947,-0.003662109375,-0.00677490234375,-0.0062255859375,-0.0042724609375,-0.0015869140625,0.0008850367739796638,0.0008239997550845146,-0.001556396484375,-0.0040283203125,-0.004852294921875,-0.004302978515625,-0.002471923828125,0.0010986663401126862,0.0042420728132128716,0.005005035549402237,0.004547257907688618,0.003326517529785633,0.0009765923023223877,-0.000946044921875,-0.001495361328125,-0.002410888671875,-0.00390625,-0.004547119140625,-0.00494384765625,-0.0054931640625,-0.0040283203125,0.00033570360392332077,0.005920590832829475,0.01144444104284048,0.0158391073346138,0.016449477523565292,0.011810663156211376,0.003875850699841976,-0.005126953125,-0.0140380859375,-0.019378662109375,-0.018157958984375,-0.012115478515625,-0.004302978515625,0.003814813680946827,0.0098574785515666,0.011352885514497757,0.009704886004328728,0.00674459058791399,0.00198370311409235,-0.00201416015625,-0.003662109375,-0.005828857421875,-0.008209228515625,-0.00946044921875,-0.01055908203125,-0.010711669921875,-0.00830078125,-0.00323486328125,0.0026551103219389915,0.008545182645320892,0.012970366515219212,0.012024292722344398,0.00634784996509552,-0.000274658203125,-0.006927490234375,-0.01177978515625,-0.01190185546875,-0.007843017578125,-0.002410888671875,0.0017090365290641785,0.0029908139258623123,0.0002136295661330223,-0.00555419921875,-0.01025390625,-0.01092529296875,-0.006103515625,0.003723258152604103,0.014893032610416412,0.02301095612347126,0.024109622463583946,0.016357921063899994,0.0015564439818263054,-0.015594482421875,-0.0284423828125,-0.031951904296875,-0.02447509765625,-0.00799560546875,0.011078218929469585,0.026398509740829468,0.03253272920846939,0.026490066200494766,0.012085329741239548,-0.0045166015625,-0.017791748046875,-0.0230712890625,-0.018768310546875,-0.0068359375,0.00634784996509552,0.014862514100968838,0.016327403485774994,0.0098574785515666,-0.00140380859375,-0.01171875,-0.016510009765625,-0.013153076171875,-0.0029296875,0.01037629321217537,0.020813623443245888,0.023285623639822006,0.017639698460698128,0.005066072568297386,-0.010009765625,-0.0213623046875,-0.025238037109375,-0.020599365234375,-0.00970458984375,0.003479110077023506,0.01422162540256977,0.018494216725230217,0.016418958082795143,0.009277626872062683,0.00015259254723787308,-0.00665283203125,-0.00982666015625,-0.009429931640625,-0.006103515625,-0.002410888671875,-0.000396728515625,-0.00018310546875,-0.000732421875,-0.000579833984375,0.0007019257172942162,0.0028992583975195885,0.005310220643877983,0.006134220398962498,0.004577776417136192,0.0008850367739796638,-0.003753662109375,-0.007720947265625,-0.009063720703125,-0.005767822265625,0.0001831110566854477,0.006317331455647945,0.011383404023945332,0.012176885269582272,0.008087405003607273,0.0013733329251408577,-0.0052490234375,-0.00872802734375,-0.00701904296875,0.000030518509447574615,0.009308145381510258,0.016418958082795143,0.018524736166000366,0.014801477082073689,0.005859553813934326,-0.005157470703125,-0.013458251953125,-0.016357421875,-0.01226806640625,-0.001922607421875,0.009643848985433578,0.018494216725230217,0.021881770342588425,0.017639698460698128,0.007843256928026676,-0.00396728515625,-0.014129638671875,-0.018829345703125,-0.01763916015625,-0.0113525390625,-0.001983642578125,0.005859553813934326,0.0099795525893569,0.010559404268860817,0.008239997550845146,0.004272591322660446,0.0007019257172942162,-0.000640869140625,-0.000885009765625,-0.00152587890625,-0.0023193359375,-0.00311279296875,-0.004364013671875,-0.005767822265625,-0.004913330078125,-0.00146484375,0.0021973326802253723,0.0052797021344304085,0.007629627361893654,0.00714133121073246,0.002929776906967163,-0.002410888671875,-0.0068359375,-0.009429931640625,-0.008941650390625,-0.005218505859375,-0.000518798828125,0.0028992583975195885,0.004181035794317722,0.002685628831386566,-0.00128173828125,-0.00543212890625,-0.0078125,-0.007476806640625,-0.00335693359375,0.0028077028691768646,0.00827051606029272,0.01184118166565895,0.01110873743891716,0.006012146361172199,-0.00006103515625,-0.005950927734375,-0.010162353515625,-0.010528564453125,-0.006561279296875,-0.000885009765625,0.003021332435309887,0.005737479776144028,0.007171849720180035,0.005767998285591602,0.0031434064731001854,0.0008545182645320892,-0.000640869140625,-0.001983642578125,-0.003662109375,-0.004791259765625,-0.006134033203125,-0.008209228515625,-0.0084228515625,-0.004669189453125,0.0004882961511611938,0.005249183624982834,0.010345774702727795,0.012207403779029846,0.008514664135873318,0.0020447401329874992,-0.00543212890625,-0.011688232421875,-0.0135498046875,-0.009857177734375,-0.001739501953125,0.0068666646257042885,0.012543107382953167,0.013641773723065853,0.00872829370200634,-0.001129150390625,-0.011932373046875,-0.018829345703125,-0.019317626953125,-0.013519287109375,-0.003082275390625,0.008209479041397572,0.01580858789384365,0.016815699636936188,0.011322367005050182,0.0024414807558059692,-0.007080078125,-0.013214111328125,-0.012359619140625,-0.005950927734375,0.002685628831386566,0.010589922778308392,0.014526810497045517,0.012146366760134697,0.005096591077744961,-0.001617431640625,-0.00628662109375,-0.00738525390625,-0.0028076171875,0.004516739398241043,0.00991851557046175,0.010406811721622944,0.006439405493438244,-0.000244140625,-0.008026123046875,-0.01202392578125,-0.010009765625,-0.00372314453125,0.005340739153325558,0.01263466291129589,0.013245033100247383,0.007782219909131527,-0.0008544921875,-0.01055908203125,-0.01629638671875,-0.01318359375,-0.00299072265625,0.00952177494764328,0.02056947536766529,0.024323251098394394,0.017273476347327232,0.003082369454205036,-0.012603759765625,-0.0255126953125,-0.029296875,-0.020355224609375,-0.00347900390625,0.013733329251408577,0.026490066200494766,0.029816582798957825,0.020416881889104843,0.002929776906967163,-0.014312744140625,-0.026458740234375,-0.02911376953125,-0.01971435546875,-0.003997802734375,0.010467848740518093,0.020172733813524246,0.021057771518826485,0.012512588873505592,0.00012207403779029846,-0.009857177734375,-0.014617919921875,-0.012969970703125,-0.0050048828125,0.0046388134360313416,0.00952177494764328,0.008697775192558765,0.0037842951714992523,-0.00433349609375,-0.0108642578125,-0.0113525390625,-0.006500244140625,0.0012512588873505592,0.008239997550845146,0.010986663401126862,0.007751701399683952,-0.000244140625,-0.00885009765625,-0.014495849609375,-0.013946533203125,-0.00616455078125,0.004821924492716789,0.014557329006493092,0.01828058809041977,0.01348918117582798,0.002288888208568096,-0.010894775390625,-0.01959228515625,-0.019927978515625,-0.011871337890625,0.0024414807558059692,0.01666310615837574,0.02471999265253544,0.02288888208568096,0.011078218929469585,-0.004669189453125,-0.01788330078125,-0.0235595703125,-0.019012451171875,-0.006500244140625,0.008636738173663616,0.019653920084238052,0.02209540084004402,0.01513718068599701,0.0011291848495602608,-0.01251220703125,-0.01953125,-0.018768310546875,-0.010772705078125,0.0018616290763020515,0.013000885024666786,0.016479995101690292,0.01196325570344925,0.0024414807558059692,-0.008575439453125,-0.015838623046875,-0.01556396484375,-0.008056640625,0.002136295661330223,0.009674367494881153,0.011230811476707458,0.005798516795039177,-0.003997802734375,-0.013458251953125,-0.0179443359375,-0.01446533203125,-0.003448486328125,0.009674367494881153,0.018402662128210068,0.01992858573794365,0.013397625647485256,-0.00006103515625,-0.014617919921875,-0.023773193359375,-0.023895263671875,-0.0146484375,0.000030518509447574615,0.01428266242146492,0.02288888208568096,0.022827845066785812,0.01474044006317854,0.0018921475857496262,-0.0101318359375,-0.016326904296875,-0.01495361328125,-0.00726318359375,0.0021668141707777977,0.00906399730592966,0.011474959552288055,0.008575701154768467,0.0021057771518826485,-0.003997802734375,-0.007293701171875,-0.00628662109375,-0.00146484375,0.004150517284870148,0.008239997550845146,0.008453627116978168,0.004943998530507088,0.00030518509447574615,-0.004486083984375,-0.0072021484375,-0.006683349609375,-0.00518798828125,-0.00390625,-0.0042724609375,-0.005706787109375,-0.00604248046875,-0.00439453125,0.00045777764171361923,0.008484145626425743,0.0159611813724041,0.018616290763020515,0.015167699195444584,0.005249183624982834,-0.010009765625,-0.02423095703125,-0.030303955078125,-0.0257568359375,-0.012176513671875,0.006439405493438244,0.024109622463583946,0.03411969542503357,0.03231910243630409,0.01901303231716156,-0.000030517578125,-0.017059326171875,-0.02618408203125,-0.0240478515625,-0.012176513671875,0.002868739888072014,0.014862514100968838,0.01892147585749626,0.013183996081352234,0.0012817773967981339,-0.010986328125,-0.017822265625,-0.014923095703125,-0.003387451171875,0.011780144646763802,0.024353770539164543,0.028290659189224243,0.021607104688882828,0.007171849720180035,-0.0103759765625,-0.024749755859375,-0.029510498046875,-0.0233154296875,-0.00933837890625,0.0064699240028858185,0.01733451336622238,0.020874660462141037,0.016968291252851486,0.00753807183355093,-0.000732421875,-0.00494384765625,-0.005523681640625,-0.00177001953125,0.0027466658502817154,0.0030518509447574615,-0.00201416015625,-0.009857177734375,-0.016448974609375,-0.01861572265625,-0.01336669921875,-0.001434326171875,0.012787255458533764,0.024414807558059692,0.027985472232103348,0.02224799245595932,0.008880886249244213,-0.007720947265625,-0.01995849609375,-0.024200439453125,-0.01947021484375,-0.0076904296875,0.005737479776144028,0.016174810007214546,0.019287697970867157,0.013977477326989174,0.004516739398241043,-0.00372314453125,-0.007904052734375,-0.00689697265625,-0.000091552734375,0.008209479041397572,0.012115848250687122,0.010498367249965668,0.0038453321903944016,-0.006927490234375,-0.016815185546875,-0.019866943359375,-0.01507568359375,-0.004730224609375,0.008575701154768467,0.020355846732854843,0.024994660168886185,0.02072206884622574,0.009796441532671452,-0.00384521484375,-0.0157470703125,-0.021270751953125,-0.018707275390625,-0.010223388671875,0.0012817773967981339,0.01071199681609869,0.0138248847797513,0.01110873743891716,0.004547257907688618,-0.00341796875,-0.01019287109375,-0.011749267578125,-0.006439208984375,0.0014038514345884323,0.008514664135873318,0.013245033100247383,0.01263466291129589,0.005737479776144028,-0.004669189453125,-0.01495361328125,-0.022491455078125,-0.02392578125,-0.01678466796875,-0.00408935546875,0.008636738173663616,0.019226660951972008,0.02523880824446678,0.022522659972310066,0.011719107627868652,-0.00274658203125,-0.0169677734375,-0.026519775390625,-0.027313232421875,-0.01983642578125,-0.007232666015625,0.00753807183355093,0.01904354989528656,0.021973326802253723,0.01654103212058544,0.005401776172220707,-0.00830078125,-0.018463134765625,-0.020172119140625,-0.0142822265625,-0.002777099609375,0.01116977445781231,0.02136295661330223,0.02304147556424141,0.015594958327710629,0.0021973326802253723,-0.012847900390625,-0.023956298828125,-0.0255126953125,-0.017852783203125,-0.003936767578125,0.012390514835715294,0.024262215942144394,0.027588732540607452,0.02237006649374962,0.010437330231070518,-0.003753662109375,-0.01513671875,-0.0196533203125,-0.016510009765625,-0.00872802734375,0.0013122959062457085,0.009674367494881153,0.012268440797924995,0.010284737683832645,0.005493331700563431,-0.00067138671875,-0.004974365234375,-0.005828857421875,-0.00341796875,0.0002136295661330223,0.0021057771518826485,0.0017090365290641785,-0.00018310546875,-0.002349853515625,-0.004180908203125,-0.004364013671875,-0.001373291015625,0.0019531846046447754,0.0033875545486807823,0.0028382213786244392,-0.000244140625,-0.00469970703125,-0.00750732421875,-0.006561279296875,-0.00250244140625,0.0028992583975195885,0.008575701154768467,0.010803552344441414,0.007568590342998505,0.0002136295661330223,-0.00946044921875,-0.01666259765625,-0.017578125,-0.011871337890625,-0.00067138671875,0.012115848250687122,0.021851252764463425,0.024018067866563797,0.01760917901992798,0.0054322946816682816,-0.00921630859375,-0.020721435546875,-0.024383544921875,-0.01904296875,-0.006378173828125,0.008697775192558765,0.020905178040266037,0.026398509740829468,0.023346658796072006,0.012421033345162868,-0.002532958984375,-0.0152587890625,-0.020751953125,-0.018280029296875,-0.009765625,0.0019531846046447754,0.012268440797924995,0.01675466075539589,0.014069032855331898,0.005462813191115856,-0.005615234375,-0.0147705078125,-0.018829345703125,-0.016143798828125,-0.007659912109375,0.00277718435972929,0.011474959552288055,0.016357921063899994,0.01507614366710186,0.007354960776865482,-0.002532958984375,-0.011505126953125,-0.0174560546875,-0.01806640625,-0.012969970703125,-0.00390625,0.005401776172220707,0.012512588873505592,0.01553392130881548,0.012726218439638615,0.005249183624982834,-0.004302978515625,-0.01263427734375,-0.0162353515625,-0.013885498046875,-0.006805419921875,0.0018005920574069023,0.009430219419300556,0.013061922043561935,0.010803552344441414,0.004577776417136192,-0.0037841796875,-0.01080322265625,-0.01202392578125,-0.00750732421875,0.0007324442267417908,0.010040589608252048,0.016510512679815292,0.016907254233956337,0.010101626627147198,-0.001373291015625,-0.013427734375,-0.021392822265625,-0.021697998046875,-0.014434814453125,-0.0015869140625,0.012146366760134697,0.021210364997386932,0.023377178236842155,0.018616290763020515,0.007751701399683952,-0.00506591796875,-0.013336181640625,-0.014404296875,-0.0103759765625,-0.0025634765625,0.00634784996509552,0.011719107627868652,0.011322367005050182,0.0064699240028858185,0.00045777764171361923,-0.004150390625,-0.0052490234375,-0.001220703125,0.004913480021059513,0.00946073792874813,0.01071199681609869,0.007751701399683952,0.0008239997550845146,-0.007598876953125,-0.01300048828125,-0.01275634765625,-0.007354736328125,0.0010681478306651115,0.008758812211453915,0.01303140353411436,0.011871700175106525,0.004974517039954662,-0.003631591796875,-0.00933837890625,-0.010284423828125,-0.006622314453125,0.0012207403779029846,0.01037629321217537,0.014831995591521263,0.012573625892400742,0.005615405738353729,-0.0042724609375,-0.013458251953125,-0.0174560546875,-0.014129638671875,-0.004913330078125,0.006317331455647945,0.0157780684530735,0.019501328468322754,0.015106662176549435,0.004669331945478916,-0.0062255859375,-0.0137939453125,-0.01641845703125,-0.012420654296875,-0.0032958984375,0.005859553813934326,0.011139255948364735,0.011688589118421078,0.007599108852446079,0.00045777764171361923,-0.005767822265625,-0.007965087890625,-0.00537109375,0.0001831110566854477,0.0058290353044867516,0.009094515815377235,0.007965330965816975,0.0025635547935962677,-0.0040283203125,-0.0086669921875,-0.010101318359375,-0.007049560546875,-0.000457763671875,0.006134220398962498,0.010071108117699623,0.009430219419300556,0.004669331945478916,-0.00238037109375,-0.0093994140625,-0.01275634765625,-0.01080322265625,-0.00543212890625,0.0009765923023223877,0.006683553569018841,0.008575701154768467,0.004730368964374065,-0.001861572265625,-0.00848388671875,-0.013671875,-0.013885498046875,-0.0084228515625,-0.000732421875,0.0066225165501236916,0.011200292967259884,0.010620441287755966,0.005615405738353729,-0.001220703125,-0.008087158203125,-0.01324462890625,-0.013427734375,-0.00860595703125,-0.002716064453125,0.0032044434919953346,0.008423108607530594,0.009216589853167534,0.005523850210011005,0.00079348124563694,-0.00384521484375,-0.0086669921875,-0.0115966796875,-0.010894775390625,-0.0081787109375,-0.00457763671875,0,0.0034485915675759315,0.004730368964374065,0.005127109587192535,0.004577776417136192,0.0018005920574069023,-0.001373291015625,-0.00225830078125,-0.00244140625,-0.0029296875,-0.001373291015625,0.001037629321217537,0.0023499252274632454,0.003875850699841976,0.004852443002164364,0.002868739888072014,0.00030518509447574615,-0.000823974609375,-0.002838134765625,-0.0045166015625,-0.003173828125,-0.0006103515625,0.0017090365290641785,0.0037537766620516777,0.004425183869898319,0.0026551103219389915,-0.00018310546875,-0.002044677734375,-0.004150390625,-0.0054931640625,-0.003082275390625,0.0013122959062457085,0.005920590832829475,0.009735404513776302,0.011535996571183205,0.01077303383499384,0.0076601458713412285,0.004028443247079849,-0.000396728515625,-0.004241943359375,-0.004302978515625,-0.002105712890625,0.0011597033590078354,0.004913480021059513,0.007721182890236378,0.009399700909852982,0.008545182645320892,0.0052797021344304085,0.0008850367739796638,-0.002471923828125,-0.003570556640625,-0.003936767578125,-0.002685546875,0.0002136295661330223,0.0024414807558059692,0.0036927396431565285,0.0035096285864710808,0.0016174810007214546,-0.0003662109375,-0.00115966796875,-0.00079345703125,0.00012207403779029846,0.0020142216235399246,0.003814813680946827,0.0032044434919953346,0.001434369944036007,-0.000457763671875,-0.00372314453125,-0.006561279296875,-0.00665283203125,-0.00457763671875,-0.00189208984375,0.0007019257172942162,0.00317392498254776,0.0039674062281847,0.0015564439818263054,-0.00189208984375,-0.0042724609375,-0.006439208984375,-0.00726318359375,-0.005035400390625,-0.00201416015625,0.0002136295661330223,0.0019226660951972008,0.0021973326802253723,0.00033570360392332077,-0.002288818359375,-0.004150390625,-0.004852294921875,-0.004119873046875,-0.002197265625,-0.00048828125,0.0004882961511611938,0.0006103701889514923,-0.0003662109375,-0.001861572265625,-0.003692626953125,-0.004180908203125,-0.001922607421875,0.00027466658502817154,0.0014648884534835815,0.002227851189672947,0.0017700735479593277,0.00033570360392332077,-0.001800537109375,-0.0035400390625,-0.003326416015625,-0.001373291015625,0.0018616290763020515,0.0050355540588498116,0.0066225165501236916,0.0064699240028858185,0.003936887718737125,-0.000274658203125,-0.00384521484375,-0.00555419921875,-0.0048828125,-0.0018310546875,0.0023499252274632454,0.005981627851724625,0.007446516305208206,0.006012146361172199,0.00277718435972929,-0.000823974609375,-0.003387451171875,-0.004241943359375,-0.00323486328125,-0.000396728515625,0.002136295661330223,0.00317392498254776,0.00277718435972929,0.0013733329251408577,-0.00048828125,-0.0020751953125,-0.0018310546875,-0.000518798828125,0.0009155552834272385,0.0027466658502817154,0.003814813680946827,0.0031434064731001854,0.001037629321217537,-0.001220703125,-0.0025634765625,-0.0032958984375,-0.003143310546875,-0.00140380859375,0.0011597033590078354,0.002227851189672947,0.00158696249127388,0.0014648884534835815,0.001037629321217537,-0.00006103515625,0.000030518509447574615,0.0011291848495602608,0.0020142216235399246,0.0027161473408341408,0.0035401470959186554,0.003662221133708954,0.0021668141707777977,0.00015259254723787308,-0.0015869140625,-0.0032958984375,-0.003692626953125,-0.002197265625,0.000030518509447574615,0.0021057771518826485,0.003906369209289551,0.005340739153325558,0.005493331700563431,0.0033570360392332077,-0.000152587890625,-0.003265380859375,-0.0052490234375,-0.00640869140625,-0.006256103515625,-0.00390625,-0.000518798828125,0.0028077028691768646,0.005767998285591602,0.0066225165501236916,0.0050355540588498116,0.0020142216235399246,-0.002227783203125,-0.00653076171875,-0.009124755859375,-0.008758544921875,-0.00592041015625,-0.0018310546875,0.0021668141707777977,0.00436414685100317,0.003662221133708954,0,-0.00543212890625,-0.010406494140625,-0.012603759765625,-0.01116943359375,-0.00714111328125,-0.00128173828125,0.004303109832108021,0.0068666646257042885,0.006012146361172199,0.0025940733030438423,-0.00225830078125,-0.00738525390625,-0.009979248046875,-0.008331298828125,-0.00518798828125,-0.0015869140625,0.0031434064731001854,0.0062257759273052216,0.00555436871945858,0.0032959990203380585,0.0006408886983990669,-0.0023193359375,-0.003997802734375,-0.003265380859375,-0.001190185546875,0.0006103701889514923,0.0020447401329874992,0.002624591812491417,0.0010071108117699623,-0.001007080078125,-0.00164794921875,-0.001495361328125,-0.0003662109375,0.0017090365290641785,0.003326517529785633,0.003997924737632275,0.0040894802659749985,0.003906369209289551,0.003326517529785633,0.0032349620014429092,0.005218665115535259,0.007507553324103355,0.008117923513054848,0.008148442022502422,0.007293923757970333,0.003723258152604103,-0.001220703125,-0.003692626953125,-0.00347900390625,-0.002288818359375,0.0018616290763020515,0.007507553324103355,0.010071108117699623,0.0099795525893569,0.007385479286313057,0.0014954069629311562,-0.004302978515625,-0.00775146484375,-0.008819580078125,-0.00665283203125,-0.001495361328125,0.0050355540588498116,0.009430219419300556,0.009613330475986004,0.006897183135151863,0.0016785180196166039,-0.00384521484375,-0.006500244140625,-0.007049560546875,-0.004669189453125,0.0014648884534835815,0.007293923757970333,0.00958281196653843,0.008484145626425743,0.0050355540588498116,-0.000030517578125,-0.005523681640625,-0.008453369140625,-0.007781982421875,-0.004425048828125,0.0014648884534835815,0.006988738663494587,0.008880886249244213,0.0079348124563694,0.004333628341555595,-0.001800537109375,-0.007537841796875,-0.01080322265625,-0.011260986328125,-0.0079345703125,-0.00201416015625,0.0036011841148138046,0.007568590342998505,0.009155552834272385,0.007843256928026676,0.003479110077023506,-0.00140380859375,-0.0047607421875,-0.006683349609375,-0.0059814453125,-0.003021240234375,0.00015259254723787308,0.002685628831386566,0.0035096285864710808,0.0016479995101690292,-0.002197265625,-0.005584716796875,-0.00738525390625,-0.0072021484375,-0.003448486328125,0.0014648884534835815,0.004669331945478916,0.006134220398962498,0.004394665360450745,-0.001373291015625,-0.00872802734375,-0.01470947265625,-0.017120361328125,-0.01458740234375,-0.0069580078125,0.0030518509447574615,0.011474959552288055,0.016083255410194397,0.01474044006317854,0.007171849720180035,-0.0037841796875,-0.01409912109375,-0.019012451171875,-0.016937255859375,-0.00897216796875,0.002624591812491417,0.013214514590799809,0.018677327781915665,0.01675466075539589,0.00787377543747425,-0.004058837890625,-0.01458740234375,-0.01922607421875,-0.015594482421875,-0.00506591796875,0.008148442022502422,0.01907406747341156,0.023468732833862305,0.018768884241580963,0.0062257759273052216,-0.0087890625,-0.020416259765625,-0.024200439453125,-0.01885986328125,-0.0064697265625,0.008575701154768467,0.02053895592689514,0.024811547249555588,0.020172733813524246,0.00872829370200634,-0.0050048828125,-0.01531982421875,-0.018218994140625,-0.01385498046875,-0.0050048828125,0.00515762809664011,0.012512588873505592,0.013214514590799809,0.008148442022502422,0.00030518509447574615,-0.0067138671875,-0.00933837890625,-0.007598876953125,-0.0023193359375,0.004028443247079849,0.00714133121073246,0.005798516795039177,0.0007019257172942162,-0.005889892578125,-0.0106201171875,-0.011138916015625,-0.006439208984375,0.001739555038511753,0.009674367494881153,0.013672292232513428,0.012024292722344398,0.005523850210011005,-0.00360107421875,-0.010986328125,-0.013336181640625,-0.00982666015625,-0.00103759765625,0.008972441777586937,0.015320291742682457,0.015320291742682457,0.00833155307918787,-0.002197265625,-0.011383056640625,-0.015625,-0.01287841796875,-0.003631591796875,0.008301034569740295,0.01739555038511753,0.020325327292084694,0.0159001424908638,0.005371257662773132,-0.006103515625,-0.013458251953125,-0.0142822265625,-0.008819580078125,0.0013733329251408577,0.012726218439638615,0.018738364800810814,0.01669362559914589,0.009247108362615108,-0.000457763671875,-0.009307861328125,-0.013702392578125,-0.011566162109375,-0.003509521484375,0.00595110934227705,0.012268440797924995,0.013214514590799809,0.007904293946921825,-0.001007080078125,-0.009552001953125,-0.015167236328125,-0.015625,-0.010162353515625,-0.00146484375,0.006134220398962498,0.009613330475986004,0.0079348124563694,0.002533036284148693,-0.00390625,-0.009490966796875,-0.0120849609375,-0.0101318359375,-0.00494384765625,0.00015259254723787308,0.003082369454205036,0.003418073058128357,0.00045777764171361923,-0.00469970703125,-0.0079345703125,-0.007720947265625,-0.005584716796875,-0.001861572265625,0.002685628831386566,0.00555436871945858,0.004821924492716789,0.0014038514345884323,-0.00274658203125,-0.00677490234375,-0.009490966796875,-0.00848388671875,-0.004180908203125,0.000030518509447574615,0.0033570360392332077,0.0062257759273052216,0.006591998040676117,0.003997924737632275,0.001434369944036007,0.00006103701889514923,-0.001129150390625,-0.00128173828125,0.00009155552834272385,0.0018616290763020515,0.0027466658502817154,0.0021973326802253723,0.0014038514345884323,0.0008545182645320892,-0.000274658203125,-0.00115966796875,-0.00042724609375,0.0010681478306651115,0.00238044373691082,0.0036011841148138046,0.003906369209289551,0.0029908139258623123,0.0016479995101690292,0.0002136295661330223,-0.001373291015625,-0.003326416015625,-0.004119873046875,-0.003814697265625,-0.003326416015625,-0.00225830078125,-0.000518798828125,0.0012817773967981339,0.0017090365290641785,0.0010071108117699623,0.0006714072078466415,-0.00115966796875,-0.003997802734375,-0.004302978515625,-0.00347900390625,-0.003082275390625,-0.002044677734375,-0.00079345703125,-0.00018310546875,-0.000030517578125,-0.0003662109375,-0.00115966796875,-0.00128173828125,0.00033570360392332077,0.0020142216235399246,0.002685628831386566,0.0033875545486807823,0.00317392498254776,0.0010986663401126862,-0.001220703125,-0.002655029296875,-0.0032958984375,-0.003021240234375,-0.00067138671875,0.00277718435972929,0.005005035549402237,0.006408886983990669,0.006561479531228542,0.0044862208887934685,0.0020447401329874992,0.0006408886983990669,-0.0003662109375,-0.001068115234375,0.00015259254723787308,0.00238044373691082,0.00277718435972929,0.002624591812491417,0.002685628831386566,0.001739555038511753,0.0012512588873505592,0.0024414807558059692,0.0037842951714992523,0.0040894802659749985,0.0044862208887934685,0.003906369209289551,0.0008545182645320892,-0.001708984375,-0.002593994140625,-0.0032958984375,-0.002838134765625,-0.00042724609375,0.00119022186845541,0.00033570360392332077,-0.0008544921875,-0.00274658203125,-0.005584716796875,-0.006439208984375,-0.00494384765625,-0.001983642578125,0.002288888208568096,0.005859553813934326,0.006805627606809139,0.004516739398241043,0.00006103701889514923,-0.004974365234375,-0.0093994140625,-0.010467529296875,-0.007598876953125,-0.002899169921875,0.0021057771518826485,0.005859553813934326,0.006836146116256714,0.003906369209289551,-0.001068115234375,-0.00518798828125,-0.008087158203125,-0.007720947265625,-0.003997802734375,0.00030518509447574615,0.004516739398241043,0.006805627606809139,0.0060731833800673485,0.0035401470959186554,0.0001831110566854477,-0.002044677734375,-0.00201416015625,0.00015259254723787308,0.0031434064731001854,0.005401776172220707,0.006591998040676117,0.005096591077744961,0.0014648884534835815,-0.00115966796875,-0.002410888671875,-0.001983642578125,0.00079348124563694,0.004516739398241043,0.006958220154047012,0.007110812701284885,0.005371257662773132,0.0021973326802253723,-0.001068115234375,-0.002899169921875,-0.00274658203125,-0.000732421875,0.0017090365290641785,0.00357066560536623,0.004181035794317722,0.002471999265253544,-0.000335693359375,-0.002777099609375,-0.004425048828125,-0.00445556640625,-0.001953125,0.001739555038511753,0.0039674062281847,0.00476088747382164,0.004394665360450745,0.0015259254723787308,-0.001953125,-0.003997802734375,-0.00506591796875,-0.0050048828125,-0.003173828125,0.00015259254723787308,0.002533036284148693,0.0024109622463583946,0.0014038514345884323,0.00006103701889514923,-0.0013427734375,-0.002166748046875,-0.002532958984375,-0.0023193359375,-0.0015869140625,-0.00042724609375,0.0008239997550845146,0.0012207403779029846,0.00119022186845541,0.001831110566854477,0.002136295661330223,0.0013733329251408577,0.0002136295661330223,-0.001007080078125,-0.0015869140625,-0.00140380859375,-0.000732421875,0.0008850367739796638,0.0025635547935962677,0.0036011841148138046,0.0036927396431565285,0.00198370311409235,-0.001220703125,-0.004486083984375,-0.005462646484375,-0.003631591796875,-0.00018310546875,0.004181035794317722,0.007904293946921825,0.00912503432482481,0.006958220154047012,0.00198370311409235,-0.003692626953125,-0.0087890625,-0.010650634765625,-0.00738525390625,-0.00146484375,0.0044862208887934685,0.009033478796482086,0.009949034079909325,0.0058290353044867516,-0.001678466796875,-0.008819580078125,-0.012908935546875,-0.012664794921875,-0.007598876953125,-0.000213623046875,0.006286812946200371,0.009216589853167534,0.006714072078466415,0,-0.008331298828125,-0.01483154296875,-0.01629638671875,-0.01190185546875,-0.003387451171875,0.006378368474543095,0.013916440308094025,0.01541184727102518,0.010132145136594772,0.001037629321217537,-0.00823974609375,-0.0142822265625,-0.014678955078125,-0.0089111328125,0.0010071108117699623,0.010132145136594772,0.01474044006317854,0.013519699685275555,0.00714133121073246,-0.00201416015625,-0.0108642578125,-0.01446533203125,-0.01190185546875,-0.00616455078125,0.0021668141707777977,0.009765923023223877,0.012207403779029846,0.009674367494881153,0.0036011841148138046,-0.003265380859375,-0.007965087890625,-0.00909423828125,-0.00579833984375,0.00030518509447574615,0.0062257759273052216,0.009735404513776302,0.009369182400405407,0.005127109587192535,-0.000579833984375,-0.005157470703125,-0.007049560546875,-0.005523681640625,-0.0015869140625,0.003082369454205036,0.007049775682389736,0.007385479286313057,0.003997924737632275,-0.000640869140625,-0.00531005859375,-0.008392333984375,-0.00872802734375,-0.006317138671875,-0.00262451171875,0.00009155552834272385,0.0019531846046447754,0.0024414807558059692,-0.00006103515625,-0.0032958984375,-0.004364013671875,-0.00390625,-0.002593994140625,-0.000030517578125,0.002624591812491417,0.003418073058128357,0.00238044373691082,0.0006103701889514923,-0.00213623046875,-0.00445556640625,-0.0042724609375,-0.0023193359375,0.0002441480755805969,0.0028382213786244392,0.0044862208887934685,0.004058961756527424,0.0018616290763020515,-0.000274658203125,-0.002166748046875,-0.003570556640625,-0.003021240234375,-0.00042724609375,0.0020142216235399246,0.0033875545486807823,0.004058961756527424,0.0038453321903944016,0.0026551103219389915,0.0015259254723787308,0.0010681478306651115,0.0014038514345884323,0.0025025177747011185,0.0036927396431565285,0.0035401470959186554,0.0014648884534835815,-0.00030517578125,-0.001190185546875,-0.002197265625,-0.00201416015625,-0.00006103515625,0.0021057771518826485,0.004150517284870148,0.005371257662773132,0.004211554303765297,0.0012512588873505592,-0.00146484375,-0.0037841796875,-0.00567626953125,-0.00543212890625,-0.002899169921875,0,0.003021332435309887,0.005340739153325558,0.005127109587192535,0.0029602954164147377,0.00027466658502817154,-0.002471923828125,-0.004547119140625,-0.00439453125,-0.00189208984375,0.0005188146606087685,0.0027161473408341408,0.0046388134360313416,0.003997924737632275,0.0012207403779029846,-0.001129150390625,-0.003173828125,-0.004913330078125,-0.004547119140625,-0.001861572265625,0.0014038514345884323,0.004150517284870148,0.005890072323381901,0.0056764427572488785,0.0035401470959186554,0.0007019257172942162,-0.002593994140625,-0.00469970703125,-0.004058837890625,-0.002197265625,0.0006408886983990669,0.003936887718737125,0.005981627851724625,0.006286812946200371,0.004699850454926491,0.0015564439818263054,-0.001922607421875,-0.004241943359375,-0.0042724609375,-0.00311279296875,-0.0008544921875,0.002288888208568096,0.0038453321903944016,0.00317392498254776,0.00119022186845541,-0.00164794921875,-0.00384521484375,-0.004364013671875,-0.00299072265625,-0.0008544921875,0.0011597033590078354,0.0033570360392332077,0.004119998775422573,0.0025025177747011185,-0.000518798828125,-0.003936767578125,-0.005950927734375,-0.006072998046875,-0.004364013671875,-0.00164794921875,0.0002136295661330223,0.0012207403779029846,0.0006408886983990669,-0.00177001953125,-0.0047607421875,-0.007080078125,-0.00714111328125,-0.004913330078125,-0.001129150390625,0.003265480510890484,0.006195257417857647,0.006653035059571266,0.0044862208887934685,0.0001831110566854477,-0.004486083984375,-0.0081787109375,-0.00927734375,-0.006927490234375,-0.0028076171875,0.0015564439818263054,0.005005035549402237,0.006134220398962498,0.005066072568297386,0.002471999265253544,-0.00079345703125,-0.00311279296875,-0.00384521484375,-0.003173828125,-0.00067138671875,0.002136295661330223,0.003082369454205036,0.0028382213786244392,0.0025940733030438423,0.0011597033590078354,-0.000457763671875,-0.0001220703125,0.0014038514345884323,0.00317392498254776,0.004974517039954662,0.006134220398962498,0.0058290353044867516,0.003875850699841976,0.0011597033590078354,-0.001220703125,-0.002532958984375,-0.00262451171875,-0.002105712890625,-0.000701904296875,0.00119022186845541,0.002533036284148693,0.0027161473408341408,0.002136295661330223,0.001434369944036007,0.0002441480755805969,-0.000946044921875,-0.001800537109375,-0.002777099609375,-0.003204345703125,-0.00274658203125,-0.00201416015625,-0.00128173828125,-0.00091552734375,-0.000274658203125,0.0006408886983990669,0.0007324442267417908,0.0004882961511611938,0.0006714072078466415,0.0006408886983990669,0.00033570360392332077,-0.000152587890625,-0.0008544921875,-0.001922607421875,-0.003692626953125,-0.004730224609375,-0.004302978515625,-0.003143310546875,-0.001251220703125,0.00158696249127388,0.004547257907688618,0.006439405493438244,0.006988738663494587,0.00595110934227705,0.0031128879636526108,0,-0.001953125,-0.0023193359375,-0.00115966796875,0.0015564439818263054,0.005310220643877983,0.008087405003607273,0.00839259009808302,0.006775109097361565,0.004333628341555595,0.0016174810007214546,-0.00048828125,-0.001007080078125,0.00027466658502817154,0.0032959990203380585,0.006012146361172199,0.006500442512333393,0.00555436871945858,0.002929776906967163,-0.000946044921875,-0.00360107421875,-0.004547119140625,-0.003753662109375,-0.0013427734375,0.0018921475857496262,0.004821924492716789,0.004974517039954662,0.0031128879636526108,0.0010071108117699623,-0.001922607421875,-0.004638671875,-0.005645751953125,-0.005096435546875,-0.0042724609375,-0.00360107421875,-0.00213623046875,-0.001220703125,-0.0023193359375,-0.0037841796875,-0.00396728515625,-0.00360107421875,-0.003814697265625,-0.003662109375,-0.00311279296875,-0.003631591796875,-0.004974365234375,-0.006103515625,-0.006744384765625,-0.0067138671875,-0.005340576171875,-0.0028076171875,-0.000213623046875,0.001434369944036007,0.0020447401329874992,0.0020142216235399246,0.0008850367739796638,-0.000762939453125,-0.001678466796875,-0.001708984375,-0.000946044921875,0.00027466658502817154,0.0010071108117699623,0.001342814415693283,0.0011291848495602608,0.0006408886983990669,0.0009460737928748131,0.0013733329251408577,0.0017700735479593277,0.003326517529785633,0.004516739398241043,0.003814813680946827,0.0025940733030438423,0.0013122959062457085,-0.00018310546875,-0.00140380859375,-0.001129150390625,0.0003662221133708954,0.0013122959062457085,0.002075258642435074,0.002929776906967163,0.002471999265253544,0.0009460737928748131,-0.000518798828125,-0.00146484375,-0.00152587890625,-0.000335693359375,0.00119022186845541,0.00198370311409235,0.0023499252274632454,0.001739555038511753,-0.00042724609375,-0.002716064453125,-0.00390625,-0.004364013671875,-0.003936767578125,-0.00164794921875,0.0010071108117699623,0.0019226660951972008,0.0016479995101690292,0.00079348124563694,-0.00152587890625,-0.004119873046875,-0.004730224609375,-0.004058837890625,-0.002838134765625,-0.000274658203125,0.0020447401329874992,0.0020447401329874992,0.0011291848495602608,0.00030518509447574615,-0.00146484375,-0.002655029296875,-0.001556396484375,0,0.0016785180196166039,0.003997924737632275,0.0050355540588498116,0.0038453321903944016,0.0022583696991205215,0.0007629627361893654,-0.00091552734375,-0.001251220703125,0.00045777764171361923,0.002533036284148693,0.0036317026242613792,0.004272591322660446,0.004058961756527424,0.0017090365290641785,-0.00091552734375,-0.001861572265625,-0.0020751953125,-0.001129150390625,0.001434369944036007,0.00357066560536623,0.004608294926583767,0.00476088747382164,0.0032044434919953346,0.00027466658502817154,-0.002227783203125,-0.003143310546875,-0.0030517578125,-0.00146484375,0.0016479995101690292,0.0036927396431565285,0.004303109832108021,0.0037842951714992523,0.0013122959062457085,-0.00213623046875,-0.005706787109375,-0.00775146484375,-0.00750732421875,-0.00555419921875,-0.002288818359375,0.00039674062281847,0.0021973326802253723,0.0025025177747011185,0.00033570360392332077,-0.00250244140625,-0.00494384765625,-0.006103515625,-0.005157470703125,-0.0030517578125,-0.0006103515625,0.0015564439818263054,0.0027466658502817154,0.0023499252274632454,-0.00006103515625,-0.002777099609375,-0.0040283203125,-0.0042724609375,-0.00341796875,-0.000762939453125,0.0025635547935962677,0.004608294926583767,0.005188146606087685,0.0048829615116119385,0.0029908139258623123,-0.00006103515625,-0.001983642578125,-0.00164794921875,-0.00018310546875,0.0016479995101690292,0.004119998775422573,0.005859553813934326,0.005798516795039177,0.004852443002164364,0.0032044434919953346,0.0012207403779029846,0.0009155552834272385,0.002288888208568096,0.003418073058128357,0.003936887718737125,0.004425183869898319,0.0038453321903944016,0.0014648884534835815,-0.001220703125,-0.003021240234375,-0.00347900390625,-0.00274658203125,-0.001007080078125,0.0011597033590078354,0.002227851189672947,0.0016785180196166039,0.0003662221133708954,-0.001312255859375,-0.003265380859375,-0.004669189453125,-0.00408935546875,-0.00238037109375,-0.000885009765625,0.00027466658502817154,0.00033570360392332077,-0.000885009765625,-0.00250244140625,-0.003997802734375,-0.004791259765625,-0.004547119140625,-0.003173828125,-0.001220703125,-0.000244140625,-0.00103759765625,-0.002349853515625,-0.003692626953125,-0.005035400390625,-0.005279541015625,-0.00360107421875,-0.000396728515625,0.0028077028691768646,0.004974517039954662,0.005523850210011005,0.0037842951714992523,0.0013122959062457085,-0.00054931640625,-0.00177001953125,-0.001495361328125,0.0003662221133708954,0.00317392498254776,0.004974517039954662,0.0048829615116119385,0.0039674062281847,0.0025940733030438423,0.0004882961511611938,-0.001190185546875,-0.00091552734375,0.0005188146606087685,0.0021973326802253723,0.004028443247079849,0.004547257907688618,0.00317392498254776,0.0005798516795039177,-0.002105712890625,-0.003631591796875,-0.003753662109375,-0.002410888671875,0.00030518509447574615,0.0032349620014429092,0.004730368964374065,0.0039674062281847,0.0016479995101690292,-0.0010986328125,-0.003875732421875,-0.005615234375,-0.005340576171875,-0.00384521484375,-0.00177001953125,0.00027466658502817154,0.0009460737928748131,-0.000091552734375,-0.00213623046875,-0.003936767578125,-0.00494384765625,-0.005218505859375,-0.00439453125,-0.0025634765625,-0.0008544921875,-0.000213623046875,-0.000335693359375,-0.000732421875,-0.001739501953125,-0.002044677734375,-0.0006103515625,0.0006103701889514923,0.001342814415693283,0.0025940733030438423,0.00317392498254776,0.0021668141707777977,0.0004882961511611938,-0.000732421875,-0.001251220703125,-0.00103759765625,-0.00018310546875,0.0010986663401126862,0.002136295661330223,0.0023499252274632454,0.002075258642435074,0.001037629321217537,0.00027466658502817154,0.0004882961511611938,0.00039674062281847,0.0012207403779029846,0.0033570360392332077,0.003936887718737125,0.0031434064731001854,0.002075258642435074,0.0002136295661330223,-0.001373291015625,-0.001220703125,0.0003662221133708954,0.002075258642435074,0.0037537766620516777,0.005371257662773132,0.004608294926583767,0.001342814415693283,-0.00177001953125,-0.0042724609375,-0.006317138671875,-0.0064697265625,-0.00439453125,-0.0018310546875,-0.00006103515625,0.001434369944036007,0.001739555038511753,-0.00006103515625,-0.002288818359375,-0.00360107421875,-0.004180908203125,-0.003387451171875,-0.000946044921875,0.0011291848495602608,0.0021057771518826485,0.002136295661330223,0.0006714072078466415,-0.002044677734375,-0.004608154296875,-0.0052490234375,-0.003814697265625,-0.001007080078125,0.0026551103219389915,0.005981627851724625,0.00714133121073246,0.006164738908410072,0.004119998775422573,0.00045777764171361923,-0.00347900390625,-0.005035400390625,-0.00390625,-0.001953125,0.0006103701889514923,0.004455702379345894,0.0070192571729421616,0.007110812701284885,0.0062257759273052216,0.004547257907688618,0.0023194067180156708,0.0012817773967981339,0.0016479995101690292,0.0020142216235399246,0.0027161473408341408,0.0036011841148138046,0.0028077028691768646,0.001037629321217537,0,-0.000885009765625,-0.001129150390625,0.0011291848495602608,0.004608294926583767,0.006653035059571266,0.007385479286313057,0.0068666646257042885,0.004150517284870148,-0.000030517578125,-0.003875732421875,-0.006011962890625,-0.006011962890625,-0.00347900390625,0.00012207403779029846,0.002471999265253544,0.00357066560536623,0.0032959990203380585,0.0007019257172942162,-0.00274658203125,-0.004974365234375,-0.005462646484375,-0.00506591796875,-0.004058837890625,-0.002471923828125,-0.00213623046875,-0.003814697265625,-0.00604248046875,-0.008087158203125,-0.00921630859375,-0.007904052734375,-0.00439453125,-0.000579833984375,0.0025940733030438423,0.004791405983269215,0.004699850454926491,0.002136295661330223,-0.00189208984375,-0.005096435546875,-0.005218505859375,-0.003814697265625,-0.001983642578125,0.0017090365290641785,0.004943998530507088,0.005096591077744961,0.0036927396431565285,0.0013122959062457085,-0.001220703125,-0.001983642578125,-0.0003662109375,0.0027466658502817154,0.005798516795039177,0.007965330965816975,0.008239997550845146,0.0056764427572488785,0.0018005920574069023,-0.001617431640625,-0.002777099609375,-0.0013427734375,0.0018921475857496262,0.006500442512333393,0.009735404513776302,0.0099795525893569,0.007110812701284885,0.00158696249127388,-0.003204345703125,-0.00592041015625,-0.006134033203125,-0.003173828125,0.001342814415693283,0.0054322946816682816,0.0072634052485227585,0.005645924247801304,0.00119022186845541,-0.004241943359375,-0.008148193359375,-0.00927734375,-0.007354736328125,-0.00299072265625,0.0014038514345884323,0.003479110077023506,0.0021973326802253723,-0.0020751953125,-0.00787353515625,-0.012176513671875,-0.012939453125,-0.0101318359375,-0.0050048828125,-0.000335693359375,0.00238044373691082,0.00277718435972929,-0.000701904296875,-0.006072998046875,-0.009307861328125,-0.009521484375,-0.0068359375,-0.0008544921875,0.00595110934227705,0.009765923023223877,0.00952177494764328,0.005920590832829475,0.0006408886983990669,-0.00445556640625,-0.0069580078125,-0.00482177734375,0.0009460737928748131,0.00799584947526455,0.012848292477428913,0.01348918117582798,0.010681478306651115,0.005249183624982834,-0.0008544921875,-0.004852294921875,-0.004180908203125,0.0004272591322660446,0.005767998285591602,0.01037629321217537,0.012085329741239548,0.00906399730592966,0.00317392498254776,-0.002471923828125,-0.0054931640625,-0.00482177734375,-0.00030517578125,0.005767998285591602,0.009887997061014175,0.011139255948364735,0.008423108607530594,0.0015564439818263054,-0.0062255859375,-0.01202392578125,-0.01318359375,-0.0093994140625,-0.004150390625,0.0007324442267417908,0.003936887718737125,0.00317392498254776,-0.00152587890625,-0.007171630859375,-0.010894775390625,-0.012298583984375,-0.010162353515625,-0.00457763671875,0.00033570360392332077,0.002227851189672947,0.0011597033590078354,-0.002227783203125,-0.0068359375,-0.01031494140625,-0.00994873046875,-0.00604248046875,-0.0006103515625,0.004058961756527424,0.00555436871945858,0.0033875545486807823,-0.0015869140625,-0.007476806640625,-0.011383056640625,-0.0113525390625,-0.00701904296875,-0.0003662109375,0.006530961021780968,0.010834070853888988,0.00991851557046175,0.006012146361172199,0.0016174810007214546,-0.0020751953125,-0.00286865234375,0.00030518509447574615,0.006591998040676117,0.01229895930737257,0.014130069874227047,0.01269569993019104,0.008056886494159698,0.0008239997550845146,-0.00506591796875,-0.00677490234375,-0.00439453125,0.0005188146606087685,0.006714072078466415,0.011200292967259884,0.010437330231070518,0.00476088747382164,-0.00238037109375,-0.0084228515625,-0.012115478515625,-0.0111083984375,-0.00482177734375,0.0025025177747011185,0.007751701399683952,0.009491256438195705,0.00674459058791399,0.0011597033590078354,-0.004486083984375,-0.008056640625,-0.00823974609375,-0.005584716796875,-0.001007080078125,0.0032044434919953346,0.004272591322660446,0.001434369944036007,-0.003631591796875,-0.0084228515625,-0.01165771484375,-0.01153564453125,-0.00714111328125,-0.000946044921875,0.004455702379345894,0.006958220154047012,0.006134220398962498,0.002929776906967163,-0.00244140625,-0.007110595703125,-0.007843017578125,-0.0052490234375,-0.000518798828125,0.004699850454926491,0.008209479041397572,0.008545182645320892,0.006195257417857647,0.0024414807558059692,-0.00213623046875,-0.0052490234375,-0.00457763671875,-0.001617431640625,0.0012512588873505592,0.003418073058128357,0.004577776417136192,0.003997924737632275,0.0021057771518826485,0.00012207403779029846,-0.001068115234375,0,0.002868739888072014,0.005066072568297386,0.006134220398962498,0.006988738663494587,0.0066225165501236916,0.004150517284870148,0.0017090365290641785,0.00079348124563694,0.00030518509447574615,0.00039674062281847,0.0017090365290641785,0.002471999265253544,0.0018005920574069023,0.00119022186845541,0.0004882961511611938,-0.00115966796875,-0.00225830078125,-0.00201416015625,-0.001861572265625,-0.00201416015625,-0.001373291015625,-0.00115966796875,-0.002532958984375,-0.003173828125,-0.00299072265625,-0.00396728515625,-0.003631591796875,-0.001068115234375,0.00015259254723787308,0.0001831110566854477,0.0005188146606087685,-0.00030517578125,-0.0020751953125,-0.003326416015625,-0.00396728515625,-0.0040283203125,-0.00347900390625,-0.00201416015625,-0.001068115234375,-0.00152587890625,-0.001190185546875,-0.000640869140625,-0.00054931640625,0.0007019257172942162,0.0020142216235399246,0.002868739888072014,0.004181035794317722,0.004577776417136192,0.0033570360392332077,0.0015564439818263054,0.0006408886983990669,0.00012207403779029846,-0.000457763671875,0.00027466658502817154,0.0016479995101690292,0.0028992583975195885,0.004425183869898319,0.004791405983269215,0.004119998775422573,0.0030518509447574615,0.0016174810007214546,0.00015259254723787308,-0.00128173828125,-0.001617431640625,-0.001495361328125,-0.001556396484375,-0.000762939453125,-0.000152587890625,-0.000457763671875,-0.0008544921875,-0.00128173828125,-0.001678466796875,-0.001800537109375,-0.0009765625,0.00033570360392332077,0.0016785180196166039,0.0029908139258623123,0.002471999265253544,0.00045777764171361923,-0.000823974609375,-0.003082275390625,-0.005859375,-0.006439208984375,-0.0050048828125,-0.003021240234375,-0.001007080078125,0.0008239997550845146,0.001434369944036007,0,-0.00262451171875,-0.005279541015625,-0.007476806640625,-0.008056640625,-0.00579833984375,-0.00213623046875,0.001434369944036007,0.004577776417136192,0.005920590832829475,0.00476088747382164,0.0016785180196166039,-0.001190185546875,-0.002899169921875,-0.003173828125,-0.0008544921875,0.0028077028691768646,0.005615405738353729,0.007049775682389736,0.006714072078466415,0.003875850699841976,-0.000701904296875,-0.004119873046875,-0.00457763671875,-0.003082275390625,0.0001831110566854477,0.00476088747382164,0.008514664135873318,0.009826960042119026,0.008148442022502422,0.004211554303765297,-0.000274658203125,-0.00384521484375,-0.004974365234375,-0.0035400390625,-0.00079345703125,0.00277718435972929,0.0052797021344304085,0.0048829615116119385,0.0028077028691768646,-0.0001220703125,-0.002960205078125,-0.003753662109375,-0.0028076171875,-0.000213623046875,0.0030518509447574615,0.004272591322660446,0.0033875545486807823,0.0008850367739796638,-0.00311279296875,-0.006744384765625,-0.008514404296875,-0.0076904296875,-0.004608154296875,-0.0006103515625,0.003021332435309887,0.005066072568297386,0.004425183869898319,0.0018616290763020515,-0.00054931640625,-0.002410888671875,-0.003387451171875,-0.002716064453125,-0.00054931640625,0.0019531846046447754,0.0031434064731001854,0.0031128879636526108,0.0018921475857496262,-0.00091552734375,-0.003509521484375,-0.003997802734375,-0.0028076171875,-0.000823974609375,0.0015564439818263054,0.003936887718737125,0.004791405983269215,0.003021332435309887,-0.0001220703125,-0.002716064453125,-0.0045166015625,-0.0045166015625,-0.002655029296875,0.00012207403779029846,0.0029908139258623123,0.0042420728132128716,0.004272591322660446,0.0035401470959186554,0.0015259254723787308,0.000030518509447574615,-0.0001220703125,-0.000030517578125,0.0003662221133708954,0.0011291848495602608,0.0007629627361893654,-0.0009765625,-0.0029296875,-0.004364013671875,-0.004608154296875,-0.003509521484375,-0.00115966796875,0.002288888208568096,0.004577776417136192,0.004577776417136192,0.003418073058128357,0.0014648884534835815,-0.00140380859375,-0.00390625,-0.004119873046875,-0.00244140625,-0.00018310546875,0.002288888208568096,0.004028443247079849,0.003906369209289551,0.0023194067180156708,0.00009155552834272385,-0.00177001953125,-0.00262451171875,-0.002197265625,-0.000762939453125,0.0012817773967981339,0.0028992583975195885,0.0025025177747011185,0.0006714072078466415,-0.001556396484375,-0.00433349609375,-0.005950927734375,-0.005035400390625,-0.0028076171875,-0.000457763671875,0.0023194067180156708,0.005096591077744961,0.005310220643877983,0.0029602954164147377,0.0005493331700563431,-0.001556396484375,-0.003448486328125,-0.003814697265625,-0.002288818359375,0.0001831110566854477,0.0018005920574069023,0.0025635547935962677,0.002288888208568096,0,-0.00201416015625,-0.0025634765625,-0.002838134765625,-0.00189208984375,0.0007629627361893654,0.0029908139258623123,0.0036011841148138046,0.0029602954164147377,0.0007019257172942162,-0.00201416015625,-0.00360107421875,-0.00390625,-0.002685546875,-0.000335693359375,0.002685628831386566,0.005371257662773132,0.005645924247801304,0.0039674062281847,0.0016785180196166039,-0.001220703125,-0.00347900390625,-0.0032958984375,-0.001495361328125,0.0004272591322660446,0.0025025177747011185,0.004272591322660446,0.003875850699841976,0.0010986663401126862,-0.001861572265625,-0.00421142578125,-0.005889892578125,-0.005462646484375,-0.0030517578125,-0.000335693359375,0.0019226660951972008,0.0028992583975195885,0.00158696249127388,-0.00115966796875,-0.003631591796875,-0.00543212890625,-0.00604248046875,-0.004150390625,-0.001220703125,0.0006714072078466415,0.002075258642435074,0.0024414807558059692,0.0006408886983990669,-0.002044677734375,-0.003509521484375,-0.003387451171875,-0.002471923828125,-0.00018310546875,0.002685628831386566,0.0037842951714992523,0.003906369209289551,0.0035096285864710808,0.0010681478306651115,-0.001190185546875,-0.001129150390625,-0.00030517578125,0.0010986663401126862,0.0036011841148138046,0.005493331700563431,0.005798516795039177,0.004791405983269215,0.003021332435309887,0.0009155552834272385,-0.000518798828125,-0.00030517578125,0.0005493331700563431,0.0018616290763020515,0.003662221133708954,0.003936887718737125,0.0027161473408341408,0.0010071108117699623,-0.000762939453125,-0.00189208984375,-0.0018310546875,-0.0008544921875,-0.000274658203125,0.00030518509447574615,0.001037629321217537,0,-0.00152587890625,-0.00213623046875,-0.002899169921875,-0.0025634765625,-0.001068115234375,-0.0001220703125,0.00045777764171361923,0.0006714072078466415,0.0001831110566854477,-0.001251220703125,-0.002777099609375,-0.00286865234375,-0.0025634765625,-0.001861572265625,-0.000823974609375,-0.000396728515625,-0.000457763671875,-0.001312255859375,-0.002593994140625,-0.003265380859375,-0.003204345703125,-0.001983642578125,-0.000244140625,0.0018005920574069023,0.003479110077023506,0.0033570360392332077,0.002288888208568096,0.0007629627361893654,-0.000885009765625,-0.00152587890625,-0.001190185546875,-0.000030517578125,0.001037629321217537,0.0016479995101690292,0.002075258642435074,0.0015564439818263054,0.0005188146606087685,-0.000396728515625,-0.000701904296875,-0.000274658203125,0.00033570360392332077,0.0013122959062457085,0.0017700735479593277,0.001037629321217537,0,-0.001190185546875,-0.00244140625,-0.00286865234375,-0.001708984375,0.00009155552834272385,0.001342814415693283,0.0025025177747011185,0.0031128879636526108,0.0021057771518826485,0.0004272591322660446,-0.00103759765625,-0.001922607421875,-0.001678466796875,-0.001251220703125,-0.000732421875,-0.00006103515625,-0.00006103515625,-0.00067138671875,-0.001708984375,-0.002532958984375,-0.0025634765625,-0.001708984375,0.00015259254723787308,0.002075258642435074,0.0032044434919953346,0.00317392498254776,0.0020142216235399246,0.00045777764171361923,-0.0013427734375,-0.002288818359375,-0.001556396484375,-0.00048828125,0.0005493331700563431,0.001831110566854477,0.002624591812491417,0.0021973326802253723,0.0007324442267417908,-0.000335693359375,-0.000762939453125,-0.000762939453125,-0.0001220703125,0.0001831110566854477,0.00006103701889514923,-0.00042724609375,-0.001434326171875,-0.0018310546875,-0.002044677734375,-0.00225830078125,-0.000946044921875,0.0010071108117699623,0.0017700735479593277,0.0016479995101690292,0.0015259254723787308,0.0009765923023223877,-0.000213623046875,-0.00091552734375,-0.000823974609375,-0.000518798828125,-0.00018310546875,0.00012207403779029846,0.00027466658502817154,0.00012207403779029846,0,-0.000091552734375,-0.0006103515625,-0.000640869140625,0.00027466658502817154,0.0011291848495602608,0.0010986663401126862,0.00030518509447574615,-0.000823974609375,-0.00177001953125,-0.002044677734375,-0.001373291015625,0.0006714072078466415,0.003662221133708954,0.005584887228906155,0.005920590832829475,0.005066072568297386,0.0028077028691768646,0.00012207403779029846,-0.00177001953125,-0.00189208984375,-0.000518798828125,0.0012512588873505592,0.003936887718737125,0.006134220398962498,0.005890072323381901,0.003479110077023506,0.000030518509447574615,-0.002899169921875,-0.0048828125,-0.004913330078125,-0.002349853515625,0.0007019257172942162,0.002685628831386566,0.003479110077023506,0.0028077028691768646,0.00006103701889514923,-0.003448486328125,-0.0052490234375,-0.00531005859375,-0.003631591796875,-0.00048828125,0.0025940733030438423,0.003936887718737125,0.0025635547935962677,-0.000152587890625,-0.003173828125,-0.006317138671875,-0.007476806640625,-0.005584716796875,-0.001953125,0.0015259254723787308,0.0036317026242613792,0.004181035794317722,0.0022583696991205215,-0.001708984375,-0.00506591796875,-0.0067138671875,-0.006072998046875,-0.00347900390625,-0.000030517578125,0.00357066560536623,0.004913480021059513,0.0036011841148138046,0.0013733329251408577,-0.00140380859375,-0.003692626953125,-0.003509521484375,-0.001251220703125,0.0012817773967981339,0.00357066560536623,0.005066072568297386,0.004150517284870148,0.0013733329251408577,-0.0009765625,-0.0025634765625,-0.003204345703125,-0.001861572265625,0.001342814415693283,0.004547257907688618,0.0062257759273052216,0.006408886983990669,0.004516739398241043,0.001434369944036007,-0.000732421875,-0.00213623046875,-0.002105712890625,0,0.0024109622463583946,0.0038453321903944016,0.003723258152604103,0.002075258642435074,-0.0001220703125,-0.002410888671875,-0.003570556640625,-0.0029296875,-0.001220703125,0.001342814415693283,0.0035096285864710808,0.0030518509447574615,0.0006103701889514923,-0.00177001953125,-0.003997802734375,-0.005584716796875,-0.00469970703125,-0.001739501953125,0.0011597033590078354,0.003418073058128357,0.004181035794317722,0.0021973326802253723,-0.001251220703125,-0.003875732421875,-0.005523681640625,-0.006317138671875,-0.00482177734375,-0.001556396484375,0.0006408886983990669,0.0012512588873505592,0.0006714072078466415,-0.00189208984375,-0.005157470703125,-0.00634765625,-0.005584716796875,-0.0035400390625,0.0003662221133708954,0.004303109832108021,0.0054322946816682816,0.004608294926583767,0.0024109622463583946,-0.0015869140625,-0.004547119140625,-0.004791259765625,-0.00311279296875,-0.000091552734375,0.0035096285864710808,0.006256294436752796,0.006134220398962498,0.0035401470959186554,0.00039674062281847,-0.002288818359375,-0.00299072265625,-0.001373291015625,0.0017090365290641785,0.004913480021059513,0.006988738663494587,0.0072634052485227585,0.004303109832108021,-0.000457763671875,-0.004180908203125,-0.006317138671875,-0.006011962890625,-0.003204345703125,0.0007324442267417908,0.004303109832108021,0.005584887228906155,0.003723258152604103,-0.0003662109375,-0.004547119140625,-0.007171630859375,-0.007537841796875,-0.004669189453125,-0.000732421875,0.0018005920574069023,0.0033570360392332077,0.0028382213786244392,-0.000701904296875,-0.0052490234375,-0.007568359375,-0.0069580078125,-0.0050048828125,-0.00103759765625,0.0036927396431565285,0.005493331700563431,0.004058961756527424,0.0004272591322660446,-0.004119873046875,-0.0076904296875,-0.008331298828125,-0.00537109375,-0.000732421875,0.0044862208887934685,0.008819849230349064,0.009430219419300556,0.0064699240028858185,0.00198370311409235,-0.002349853515625,-0.00506591796875,-0.004119873046875,0.0003662221133708954,0.0052797021344304085,0.00918607134371996,0.011078218929469585,0.008941923268139362,0.003997924737632275,-0.001190185546875,-0.00421142578125,-0.00408935546875,-0.001495361328125,0.0028077028691768646,0.006714072078466415,0.008362071588635445,0.006836146116256714,0.0024109622463583946,-0.002288818359375,-0.0054931640625,-0.0062255859375,-0.003509521484375,0.00119022186845541,0.005645924247801304,0.00833155307918787,0.007751701399683952,0.0038453321903944016,-0.001373291015625,-0.00543212890625,-0.006744384765625,-0.005126953125,-0.001251220703125,0.003326517529785633,0.005981627851724625,0.005401776172220707,0.002136295661330223,-0.002777099609375,-0.007415771484375,-0.009521484375,-0.00836181640625,-0.005126953125,-0.000732421875,0.00357066560536623,0.004852443002164364,0.00317392498254776,0,-0.003875732421875,-0.006011962890625,-0.005889892578125,-0.003875732421875,0.00015259254723787308,0.004272591322660446,0.006195257417857647,0.005706961266696453,0.0031434064731001854,-0.000701904296875,-0.0037841796875,-0.004180908203125,-0.002655029296875,-0.000091552734375,0.0031434064731001854,0.00555436871945858,0.005890072323381901,0.0039674062281847,0.0005798516795039177,-0.002166748046875,-0.003021240234375,-0.00225830078125,-0.0003662109375,0.0019226660951972008,0.0036927396431565285,0.003906369209289551,0.0024414807558059692,0.00033570360392332077,-0.001861572265625,-0.002777099609375,-0.00164794921875,0,0.0016174810007214546,0.0033570360392332077,0.003997924737632275,0.002685628831386566,0.0004882961511611938,-0.001251220703125,-0.001983642578125,-0.00164794921875,-0.00115966796875,-0.00018310546875,0.00119022186845541,0.0010681478306651115,0.0002136295661330223,-0.00018310546875,-0.000946044921875,-0.001617431640625,-0.001251220703125,-0.0003662109375,0.00006103701889514923,0.0003662221133708954,0.0008850367739796638,0.00045777764171361923,-0.000732421875,-0.0015869140625,-0.001556396484375,-0.001129150390625,-0.000946044921875,-0.000244140625,0.0009765923023223877,0.0018616290763020515,0.001831110566854477,0.0012817773967981339,0.0011291848495602608,0.0009765923023223877,0.00045777764171361923,0.00015259254723787308,-0.000030517578125,-0.000946044921875,-0.001953125,-0.0018310546875,-0.001678466796875,-0.002227783203125,-0.001617431640625,0.00009155552834272385,0.0006103701889514923,0.0002441480755805969,0.00027466658502817154,-0.0001220703125,-0.001434326171875,-0.001922607421875,-0.001312255859375,-0.000701904296875,0.00006103701889514923,0.0009765923023223877,0.0009460737928748131,-0.000091552734375,-0.001129150390625,-0.001739501953125,-0.002471923828125,-0.0025634765625,-0.00115966796875,0.0005493331700563431,0.0014954069629311562,0.0015259254723787308,0.0007629627361893654,-0.0010986328125,-0.0030517578125,-0.00390625,-0.004180908203125,-0.003387451171875,-0.001220703125,0.00079348124563694,0.0016479995101690292,0.001739555038511753,0.001342814415693283,-0.0001220703125,-0.001800537109375,-0.00201416015625,-0.001220703125,-0.00006103515625,0.00198370311409235,0.003906369209289551,0.003723258152604103,0.00238044373691082,0.0008239997550845146,-0.001617431640625,-0.003814697265625,-0.003753662109375,-0.00177001953125,0.0002441480755805969,0.002227851189672947,0.00357066560536623,0.0026551103219389915,0.0006714072078466415,-0.00079345703125,-0.00250244140625,-0.003082275390625,-0.001220703125,0.0014648884534835815,0.0036317026242613792,0.005218665115535259,0.005584887228906155,0.004119998775422573,0.0019226660951972008,0,-0.001739501953125,-0.0020751953125,-0.000701904296875,0.0004272591322660446,0.0011291848495602608,0.001739555038511753,0.0009155552834272385,-0.00128173828125,-0.002899169921875,-0.003570556640625,-0.003753662109375,-0.002960205078125,-0.00128173828125,0.0006714072078466415,0.0016174810007214546,0.0013122959062457085,0.00030518509447574615,-0.00189208984375,-0.004241943359375,-0.005401611328125,-0.0052490234375,-0.003814697265625,-0.0015869140625,0.0006714072078466415,0.002227851189672947,0.0024414807558059692,0.0010986663401126862,-0.000762939453125,-0.001861572265625,-0.002471923828125,-0.002349853515625,-0.00067138671875,0.0005493331700563431,0.0006103701889514923,0.0010071108117699623,0.0004882961511611938,-0.001434326171875,-0.0028076171875,-0.0029296875,-0.0023193359375,-0.00103759765625,0.0012817773967981339,0.003326517529785633,0.0038453321903944016,0.003662221133708954,0.0028382213786244392,0.00119022186845541,-0.000457763671875,-0.000518798828125,0.0008545182645320892,0.0023194067180156708,0.0037842951714992523,0.004608294926583767,0.004181035794317722,0.003021332435309887,0.001037629321217537,-0.00091552734375,-0.002166748046875,-0.002227783203125,-0.000762939453125,0.0010681478306651115,0.0024414807558059692,0.0028382213786244392,0.0023194067180156708,0.0010681478306651115,-0.001129150390625,-0.003204345703125,-0.00384521484375,-0.003021240234375,-0.001251220703125,0.00012207403779029846,0.0010071108117699623,0.0012512588873505592,0,-0.0018310546875,-0.002899169921875,-0.003509521484375,-0.00360107421875,-0.00213623046875,-0.000091552734375,0.00079348124563694,0.0009460737928748131,0.0005798516795039177,-0.0010986328125,-0.003204345703125,-0.004058837890625,-0.003570556640625,-0.002197265625,-0.000457763671875,0.0009155552834272385,0.0016174810007214546,0.0012817773967981339,-0.000091552734375,-0.001434326171875,-0.002105712890625,-0.002044677734375,-0.000946044921875,0.0009460737928748131,0.0027161473408341408,0.003418073058128357,0.00317392498254776,0.002533036284148693,0.001434369944036007,-0.00018310546875,-0.001251220703125,-0.000518798828125,0.001037629321217537,0.0021668141707777977,0.0025635547935962677,0.0025635547935962677,0.0019226660951972008,0.000030518509447574615,-0.00146484375,-0.0018310546875,-0.00164794921875,-0.000213623046875,0.0016479995101690292,0.0025635547935962677,0.0023194067180156708,0.0013733329251408577,0.0004272591322660446,-0.000823974609375,-0.002227783203125,-0.002166748046875,-0.00018310546875,0.0019226660951972008,0.0028992583975195885,0.003418073058128357,0.0029908139258623123,0.0008239997550845146,-0.001373291015625,-0.002777099609375,-0.003265380859375,-0.0023193359375,-0.00030517578125,0.0016174810007214546,0.0026551103219389915,0.0024414807558059692,0.0009765923023223877,-0.001220703125,-0.00341796875,-0.00390625,-0.00238037109375,-0.0003662109375,0.0017700735479593277,0.003662221133708954,0.003997924737632275,0.00277718435972929,0.0005188146606087685,-0.001953125,-0.00286865234375,-0.001861572265625,-0.000244140625,0.0016479995101690292,0.0036011841148138046,0.004119998775422573,0.002624591812491417,0.0005493331700563431,-0.00103759765625,-0.00274658203125,-0.00299072265625,-0.000518798828125,0.002227851189672947,0.003814813680946827,0.0046388134360313416,0.004333628341555595,0.0021973326802253723,-0.001220703125,-0.003387451171875,-0.003326416015625,-0.002197265625,-0.0001220703125,0.002929776906967163,0.005127109587192535,0.004821924492716789,0.0029602954164147377,0.0006408886983990669,-0.0020751953125,-0.003692626953125,-0.002838134765625,-0.000244140625,0.0025940733030438423,0.0050355540588498116,0.00595110934227705,0.004333628341555595,0.0009460737928748131,-0.002960205078125,-0.005706787109375,-0.0062255859375,-0.004791259765625,-0.00177001953125,0.0012817773967981339,0.003082369454205036,0.002685628831386566,-0.000030517578125,-0.002960205078125,-0.00537109375,-0.006622314453125,-0.004669189453125,-0.001220703125,0.001739555038511753,0.0042420728132128716,0.004821924492716789,0.0028992583975195885,-0.000274658203125,-0.003265380859375,-0.004913330078125,-0.004608154296875,-0.001922607421875,0.0016785180196166039,0.003662221133708954,0.004455702379345894,0.004150517284870148,0.001342814415693283,-0.002166748046875,-0.004425048828125,-0.004852294921875,-0.0030517578125,0.00039674062281847,0.003936887718737125,0.005767998285591602,0.0060731833800673485,0.0046388134360313416,0.0010986663401126862,-0.002044677734375,-0.003204345703125,-0.002685546875,-0.000823974609375,0.00238044373691082,0.005401776172220707,0.005615405738353729,0.003936887718737125,0.0018005920574069023,-0.00152587890625,-0.004150390625,-0.00360107421875,-0.001220703125,0.0008545182645320892,0.0032349620014429092,0.004699850454926491,0.003021332435309887,0.0001831110566854477,-0.00177001953125,-0.003509521484375,-0.004119873046875,-0.00262451171875,-0.00030517578125,0.0012512588873505592,0.0020142216235399246,0.0014038514345884323,-0.001312255859375,-0.00408935546875,-0.00518798828125,-0.005645751953125,-0.00482177734375,-0.001800537109375,0.0013122959062457085,0.002624591812491417,0.002685628831386566,0.0015259254723787308,-0.00177001953125,-0.004241943359375,-0.003875732421875,-0.003265380859375,-0.00189208984375,0.0009460737928748131,0.0027466658502817154,0.00277718435972929,0.0015259254723787308,-0.000335693359375,-0.001922607421875,-0.002777099609375,-0.00189208984375,-0.000091552734375,0.0017090365290641785,0.003875850699841976,0.004181035794317722,0.002471999265253544,0.00033570360392332077,-0.00189208984375,-0.00311279296875,-0.002838134765625,-0.001312255859375,0.0008850367739796638,0.0028382213786244392,0.0038453321903944016,0.0028077028691768646,0.0007629627361893654,-0.0010986328125,-0.002105712890625,-0.00177001953125,-0.0008544921875,0.00039674062281847,0.0016174810007214546,0.0020447401329874992,0.0012817773967981339,-0.000396728515625,-0.001739501953125,-0.002685546875,-0.00323486328125,-0.002349853515625,-0.000396728515625,0.0008545182645320892,0.0007324442267417908,0.00006103701889514923,-0.00140380859375,-0.00396728515625,-0.005615234375,-0.00543212890625,-0.004119873046875,-0.00213623046875,0.00009155552834272385,0.0018005920574069023,0.0016785180196166039,0.00030518509447574615,-0.001007080078125,-0.002288818359375,-0.0029296875,-0.00201416015625,0,0.001739555038511753,0.0028992583975195885,0.003326517529785633,0.0019531846046447754,-0.000213623046875,-0.00146484375,-0.00189208984375,-0.001800537109375,-0.00054931640625,0.0015564439818263054,0.0035096285864710808,0.004119998775422573,0.0035401470959186554,0.0025635547935962677,0.0011291848495602608,-0.0001220703125,-0.00030517578125,0.00045777764171361923,0.001739555038511753,0.0032959990203380585,0.004425183869898319,0.004150517284870148,0.0028077028691768646,0.0012207403779029846,-0.00042724609375,-0.00146484375,-0.0009765625,0.0005493331700563431,0.002227851189672947,0.0033875545486807823,0.0033570360392332077,0.0019531846046447754,-0.000396728515625,-0.002899169921875,-0.004241943359375,-0.00457763671875,-0.00421142578125,-0.003021240234375,-0.001861572265625,-0.001007080078125,-0.00079345703125,-0.00146484375,-0.002685546875,-0.003631591796875,-0.003448486328125,-0.002532958984375,-0.001312255859375,0.0001831110566854477,0.0011291848495602608,0.0013733329251408577,0.0011597033590078354,0,-0.001068115234375,-0.00115966796875,-0.001129150390625,-0.00079345703125,-0.00006103515625,0.00027466658502817154,0.0001831110566854477,-0.000091552734375,-0.00030517578125,-0.000457763671875,-0.000640869140625,-0.000518798828125,0,0.00079348124563694,0.001434369944036007,0.002136295661330223,0.002929776906967163,0.003265480510890484,0.0033875545486807823,0.003479110077023506,0.0032959990203380585,0.0027466658502817154,0.0019226660951972008,0.0014038514345884323,0.0010681478306651115,0.0009155552834272385,0.0010681478306651115,0.0013122959062457085,0.0012512588873505592,0.0007324442267417908,0.00012207403779029846,-0.00042724609375,-0.001220703125,-0.001800537109375,-0.001495361328125,-0.000823974609375,-0.000457763671875,0,0.0006103701889514923,0.00012207403779029846,-0.00079345703125,-0.0010986328125,-0.001190185546875,-0.001190185546875,-0.000946044921875,-0.000244140625,0.0003662221133708954,0.0003662221133708954,0.00006103701889514923,-0.000335693359375,-0.00103759765625,-0.001800537109375,-0.002105712890625,-0.001678466796875,-0.0008544921875,0.00015259254723787308,0.0008239997550845146,0.00079348124563694,0.00039674062281847,-0.000732421875,-0.001495361328125,-0.0013427734375,-0.00146484375,-0.000762939453125,0.001037629321217537,0.001831110566854477,0.0012207403779029846,0.0005493331700563431,0,-0.001129150390625,-0.001983642578125,-0.00103759765625,0.0004882961511611938,0.0017700735479593277,0.0033875545486807823,0.0042420728132128716,0.0034485915675759315,0.0017700735479593277,0.00012207403779029846,-0.001190185546875,-0.0018310546875,-0.001007080078125,0.0006103701889514923,0.00198370311409235,0.00277718435972929,0.002685628831386566,0.0012512588873505592,-0.000762939453125,-0.0023193359375,-0.003173828125,-0.002838134765625,-0.001129150390625,0.0011597033590078354,0.0028382213786244392,0.003265480510890484,0.0028077028691768646,0.00119022186845541,-0.00115966796875,-0.00250244140625,-0.00238037109375,-0.001434326171875,0.00006103701889514923,0.001739555038511753,0.002227851189672947,0.001037629321217537,-0.0003662109375,-0.001617431640625,-0.003082275390625,-0.003662109375,-0.002288818359375,-0.000091552734375,0.0016785180196166039,0.0030518509447574615,0.0029602954164147377,0.0009155552834272385,-0.00115966796875,-0.00244140625,-0.003326416015625,-0.003082275390625,-0.00128173828125,0.0005188146606087685,0.0015564439818263054,0.002136295661330223,0.0014954069629311562,-0.00042724609375,-0.00177001953125,-0.00201416015625,-0.001800537109375,-0.000762939453125,0.0013122959062457085,0.0032044434919953346,0.003662221133708954,0.0032044434919953346,0.0013122959062457085,-0.001556396484375,-0.002960205078125,-0.003326416015625,-0.00323486328125,-0.001617431640625,0.00030518509447574615,0.00119022186845541,0.0009460737928748131,-0.000091552734375,-0.001617431640625,-0.00286865234375,-0.00274658203125,-0.001312255859375,0.0002136295661330223,0.0020142216235399246,0.0036317026242613792,0.0036011841148138046,0.0022583696991205215,0.00039674062281847,-0.00128173828125,-0.00225830078125,-0.0023193359375,-0.001068115234375,0.0008239997550845146,0.0021973326802253723,0.002288888208568096,0.00119022186845541,0,-0.001434326171875,-0.0030517578125,-0.0028076171875,-0.001068115234375,0.0003662221133708954,0.001739555038511753,0.0024414807558059692,0.0014954069629311562,-0.0001220703125,-0.0013427734375,-0.001983642578125,-0.002227783203125,-0.001129150390625,0.0009155552834272385,0.0024109622463583946,0.003479110077023506,0.003418073058128357,0.001831110566854477,-0.000244140625,-0.001953125,-0.002227783203125,-0.001220703125,0.0005188146606087685,0.002288888208568096,0.00317392498254776,0.0036011841148138046,0.00277718435972929,0.0007324442267417908,-0.00091552734375,-0.001739501953125,-0.00128173828125,-0.00006103515625,0.0010071108117699623,0.002136295661330223,0.0025940733030438423,0.001739555038511753,0.00006103701889514923,-0.001495361328125,-0.0023193359375,-0.0020751953125,-0.000701904296875,0.0008545182645320892,0.0018005920574069023,0.0023194067180156708,0.00198370311409235,0.0006714072078466415,-0.00054931640625,-0.00140380859375,-0.00164794921875,-0.000946044921875,0.0001831110566854477,0.0010071108117699623,0.0009765923023223877,0.00027466658502817154,-0.00091552734375,-0.0025634765625,-0.003326416015625,-0.002777099609375,-0.00164794921875,-0.000244140625,0.0009765923023223877,0.0015564439818263054,0.0012207403779029846,0.00006103701889514923,-0.001068115234375,-0.001617431640625,-0.001220703125,-0.000030517578125,0.0014038514345884323,0.0027466658502817154,0.0035096285864710808,0.003265480510890484,0.0019226660951972008,0.0002136295661330223,-0.000946044921875,-0.00164794921875,-0.001007080078125,0.0004882961511611938,0.0015259254723787308,0.0023499252274632454,0.002533036284148693,0.001831110566854477,0.0007629627361893654,-0.000396728515625,-0.00054931640625,0.0002136295661330223,0.0011597033590078354,0.0024109622463583946,0.003326517529785633,0.0032044434919953346,0.0019531846046447754,-0.000030517578125,-0.001800537109375,-0.00323486328125,-0.004119873046875,-0.00323486328125,-0.00140380859375,-0.000152587890625,0.0006714072078466415,0.00119022186845541,0.00033570360392332077,-0.00164794921875,-0.00323486328125,-0.00347900390625,-0.002899169921875,-0.002105712890625,-0.000885009765625,0.00015259254723787308,0.000030518509447574615,-0.00079345703125,-0.002532958984375,-0.00469970703125,-0.005462646484375,-0.00469970703125,-0.003082275390625,-0.001068115234375,0.0009765923023223877,0.002624591812491417,0.0028992583975195885,0.0016174810007214546,-0.000640869140625,-0.00238037109375,-0.00274658203125,-0.00225830078125,-0.00103759765625,0.0009155552834272385,0.0025940733030438423,0.0031434064731001854,0.0024414807558059692,0.0009765923023223877,-0.0009765625,-0.002685546875,-0.002349853515625,-0.000579833984375,0.0010986663401126862,0.0028077028691768646,0.0042420728132128716,0.004272591322660446,0.00277718435972929,0.0013733329251408577,0.0005798516795039177,-0.000396728515625,-0.000946044921875,0.0003662221133708954,0.0025940733030438423,0.003723258152604103,0.003997924737632275,0.00357066560536623,0.0017090365290641785,-0.0006103515625,-0.002532958984375,-0.003509521484375,-0.003204345703125,-0.0018310546875,0,0.0010986663401126862,0.0013122959062457085,0.0006103701889514923,-0.00079345703125,-0.002349853515625,-0.003692626953125,-0.003509521484375,-0.001983642578125,-0.000640869140625,0.00079348124563694,0.0017090365290641785,0.0009155552834272385,-0.00079345703125,-0.00286865234375,-0.0042724609375,-0.004180908203125,-0.003265380859375,-0.001312255859375,0.0012512588873505592,0.002685628831386566,0.0027161473408341408,0.0016174810007214546,-0.000244140625,-0.002227783203125,-0.003173828125,-0.002349853515625,-0.0008544921875,0.0009155552834272385,0.0032959990203380585,0.004455702379345894,0.0036317026242613792,0.002136295661330223,0.0006714072078466415,-0.00067138671875,-0.00079345703125,0.0006103701889514923,0.0023194067180156708,0.00436414685100317,0.006195257417857647,0.006103701889514923,0.004333628341555595,0.0020142216235399246,-0.000213623046875,-0.00189208984375,-0.0020751953125,-0.00018310546875,0.002075258642435074,0.0036317026242613792,0.005127109587192535,0.004821924492716789,0.002136295661330223,-0.000335693359375,-0.00201416015625,-0.003570556640625,-0.00360107421875,-0.00177001953125,-0.0001220703125,0.0006714072078466415,0.0013122959062457085,0.00027466658502817154,-0.0025634765625,-0.0045166015625,-0.005340576171875,-0.00616455078125,-0.00543212890625,-0.002838134765625,-0.00079345703125,0,0.0001831110566854477,-0.001007080078125,-0.00323486328125,-0.004486083984375,-0.004241943359375,-0.0032958984375,-0.001708984375,0.00045777764171361923,0.00158696249127388,0.0009155552834272385,0.00012207403779029846,-0.00091552734375,-0.002655029296875,-0.0029296875,-0.0018310546875,-0.000762939453125,0.0004272591322660446,0.0016785180196166039,0.0023499252274632454,0.001831110566854477,0.0012207403779029846,0.0007629627361893654,-0.00006103515625,0.00012207403779029846,0.0010681478306651115,0.001739555038511753,0.0025635547935962677,0.0032044434919953346,0.0033875545486807823,0.0025025177747011185,0.0011291848495602608,0.0007019257172942162,0.0008545182645320892,0.0015564439818263054,0.002136295661330223,0.00238044373691082,0.0030518509447574615,0.0029602954164147377,0.001831110566854477,0.0005188146606087685,-0.000457763671875,-0.000457763671875,0.0002136295661330223,0.0009765923023223877,0.0017090365290641785,0.002227851189672947,0.0021057771518826485,0.0004882961511611938,-0.00140380859375,-0.001983642578125,-0.00213623046875,-0.0023193359375,-0.001922607421875,-0.000946044921875,-0.000030517578125,-0.000152587890625,-0.0008544921875,-0.001556396484375,-0.0025634765625,-0.003173828125,-0.002777099609375,-0.00225830078125,-0.0018310546875,-0.00067138671875,0.0001831110566854477,-0.000091552734375,-0.000640869140625,-0.001068115234375,-0.00177001953125,-0.0018310546875,-0.000946044921875,-0.0001220703125,0.0005188146606087685,0.00119022186845541,0.001434369944036007,0.0010071108117699623,0.00012207403779029846,-0.000335693359375,-0.000457763671875,-0.00054931640625,0.0001831110566854477,0.0018616290763020515,0.0027161473408341408,0.0026551103219389915,0.0027466658502817154,0.0024109622463583946,0.001739555038511753,0.0011291848495602608,0.0007324442267417908,0.0010071108117699623,0.0012207403779029846,0.0012207403779029846,0.0011597033590078354,0.0005493331700563431,0.000030518509447574615,-0.000518798828125,-0.001007080078125,-0.0009765625,-0.0008544921875,-0.0003662109375,0.00027466658502817154,0.0002441480755805969,-0.000030517578125,-0.000335693359375,-0.0010986328125,-0.00140380859375,-0.0009765625,-0.00079345703125,-0.00091552734375,-0.0008544921875,-0.00079345703125,-0.00115966796875,-0.001861572265625,-0.002044677734375,-0.001922607421875,-0.002105712890625,-0.00213623046875,-0.00140380859375,-0.00042724609375,-0.000244140625,-0.00054931640625,-0.000457763671875,-0.00048828125,-0.000701904296875,-0.000274658203125,0.0004882961511611938,0.0009765923023223877,0.0016785180196166039,0.0026551103219389915,0.00277718435972929,0.002075258642435074,0.0012207403779029846,0.0005188146606087685,0.00006103701889514923,-0.000274658203125,-0.000030517578125,0.0007324442267417908,0.001434369944036007,0.002136295661330223,0.0023499252274632454,0.002075258642435074,0.0018005920574069023,0.0014954069629311562,0.0015259254723787308,0.00198370311409235,0.002288888208568096,0.002624591812491417,0.0032349620014429092,0.0031434064731001854,0.0024414807558059692,0.0015259254723787308,0.00039674062281847,-0.00006103515625,-0.00048828125,-0.000732421875,-0.000030517578125,0.00039674062281847,0.0005493331700563431,0.00119022186845541,0.0013122959062457085,0.0008850367739796638,0.0007629627361893654,0.0008545182645320892,0.00015259254723787308,-0.0008544921875,-0.001190185546875,-0.001251220703125,-0.001495361328125,-0.00146484375,-0.001251220703125,-0.001495361328125,-0.002166748046875,-0.002105712890625,-0.001495361328125,-0.001373291015625,-0.0009765625,-0.000274658203125,-0.000091552734375,0.00009155552834272385,0.00009155552834272385,-0.00042724609375,-0.000579833984375,-0.000701904296875,-0.001251220703125,-0.001434326171875,-0.00140380859375,-0.001556396484375,-0.001251220703125,-0.00030517578125,0.00015259254723787308,-0.000213623046875,-0.000457763671875,-0.000244140625,-0.000762939453125,-0.001434326171875,-0.001007080078125,-0.000091552734375,0.0005188146606087685,0.0013122959062457085,0.002136295661330223,0.002288888208568096,0.0023194067180156708,0.0021973326802253723,0.001037629321217537,-0.000091552734375,-0.00018310546875,-0.000030517578125,-0.0001220703125,0.00030518509447574615,0.00119022186845541,0.00158696249127388,0.0012817773967981339,0.0006408886983990669,-0.00018310546875,-0.001007080078125,-0.000823974609375,0.0002441480755805969,0.0009460737928748131,0.00158696249127388,0.00277718435972929,0.0028382213786244392,0.0012207403779029846,0.00006103701889514923,-0.000213623046875,-0.000946044921875,-0.00146484375,-0.001068115234375,-0.001068115234375,-0.001617431640625,-0.001678466796875,-0.001861572265625,-0.002655029296875,-0.002960205078125,-0.0025634765625,-0.002471923828125,-0.002197265625,-0.00103759765625,-0.000244140625,-0.00054931640625,-0.00067138671875,-0.001007080078125,-0.002105712890625,-0.002471923828125,-0.00189208984375,-0.001190185546875,-0.00006103515625,0.0009765923023223877,0.0007019257172942162,-0.00018310546875,-0.00054931640625,-0.00103759765625,-0.002166748046875,-0.002288818359375,-0.0009765625,0,0.0011291848495602608,0.002533036284148693,0.0024414807558059692,0.0016479995101690292,0.0013733329251408577,0.0008850367739796638,0.00039674062281847,0.001037629321217537,0.002227851189672947,0.003021332435309887,0.0031434064731001854,0.0029908139258623123,0.0023194067180156708,0.0007629627361893654,-0.000396728515625,-0.0009765625,-0.0010986328125,-0.000030517578125,0.00119022186845541,0.0018616290763020515,0.0021057771518826485,0.001739555038511753,0.0007019257172942162,-0.00067138671875,-0.00152587890625,-0.0018310546875,-0.00164794921875,-0.00091552734375,-0.00042724609375,-0.000091552734375,-0.000030517578125,-0.0010986328125,-0.002166748046875,-0.00262451171875,-0.0030517578125,-0.0029296875,-0.002105712890625,-0.0009765625,-0.00018310546875,-0.000213623046875,-0.000823974609375,-0.001922607421875,-0.0028076171875,-0.003265380859375,-0.003509521484375,-0.002899169921875,-0.001922607421875,-0.000885009765625,-0.0001220703125,-0.000396728515625,-0.000946044921875,-0.00140380859375,-0.0015869140625,-0.000885009765625,0,0.0008850367739796638,0.001831110566854477,0.0019226660951972008,0.001342814415693283,0.0004272591322660446,-0.000579833984375,-0.001190185546875,-0.0010986328125,-0.00030517578125,0.00030518509447574615,0.0006408886983990669,0.0009155552834272385,0.0008545182645320892,0.0004882961511611938,0.00015259254723787308,0.0001831110566854477,0.0005188146606087685,0.0006714072078466415,0.0007629627361893654,0.0013733329251408577,0.0018921475857496262,0.0016174810007214546,0.0016174810007214546,0.0018921475857496262,0.0018921475857496262,0.0020447401329874992,0.0021668141707777977,0.001434369944036007,0.0005493331700563431,-0.00006103515625,-0.00115966796875,-0.001983642578125,-0.002166748046875,-0.0018310546875,-0.00115966796875,-0.000701904296875,-0.00030517578125,0.00006103701889514923,0.0002441480755805969,0.00009155552834272385,-0.000457763671875,-0.000823974609375,-0.00091552734375,-0.001007080078125,-0.00067138671875,0.00012207403779029846,0.0009460737928748131,0.0008850367739796638,0.0004882961511611938,0.0005188146606087685,-0.000457763671875,-0.0018310546875,-0.001739501953125,-0.0008544921875,0.000030518509447574615,0.0006103701889514923,0.0009460737928748131,0.00119022186845541,0.0006408886983990669,-0.00030517578125,-0.0010986328125,-0.00152587890625,-0.001220703125,-0.000457763671875,0.0007629627361893654,0.0015259254723787308,0.0010986663401126862,0.0009460737928748131,0.0011597033590078354,0.0005798516795039177,-0.000213623046875,-0.000152587890625,0.00045777764171361923,0.0010071108117699623,0.0014648884534835815,0.0019531846046447754,0.002136295661330223,0.0017700735479593277,0.0013122959062457085,0.0009765923023223877,0.0006714072078466415,0.0008850367739796638,0.0015259254723787308,0.00158696249127388,0.0014038514345884323,0.001342814415693283,0.0005188146606087685,-0.00079345703125,-0.00146484375,-0.001678466796875,-0.002044677734375,-0.00189208984375,-0.001312255859375,-0.000732421875,0.00009155552834272385,0.00009155552834272385,-0.00054931640625,0,0.00079348124563694,0.0006103701889514923,0.00006103701889514923,0.00027466658502817154,0.0013122959062457085,0.001434369944036007,0.0008545182645320892,0.0005493331700563431,0,-0.000274658203125,-0.000091552734375,0,-0.000457763671875,-0.000885009765625,0.000030518509447574615,0.00030518509447574615,-0.001129150390625,-0.0018310546875,-0.00067138671875,0.00039674062281847,0.00015259254723787308,0.00033570360392332077,0.001434369944036007,0.0015259254723787308,0.0012817773967981339,0.0014038514345884323,0.0010681478306651115,0.0006408886983990669,0.0013122959062457085,0.0020447401329874992,0.0014038514345884323,0.0009155552834272385,0.0012817773967981339,0.0012817773967981339,0.001037629321217537,0.0008545182645320892,0.0009765923023223877,0.001342814415693283,0.001739555038511753,0.0021057771518826485,0.0018616290763020515,0.0019531846046447754,0.00238044373691082,0.0019226660951972008,0.0012817773967981339,0.00039674062281847,-0.00048828125,-0.0006103515625,-0.000396728515625,-0.000152587890625,0.00015259254723787308,0.0006714072078466415,0.0006103701889514923,-0.000030517578125,0.00009155552834272385,0.00012207403779029846,-0.00042724609375,-0.000030517578125,0.0009460737928748131,0.001434369944036007,0.0015259254723787308,0.0013733329251408577,0.00079348124563694,-0.000091552734375,-0.000732421875,-0.001434326171875,-0.001983642578125,-0.0013427734375,-0.00067138671875,-0.0009765625,-0.0008544921875,-0.00042724609375,-0.00091552734375,-0.00152587890625,-0.001251220703125,-0.001068115234375,-0.001373291015625,-0.0009765625,-0.00006103515625,-0.00018310546875,-0.00018310546875,0.0006714072078466415,0.0005798516795039177,0.000030518509447574615,0.0004882961511611938,0.0005188146606087685,-0.0003662109375,-0.0003662109375,0.000030518509447574615,-0.0003662109375,-0.000396728515625,0.0002441480755805969,0.0002136295661330223,-0.000213623046875,0,0.00015259254723787308,-0.000396728515625,-0.000244140625,0.00039674062281847,0.0001831110566854477,0.000030518509447574615,0.0003662221133708954,0.00033570360392332077,-0.0001220703125,0.00033570360392332077,0.0013733329251408577,0.0008850367739796638,0.0005493331700563431,0.0017090365290641785,0.0016174810007214546,0.0008545182645320892,0.0011291848495602608,0.0011291848495602608,0.001037629321217537,0.0009765923023223877,0.0006408886983990669,0.00045777764171361923,0.0002136295661330223,0.00015259254723787308,-0.000335693359375,-0.00128173828125,-0.00128173828125,-0.001220703125,-0.001434326171875,-0.00146484375,-0.00115966796875,-0.001251220703125,-0.0020751953125,-0.001800537109375,-0.0013427734375,-0.001556396484375,-0.001434326171875,-0.00152587890625,-0.001312255859375,-0.0013427734375,-0.00189208984375,-0.001678466796875,-0.00128173828125,-0.00103759765625,-0.000701904296875,-0.00054931640625,-0.000335693359375,-0.0003662109375,-0.000244140625,-0.00042724609375,-0.001495361328125,-0.001678466796875,-0.0013427734375,-0.001800537109375,-0.001983642578125,-0.001434326171875,-0.000823974609375,-0.000762939453125,-0.000885009765625,-0.000457763671875,-0.0001220703125,-0.00030517578125,-0.0003662109375,-0.0003662109375,-0.0008544921875,-0.00115966796875,-0.001068115234375,-0.001495361328125,-0.0015869140625,-0.000579833984375,0.00009155552834272385,-0.00006103515625,-0.000030517578125,0.00012207403779029846,-0.000762939453125,-0.00164794921875,-0.001495361328125,-0.001129150390625,-0.000701904296875,-0.000213623046875,-0.00006103515625,-0.00030517578125,-0.00103759765625,-0.00152587890625,-0.001617431640625,-0.0020751953125,-0.00225830078125,-0.002105712890625,-0.001708984375,-0.001251220703125,-0.00152587890625,-0.00152587890625,-0.001220703125,-0.00140380859375,-0.001220703125,-0.001129150390625,-0.00146484375,-0.000946044921875,-0.000457763671875,-0.00067138671875,-0.000244140625,0.0002441480755805969,0.00027466658502817154,0.000030518509447574615,-0.000640869140625,-0.001007080078125,-0.00091552734375,-0.001190185546875,-0.001434326171875,-0.001312255859375,-0.0008544921875,-0.00067138671875,-0.00091552734375,-0.00067138671875,-0.00018310546875,0.000030518509447574615,0.0004882961511611938,0.0005493331700563431,-0.000091552734375,-0.000152587890625,0.00030518509447574615,-0.000091552734375,-0.0008544921875,-0.000640869140625,0.00012207403779029846,-0.000091552734375,-0.00103759765625,-0.001220703125,-0.001373291015625,-0.001922607421875,-0.001953125,-0.001739501953125,-0.002044677734375,-0.0023193359375,-0.0020751953125,-0.001495361328125,-0.000885009765625,-0.00091552734375,-0.000762939453125,-0.000152587890625,-0.00006103515625,-0.000244140625,-0.000396728515625,-0.000457763671875,-0.000457763671875,-0.000274658203125,0.00012207403779029846,-0.0001220703125,-0.00067138671875,-0.00042724609375,-0.00030517578125,-0.000885009765625,-0.001007080078125,-0.000244140625,0.00039674062281847,0.0006714072078466415,0.0005798516795039177,0.0006103701889514923,0.001037629321217537,0.0009460737928748131,0.00119022186845541,0.001831110566854477,0.0013122959062457085,0.0009460737928748131,0.0011597033590078354,0.0008545182645320892,0.00039674062281847,0.00027466658502817154,0.0007324442267417908,0.0012817773967981339,0.0013733329251408577,0.0016174810007214546,0.0018005920574069023,0.0017700735479593277,0.0015259254723787308,0.0010071108117699623,0.0008239997550845146,0.0008850367739796638,0.0007324442267417908,0.0006103701889514923,0.0008239997550845146,0.0009155552834272385,0.0005493331700563431,0.0007324442267417908,0.0012817773967981339,0.0011291848495602608,0.00079348124563694,0.0008850367739796638,0.0007019257172942162,0.00015259254723787308,0.0004882961511611938,0.0014038514345884323,0.0011597033590078354,0.001037629321217537,0.002288888208568096,0.002533036284148693,0.001831110566854477,0.0020447401329874992,0.0023194067180156708,0.0019531846046447754,0.0015259254723787308,0.0017090365290641785,0.00198370311409235,0.0016785180196166039,0.001831110566854477,0.00198370311409235,0.0011291848495602608,0.0004272591322660446,0.0002136295661330223,0,0.0002136295661330223,0.00079348124563694,0.0009765923023223877,0.0009460737928748131,0.0010681478306651115,0.001434369944036007,0.0013122959062457085,0.0010071108117699623,0.0015564439818263054,0.00198370311409235,0.0018921475857496262,0.0021668141707777977,0.002533036284148693,0.00238044373691082,0.0021973326802253723,0.002624591812491417,0.0021973326802253723,0.0009765923023223877,0.0007629627361893654,0.0005493331700563431,-0.000396728515625,-0.0006103515625,-0.000030517578125,0.0001831110566854477,0.00033570360392332077,0.0010681478306651115,0.0014648884534835815,0.0008850367739796638,0.0008545182645320892,0.0018005920574069023,0.0015259254723787308,0.0008545182645320892,0.0014038514345884323,0.0014038514345884323,0.0009765923023223877,0.0013733329251408577,0.0011291848495602608,0.00030518509447574615,0.0007019257172942162,0.0009460737928748131,0.00027466658502817154,0.00039674062281847,0.0011291848495602608,0.0013733329251408577,0.001037629321217537,0.0007629627361893654,0.0001831110566854477,-0.00048828125,0.00015259254723787308,0.00045777764171361923,-0.00018310546875,-0.000030517578125,-0.000244140625,-0.00140380859375,-0.002166748046875,-0.0025634765625,-0.00262451171875,-0.002166748046875,-0.0013427734375,-0.000457763671875,-0.00030517578125,-0.0003662109375,0.00006103701889514923,0.00039674062281847,0.0007324442267417908,0.0007324442267417908,0.0006714072078466415,0.0012207403779029846,0.0012817773967981339,0.0012512588873505592,0.0012207403779029846,0.00119022186845541,0.0013733329251408577,0.00119022186845541,0.0012207403779029846,0.0006714072078466415,-0.000030517578125,0.0007019257172942162,0.0006714072078466415,-0.0001220703125,0.0004272591322660446,0.001037629321217537,0.0008545182645320892,0.0006408886983990669,0.0008545182645320892,0.00158696249127388,0.0019531846046447754,0.0021668141707777977,0.002227851189672947,0.0017700735479593277,0.001434369944036007,0.0005493331700563431,-0.0003662109375,-0.000396728515625,0,0.0004882961511611938,0.0005188146606087685,0.00039674062281847,0.00033570360392332077,-0.000030517578125,-0.000213623046875,-0.00067138671875,-0.00103759765625,-0.001007080078125,-0.001373291015625,-0.0013427734375,-0.001220703125,-0.00140380859375,-0.001251220703125,-0.001129150390625,-0.001251220703125,-0.001708984375,-0.001953125,-0.001556396484375,-0.001434326171875,-0.001373291015625,-0.00115966796875,-0.00115966796875,-0.0010986328125,-0.0010986328125,-0.0013427734375,-0.00152587890625,-0.001251220703125,-0.000885009765625,-0.000701904296875,-0.000213623046875,0.000030518509447574615,-0.00006103515625,0.00033570360392332077,0.00045777764171361923,-0.00042724609375,-0.0006103515625,-0.000244140625,-0.000762939453125,-0.00140380859375,-0.00164794921875,-0.00103759765625,0,0.0004272591322660446,0.0006408886983990669,0.00079348124563694,0.0007019257172942162,0,-0.0008544921875,-0.00128173828125,-0.001495361328125,-0.000946044921875,-0.000213623046875,-0.0003662109375,-0.000579833984375,-0.000579833984375,-0.000640869140625,-0.001220703125,-0.002044677734375,-0.001922607421875,-0.0013427734375,-0.0008544921875,-0.000518798828125,-0.000152587890625,0.0004272591322660446,0.0005798516795039177,0.0004272591322660446,0.00030518509447574615,0.00009155552834272385,-0.00042724609375,-0.001129150390625,-0.00115966796875,-0.00103759765625,-0.00146484375,-0.0018310546875,-0.001708984375,-0.001861572265625,-0.002471923828125,-0.0023193359375,-0.001312255859375,-0.00067138671875,-0.00042724609375,-0.000030517578125,0.0002441480755805969,0.00009155552834272385,-0.000335693359375,-0.000640869140625,-0.001007080078125,-0.001617431640625,-0.001739501953125,-0.0013427734375,-0.00140380859375,-0.00140380859375,-0.000885009765625,-0.000946044921875,-0.001708984375,-0.00201416015625,-0.002044677734375,-0.002044677734375,-0.001861572265625,-0.00140380859375,-0.000518798828125,-0.000213623046875,-0.00079345703125,-0.001068115234375,-0.0008544921875,-0.00048828125,-0.0003662109375,-0.00006103515625,0.0010986663401126862,0.0012817773967981339,0.0006103701889514923,0.0006714072078466415,0.0001831110566854477,-0.000640869140625,-0.000823974609375,-0.00079345703125,-0.000732421875,-0.0009765625,-0.000579833984375,0.00045777764171361923,0.0001831110566854477,-0.001068115234375,-0.00140380859375,-0.001007080078125,-0.0009765625,-0.00067138671875,0.0003662221133708954,0.0010986663401126862,0.00119022186845541,0.00119022186845541,0.0010986663401126862,0.0007629627361893654,0.0002136295661330223,0,0.0001831110566854477,0.00030518509447574615,0.0005493331700563431,0.0007019257172942162,0.00027466658502817154,-0.000274658203125,-0.00054931640625,-0.0006103515625,-0.00054931640625,-0.00018310546875,0.00015259254723787308,0.0006103701889514923,0.0008850367739796638,0.00039674062281847,0.0001831110566854477,0.000030518509447574615,-0.000518798828125,-0.000396728515625,0.0002441480755805969,0.0004882961511611938,0.0007629627361893654,0.0013122959062457085,0.0014648884534835815,0.0008239997550845146,0.0004272591322660446,0.0006408886983990669,0.00012207403779029846,-0.00054931640625,-0.00030517578125,0,0,0.0001831110566854477,0.0004272591322660446,0.0006714072078466415,0.0010071108117699623,0.0010986663401126862,0.0005188146606087685,0.0002136295661330223,0.0006408886983990669,0.0007019257172942162,0.0004882961511611938,0.0005798516795039177,0.00027466658502817154,-0.000396728515625,-0.000701904296875,-0.000885009765625,-0.001251220703125,-0.0010986328125,-0.000457763671875,-0.000518798828125,-0.00115966796875,-0.001007080078125,-0.000946044921875,-0.001800537109375,-0.00164794921875,-0.000579833984375,-0.00006103515625,0.00039674062281847,0.001037629321217537,0.0006103701889514923,-0.000457763671875,-0.000518798828125,-0.0001220703125,-0.000396728515625,0.00015259254723787308,0.0014038514345884323,0.001434369944036007,0.0008850367739796638,0.0012207403779029846,0.0012512588873505592,0.00039674062281847,0.0005798516795039177,0.0012207403779029846,0.0009460737928748131,0.0009765923023223877,0.0016479995101690292,0.0015564439818263054,0.0010986663401126862,0.0016174810007214546,0.0015259254723787308,0.0006714072078466415,0.001037629321217537,0.0013122959062457085,0.0008850367739796638,0.0008545182645320892,0.0007629627361893654,0.00033570360392332077,-0.000244140625,-0.000579833984375,-0.000518798828125,-0.000274658203125,0.00027466658502817154,0.0006408886983990669,0.0010071108117699623,0.0013733329251408577,0.0013733329251408577,0.0016174810007214546,0.0013733329251408577,0.0012512588873505592,0.0015564439818263054,0.00119022186845541,0.0010986663401126862,0.0008239997550845146,0.0002441480755805969,0.00039674062281847,0.0005188146606087685,0.0006103701889514923,0.0008545182645320892,0.00079348124563694,0.00045777764171361923,-0.000030517578125,-0.000152587890625,-0.000213623046875,-0.000030517578125,0.0007019257172942162,0.0005188146606087685,0.0002441480755805969,0.0010986663401126862,0.0012207403779029846,0.00033570360392332077,0.00006103701889514923,0.0006714072078466415,0.0007019257172942162,0.0002441480755805969,0.0004272591322660446,0.0009155552834272385,0.0009765923023223877,0.0008545182645320892,0.001037629321217537,0.0008239997550845146,0,-0.000152587890625,-0.000274658203125,-0.0008544921875,-0.000732421875,0.00033570360392332077,0.0010071108117699623,0.00079348124563694,0.0008850367739796638,0.0008239997550845146,0.00006103701889514923,0,0.0001831110566854477,0,0.00033570360392332077,0.0009155552834272385,0.0009460737928748131,0.0005188146606087685,0.00015259254723787308,0.00015259254723787308,0.00009155552834272385,-0.00030517578125,-0.000274658203125,0.0003662221133708954,0.0005798516795039177,0.00009155552834272385,-0.000274658203125,-0.000579833984375,-0.001190185546875,-0.001495361328125,-0.00115966796875,-0.000732421875,-0.000244140625,0,-0.0001220703125,-0.000213623046875,-0.000457763671875,-0.000335693359375,0.00009155552834272385,-0.0001220703125,-0.00006103515625,0.0004272591322660446,0.0004882961511611938,0.0005493331700563431,0.00030518509447574615,0,0.00006103701889514923,0.0004272591322660446,0.0007019257172942162,0.00015259254723787308,0.00009155552834272385,0.0006714072078466415,0.00030518509447574615,-0.000244140625,-0.000732421875,-0.001007080078125,-0.000885009765625,-0.0013427734375,-0.001556396484375,-0.001007080078125,-0.000885009765625,-0.000946044921875,-0.000518798828125,-0.00030517578125,-0.000579833984375,-0.00067138671875,-0.000640869140625,-0.0003662109375,-0.000213623046875,-0.000518798828125,-0.000030517578125,0.0008545182645320892,0.0008850367739796638,0.0006714072078466415,0.0005188146606087685,0.00012207403779029846,-0.000152587890625,-0.000213623046875,0,0.00015259254723787308,0.0001831110566854477,0.00009155552834272385,-0.00042724609375,-0.0008544921875,-0.000732421875,-0.00067138671875,-0.000640869140625,-0.000457763671875,-0.00018310546875,-0.00018310546875,-0.000640869140625,-0.000946044921875,-0.0010986328125,-0.00079345703125,-0.000518798828125,-0.00048828125,0.0001831110566854477,0,-0.001190185546875,-0.001434326171875,-0.001678466796875,-0.00238037109375,-0.002349853515625,-0.001800537109375,-0.001129150390625,-0.00048828125,0,0.0003662221133708954,0.00039674062281847,-0.000030517578125,-0.000152587890625,0.00009155552834272385,0.0004882961511611938,0.0012207403779029846,0.0016785180196166039,0.0019531846046447754,0.002471999265253544,0.0021057771518826485,0.001434369944036007,0.0016479995101690292,0.0018921475857496262,0.0018921475857496262,0.002288888208568096,0.0028077028691768646,0.0023194067180156708,0.0012817773967981339,0.0010986663401126862,0.0004882961511611938,-0.0009765625,-0.000823974609375,0.0001831110566854477,0.0001831110566854477,0.0003662221133708954,0.0008239997550845146,0.0006103701889514923,0.00027466658502817154,0.00027466658502817154,0.0001831110566854477,-0.000030517578125,0.00009155552834272385,0.0009765923023223877,0.0012512588873505592,0.0006408886983990669,0.0008850367739796638,0.001037629321217537,0.00030518509447574615,0.00012207403779029846,0.00012207403779029846,0.0003662221133708954,0.001434369944036007,0.0023499252274632454,0.0025940733030438423,0.0024109622463583946,0.0023499252274632454,0.001739555038511753,0.0005493331700563431,0.00015259254723787308,0.0005188146606087685,0.00030518509447574615,0,0.00045777764171361923,0.0006714072078466415,0.00006103701889514923,-0.000396728515625,-0.000274658203125,-0.0003662109375,-0.000732421875,-0.00048828125,-0.000640869140625,-0.001129150390625,-0.000823974609375,-0.000885009765625,-0.001220703125,-0.00115966796875,-0.0008544921875,-0.000823974609375,-0.001556396484375,-0.00189208984375,-0.001922607421875,-0.0023193359375,-0.00189208984375,-0.001708984375,-0.002227783203125,-0.001708984375,-0.001312255859375,-0.00213623046875,-0.002471923828125,-0.001708984375,-0.000885009765625,-0.000518798828125,0,0.00033570360392332077,-0.00006103515625,-0.00006103515625,0.00030518509447574615,-0.000274658203125,-0.000823974609375,-0.00030517578125,-0.000335693359375,-0.0009765625,-0.001068115234375,-0.0009765625,-0.001129150390625,-0.00103759765625,-0.000396728515625,-0.00006103515625,-0.000030517578125,0.00006103701889514923,-0.000152587890625,-0.000213623046875,0.00015259254723787308,0.0005798516795039177,0.0012817773967981339,0.0017700735479593277,0.0018616290763020515,0.0018616290763020515,0.0014954069629311562,0.0009460737928748131,0.0003662221133708954,0.0003662221133708954,0.0006103701889514923,0.00033570360392332077,0.0004882961511611938,0.0007324442267417908,0.0002441480755805969,0,-0.00006103515625,-0.000335693359375,-0.000701904296875,-0.00091552734375,-0.000762939453125,-0.000946044921875,-0.001068115234375,-0.000946044921875,-0.0013427734375,-0.00146484375,-0.001373291015625,-0.001861572265625,-0.0020751953125,-0.00189208984375,-0.00140380859375,-0.001129150390625,-0.001434326171875,-0.001617431640625,-0.001739501953125,-0.00152587890625,-0.00115966796875,-0.00128173828125,-0.00079345703125,0,0.00027466658502817154,0,-0.000640869140625,-0.000518798828125,0.00006103701889514923,0.00006103701889514923,0.000030518509447574615,0,0.00015259254723787308,0.00009155552834272385,-0.000579833984375,-0.0010986328125,-0.001434326171875,-0.001495361328125,-0.001007080078125,-0.00079345703125,-0.000579833984375,0.00006103701889514923,0.0002441480755805969,-0.000244140625,-0.000396728515625,-0.000152587890625,-0.000579833984375,-0.00103759765625,-0.00067138671875,-0.000518798828125,-0.00048828125,0.00012207403779029846,0.00030518509447574615,-0.00018310546875,-0.001007080078125,-0.001678466796875,-0.001678466796875,-0.00164794921875,-0.0015869140625,-0.000946044921875,-0.00042724609375,-0.00054931640625,-0.000885009765625,-0.001190185546875,-0.001556396484375,-0.001373291015625,-0.000732421875,-0.00006103515625,0.0005493331700563431,0.0007629627361893654,0.0009155552834272385,0.0010681478306651115,0.0007324442267417908,0.0005493331700563431,0.0008239997550845146,0.0012207403779029846,0.0015564439818263054,0.0014954069629311562,0.0013122959062457085,0.0012817773967981339,0.0014954069629311562,0.0016479995101690292,0.0015259254723787308,0.0014038514345884323,0.0005188146606087685,-0.000274658203125,0,0.00006103701889514923,-0.000091552734375,0.00012207403779029846,0.0006714072078466415,0.0007324442267417908,0,-0.000244140625,-0.00030517578125,-0.000701904296875,-0.000244140625,0.00039674062281847,0.00030518509447574615,0.0002136295661330223,0.00027466658502817154,0.00045777764171361923,0.0006714072078466415,0.0011291848495602608,0.0018616290763020515,0.002075258642435074,0.00158696249127388,0.0010071108117699623,0.0005188146606087685,-0.000030517578125,-0.000457763671875,-0.000335693359375,-0.0001220703125,0.00006103701889514923,0.00039674062281847,0.0008239997550845146,0.0014954069629311562,0.0015259254723787308,0.001037629321217537,0.0008850367739796638,0.0007324442267417908,0.0001831110566854477,-0.000152587890625,0.0002441480755805969,0.0005188146606087685,0.00012207403779029846,0.00027466658502817154,0.0008545182645320892,0.0009155552834272385,0.0006714072078466415,0.0004882961511611938,0.0003662221133708954,0.00030518509447574615,0.00030518509447574615,0.0005188146606087685,0.0006103701889514923,0.00012207403779029846,0.000030518509447574615,0.0006103701889514923,0.00033570360392332077,0.000030518509447574615,0.0008545182645320892,0.00119022186845541,0.0005188146606087685,0.00027466658502817154,0.00030518509447574615,-0.000152587890625,-0.000457763671875,-0.00042724609375,-0.00054931640625,-0.00030517578125,0.00033570360392332077,0.00079348124563694,0.0011291848495602608,0.0012207403779029846,0.0012207403779029846,0.001037629321217537,0.00045777764171361923,0.0004882961511611938,0.0004882961511611938,0.00009155552834272385,0.0005188146606087685,0.0005798516795039177,0.00009155552834272385,0.0007324442267417908,0.001037629321217537,0.0006408886983990669,0.0009460737928748131,0.00158696249127388,0.0019531846046447754,0.0020142216235399246,0.002075258642435074,0.00198370311409235,0.0019226660951972008,0.0025025177747011185,0.002868739888072014,0.0027466658502817154,0.0032044434919953346,0.0037842951714992523,0.003723258152604103,0.0031434064731001854,0.0025940733030438423,0.0021057771518826485,0.0014954069629311562,0.0011597033590078354,0.0006714072078466415,0.00027466658502817154,0.0006714072078466415,0.0009155552834272385,0.00045777764171361923,0.0002136295661330223,0.0004272591322660446,0.000030518509447574615,-0.00067138671875,-0.000640869140625,-0.000701904296875,-0.00103759765625,-0.00091552734375,-0.000701904296875,-0.001220703125,-0.001617431640625,-0.001556396484375,-0.001953125,-0.002197265625,-0.001495361328125,-0.000762939453125,-0.0006103515625,-0.000152587890625,0.00033570360392332077,-0.000152587890625,-0.0008544921875,-0.001007080078125,-0.001800537109375,-0.00274658203125,-0.002716064453125,-0.002410888671875,-0.00238037109375,-0.001922607421875,-0.00115966796875,-0.001190185546875,-0.0013427734375,-0.00103759765625,-0.001190185546875,-0.00177001953125,-0.00152587890625,-0.0008544921875,-0.0008544921875,-0.000732421875,-0.000335693359375,-0.000732421875,-0.001068115234375,-0.000946044921875,-0.000946044921875,-0.000396728515625,0.0004882961511611938,0.0010071108117699623,0.0012512588873505592,0.0012817773967981339,0.0010986663401126862,0.0005188146606087685,0.0004272591322660446,0.0007629627361893654,0.0006408886983990669,0.0009155552834272385,0.0011597033590078354,0.0011597033590078354,0.0011597033590078354,0.0008545182645320892,0.00079348124563694,0.0005188146606087685,0.00009155552834272385,0.000030518509447574615,-0.00018310546875,-0.000152587890625,-0.000030517578125,-0.0001220703125,0.00015259254723787308,0.00045777764171361923,0.00045777764171361923,0.0003662221133708954,0.0002136295661330223,-0.000152587890625,-0.0006103515625,-0.0006103515625,-0.000732421875,-0.001556396484375,-0.00201416015625,-0.001983642578125,-0.00262451171875,-0.00335693359375,-0.003082275390625,-0.00238037109375,-0.001922607421875,-0.00115966796875,-0.000091552734375,0.00033570360392332077,0.00012207403779029846,0.00015259254723787308,0.00039674062281847,0,-0.000396728515625,-0.00018310546875,0,-0.0001220703125,-0.0001220703125,0,0,0.00006103701889514923,0.00045777764171361923,0.0004882961511611938,0.0004882961511611938,0.0009765923023223877,0.0010986663401126862,0.0006408886983990669,0.00030518509447574615,-0.00006103515625,-0.00067138671875,-0.0013427734375,-0.001373291015625,-0.000701904296875,-0.000885009765625,-0.001220703125,-0.000335693359375,0.0005188146606087685,0.00079348124563694,0.00119022186845541,0.00158696249127388,0.001434369944036007,0.0011291848495602608,0.0009765923023223877,0.0004272591322660446,-0.000244140625,-0.000244140625,-0.000213623046875,-0.00042724609375,-0.000579833984375,-0.0003662109375,0.00027466658502817154,0.0002441480755805969,-0.0001220703125,0.00015259254723787308,0.00012207403779029846,-0.000091552734375,0.00006103701889514923,0.00009155552834272385,0,0,0.00030518509447574615,0.0005188146606087685,0.0001831110566854477,-0.000030517578125,-0.000152587890625,-0.00067138671875,-0.001251220703125,-0.00140380859375,-0.000579833984375,0.000030518509447574615,-0.00030517578125,-0.000396728515625,-0.000244140625,-0.000335693359375,-0.000091552734375,0.0001831110566854477,0.00006103701889514923,0.00045777764171361923,0.0012512588873505592,0.0012207403779029846,0.00033570360392332077,-0.000701904296875,-0.00115966796875,-0.000946044921875,-0.000762939453125,-0.000762939453125,-0.000579833984375,-0.000152587890625,0.00015259254723787308,0.0002136295661330223,0.00009155552834272385,0.0001831110566854477,0.000030518509447574615,-0.000274658203125,-0.00030517578125,-0.00042724609375,-0.00067138671875,-0.000518798828125,-0.000274658203125,-0.00048828125,-0.000885009765625,-0.000579833984375,-0.000579833984375,-0.001190185546875,-0.00146484375,-0.001129150390625,-0.000335693359375,-0.000091552734375,0.000030518509447574615,0.00079348124563694,0.0007019257172942162,0.00027466658502817154,0.0006103701889514923,0.0005493331700563431,0.0004272591322660446,0.0010071108117699623,0.0016785180196166039,0.001739555038511753,0.0013733329251408577,0.0012817773967981339,0.0014648884534835815,0.00119022186845541,0.00045777764171361923,0.0001831110566854477,0.00033570360392332077,0.0004272591322660446,0.00045777764171361923,0.0003662221133708954,0.0006103701889514923,0.0009460737928748131,0.0005798516795039177,0.00012207403779029846,-0.000030517578125,-0.000335693359375,-0.00030517578125,-0.0001220703125,-0.000335693359375,-0.00042724609375,-0.000152587890625,-0.000091552734375,-0.000701904296875,-0.0009765625,-0.000396728515625,-0.000091552734375,-0.000030517578125,0.0005493331700563431,0.0011597033590078354,0.0012817773967981339,0.0011291848495602608,0.0008545182645320892,0.0002136295661330223,-0.000274658203125,0.00006103701889514923,0.0005798516795039177,0.0006103701889514923,0.0009460737928748131,0.0013122959062457085,0.0012512588873505592,0.0012817773967981339,0.0012817773967981339,0.0013733329251408577,0.0017090365290641785,0.0023194067180156708,0.0027466658502817154,0.0020142216235399246,0.0016479995101690292,0.002136295661330223,0.001739555038511753,0.0008545182645320892,0.0006408886983990669,0.0007019257172942162,0.0005798516795039177,0.0006714072078466415,0.00119022186845541,0.0012512588873505592,0.00079348124563694,0.0007324442267417908,0.0003662221133708954,-0.00079345703125,-0.001312255859375,-0.000885009765625,-0.00103759765625,-0.001007080078125,-0.000244140625,-0.0001220703125,-0.000762939453125,-0.00115966796875,-0.0013427734375,-0.001495361328125,-0.00115966796875,-0.00054931640625,-0.000396728515625,-0.0001220703125,0.00039674062281847,0.00006103701889514923,-0.00067138671875,-0.00067138671875,-0.000457763671875,-0.0006103515625,-0.00054931640625,-0.00030517578125,-0.00048828125,-0.00091552734375,-0.001251220703125,-0.002044677734375,-0.002532958984375,-0.0020751953125,-0.00189208984375,-0.002288818359375,-0.002197265625,-0.001922607421875,-0.00225830078125,-0.00213623046875,-0.00177001953125,-0.001861572265625,-0.001861572265625,-0.0015869140625,-0.00115966796875,-0.001068115234375,-0.00128173828125,-0.001129150390625,-0.001068115234375,-0.000885009765625,-0.0009765625,-0.001556396484375,-0.001556396484375,-0.001068115234375,-0.00067138671875,-0.00054931640625,-0.000244140625,-0.000091552734375,-0.00042724609375,-0.00018310546875,-0.000518798828125,-0.0015869140625,-0.001556396484375,-0.001251220703125,-0.001373291015625,-0.001373291015625,-0.001220703125,-0.00079345703125,-0.000244140625,0.00030518509447574615,0.0006408886983990669,0.0005188146606087685,0.0010681478306651115,0.0017090365290641785,0.0015564439818263054,0.0011597033590078354,0.0004882961511611938,0.0002136295661330223,0.0002441480755805969,0.00015259254723787308,0.0006103701889514923,0.00119022186845541,0.0018616290763020515,0.0020447401329874992,0.0015564439818263054,0.0013122959062457085,0.0007324442267417908,0,-0.0003662109375,-0.0003662109375,0.0002136295661330223,0.0005493331700563431,0.0007629627361893654,0.0012817773967981339,0.0013122959062457085,0.0011597033590078354,0.0008545182645320892,0.0002441480755805969,0.00009155552834272385,0.00033570360392332077,0.00033570360392332077,0,-0.00018310546875,-0.000030517578125,-0.000030517578125,-0.00054931640625,-0.000701904296875,-0.000274658203125,-0.00018310546875,-0.000274658203125,0.00015259254723787308,0.00033570360392332077,0.00012207403779029846,0.00039674062281847,0.0003662221133708954,-0.000335693359375,-0.000518798828125,0.00015259254723787308,0.00079348124563694,0.00079348124563694,0.0004272591322660446,0.00030518509447574615,0.00012207403779029846,-0.00018310546875,0.00012207403779029846,0.0008545182645320892,0.0012817773967981339,0.0018616290763020515,0.0026551103219389915,0.0028992583975195885,0.0025635547935962677,0.0019226660951972008,0.0012512588873505592,0.0010681478306651115,0.0005188146606087685,-0.000335693359375,-0.00042724609375,-0.000396728515625,-0.0003662109375,0.000030518509447574615,0.00012207403779029846,0.0003662221133708954,0.0009155552834272385,0.0010681478306651115,0.001037629321217537,0.0008545182645320892,0.0008239997550845146,0.0011291848495602608,0.0015564439818263054,0.0019226660951972008,0.0019226660951972008,0.002471999265253544,0.00317392498254776,0.0026551103219389915,0.0017700735479593277,0.0016479995101690292,0.0020142216235399246,0.0017700735479593277,0.00119022186845541,0.001434369944036007,0.0014648884534835815,0.0010681478306651115,0.0012207403779029846,0.0009765923023223877,0.0004882961511611938,0.0005798516795039177,0.0005188146606087685,0.0001831110566854477,-0.00006103515625,0,0.00033570360392332077,0.00012207403779029846,-0.0006103515625,-0.000885009765625,-0.00140380859375,-0.00244140625,-0.002777099609375,-0.00274658203125,-0.00250244140625,-0.0015869140625,-0.000732421875,-0.000274658203125,-0.00030517578125,-0.0008544921875,-0.001129150390625,-0.001251220703125,-0.001861572265625,-0.00238037109375,-0.00225830078125,-0.00164794921875,-0.00152587890625,-0.0018310546875,-0.001190185546875,-0.00030517578125,-0.000152587890625,-0.000030517578125,0.00033570360392332077,0.00039674062281847,-0.0001220703125,-0.00030517578125,-0.00006103515625,-0.000335693359375,-0.000885009765625,-0.00103759765625,-0.000885009765625,-0.000946044921875,-0.000732421875,0.0003662221133708954,0.0010071108117699623,0.0006408886983990669,0.0006408886983990669,0.0008850367739796638,0.00033570360392332077,-0.000274658203125,-0.00018310546875,0.00012207403779029846,0.00039674062281847,0.0004882961511611938,0.00030518509447574615,-0.000030517578125,-0.00054931640625,-0.000640869140625,-0.000091552734375,0.0004272591322660446,0.0010681478306651115,0.0016174810007214546,0.001739555038511753,0.001739555038511753,0.0010986663401126862,0.00039674062281847,0.00006103701889514923,-0.00042724609375,-0.0003662109375,0.000030518509447574615,0,-0.000030517578125,0.00006103701889514923,-0.000396728515625,-0.001556396484375,-0.001983642578125,-0.001434326171875,-0.001251220703125,-0.000946044921875,0,0.00045777764171361923,0.00039674062281847,-0.000030517578125,-0.001434326171875,-0.003021240234375,-0.003662109375,-0.003753662109375,-0.003814697265625,-0.00299072265625,-0.001556396484375,-0.001190185546875,-0.0015869140625,-0.001739501953125,-0.001922607421875,-0.002166748046875,-0.001739501953125,-0.000579833984375,0,0.00009155552834272385,0.0006714072078466415,0.0006103701889514923,-0.000091552734375,-0.00042724609375,-0.000701904296875,-0.00103759765625,-0.000396728515625,0.0010071108117699623,0.0016785180196166039,0.002288888208568096,0.003662221133708954,0.0037842951714992523,0.0023499252274632454,0.001739555038511753,0.001739555038511753,0.00119022186845541,0.001434369944036007,0.0027466658502817154,0.0032959990203380585,0.0031434064731001854,0.0029908139258623123,0.002227851189672947,0.0010681478306651115,0.0004882961511611938,0.0006408886983990669,0.0006103701889514923,0.00045777764171361923,0.0010681478306651115,0.0008545182645320892,-0.000335693359375,-0.000518798828125,-0.0008544921875,-0.0018310546875,-0.00164794921875,-0.000823974609375,-0.000244140625,0.00006103701889514923,0.00009155552834272385,-0.000152587890625,-0.000946044921875,-0.001708984375,-0.00225830078125,-0.00244140625,-0.00146484375,-0.000396728515625,0.000030518509447574615,0.0002136295661330223,-0.000091552734375,-0.000396728515625,-0.000946044921875,-0.001922607421875,-0.00244140625,-0.002044677734375,-0.00067138671875,0.0002136295661330223,0.00015259254723787308,0,-0.000396728515625,-0.000823974609375,-0.0010986328125,-0.0013427734375,-0.001190185546875,-0.00048828125,0.0006408886983990669,0.0014038514345884323,0.0014648884534835815,0.0013122959062457085,0.0006103701889514923,-0.0001220703125,-0.000213623046875,-0.000579833984375,-0.00091552734375,-0.00030517578125,0.0004272591322660446,0.0001831110566854477,-0.000396728515625,-0.000335693359375,-0.0003662109375,-0.00079345703125,-0.000946044921875,-0.000518798828125,0.0002136295661330223,0.0007324442267417908,0.0010986663401126862,0.0012512588873505592,0.0007324442267417908,0.00015259254723787308,-0.0001220703125,-0.000152587890625,0.0001831110566854477,0.0008239997550845146,0.0012512588873505592,0.0010681478306651115,0.0008239997550845146,0.0005188146606087685,0,0.000030518509447574615,0.0006103701889514923,0.001037629321217537,0.0012817773967981339,0.00158696249127388,0.0018616290763020515,0.001434369944036007,0.0006103701889514923,-0.000030517578125,-0.000244140625,0,0.00030518509447574615,0.0007019257172942162,0.0008545182645320892,0.0007629627361893654,0.0007019257172942162,0.00009155552834272385,-0.00103759765625,-0.001861572265625,-0.0020751953125,-0.001922607421875,-0.00146484375,-0.001220703125,-0.001129150390625,-0.000518798828125,-0.000213623046875,-0.00079345703125,-0.001495361328125,-0.001678466796875,-0.00103759765625,-0.00048828125,-0.000579833984375,-0.000701904296875,-0.000732421875,-0.0006103515625,-0.0009765625,-0.00189208984375,-0.001922607421875,-0.00067138671875,0.0007019257172942162,0.0014038514345884323,0.0019226660951972008,0.0023499252274632454,0.0021973326802253723,0.0016479995101690292,0.00119022186845541,0.0008545182645320892,0.0007629627361893654,0.0012207403779029846,0.001831110566854477,0.0016174810007214546,0.0010681478306651115,0.0008850367739796638,0.0009765923023223877,0.0006714072078466415,0.0002441480755805969,0.0009460737928748131,0.0016785180196166039,0.0015259254723787308,0.00198370311409235,0.0024414807558059692,0.0018616290763020515,0.0009155552834272385,0.00030518509447574615,0.00006103701889514923,-0.000152587890625,-0.00030517578125,-0.00018310546875,0,0,-0.00018310546875,-0.0006103515625,-0.001251220703125,-0.00164794921875,-0.0015869140625,-0.00115966796875,-0.000701904296875,-0.0006103515625,-0.000396728515625,-0.00018310546875,-0.000762939453125,-0.001129150390625,-0.0006103515625,-0.000518798828125,-0.000732421875,-0.0001220703125,0.0005493331700563431,0.0005798516795039177,0.0002136295661330223,0,0.00015259254723787308,0.0003662221133708954,0.0009155552834272385,0.0015564439818263054,0.0014954069629311562,0.0010986663401126862,0.0008850367739796638,0.00033570360392332077,-0.000732421875,-0.001495361328125,-0.001617431640625,-0.00189208984375,-0.002105712890625,-0.00201416015625,-0.00164794921875,-0.00103759765625,-0.00103759765625,-0.001953125,-0.00244140625,-0.002288818359375,-0.0025634765625,-0.002532958984375,-0.001617431640625,-0.001068115234375,-0.00128173828125,-0.0010986328125,-0.001129150390625,-0.0020751953125,-0.002716064453125,-0.002349853515625,-0.001922607421875,-0.00201416015625,-0.00152587890625,-0.00067138671875,-0.000823974609375,-0.001251220703125,-0.00115966796875,-0.0009765625,-0.000518798828125,0.0005798516795039177,0.0016785180196166039,0.00238044373691082,0.0028382213786244392,0.002685628831386566,0.0018616290763020515,0.0011291848495602608,0.0011291848495602608,0.0014038514345884323,0.0015259254723787308,0.002136295661330223,0.0029908139258623123,0.0030518509447574615,0.00277718435972929,0.0027161473408341408,0.002471999265253544,0.0021057771518826485,0.002136295661330223,0.002227851189672947,0.0019531846046447754,0.0016479995101690292,0.001434369944036007,0.0005493331700563431,-0.000732421875,-0.001220703125,-0.00140380859375,-0.001800537109375,-0.001495361328125,-0.00091552734375,-0.000823974609375,-0.000885009765625,-0.000885009765625,-0.00128173828125,-0.001678466796875,-0.00128173828125,-0.0013427734375,-0.001739501953125,-0.000885009765625,-0.000091552734375,-0.0006103515625,-0.0008544921875,-0.000213623046875,-0.000091552734375,-0.00048828125,-0.00018310546875,0.0003662221133708954,0.00027466658502817154,0.0005798516795039177,0.0010071108117699623,0.00045777764171361923,0.0004272591322660446,0.001037629321217537,0.0008239997550845146,0.0005798516795039177,0.0006103701889514923,0.0004272591322660446,0.0003662221133708954,0.0003662221133708954,0.0002136295661330223,-0.000244140625,-0.000885009765625,-0.0008544921875,-0.0006103515625,-0.00048828125,0.0002136295661330223,0.0007629627361893654,0.0009460737928748131,0.0013122959062457085,0.0012512588873505592,0.0010681478306651115,0.0007629627361893654,0.00030518509447574615,0.0006103701889514923,0.0013733329251408577,0.00158696249127388,0.001434369944036007,0.001739555038511753,0.0018921475857496262,0.0010986663401126862,0.0007629627361893654,0.00119022186845541,0.0014038514345884323,0.0018921475857496262,0.0028077028691768646,0.0031434064731001854,0.0029602954164147377,0.0028992583975195885,0.0029602954164147377,0.002533036284148693,0.0022583696991205215,0.0026551103219389915,0.002868739888072014,0.00317392498254776,0.0032044434919953346,0.0024109622463583946,0.0013733329251408577,0.0001831110566854477,-0.000762939453125,-0.001434326171875,-0.00152587890625,-0.000885009765625,-0.000457763671875,0.0001831110566854477,0.0009155552834272385,0.0007629627361893654,0.00015259254723787308,-0.000885009765625,-0.001953125,-0.0025634765625,-0.0028076171875,-0.002471923828125,-0.00213623046875,-0.001922607421875,-0.0018310546875,-0.002471923828125,-0.0032958984375,-0.0035400390625,-0.00323486328125,-0.00274658203125,-0.002288818359375,-0.0018310546875,-0.001251220703125,-0.000946044921875,-0.00091552734375,-0.00091552734375,-0.001190185546875,-0.001251220703125,-0.000732421875,0,0.00045777764171361923,0.0006408886983990669,0.0009460737928748131,0.0004272591322660446,-0.000457763671875,-0.0008544921875,-0.0009765625,-0.0008544921875,-0.0006103515625,0.000030518509447574615,0.0010986663401126862,0.0015564439818263054,0.0013122959062457085,0.0007019257172942162,0,-0.000457763671875,-0.001007080078125,-0.0010986328125,-0.000518798828125,0.00009155552834272385,0.0004882961511611938,0.00027466658502817154,-0.000244140625,-0.00067138671875,-0.000457763671875,0.0001831110566854477,0.00015259254723787308,-0.000213623046875,0.000030518509447574615,0.0004272591322660446,0.00027466658502817154,-0.0003662109375,-0.000701904296875,-0.00067138671875,-0.001190185546875,-0.001617431640625,-0.001373291015625,-0.000946044921875,-0.000701904296875,-0.00054931640625,-0.0001220703125,-0.000335693359375,-0.00140380859375,-0.00177001953125,-0.00140380859375,-0.00140380859375,-0.001007080078125,0.00012207403779029846,0.0004882961511611938,-0.0003662109375,-0.001007080078125,-0.00103759765625,-0.0013427734375,-0.001556396484375,-0.000885009765625,-0.000152587890625,0,0.00033570360392332077,0.0007629627361893654,0.0006103701889514923,0.00045777764171361923,0.0008850367739796638,0.0015564439818263054,0.0017090365290641785,0.00198370311409235,0.002624591812491417,0.0026551103219389915,0.002533036284148693,0.00238044373691082,0.0019531846046447754,0.0019531846046447754,0.0016174810007214546,0.0012207403779029846,0.0014648884534835815,0.001342814415693283,0.0010071108117699623,0.0008239997550845146,0.001037629321217537,0.0015259254723787308,0.0010986663401126862,0.0005798516795039177,0.0012207403779029846,0.0016479995101690292,0.0013122959062457085,0.0007019257172942162,0.00009155552834272385,-0.00030517578125,-0.000518798828125,-0.000823974609375,-0.001190185546875,-0.0013427734375,-0.001312255859375,-0.0006103515625,-0.000335693359375,-0.0008544921875,-0.000701904296875,-0.000274658203125,-0.000274658203125,-0.00006103515625,0.0004272591322660446,0.0009460737928748131,0.0012512588873505592,0.0015259254723787308,0.00158696249127388,0.00119022186845541,0.0007629627361893654,0.00045777764171361923,0.00045777764171361923,0.00030518509447574615,-0.00030517578125,-0.000396728515625,-0.00018310546875,-0.0003662109375,-0.000579833984375,-0.001312255859375,-0.001861572265625,-0.00189208984375,-0.001983642578125,-0.0015869140625,-0.0018310546875,-0.00250244140625,-0.00225830078125,-0.002593994140625,-0.003631591796875,-0.003662109375,-0.003173828125,-0.002960205078125,-0.002471923828125,-0.0015869140625,-0.00128173828125,-0.001190185546875,-0.000518798828125,-0.000091552734375,-0.00042724609375,-0.00048828125,-0.000030517578125,0.00012207403779029846,0.0001831110566854477,0.0005798516795039177,0.0006408886983990669,0.0002441480755805969,0.0002136295661330223,0.00009155552834272385,0,0.0005188146606087685,0.0010071108117699623,0.0011291848495602608,0.0010071108117699623,0.0012207403779029846,0.00119022186845541,0.00015259254723787308,-0.00006103515625,0.0004272591322660446,0,-0.000152587890625,0.0006408886983990669,0.0007629627361893654,0.0005188146606087685,0.0004272591322660446,-0.0001220703125,-0.001007080078125,-0.00115966796875,-0.00091552734375,-0.001373291015625,-0.001373291015625,-0.0003662109375,-0.000457763671875,-0.001312255859375,-0.00103759765625,-0.000701904296875,-0.001434326171875,-0.001556396484375,-0.000823974609375,-0.000457763671875,0.00015259254723787308,0.0010681478306651115,0.00119022186845541,0.0006714072078466415,0.0007629627361893654,0.0009460737928748131,0.0002136295661330223,0.00033570360392332077,0.0012512588873505592,0.0010986663401126862,0.0009460737928748131,0.001037629321217537,0.0006714072078466415,0.0005493331700563431,0.0005798516795039177,0.0005188146606087685,0.00039674062281847,0.0005493331700563431,0.0011597033590078354,0.0011597033590078354,0.0007019257172942162,0.0005798516795039177,0.0002136295661330223,-0.00042724609375,-0.00115966796875,-0.001251220703125,-0.001007080078125,-0.000946044921875,-0.00048828125,-0.00048828125,-0.000823974609375,-0.000823974609375,-0.001251220703125,-0.001617431640625,-0.001373291015625,-0.000518798828125,0.0004882961511611938,0.0009460737928748131,0.0012512588873505592,0.0014038514345884323,0.00119022186845541,0.0008239997550845146,0.00033570360392332077,0.0005798516795039177,0.0011291848495602608,0.0012207403779029846,0.0017700735479593277,0.0025635547935962677,0.0028382213786244392,0.0027466658502817154,0.0025635547935962677,0.0023499252274632454,0.0019226660951972008,0.0019531846046447754,0.0028077028691768646,0.003326517529785633,0.0029602954164147377,0.00277718435972929,0.002929776906967163,0.00198370311409235,0.0004882961511611938,0.0002136295661330223,0.00012207403779029846,-0.000274658203125,0.00006103701889514923,0.0007324442267417908,0.0008850367739796638,0.0010681478306651115,0.0012207403779029846,0.0005188146606087685,-0.0001220703125,0.00012207403779029846,0.0004272591322660446,0.0004272591322660446,0.0006714072078466415,0.0008545182645320892,0.0006103701889514923,-0.000152587890625,-0.00067138671875,-0.000396728515625,-0.000518798828125,-0.000640869140625,0,0.0004882961511611938,0.0005493331700563431,0.0006408886983990669,0.0007019257172942162,0.0002441480755805969,-0.0003662109375,-0.000579833984375,-0.000640869140625,-0.0006103515625,-0.00042724609375,-0.000457763671875,-0.00054931640625,-0.00091552734375,-0.001617431640625,-0.002105712890625,-0.002410888671875,-0.00262451171875,-0.002227783203125,-0.00146484375,-0.000946044921875,-0.000579833984375,-0.000396728515625,-0.00048828125,-0.000701904296875,-0.001068115234375,-0.001678466796875,-0.002044677734375,-0.001739501953125,-0.001007080078125,-0.0006103515625,-0.000579833984375,-0.000701904296875,-0.000762939453125,-0.000823974609375,-0.00115966796875,-0.000885009765625,0,0.0007019257172942162,0.00119022186845541,0.0011597033590078354,0.0006408886983990669,0.00015259254723787308,-0.000091552734375,0.000030518509447574615,0.00015259254723787308,-0.000152587890625,-0.00030517578125,0.00012207403779029846,0.00079348124563694,0.0011291848495602608,0.0010071108117699623,0.0005798516795039177,0.000030518509447574615,-0.000152587890625,-0.00018310546875,-0.000457763671875,-0.000946044921875,-0.00103759765625,-0.00067138671875,-0.000762939453125,-0.001434326171875,-0.00146484375,-0.00115966796875,-0.001220703125,-0.0009765625,-0.00054931640625,-0.000335693359375,-0.0003662109375,-0.00079345703125,-0.0008544921875,-0.00079345703125,-0.001068115234375,-0.00048828125,-0.00006103515625,-0.00048828125,-0.000701904296875,-0.00079345703125,-0.001068115234375,-0.00128173828125,-0.001068115234375,-0.00054931640625,-0.00042724609375,-0.000274658203125,0.000030518509447574615,0.000030518509447574615,-0.000335693359375,-0.000579833984375,-0.00006103515625,0.00045777764171361923,0.0004272591322660446,0.0004882961511611938,0.00045777764171361923,0.00030518509447574615,0.0002441480755805969,-0.000396728515625,-0.000701904296875,-0.000274658203125,-0.000457763671875,-0.0003662109375,0.00033570360392332077,0.0005493331700563431,0.0008239997550845146,0.0015564439818263054,0.001831110566854477,0.0012512588873505592,0.0011597033590078354,0.002227851189672947,0.0025635547935962677,0.0024414807558059692,0.00317392498254776,0.0036011841148138046,0.0031128879636526108,0.002533036284148693,0.002227851189672947,0.0017700735479593277,0.0011597033590078354,0.00119022186845541,0.00119022186845541,0.0005188146606087685,0.00030518509447574615,0.00027466658502817154,-0.000457763671875,-0.000823974609375,-0.0008544921875,-0.000823974609375,-0.00079345703125,-0.00079345703125,-0.000274658203125,-0.000457763671875,-0.0010986328125,-0.00091552734375,-0.001312255859375,-0.002044677734375,-0.001983642578125,-0.001922607421875,-0.002349853515625,-0.002410888671875,-0.001739501953125,-0.001495361328125,-0.001617431640625,-0.001007080078125,-0.00048828125,-0.00079345703125,-0.00103759765625,-0.000762939453125,-0.000518798828125,-0.0001220703125,0.0008239997550845146,0.0016174810007214546,0.00158696249127388,0.0018005920574069023,0.0021973326802253723,0.0017700735479593277,0.0017700735479593277,0.0024109622463583946,0.0025025177747011185,0.002624591812491417,0.002929776906967163,0.002288888208568096,0.0013733329251408577,0.00119022186845541,0.0008545182645320892,0.0001831110566854477,0.00027466658502817154,0.0011291848495602608,0.0016785180196166039,0.0013122959062457085,0.0008850367739796638,-0.00006103515625,-0.001129150390625,-0.000457763671875,-0.000030517578125,-0.000732421875,-0.000213623046875,0.0006408886983990669,0.0005188146606087685,0.00009155552834272385,-0.000091552734375,0.0001831110566854477,0.0004882961511611938,0.0005188146606087685,0.0005493331700563431,0.00015259254723787308,0.000030518509447574615,0.0004272591322660446,0.00015259254723787308,-0.000030517578125,-0.000091552734375,0,0.0003662221133708954,0.0001831110566854477,0,0,-0.000335693359375,-0.0010986328125,-0.001861572265625,-0.00225830078125,-0.0028076171875,-0.002838134765625,-0.00189208984375,-0.001556396484375,-0.001739501953125,-0.001708984375,-0.002105712890625,-0.0025634765625,-0.00250244140625,-0.002227783203125,-0.00225830078125,-0.002197265625,-0.00164794921875,-0.001678466796875,-0.002166748046875,-0.00213623046875,-0.00225830078125,-0.00213623046875,-0.001708984375,-0.001678466796875,-0.00140380859375,-0.000885009765625,-0.00042724609375,-0.0003662109375,-0.000762939453125,-0.00042724609375,0.00006103701889514923,0.0001831110566854477,0.0004272591322660446,0.0008239997550845146,0.001434369944036007,0.0017090365290641785,0.0017090365290641785,0.0018921475857496262,0.00158696249127388,0.0011597033590078354,0.0004272591322660446,-0.000640869140625,-0.0009765625,-0.0006103515625,-0.0003662109375,-0.000457763671875,-0.000396728515625,0.00015259254723787308,0.00045777764171361923,0.00045777764171361923,0.0006714072078466415,0.0007324442267417908,0.0007324442267417908,0.00119022186845541,0.0014954069629311562,0.0010071108117699623,0.0005188146606087685,0.0006408886983990669,0.0005493331700563431,0.0002136295661330223,0.00030518509447574615,0.0007629627361893654,0.00079348124563694,0.0004882961511611938,0.00033570360392332077,0.000030518509447574615,-0.0001220703125,0.00015259254723787308,0.0005493331700563431,0.0009460737928748131,0.0009460737928748131,0.0005493331700563431,0.0006714072078466415,0.0005798516795039177,-0.00006103515625,-0.000213623046875,0.00006103701889514923,0.0001831110566854477,0,-0.000335693359375,-0.00030517578125,-0.000457763671875,-0.000946044921875,-0.000701904296875,-0.000457763671875,-0.000701904296875,-0.001007080078125,-0.00128173828125,-0.001190185546875,-0.000946044921875,-0.000579833984375,-0.000091552734375,0,0.000030518509447574615,0.0002136295661330223,0.0006714072078466415,0.001434369944036007,0.0016174810007214546,0.0014648884534835815,0.00158696249127388,0.0014954069629311562,0.0009765923023223877,0.0009460737928748131,0.0016785180196166039,0.0018921475857496262,0.0016174810007214546,0.0016479995101690292,0.0016785180196166039,0.0015259254723787308,0.0010986663401126862,0.001037629321217537,0.00119022186845541,0.0008545182645320892,0.0007324442267417908,0.0006714072078466415,0.0002136295661330223,0.00030518509447574615,0.0007324442267417908,0.00039674062281847,-0.000152587890625,-0.00018310546875,-0.000152587890625,-0.00048828125,-0.00103759765625,-0.001373291015625,-0.000762939453125,-0.000091552734375,-0.000640869140625,-0.001495361328125,-0.00103759765625,-0.000091552734375,-0.000213623046875,-0.000396728515625,0.0001831110566854477,0.0003662221133708954,0.00009155552834272385,0.00015259254723787308,0,-0.000274658203125,0.00006103701889514923,0.0005188146606087685,0.0002136295661330223,-0.000213623046875,0.0003662221133708954,0.0013733329251408577,0.0006714072078466415,-0.00048828125,0,0.0006408886983990669,-0.000030517578125,-0.000518798828125,0.00012207403779029846,0.0007629627361893654,0.0007019257172942162,0.0005798516795039177,0.0007324442267417908,0.0007019257172942162,0.0004882961511611938,0.0004882961511611938,0.00033570360392332077,-0.000091552734375,-0.000274658203125,-0.000396728515625,-0.0010986328125,-0.001678466796875,-0.00146484375,-0.0010986328125,-0.00079345703125,-0.000396728515625,-0.000091552734375,0.0003662221133708954,0.00039674062281847,-0.00030517578125,-0.000213623046875,0.0002136295661330223,-0.000091552734375,-0.000335693359375,0.00015259254723787308,0.0008850367739796638,0.0011291848495602608,0.0008545182645320892,0.00033570360392332077,0,0.00039674062281847,0.0009460737928748131,0.0004272591322660446,-0.000274658203125,0.000030518509447574615,0.0007324442267417908,0.0004882961511611938,0.00012207403779029846,0.0005798516795039177,0.0008850367739796638,0.0008239997550845146,0.0002441480755805969,-0.000640869140625,-0.000396728515625,0.0003662221133708954,0.00015259254723787308,-0.00030517578125,-0.00006103515625,0.00015259254723787308,-0.0001220703125,-0.000274658203125,-0.00006103515625,-0.000091552734375,-0.000152587890625,0.00012207403779029846,-0.00006103515625,-0.000640869140625,-0.00018310546875,0.00015259254723787308,-0.0006103515625,-0.0006103515625,0.0004882961511611938,0.0005798516795039177,0.00009155552834272385,0.0006408886983990669,0.001037629321217537,0.0005798516795039177,0.0005493331700563431,0.0006408886983990669,-0.000244140625,-0.000732421875,-0.000335693359375,-0.00067138671875,-0.001312255859375,-0.001220703125,-0.001190185546875,-0.001678466796875,-0.001800537109375,-0.0015869140625,-0.001708984375,-0.001739501953125,-0.001373291015625,-0.0013427734375,-0.0015869140625,-0.001251220703125,-0.001068115234375,-0.0013427734375,-0.001190185546875,-0.0009765625,-0.001007080078125,-0.000885009765625,-0.000640869140625,-0.000457763671875,-0.0003662109375,-0.000091552734375,-0.000091552734375,-0.000701904296875,-0.000701904296875,-0.0003662109375,-0.000579833984375,-0.00079345703125,-0.000457763671875,0.00027466658502817154,0.00045777764171361923,0.0002441480755805969,0.0005188146606087685,0.0007019257172942162,0.0010681478306651115,0.0013733329251408577,0.0009460737928748131,0.0007019257172942162,0.0007629627361893654,0.0007019257172942162,0.0004272591322660446,0.0002136295661330223,0.00039674062281847,0.00006103701889514923,-0.000579833984375,-0.000946044921875,-0.000885009765625,-0.0006103515625,-0.000885009765625,-0.001251220703125,-0.001129150390625,-0.001068115234375,-0.00128173828125,-0.001617431640625,-0.00152587890625,-0.000946044921875,-0.000213623046875,0.00039674062281847,0.00030518509447574615,-0.000030517578125,-0.000152587890625,-0.00030517578125,-0.000946044921875,-0.001434326171875,-0.00103759765625,-0.00054931640625,-0.000640869140625,-0.0006103515625,-0.0003662109375,-0.00018310546875,0.00027466658502817154,0.0010681478306651115,0.0008239997550845146,0.0003662221133708954,0.0008545182645320892,0.0012512588873505592,0.0012207403779029846,0.001342814415693283,0.0014954069629311562,0.001342814415693283,0.0007629627361893654,0.00027466658502817154,0.0003662221133708954,0.0003662221133708954,0.00012207403779029846,0.00030518509447574615,0.0006103701889514923,0.00033570360392332077,-0.000091552734375,0,0.0006408886983990669,0.0012207403779029846,0.0016479995101690292,0.0018616290763020515,0.0017700735479593277,0.0017700735479593277,0.001739555038511753,0.0010681478306651115,0.0005188146606087685,0.0008239997550845146,0.0012512588873505592,0.0012817773967981339,0.00079348124563694,0.0004272591322660446,0.0005188146606087685,0.00045777764171361923,0.00039674062281847,0.0005188146606087685,0.00033570360392332077,0.0001831110566854477,0.00015259254723787308,0.000030518509447574615,-0.00030517578125,-0.000335693359375,0.00006103701889514923,0.0002136295661330223,0.00009155552834272385,0.00006103701889514923,0.00039674062281847,0.00079348124563694,0.0006408886983990669,0.0005798516795039177,0.0007324442267417908,0.00039674062281847,-0.00030517578125,-0.00054931640625,-0.00048828125,-0.000762939453125,-0.000946044921875,-0.000762939453125,-0.000762939453125,-0.001007080078125,-0.001190185546875,-0.00103759765625,-0.000732421875,-0.0006103515625,-0.00030517578125,0.00033570360392332077,0.0006714072078466415,0.0008850367739796638,0.0014038514345884323,0.0017700735479593277,0.0015259254723787308,0.0007629627361893654,0.00033570360392332077,0.0006103701889514923,0.0008239997550845146,0.0006103701889514923,0.00039674062281847,0,-0.00030517578125,-0.000213623046875,-0.00048828125,-0.00067138671875,-0.000244140625,0.0002136295661330223,0.0005188146606087685,0.0002441480755805969,-0.00018310546875,0,0,-0.0001220703125,0,-0.000030517578125,-0.000091552734375,-0.00018310546875,-0.00030517578125,-0.000457763671875,-0.00048828125,-0.000274658203125,0.00006103701889514923,0.00027466658502817154,-0.000091552734375,-0.000732421875,-0.000701904296875,-0.000457763671875,-0.0003662109375,-0.0003662109375,-0.00048828125,-0.000274658203125,-0.000244140625,-0.000274658203125,0.0001831110566854477,0.0002136295661330223,-0.000030517578125,0.00006103701889514923,0.00009155552834272385,-0.0001220703125,-0.000091552734375,0.00015259254723787308,-0.0001220703125,-0.00067138671875,-0.00079345703125,-0.000885009765625,-0.00115966796875,-0.001129150390625,-0.000732421875,-0.000274658203125,-0.000152587890625,-0.000152587890625,-0.00006103515625,-0.00054931640625,-0.00091552734375,-0.00054931640625,-0.0009765625,-0.00164794921875,-0.00128173828125,-0.001007080078125,-0.001129150390625,-0.000732421875,-0.000396728515625,-0.00030517578125,-0.00006103515625,0.00015259254723787308,0.0001831110566854477,0,0.00033570360392332077,0.0008545182645320892,0.00045777764171361923,0,0.00030518509447574615,0.0002441480755805969,-0.00018310546875,0.00012207403779029846,0.0006408886983990669,0.0006408886983990669,0.0006408886983990669,0.0008850367739796638,0.0005798516795039177,0.00009155552834272385,0.00039674062281847,0.00030518509447574615,-0.0003662109375,-0.00042724609375,0,0.0002136295661330223,0.0005493331700563431,0.0008545182645320892,0.0006408886983990669,0.00027466658502817154,0.00015259254723787308,-0.00048828125,-0.001068115234375,-0.000396728515625,0.00015259254723787308,0.00012207403779029846,0.0006408886983990669,0.001342814415693283,0.0012817773967981339,0.0008545182645320892,0.0007324442267417908,0.0010986663401126862,0.0014038514345884323,0.0017700735479593277,0.002288888208568096,0.0020447401329874992,0.001739555038511753,0.001739555038511753,0.0010071108117699623,0.0003662221133708954,0.0007019257172942162,0.00079348124563694,0.0005188146606087685,0.0003662221133708954,0.0001831110566854477,-0.000030517578125,-0.00030517578125,-0.000823974609375,-0.00146484375,-0.001678466796875,-0.001220703125,-0.000762939453125,-0.000396728515625,-0.000091552734375,-0.000152587890625,-0.0003662109375,-0.0009765625,-0.00146484375,-0.001373291015625,-0.00115966796875,-0.0010986328125,-0.001495361328125,-0.0018310546875,-0.001800537109375,-0.00225830078125,-0.002593994140625,-0.002197265625,-0.001953125,-0.001617431640625,-0.0009765625,-0.000823974609375,-0.0006103515625,0.00009155552834272385,0.0006714072078466415,0.0007629627361893654,0.00079348124563694,0.0008850367739796638,0.00045777764171361923,0.00012207403779029846,0.0003662221133708954,0.0005188146606087685,0.0006408886983990669,0.0005798516795039177,0.0004272591322660446,0.00027466658502817154,-0.000030517578125,0.00006103701889514923,0.00027466658502817154,0.00027466658502817154,0.0005493331700563431,0.0008239997550845146,0.0008239997550845146,0.0006103701889514923,0.0006714072078466415,0.0008850367739796638,0.0005798516795039177,0.00045777764171361923,0.00033570360392332077,-0.000091552734375,-0.00030517578125,-0.00054931640625,-0.000579833984375,-0.000152587890625,0.00027466658502817154,0.0004272591322660446,0.0001831110566854477,0,-0.000213623046875,-0.000396728515625,-0.00006103515625,0.00045777764171361923,0.0005493331700563431,0.00039674062281847,0.00030518509447574615,0.00033570360392332077,0.00045777764171361923,0.0005798516795039177,0.0005493331700563431,-0.0001220703125,-0.000701904296875,-0.000457763671875,-0.00018310546875,0,0.0002441480755805969,0.0005493331700563431,0.0004882961511611938,-0.000152587890625,-0.000457763671875,-0.000457763671875,-0.00067138671875,-0.000457763671875,0,0,0,0.0002136295661330223,0.0001831110566854477,-0.0001220703125,-0.000335693359375,-0.00054931640625,-0.000701904296875,-0.000640869140625,-0.000457763671875,-0.000396728515625,-0.00042724609375,-0.00042724609375,-0.000396728515625,-0.0006103515625,-0.00067138671875,-0.00042724609375,-0.0003662109375,-0.00018310546875,0.00012207403779029846,0.00015259254723787308,-0.000213623046875,-0.0003662109375,0.00006103701889514923,0.0003662221133708954,0.00045777764171361923,0.001037629321217537,0.0016479995101690292,0.0016785180196166039,0.00158696249127388,0.002075258642435074,0.002471999265253544,0.0018005920574069023,0.0012817773967981339,0.0014954069629311562,0.0014038514345884323,0.0012207403779029846,0.0011291848495602608,0.0009155552834272385,0.00015259254723787308,-0.000518798828125,-0.000762939453125,-0.001251220703125,-0.001220703125,-0.000152587890625,0.0004882961511611938,0.00039674062281847,0.00012207403779029846,-0.0001220703125,-0.000396728515625,-0.000732421875,-0.001068115234375,-0.001129150390625,-0.000579833984375,-0.00006103515625,-0.000030517578125,-0.000030517578125,0.000030518509447574615,0,-0.000274658203125,-0.00048828125,-0.000396728515625,-0.0003662109375,-0.000091552734375,0.00039674062281847,0.0005188146606087685,0.00030518509447574615,0.00027466658502817154,0,-0.0009765625,-0.001434326171875,-0.0008544921875,-0.000274658203125,-0.000244140625,-0.00048828125,-0.000152587890625,0,-0.000518798828125,-0.000640869140625,-0.000335693359375,-0.0001220703125,0.00030518509447574615,0.0012207403779029846,0.0018616290763020515,0.0016174810007214546,0.0012512588873505592,0.0007324442267417908,0.00009155552834272385,0.00012207403779029846,0.00030518509447574615,0.0005798516795039177,0.001037629321217537,0.0011597033590078354,0.0012207403779029846,0.0010986663401126862,0.0004882961511611938,0.00015259254723787308,-0.00006103515625,-0.0003662109375,-0.000518798828125,-0.00054931640625,-0.000274658203125,0.000030518509447574615,-0.00018310546875,-0.00054931640625,-0.000244140625,0,-0.00018310546875,-0.000244140625,-0.0003662109375,-0.000823974609375,-0.0008544921875,-0.000823974609375,-0.00128173828125,-0.001251220703125,-0.00091552734375,-0.001068115234375,-0.001190185546875,-0.001129150390625,-0.000762939453125,-0.000213623046875,0.00012207403779029846,-0.000213623046875,-0.0008544921875,-0.00091552734375,-0.00091552734375,-0.001220703125,-0.00103759765625,-0.00048828125,-0.000030517578125,0.0001831110566854477,0.0001831110566854477,0.0002441480755805969,0,-0.000152587890625,-0.000030517578125,-0.000335693359375,-0.000274658203125,0.0002136295661330223,-0.000091552734375,-0.000640869140625,-0.00042724609375,-0.000457763671875,-0.0008544921875,-0.00042724609375,0.0001831110566854477,-0.000030517578125,-0.000213623046875,0.00009155552834272385,-0.0001220703125,-0.000640869140625,-0.000396728515625,0.00012207403779029846,0.0002441480755805969,0.00033570360392332077,0.0004272591322660446,-0.000244140625,-0.000823974609375,-0.0006103515625,-0.00079345703125,-0.001312255859375,-0.00091552734375,-0.000030517578125,-0.000274658203125,-0.0008544921875,-0.000518798828125,-0.0003662109375,-0.000396728515625,0.00012207403779029846,0.00033570360392332077,0.0002441480755805969,0.00039674062281847,0.0004272591322660446,0.00039674062281847,0.0003662221133708954,0.0005798516795039177,0.0008239997550845146,0.0008239997550845146,0.00079348124563694,0.0006408886983990669,0.0005798516795039177,0.0005798516795039177,0.0007324442267417908,0.0009155552834272385,0.0007324442267417908,0.0004882961511611938,0.000030518509447574615,-0.000030517578125,0.00030518509447574615,0.00027466658502817154,0.0006408886983990669,0.0012207403779029846,0.001037629321217537,0.0006408886983990669,0.00006103701889514923,-0.0003662109375,-0.000396728515625,-0.00006103515625,0.0005493331700563431,0.001037629321217537,0.0015259254723787308,0.0018005920574069023,0.0012817773967981339,0.00079348124563694,0.0008545182645320892,0.0006408886983990669,0.00030518509447574615,0.00045777764171361923,0.0006408886983990669,0.00009155552834272385,-0.00048828125,-0.000396728515625,-0.000274658203125,-0.00042724609375,-0.00030517578125,-0.000030517578125,-0.000213623046875,-0.00067138671875,-0.000732421875,-0.000762939453125,-0.0009765625,-0.000732421875,-0.000274658203125,-0.0003662109375,-0.000244140625,0.0004272591322660446,0.0005188146606087685,0.00039674062281847,0.0012512588873505592,0.001831110566854477,0.0016785180196166039,0.0016785180196166039,0.00158696249127388,0.0014648884534835815,0.00119022186845541,0.0009460737928748131,0.001037629321217537,0.0007629627361893654,0.0004272591322660446,0.00039674062281847,0.0001831110566854477,-0.00006103515625,-0.000335693359375,-0.000244140625,0.00009155552834272385,0.0002441480755805969,0.00015259254723787308,-0.00006103515625,-0.0001220703125,0.00009155552834272385,0.0002136295661330223,0.00039674062281847,0.0008850367739796638,0.0003662221133708954,-0.000701904296875,-0.00079345703125,-0.000701904296875,-0.0006103515625,-0.000244140625,-0.000244140625,-0.000244140625,-0.000396728515625,-0.00079345703125,-0.0009765625,-0.000732421875,-0.0001220703125,0.00009155552834272385,0,-0.00042724609375,-0.001068115234375,-0.001129150390625,-0.000762939453125,-0.00018310546875,0.00030518509447574615,0.00033570360392332077,0.00015259254723787308,-0.00030517578125,-0.001129150390625,-0.001312255859375,-0.000457763671875,0.00039674062281847,0.00039674062281847,-0.000244140625,-0.000640869140625,-0.000732421875,-0.00128173828125,-0.001739501953125,-0.001190185546875,-0.00006103515625,0.0004272591322660446,0.00012207403779029846,-0.00048828125,-0.001251220703125,-0.00177001953125,-0.001617431640625,-0.001251220703125,-0.000946044921875,-0.000518798828125,-0.0001220703125,-0.000213623046875,-0.0006103515625,-0.000701904296875,-0.00079345703125,-0.0009765625,-0.000762939453125,-0.00048828125,-0.00048828125,-0.00048828125,-0.00067138671875,-0.000885009765625,-0.0006103515625,-0.000335693359375,-0.000030517578125,0.0005798516795039177,0.0007019257172942162,0.0006714072078466415,0.0007629627361893654,0.0004882961511611938,0.0004272591322660446,0.0008239997550845146,0.0013733329251408577,0.0015259254723787308,0.0009765923023223877,0.0008239997550845146,0.0008545182645320892,0.0003662221133708954,0.0002136295661330223,0.0002441480755805969,0,-0.000091552734375,-0.000335693359375,-0.001007080078125,-0.000885009765625,-0.0001220703125,-0.000030517578125,0.00027466658502817154,0.00079348124563694,0.00030518509447574615,-0.000335693359375,-0.000732421875,-0.00103759765625,-0.00103759765625,-0.000396728515625,0.0005493331700563431,0.0007019257172942162,0.00033570360392332077,0.0005798516795039177,0.00039674062281847,-0.000091552734375,0.00030518509447574615,0.00119022186845541,0.0015259254723787308,0.0010681478306651115,0.0008545182645320892,0.00119022186845541,0.0012207403779029846,0.0011291848495602608,0.0009155552834272385,0.00027466658502817154,-0.0003662109375,-0.000579833984375,-0.000579833984375,-0.000274658203125,0.00015259254723787308,-0.000091552734375,-0.000701904296875,-0.001007080078125,-0.001312255859375,-0.001617431640625,-0.0013427734375,-0.000518798828125,-0.000030517578125,-0.00018310546875,-0.000518798828125,-0.0008544921875,-0.00103759765625,-0.00079345703125,-0.000091552734375,0.0002136295661330223,0,0.00009155552834272385,0.00030518509447574615,-0.000213623046875,-0.00048828125,0.00030518509447574615,0.0006714072078466415,0.00033570360392332077,0.00030518509447574615,0.00033570360392332077,0.0003662221133708954,0.0008850367739796638,0.0016479995101690292,0.00198370311409235,0.0017090365290641785,0.0012817773967981339,0.0006408886983990669,0.00009155552834272385,0.00027466658502817154,0.0008545182645320892,0.0013733329251408577,0.001739555038511753,0.0014954069629311562,0.0003662221133708954,-0.0003662109375,-0.00006103515625,0.0005798516795039177,0.001037629321217537,0.0013733329251408577,0.0012512588873505592,0.0005493331700563431,0.0002441480755805969,0.00006103701889514923,-0.0003662109375,-0.000274658203125,-0.000152587890625,-0.000762939453125,-0.001190185546875,-0.001434326171875,-0.001617431640625,-0.00128173828125,-0.000457763671875,0.0006103701889514923,0.00119022186845541,0.001037629321217537,0.0006408886983990669,0.00009155552834272385,0.00030518509447574615,0.001037629321217537,0.00119022186845541,0.0009460737928748131,0.00045777764171361923,0.0002441480755805969,0.0004272591322660446,0.0006714072078466415,0.0008545182645320892,0.0008850367739796638,0.0009460737928748131,0.0005188146606087685,-0.00048828125,-0.000732421875,-0.000457763671875,-0.000091552734375,0.0009460737928748131,0.001434369944036007,0.0006408886983990669,-0.00006103515625,-0.000518798828125,-0.001190185546875,-0.00177001953125,-0.001495361328125,-0.00103759765625,-0.00103759765625,-0.00067138671875,-0.000640869140625,-0.00103759765625,-0.000701904296875,0.000030518509447574615,0.0006103701889514923,0.00079348124563694,0.00079348124563694,0.0005798516795039177,-0.0001220703125,-0.0006103515625,-0.00079345703125,-0.0010986328125,-0.00128173828125,-0.001068115234375,-0.000335693359375,0.00015259254723787308,0.0004272591322660446,0.0008545182645320892,0.0006408886983990669,0.00045777764171361923,0.0003662221133708954,-0.000091552734375,0.00009155552834272385,0.0006408886983990669,0.0006408886983990669,0.00027466658502817154,-0.000396728515625,-0.00103759765625,-0.001434326171875,-0.001373291015625,-0.000823974609375,-0.000396728515625,-0.0003662109375,-0.00030517578125,-0.0001220703125,-0.000396728515625,-0.0009765625,-0.000732421875,-0.00048828125,-0.000732421875,-0.00042724609375,-0.000274658203125,-0.000579833984375,-0.0006103515625,-0.000640869140625,-0.000701904296875,-0.000823974609375,-0.001251220703125,-0.001617431640625,-0.001678466796875,-0.001434326171875,-0.000823974609375,-0.0001220703125,0.0002441480755805969,0.00027466658502817154,0,-0.000732421875,-0.00128173828125,-0.001373291015625,-0.001220703125,-0.0006103515625,0,0,-0.000152587890625,-0.000396728515625,-0.000457763671875,-0.000457763671875,-0.000640869140625,-0.00067138671875,-0.00054931640625,-0.00018310546875,0.00027466658502817154,0.00027466658502817154,0,-0.000091552734375,0.00030518509447574615,0.0009460737928748131,0.0006103701889514923,0.00033570360392332077,0.0010986663401126862,0.0013733329251408577,0.0009460737928748131,0.0004882961511611938,0.00009155552834272385,-0.000030517578125,-0.0001220703125,-0.0001220703125,0.00012207403779029846,0.0005798516795039177,0.0008545182645320892,0.0006714072078466415,0.00039674062281847,0.00006103701889514923,-0.0003662109375,-0.00042724609375,-0.000244140625,-0.0001220703125,0.00006103701889514923,0.0002136295661330223,0.00027466658502817154,0.00027466658502817154,0,-0.000244140625,-0.00067138671875,-0.001129150390625,-0.00054931640625,0.00009155552834272385,0.0002136295661330223,0.0004882961511611938,0.0003662221133708954,-0.00006103515625,-0.0006103515625,-0.001129150390625,-0.000885009765625,-0.000335693359375,0.000030518509447574615,0.0008239997550845146,0.0011597033590078354,0.00039674062281847,-0.0006103515625,-0.001068115234375,-0.00103759765625,-0.00091552734375,-0.00054931640625,0.00027466658502817154,0.0006408886983990669,-0.00006103515625,-0.000579833984375,-0.000091552734375,0.0002441480755805969,0.00039674062281847,0.0012512588873505592,0.0018005920574069023,0.0011291848495602608,0.00039674062281847,0.00033570360392332077,0.00033570360392332077,0.00033570360392332077,0.0007629627361893654,0.0010681478306651115,0.0009155552834272385,0.0010071108117699623,0.0013733329251408577,0.0015259254723787308,0.0014648884534835815,0.0015564439818263054,0.0016174810007214546,0.0012512588873505592,0.0011597033590078354,0.0013122959062457085,0.0015259254723787308,0.0018921475857496262,0.0018921475857496262,0.002075258642435074,0.002288888208568096,0.0018005920574069023,0.0014648884534835815,0.0014954069629311562,0.0012817773967981339,0.0008545182645320892,0.0005188146606087685,0.0006408886983990669,0.00045777764171361923,0.00006103701889514923,-0.000030517578125,-0.00054931640625,-0.001007080078125,-0.000823974609375,-0.000701904296875,-0.000885009765625,-0.000640869140625,0,0.00015259254723787308,-0.00030517578125,-0.000885009765625,-0.00146484375,-0.00164794921875,-0.0008544921875,-0.00006103515625,0.00012207403779029846,0.0006714072078466415,0.0010681478306651115,0.0004882961511611938,0.000030518509447574615,0.0007019257172942162,0.0014954069629311562,0.0014648884534835815,0.001342814415693283,0.0007324442267417908,-0.00042724609375,-0.00103759765625,-0.0008544921875,-0.00048828125,0.000030518509447574615,0.0006103701889514923,0.00027466658502817154,-0.00091552734375,-0.001617431640625,-0.001708984375,-0.00152587890625,-0.0006103515625,0.0002441480755805969,0.00012207403779029846,-0.00042724609375,-0.000701904296875,-0.000762939453125,-0.000640869140625,0.00006103701889514923,0.00079348124563694,0.0005493331700563431,-0.000152587890625,-0.00054931640625,-0.000885009765625,-0.000885009765625,0.0002441480755805969,0.0011291848495602608,0.0008850367739796638,0.0008239997550845146,0.00033570360392332077,-0.00091552734375,-0.00128173828125,-0.000518798828125,0.00030518509447574615,0.0007629627361893654,0.0008545182645320892,0.0005188146606087685,-0.00048828125,-0.001312255859375,-0.001495361328125,-0.00164794921875,-0.001007080078125,-0.000030517578125,0.0004272591322660446,0.0008239997550845146,0.0006408886983990669,0.00012207403779029846,-0.000030517578125,-0.0001220703125,0.000030518509447574615,0.00039674062281847,0.0009460737928748131,0.0011597033590078354,0.0005493331700563431,0.00006103701889514923,-0.0001220703125,-0.000457763671875,-0.000579833984375,-0.00042724609375,-0.000335693359375,-0.00054931640625,-0.000579833984375,-0.000457763671875,-0.00054931640625,0.00009155552834272385,0.00079348124563694,0.0002441480755805969,-0.000335693359375,-0.00042724609375,-0.000640869140625,-0.000946044921875,-0.000762939453125,-0.000457763671875,-0.000396728515625,0.00006103701889514923,0.0001831110566854477,-0.000732421875,-0.00152587890625,-0.001434326171875,-0.001007080078125,-0.00079345703125,-0.000762939453125,-0.0006103515625,-0.00048828125,-0.0008544921875,-0.0013427734375,-0.0015869140625,-0.001617431640625,-0.0009765625,-0.0006103515625,-0.00128173828125,-0.00152587890625,-0.0009765625,-0.000640869140625,-0.000396728515625,-0.00018310546875,-0.0001220703125,0,0.0001831110566854477,0.0007629627361893654,0.0012817773967981339,0.0009155552834272385,0.0006714072078466415,0.0007629627361893654,0.0005798516795039177,0.0003662221133708954,0.0004882961511611938,0.0004882961511611938,0.00012207403779029846,0.00015259254723787308,0.0005493331700563431,0.00045777764171361923,0.00030518509447574615,0.00079348124563694,0.0010986663401126862,0.0008239997550845146,0.0005798516795039177,0.00039674062281847,0.0006103701889514923,0.0008239997550845146,0.0005493331700563431,0.0006714072078466415,0.0011291848495602608,0.0012512588873505592,0.0008850367739796638,0.0003662221133708954,0.00012207403779029846,0.0001831110566854477,0.0007019257172942162,0.0007629627361893654,0.0005798516795039177,0.0010681478306651115,0.0007324442267417908,-0.00018310546875,-0.00030517578125,0.00027466658502817154,0.0008239997550845146,0.0005798516795039177,0,-0.00006103515625,-0.000213623046875,-0.000701904296875,-0.0006103515625,0.00027466658502817154,0.0007629627361893654,0.0004882961511611938,0,-0.00042724609375,-0.000579833984375,-0.0006103515625,-0.0003662109375,0.00015259254723787308,0.0004272591322660446,0.0002136295661330223,-0.00006103515625,-0.00030517578125,-0.000579833984375,-0.000732421875,-0.00054931640625,-0.000396728515625,-0.000579833984375,-0.000732421875,-0.00103759765625,-0.00164794921875,-0.001708984375,-0.001129150390625,-0.000732421875,-0.001068115234375,-0.001495361328125,-0.00140380859375,-0.00140380859375,-0.001495361328125,-0.001312255859375,-0.0008544921875,-0.000396728515625,-0.00018310546875,0.000030518509447574615,-0.00018310546875,-0.000762939453125,-0.000579833984375,-0.000335693359375,-0.00054931640625,-0.000457763671875,0,0.0002136295661330223,-0.00030517578125,-0.000885009765625,-0.0008544921875,-0.000640869140625,-0.0003662109375,-0.000274658203125,-0.00030517578125,-0.00054931640625,-0.000823974609375,-0.000946044921875,-0.001129150390625,-0.0008544921875,-0.0003662109375,0,0.0005188146606087685,0.00015259254723787308,-0.000946044921875,-0.001129150390625,-0.000396728515625,0.000030518509447574615,0.0002441480755805969,0.0009765923023223877,0.0016785180196166039,0.0013122959062457085,0.001037629321217537,0.0012207403779029846,0.0009155552834272385,0.0008850367739796638,0.001434369944036007,0.0013733329251408577,0.0005798516795039177,0,-0.0001220703125,-0.00067138671875,-0.000823974609375,0.00006103701889514923,0.0005188146606087685,0.00006103701889514923,-0.000091552734375,0.00009155552834272385,0,0.00009155552834272385,0.0008239997550845146,0.001434369944036007,0.0015259254723787308,0.0015564439818263054,0.0014954069629311562,0.0010986663401126862,0.0012512588873505592,0.0019531846046447754,0.002075258642435074,0.0020142216235399246,0.0023499252274632454,0.0021057771518826485,0.0011291848495602608,0.0006408886983990669,0.0006103701889514923,0.0004272591322660446,0.0004272591322660446,0.0009765923023223877,0.001342814415693283,0.0012512588873505592,0.001342814415693283,0.0008239997550845146,-0.000091552734375,-0.0001220703125,0.00027466658502817154,0.0003662221133708954,0.0005188146606087685,0.0012207403779029846,0.001739555038511753,0.0014038514345884323,0.0007324442267417908,0.00039674062281847,0.0002136295661330223,0.0004272591322660446,0.0007019257172942162,0.00039674062281847,0.00033570360392332077,0.0005493331700563431,0.000030518509447574615,-0.00048828125,-0.0006103515625,-0.000701904296875,-0.000885009765625,-0.001007080078125,-0.0009765625,-0.00146484375,-0.001953125,-0.001617431640625,-0.00146484375,-0.00177001953125,-0.00146484375,-0.000946044921875,-0.0008544921875,-0.0006103515625,-0.000457763671875,-0.0008544921875,-0.00128173828125,-0.0010986328125,-0.000701904296875,-0.00067138671875,-0.000640869140625,-0.000701904296875,-0.000701904296875,-0.000396728515625,-0.00054931640625,-0.0006103515625,0.00009155552834272385,0.0006408886983990669,0.0007019257172942162,0.0003662221133708954,-0.00030517578125,-0.00103759765625,-0.001007080078125,0,0.00045777764171361923,0.0004882961511611938,0.0010071108117699623,0.0007629627361893654,-0.00018310546875,-0.000701904296875,-0.00067138671875,-0.000030517578125,0.0009460737928748131,0.001342814415693283,0.0009460737928748131,0.00039674062281847,0.0001831110566854477,0,0.00030518509447574615,0.0009765923023223877,0.0012817773967981339,0.001434369944036007,0.0009765923023223877,-0.00030517578125,-0.001434326171875,-0.00177001953125,-0.001373291015625,-0.000823974609375,0,0.001037629321217537,0.0014648884534835815,0.0010986663401126862,0.0006103701889514923,0.0005493331700563431,0.0011291848495602608,0.0017090365290641785,0.0021973326802253723,0.0023194067180156708,0.0019531846046447754,0.00158696249127388,0.0009460737928748131,0.00009155552834272385,-0.000030517578125,0.00012207403779029846,0.00006103701889514923,-0.0003662109375,-0.000946044921875,-0.0010986328125,-0.001129150390625,-0.001007080078125,-0.00042724609375,-0.000030517578125,-0.000213623046875,-0.000518798828125,-0.000701904296875,-0.001190185546875,-0.0015869140625,-0.001495361328125,-0.001556396484375,-0.0015869140625,-0.001068115234375,-0.00091552734375,-0.001251220703125,-0.00152587890625,-0.00164794921875,-0.001739501953125,-0.001617431640625,-0.0013427734375,-0.001068115234375,-0.00079345703125,-0.000579833984375,-0.000640869140625,-0.00079345703125,-0.000640869140625,-0.000335693359375,-0.00054931640625,-0.000885009765625,-0.000640869140625,-0.00042724609375,-0.0006103515625,-0.000457763671875,-0.000030517578125,0,0.00009155552834272385,0.0003662221133708954,0.0003662221133708954,0.00030518509447574615,0.00006103701889514923,-0.000396728515625,-0.000762939453125,-0.0006103515625,-0.000274658203125,0.000030518509447574615,0.0004882961511611938,0.0009155552834272385,0.0010986663401126862,0.00045777764171361923,-0.000335693359375,-0.00030517578125,0.00012207403779029846,0.0007019257172942162,0.0009155552834272385,0.0009765923023223877,0.0010681478306651115,0.00045777764171361923,-0.0001220703125,0.00015259254723787308,0.0008239997550845146,0.0013122959062457085,0.0015564439818263054,0.0017700735479593277,0.001739555038511753,0.00119022186845541,0.0006714072078466415,0.0007019257172942162,0.0010071108117699623,0.001434369944036007,0.001342814415693283,0.00033570360392332077,-0.000518798828125,-0.000823974609375,-0.00091552734375,-0.00042724609375,0.00033570360392332077,0.0006103701889514923,0.00045777764171361923,-0.000030517578125,-0.000701904296875,-0.00079345703125,-0.000244140625,0.0002441480755805969,0.00039674062281847,0.0006103701889514923,0.0005798516795039177,-0.000335693359375,-0.00103759765625,-0.000518798828125,0,0.00012207403779029846,0.00033570360392332077,0,-0.00103759765625,-0.0020751953125,-0.002044677734375,-0.001129150390625,-0.0006103515625,-0.000396728515625,0,-0.000274658203125,-0.00115966796875,-0.001373291015625,-0.000885009765625,-0.00048828125,-0.0001220703125,0.00033570360392332077,0.0003662221133708954,-0.000213623046875,-0.000885009765625,-0.001068115234375,-0.000885009765625,-0.000732421875,-0.00048828125,-0.000152587890625,0.000030518509447574615,0.00009155552834272385,0.00027466658502817154,0.0005188146606087685,0.00045777764171361923,0.00006103701889514923,-0.000244140625,-0.000213623046875,0.00006103701889514923,0.0003662221133708954,0.0006103701889514923,0.00045777764171361923,0.000030518509447574615,0,-0.000030517578125,-0.0003662109375,-0.0003662109375,0.00009155552834272385,0.00045777764171361923,0.0006103701889514923,0.0009460737928748131,0.0009765923023223877,0.0005493331700563431,0.0007324442267417908,0.001434369944036007,0.0017700735479593277,0.0018921475857496262,0.0020447401329874992,0.001831110566854477,0.0013122959062457085,0.0009155552834272385,0.0005188146606087685,0.00027466658502817154,0.0005493331700563431,0.00045777764171361923,-0.00018310546875,-0.000274658203125,0.00015259254723787308,0.00030518509447574615,0.00015259254723787308,0.00030518509447574615,0.00039674062281847,-0.0001220703125,-0.000518798828125,-0.0003662109375,-0.000335693359375,-0.0001220703125,0.0005188146606087685,0.0006408886983990669,-0.000030517578125,-0.000152587890625,0.0002136295661330223,0.000030518509447574615,0.0002136295661330223,0.001037629321217537,0.0008545182645320892,0.000030518509447574615,-0.0001220703125,-0.000457763671875,-0.000823974609375,-0.000213623046875,0.0001831110566854477,0,-0.000030517578125,-0.000030517578125,-0.00054931640625,-0.00103759765625,-0.00079345703125,-0.000091552734375,0.00030518509447574615,0.0003662221133708954,0.00027466658502817154,-0.0003662109375,-0.000762939453125,-0.000152587890625,0.00033570360392332077,0.0003662221133708954,0.00027466658502817154,-0.000091552734375,-0.000244140625,0,0.00012207403779029846,-0.000091552734375,-0.000274658203125,0.00006103701889514923,0.00015259254723787308,-0.000244140625,-0.000579833984375,-0.00079345703125,-0.000396728515625,0.00033570360392332077,0.0010681478306651115,0.0016479995101690292,0.0015259254723787308,0.0010986663401126862,0.0005798516795039177,0.000030518509447574615,0.00015259254723787308,0.0003662221133708954,0.0007019257172942162,0.001342814415693283,0.0016785180196166039,0.0016174810007214546,0.0011597033590078354,0.0005493331700563431,0.00006103701889514923,-0.00018310546875,-0.000030517578125,0,0.00015259254723787308,0.0001831110566854477,-0.000732421875,-0.001556396484375,-0.001708984375,-0.001708984375,-0.0015869140625,-0.001312255859375,-0.001129150390625,-0.001312255859375,-0.001129150390625,-0.00048828125,-0.000274658203125,-0.00030517578125,0.0002441480755805969,0.0009765923023223877,0.0006103701889514923,-0.000396728515625,-0.000732421875,-0.000946044921875,-0.001220703125,-0.00091552734375,-0.00030517578125,0.00027466658502817154,0.0008239997550845146,0.0008239997550845146,-0.00006103515625,-0.0008544921875,-0.0006103515625,0,0.0001831110566854477,0.0006408886983990669,0.00119022186845541,0.0008850367739796638,-0.000030517578125,-0.000274658203125,0.0003662221133708954,0.0008545182645320892,0.0010986663401126862,0.0012207403779029846,0.0010681478306651115,0.0009765923023223877,0.0012207403779029846,0.0016174810007214546,0.001739555038511753,0.0015564439818263054,0.0016174810007214546,0.001831110566854477,0.001739555038511753,0.0011291848495602608,0.0003662221133708954,-0.00030517578125,-0.000946044921875,-0.001190185546875,-0.001068115234375,-0.000762939453125,-0.00079345703125,-0.001220703125,-0.00177001953125,-0.00238037109375,-0.002532958984375,-0.002166748046875,-0.001373291015625,-0.0008544921875,-0.00103759765625,-0.001251220703125,-0.00128173828125,-0.0009765625,-0.00067138671875,-0.00048828125,0,0.0003662221133708954,0.00033570360392332077,0.000030518509447574615,-0.000701904296875,-0.001251220703125,-0.001068115234375,-0.001007080078125,-0.001190185546875,-0.00067138671875,-0.0001220703125,-0.00042724609375,-0.0010986328125,-0.001495361328125,-0.0013427734375,-0.001068115234375,-0.0009765625,-0.000701904296875,-0.00048828125,-0.0006103515625,-0.0006103515625,-0.0003662109375,0,0.00039674062281847,0.0005798516795039177,0.0006103701889514923,0.0003662221133708954,-0.000030517578125,-0.000030517578125,0.0001831110566854477,0.0003662221133708954,0.0005493331700563431,0.0006714072078466415,0.0005188146606087685,-0.000091552734375,-0.000732421875,-0.0009765625,-0.000823974609375,-0.0003662109375,0.0002136295661330223,0.0008545182645320892,0.0009765923023223877,0.0007019257172942162,0.0004882961511611938,0.0002136295661330223,0.0001831110566854477,0.00079348124563694,0.0015259254723787308,0.001739555038511753,0.0016785180196166039,0.0016479995101690292,0.0013733329251408577,0.0008545182645320892,0.0007629627361893654,0.0011291848495602608,0.0013733329251408577,0.0010681478306651115,0.0007019257172942162,0.0003662221133708954,-0.000335693359375,-0.00091552734375,-0.001220703125,-0.001190185546875,-0.00079345703125,-0.001068115234375,-0.001617431640625,-0.00189208984375,-0.002197265625,-0.002349853515625,-0.001861572265625,-0.001190185546875,-0.001190185546875,-0.001220703125,-0.000946044921875,-0.00146484375,-0.001953125,-0.001068115234375,-0.000152587890625,0,0.0002136295661330223,0.0002441480755805969,-0.000244140625,-0.000823974609375,-0.000885009765625,-0.000762939453125,-0.000457763671875,0.00033570360392332077,0.0008239997550845146,0.0001831110566854477,-0.000762939453125,-0.001129150390625,-0.0008544921875,-0.000274658203125,0.0006408886983990669,0.0014954069629311562,0.0014648884534835815,0.0008545182645320892,0.00027466658502817154,-0.000244140625,-0.000213623046875,0.0007324442267417908,0.0016479995101690292,0.0019531846046447754,0.0020447401329874992,0.0019531846046447754,0.0014038514345884323,0.0010681478306651115,0.001434369944036007,0.0016785180196166039,0.0014038514345884323,0.001434369944036007,0.0016785180196166039,0.001037629321217537,0.0001831110566854477,0.0002441480755805969,0.00015259254723787308,-0.00030517578125,-0.000213623046875,-0.000274658203125,-0.0008544921875,-0.0010986328125,-0.00067138671875,-0.000335693359375,0,0.0007019257172942162,0.0011291848495602608,0.0007324442267417908,0.00045777764171361923,0.00033570360392332077,-0.00006103515625,0,0.00039674062281847,0.000030518509447574615,-0.000335693359375,-0.00018310546875,-0.000091552734375,-0.000518798828125,-0.000885009765625,-0.000579833984375,-0.00042724609375,-0.00048828125,-0.000396728515625,-0.00048828125,-0.00048828125,-0.000152587890625,-0.000152587890625,-0.000457763671875,-0.000244140625,0.0005493331700563431,0.0011597033590078354,0.0012512588873505592,0.0012207403779029846,0.0010071108117699623,0.001037629321217537,0.001434369944036007,0.0013733329251408577,0.0012817773967981339,0.0015564439818263054,0.00158696249127388,0.0015564439818263054,0.0015564439818263054,0.0012207403779029846,0.0007629627361893654,0.0006408886983990669,0.0004882961511611938,0.0003662221133708954,0.0008545182645320892,0.0012207403779029846,0.0007019257172942162,0.00027466658502817154,0.0002136295661330223,-0.000030517578125,0,0.0003662221133708954,0.00039674062281847,0.00015259254723787308,0,-0.000274658203125,-0.000762939453125,-0.000885009765625,-0.0006103515625,-0.00042724609375,-0.000335693359375,-0.000457763671875,-0.000640869140625,-0.000823974609375,-0.00103759765625,-0.000762939453125,-0.00048828125,-0.000396728515625,-0.00018310546875,-0.0003662109375,-0.000518798828125,-0.000457763671875,-0.000274658203125,0,0,0.0003662221133708954,0.0009460737928748131,0.0007019257172942162,0.0004272591322660446,0.00009155552834272385,-0.000213623046875,0.000030518509447574615,0.00015259254723787308,0.00033570360392332077,0.0005798516795039177,0.0001831110566854477,-0.000518798828125,-0.001068115234375,-0.001068115234375,-0.0006103515625,-0.00018310546875,0.00015259254723787308,0.00033570360392332077,0.00009155552834272385,-0.000213623046875,-0.000213623046875,0,0.0002441480755805969,0.0007324442267417908,0.001342814415693283,0.0008850367739796638,0.0002136295661330223,0.00030518509447574615,0.0005188146606087685,0.0010071108117699623,0.0012512588873505592,0.001037629321217537,0.0008239997550845146,0.00045777764171361923,0.00009155552834272385,0.000030518509447574615,0.00009155552834272385,0.000030518509447574615,0.0001831110566854477,0.0004882961511611938,0.00033570360392332077,0.0002136295661330223,0.0001831110566854477,-0.000152587890625,-0.0003662109375,-0.00042724609375,-0.0001220703125,0.00027466658502817154,0.000030518509447574615,-0.00042724609375,-0.00079345703125,-0.000946044921875,-0.000946044921875,-0.0010986328125,-0.001007080078125,-0.000885009765625,-0.001220703125,-0.001220703125,-0.00103759765625,-0.0009765625,-0.001007080078125,-0.0009765625,-0.000579833984375,-0.000762939453125,-0.001617431640625,-0.001708984375,-0.00140380859375,-0.00128173828125,-0.000701904296875,-0.00006103515625,-0.00018310546875,-0.000885009765625,-0.001220703125,-0.0010986328125,-0.00128173828125,-0.001373291015625,-0.0006103515625,0.00027466658502817154,0.0004882961511611938,0.0005493331700563431,0.0006408886983990669,0.00033570360392332077,0.00006103701889514923,0.0004272591322660446,0.00079348124563694,0.0008850367739796638,0.0009765923023223877,0.0008545182645320892,0.0005493331700563431,0.00030518509447574615,0,-0.000213623046875,-0.000030517578125,0,0.000030518509447574615,-0.00006103515625,-0.00048828125,-0.000457763671875,-0.000274658203125,0,0.0002441480755805969,0.00009155552834272385,0.0003662221133708954,0.0008545182645320892,0.0007019257172942162,0.0004882961511611938,0.0008545182645320892,0.001342814415693283,0.0010986663401126862,0.0004272591322660446,0.000030518509447574615,-0.0003662109375,-0.000946044921875,-0.00115966796875,-0.000640869140625,-0.000152587890625,-0.000091552734375,0.00009155552834272385,0.0002136295661330223,-0.0001220703125,-0.000335693359375,-0.0001220703125,0,0.00009155552834272385,0.0006714072078466415,0.0012512588873505592,0.0012817773967981339,0.0009155552834272385,0.0004272591322660446,-0.00018310546875,-0.00067138671875,-0.00054931640625,-0.000152587890625,-0.00018310546875,-0.000579833984375,-0.000823974609375,-0.0010986328125,-0.001556396484375,-0.001708984375,-0.001312255859375,-0.000732421875,-0.00042724609375,-0.00030517578125,-0.000457763671875,-0.000946044921875,-0.001556396484375,-0.001861572265625,-0.00177001953125,-0.001495361328125,-0.000946044921875,-0.000457763671875,-0.000946044921875,-0.001495361328125,-0.00115966796875,-0.000885009765625,-0.00067138671875,-0.00018310546875,0.00045777764171361923,0.0006714072078466415,0.00030518509447574615,0.00012207403779029846,0.0001831110566854477,0.0004272591322660446,0.0012207403779029846,0.001739555038511753,0.0015564439818263054,0.0014648884534835815,0.0015259254723787308,0.0009765923023223877,0.0005493331700563431,0.0014038514345884323,0.0024109622463583946,0.0023194067180156708,0.0020447401329874992,0.00198370311409235,0.0013733329251408577,0.0008545182645320892,0.0009765923023223877,0.0012817773967981339,0.001739555038511753,0.00238044373691082,0.0024109622463583946,0.0016785180196166039,0.0009460737928748131,0.0006714072078466415,0.0001831110566854477,-0.0001220703125,-0.00006103515625,-0.00048828125,-0.000701904296875,-0.00054931640625,-0.001007080078125,-0.0015869140625,-0.001495361328125,-0.001129150390625,-0.001129150390625,-0.001312255859375,-0.001068115234375,-0.001068115234375,-0.001617431640625,-0.00177001953125,-0.00164794921875,-0.001708984375,-0.0009765625,-0.00048828125,-0.00140380859375,-0.001922607421875,-0.0015869140625,-0.001251220703125,-0.000518798828125,0.0001831110566854477,0.0004272591322660446,0.00009155552834272385,-0.000213623046875,-0.00042724609375,-0.00115966796875,-0.00146484375,-0.000823974609375,-0.00048828125,-0.000457763671875,-0.000396728515625,-0.000335693359375,-0.0003662109375,-0.000518798828125,-0.00042724609375,-0.000152587890625,0.00009155552834272385,0.00006103701889514923,-0.00030517578125,-0.00048828125,-0.000335693359375,0,0.0005188146606087685,0.0009765923023223877,0.0010986663401126862,0.0010071108117699623,0.0008850367739796638,0.0005798516795039177,0.00027466658502817154,0.0006103701889514923,0.0009155552834272385,0.0007324442267417908,0.0008239997550845146,0.0008545182645320892,0.0005188146606087685,0.0005493331700563431,0.0009765923023223877,0.0010071108117699623,0.0006408886983990669,0.0005493331700563431,0.0008239997550845146,0.0011291848495602608,0.0012817773967981339,0.0015259254723787308,0.0018921475857496262,0.0017090365290641785,0.0013733329251408577,0.001342814415693283,0.001342814415693283,0.0013122959062457085,0.0014038514345884323,0.00119022186845541,0.0004272591322660446,0,0.00009155552834272385,-0.000244140625,-0.000640869140625,-0.000640869140625,-0.000823974609375,-0.00079345703125,-0.000640869140625,-0.001190185546875,-0.001800537109375,-0.00164794921875,-0.00079345703125,-0.0001220703125,-0.00030517578125,-0.001007080078125,-0.00140380859375,-0.001251220703125,-0.001129150390625,-0.0009765625,-0.0003662109375,-0.00018310546875,-0.000640869140625,-0.00103759765625,-0.001312255859375,-0.00128173828125,-0.000701904296875,0.00006103701889514923,0.0008850367739796638,0.0011597033590078354,0.0009765923023223877,0.0007629627361893654,0.00027466658502817154,-0.00006103515625,0.00039674062281847,0.0009460737928748131,0.001037629321217537,0.0009765923023223877,0.0010681478306651115,0.0010681478306651115,0.0008850367739796638,0.0008239997550845146,0.0006714072078466415,0.0005188146606087685,0.0007324442267417908,0.00079348124563694,0.0005798516795039177,0.0004882961511611938,0.00079348124563694,0.0011597033590078354,0.0007629627361893654,0.0002136295661330223,0.00027466658502817154,0.0002136295661330223,-0.0003662109375,-0.000823974609375,-0.0006103515625,-0.000335693359375,-0.0001220703125,-0.000030517578125,-0.00030517578125,-0.000518798828125,-0.00079345703125,-0.001190185546875,-0.0010986328125,-0.001007080078125,-0.000885009765625,-0.000244140625,0.0002441480755805969,0.0002136295661330223,-0.000244140625,-0.0003662109375,0,0.00012207403779029846,0.00030518509447574615,0.0005188146606087685,0.00030518509447574615,0,-0.00006103515625,-0.0003662109375,-0.000885009765625,-0.000885009765625,-0.000213623046875,0,-0.00048828125,-0.00079345703125,-0.000640869140625,-0.00048828125,-0.000518798828125,-0.000213623046875,0.000030518509447574615,0.000030518509447574615,0.0002136295661330223,0.00009155552834272385,-0.000518798828125,-0.000640869140625,-0.000091552734375,0.00027466658502817154,0.00009155552834272385,-0.0001220703125,0.000030518509447574615,0.0003662221133708954,0.0005188146606087685,0.0005798516795039177,0.0006714072078466415,0.00079348124563694,0.0009155552834272385,0.0010071108117699623,0.0008239997550845146,0.0006408886983990669,0.0008850367739796638,0.0012207403779029846,0.0016174810007214546,0.0017700735479593277,0.0012512588873505592,0.0009765923023223877,0.0012512588873505592,0.0011291848495602608,0.0006714072078466415,0.0006408886983990669,0.0006408886983990669,0.0004272591322660446,0.00045777764171361923,0.0006714072078466415,0.00033570360392332077,-0.000091552734375,0,0.00009155552834272385,-0.000213623046875,-0.00048828125,-0.000335693359375,-0.00042724609375,-0.0008544921875,-0.000946044921875,-0.001007080078125,-0.00146484375,-0.001556396484375,-0.001373291015625,-0.00152587890625,-0.001556396484375,-0.001068115234375,-0.0008544921875,-0.001129150390625,-0.00115966796875,-0.0006103515625,-0.000030517578125,0.0002136295661330223,0.00033570360392332077,0.00006103701889514923,-0.000274658203125,-0.00006103515625,0.0002136295661330223,0.0002136295661330223,0.00030518509447574615,0.0007629627361893654,0.0009155552834272385,0.0004882961511611938,0.00039674062281847,0.00045777764171361923,0.00009155552834272385,0.0002441480755805969,0.00045777764171361923,-0.000091552734375,-0.00042724609375,-0.000213623046875,-0.00030517578125,-0.00048828125,-0.0003662109375,-0.000213623046875,-0.00030517578125,-0.000335693359375,-0.00042724609375,-0.000701904296875,-0.000762939453125,-0.000335693359375,-0.000213623046875,-0.00067138671875,-0.000640869140625,-0.00048828125,-0.0006103515625,-0.000244140625,0.00039674062281847,0.00079348124563694,0.00079348124563694,0.0006103701889514923,0.00009155552834272385,-0.0003662109375,0,0.0002136295661330223,-0.000091552734375,0.00006103701889514923,0.00039674062281847,0.0003662221133708954,0.0005188146606087685,0.0007629627361893654,0.0007019257172942162,0.0006714072078466415,0.00079348124563694,0.0007629627361893654,0.00039674062281847,0.0002136295661330223,0.0002441480755805969,0.00039674062281847,0.0008239997550845146,0.0010071108117699623,0.0008239997550845146,0.0007019257172942162,0.00045777764171361923,0.00015259254723787308,0.00006103701889514923,0.00027466658502817154,0.0005493331700563431,0.0007324442267417908,0.0008545182645320892,0.0004272591322660446,-0.00042724609375,-0.00054931640625,-0.00030517578125,-0.000152587890625,0.00006103701889514923,-0.000030517578125,-0.000457763671875,-0.000762939453125,-0.0009765625,-0.001129150390625,-0.00115966796875,-0.000732421875,-0.0003662109375,-0.000518798828125,-0.00079345703125,-0.001068115234375,-0.0010986328125,-0.000885009765625,-0.000518798828125,-0.000244140625,-0.000335693359375,-0.000244140625,-0.0001220703125,-0.000640869140625,-0.0009765625,-0.000823974609375,-0.0006103515625,-0.000335693359375,-0.000274658203125,-0.000274658203125,-0.0003662109375,-0.000518798828125,-0.000213623046875,0.000030518509447574615,0.00006103701889514923,0.00027466658502817154,0.0005188146606087685,0.0006714072078466415,0.0006103701889514923,0.0005798516795039177,0.0007629627361893654,0.00079348124563694,0.00079348124563694,0.001037629321217537,0.0009460737928748131,0.0006714072078466415,0.0006408886983990669,0.00033570360392332077,-0.000152587890625,0,0.0006714072078466415,0.0009155552834272385,0.001037629321217537,0.0010071108117699623,0.0004882961511611938,-0.000030517578125,-0.000244140625,0,0.0005188146606087685,0.0005798516795039177,0.00033570360392332077,0.0002136295661330223,0.00012207403779029846,-0.000030517578125,-0.000030517578125,0.00015259254723787308,0.00009155552834272385,0.00015259254723787308,0.0002441480755805969,-0.00018310546875,-0.000762939453125,-0.000885009765625,-0.00067138671875,-0.000732421875,-0.001129150390625,-0.001068115234375,-0.000946044921875,-0.001190185546875,-0.000885009765625,-0.000213623046875,0,0,0.00015259254723787308,0.0001831110566854477,-0.000244140625,-0.000823974609375,-0.0009765625,-0.000701904296875,-0.000518798828125,-0.000732421875,-0.000518798828125,-0.000030517578125,-0.00042724609375,-0.000885009765625,-0.00054931640625,-0.00018310546875,-0.000091552734375,0.00009155552834272385,0.0003662221133708954,0.00030518509447574615,0.0001831110566854477,0.0002136295661330223,0.00027466658502817154,0.00015259254723787308,-0.000152587890625,-0.00048828125,-0.000823974609375,-0.001068115234375,-0.000885009765625,-0.0003662109375,-0.000030517578125,0,0.00006103701889514923,0,-0.0003662109375,-0.00054931640625,-0.000732421875,-0.00079345703125,-0.000579833984375,-0.00067138671875,-0.00054931640625,-0.000213623046875,-0.00018310546875,-0.000091552734375,0.00012207403779029846,0.00009155552834272385,0,0.00033570360392332077,0.0010681478306651115,0.0011597033590078354,0.0006714072078466415,0.0007629627361893654,0.0009765923023223877,0.0006103701889514923,0.0004272591322660446,0.0005188146606087685,0.00030518509447574615,0.00012207403779029846,0.00006103701889514923,0.00012207403779029846,0.0002136295661330223,0.00006103701889514923,0.0001831110566854477,0.00033570360392332077,-0.00006103515625,-0.000244140625,0.0001831110566854477,0.0006103701889514923,0.0005493331700563431,0.0004272591322660446,0.0005798516795039177,0.00045777764171361923,0.00009155552834272385,0.0002441480755805969,0.0006103701889514923,0.0009155552834272385,0.0010681478306651115,0.0010681478306651115,0.0008545182645320892,0.0004882961511611938,0.0004272591322660446,0.0006714072078466415,0.0007324442267417908,0.0006714072078466415,0.0005798516795039177,0.00033570360392332077,-0.000152587890625,-0.00067138671875,-0.00030517578125,0.00030518509447574615,0.0004272591322660446,0.0002136295661330223,-0.000244140625,-0.000701904296875,-0.000946044921875,-0.00103759765625,-0.0009765625,-0.00079345703125,-0.00030517578125,-0.0001220703125,-0.000579833984375,-0.000823974609375,-0.000396728515625,0.0002136295661330223,0.0004272591322660446,-0.00006103515625,-0.000701904296875,-0.0009765625,-0.0010986328125,-0.00115966796875,-0.0010986328125,-0.000701904296875,-0.0001220703125,-0.000335693359375,-0.000885009765625,-0.000885009765625,-0.00103759765625,-0.001190185546875,-0.000579833984375,0.00015259254723787308,0.00030518509447574615,0.0001831110566854477,0.00027466658502817154,0.0001831110566854477,-0.00018310546875,0.00015259254723787308,0.0006714072078466415,0.0005798516795039177,0.0008545182645320892,0.0014954069629311562,0.0012207403779029846,0.0002136295661330223,0.00030518509447574615,0.0011597033590078354,0.0010986663401126862,0.0005188146606087685,0,-0.00079345703125,-0.001190185546875,-0.000885009765625,-0.0008544921875,-0.0009765625,-0.000640869140625,-0.000518798828125,-0.00091552734375,-0.001190185546875,-0.001220703125,-0.00140380859375,-0.001312255859375,-0.000518798828125,-0.000030517578125,-0.00006103515625,0.0001831110566854477,0.0003662221133708954,0,-0.0001220703125,0,0.00006103701889514923,0.00012207403779029846,0.00006103701889514923,-0.000091552734375,-0.000091552734375,0.0001831110566854477,0.0001831110566854477,0,0.00009155552834272385,0.000030518509447574615,-0.0001220703125,0.000030518509447574615,0.00030518509447574615,0.00079348124563694,0.001037629321217537,0.0007629627361893654,0.0008239997550845146,0.0010681478306651115,0.0012817773967981339,0.0012512588873505592,0.0008545182645320892,0.0008850367739796638,0.0009765923023223877,0.0008545182645320892,0.0007019257172942162,0.00030518509447574615,0,-0.000091552734375,-0.00018310546875,-0.000213623046875,-0.00018310546875,0,-0.000091552734375,-0.00042724609375,-0.000091552734375,0.0004882961511611938,0.0005798516795039177,0.0006408886983990669,0.00079348124563694,0.0003662221133708954,0.00015259254723787308,0.0008545182645320892,0.0015564439818263054,0.0016174810007214546,0.0015564439818263054,0.001739555038511753,0.00158696249127388,0.0009765923023223877,0.0009460737928748131,0.0011597033590078354,0.0010986663401126862,0.0014038514345884323,0.001739555038511753,0.001434369944036007,0.0010681478306651115,0.0009765923023223877,0.00030518509447574615,-0.000701904296875,-0.001129150390625,-0.00091552734375,-0.00079345703125,-0.000946044921875,-0.0010986328125,-0.001129150390625,-0.00103759765625,-0.000701904296875,0,0.0002136295661330223,-0.000396728515625,-0.000823974609375,-0.000762939453125,-0.000885009765625,-0.00091552734375,-0.00042724609375,0.000030518509447574615,-0.000213623046875,-0.000762939453125,-0.00091552734375,-0.000732421875,-0.000335693359375,0.00012207403779029846,0.0004272591322660446,0.0005493331700563431,0.0002136295661330223,-0.000091552734375,-0.000152587890625,-0.000396728515625,-0.000396728515625,-0.0001220703125,-0.000091552734375,0.00009155552834272385,0.00015259254723787308,-0.00018310546875,-0.000335693359375,-0.000152587890625,0.0001831110566854477,0.0003662221133708954,0.00006103701889514923,-0.000091552734375,-0.00018310546875,-0.0003662109375,-0.000152587890625,0.0002136295661330223,0.0005188146606087685,0.0005493331700563431,0.0004882961511611938,0.00039674062281847,-0.000091552734375,-0.00042724609375,-0.000091552734375,0.0002441480755805969,0.0003662221133708954,0.0004272591322660446,0.0006408886983990669,0.0006408886983990669,0.00027466658502817154,0.00006103701889514923,0.00039674062281847,0.001037629321217537,0.0012817773967981339,0.0011291848495602608,0.0011291848495602608,0.0010986663401126862,0.0007629627361893654,0.0006103701889514923,0.0008239997550845146,0.0009460737928748131,0.0005493331700563431,0.00009155552834272385,-0.000274658203125,-0.000732421875,-0.001007080078125,-0.00128173828125,-0.00140380859375,-0.00128173828125,-0.00146484375,-0.001708984375,-0.001708984375,-0.001739501953125,-0.0018310546875,-0.001678466796875,-0.00164794921875,-0.0018310546875,-0.001708984375,-0.001739501953125,-0.00201416015625,-0.001922607421875,-0.00164794921875,-0.00146484375,-0.00115966796875,-0.000579833984375,-0.000152587890625,-0.000152587890625,-0.000091552734375,0.0002441480755805969,0.0007324442267417908,0.0010071108117699623,0.0008239997550845146,0.0004882961511611938,0.00015259254723787308,0,0.000030518509447574615,0.0004882961511611938,0.0012817773967981339,0.0016174810007214546,0.0012207403779029846,0.001037629321217537,0.00079348124563694,0.0004272591322660446,0.0007324442267417908,0.0011597033590078354,0.0010986663401126862,0.0010071108117699623,0.0009155552834272385,0.0007629627361893654,0.00027466658502817154,0.00027466658502817154,0.0008239997550845146,0.0007019257172942162,0.0003662221133708954,0.00027466658502817154,0.00012207403779029846,0.000030518509447574615,0.00009155552834272385,0.00027466658502817154,0.00027466658502817154,0.0002441480755805969,-0.000030517578125,-0.0009765625,-0.001617431640625,-0.001556396484375,-0.00140380859375,-0.00103759765625,-0.000640869140625,-0.000579833984375,-0.000579833984375,-0.000396728515625,-0.00030517578125,-0.000396728515625,-0.000335693359375,-0.000030517578125,0.00009155552834272385,-0.00030517578125,-0.000823974609375,-0.00079345703125,-0.000640869140625,-0.0008544921875,-0.000946044921875,-0.000701904296875,-0.000518798828125,-0.000091552734375,0.0004272591322660446,0.0002441480755805969,-0.000396728515625,-0.000244140625,0.00015259254723787308,-0.0001220703125,-0.000213623046875,0.00012207403779029846,0.000030518509447574615,-0.0003662109375,-0.00048828125,-0.00054931640625,-0.00067138671875,-0.0003662109375,-0.0001220703125,-0.00042724609375,-0.000640869140625,-0.0003662109375,-0.000274658203125,-0.00030517578125,0.00006103701889514923,0.00030518509447574615,0.00033570360392332077,0.0006103701889514923,0.0006408886983990669,0.00012207403779029846,0.00012207403779029846,0.0005798516795039177,0.0004882961511611938,0.0004272591322660446,0.0005493331700563431,0,-0.00042724609375,-0.000244140625,0,0.00030518509447574615,0.0005798516795039177,0.0009460737928748131,0.0010681478306651115,0.0006408886983990669,0.00033570360392332077,0.0006103701889514923,0.0008850367739796638,0.0009765923023223877,0.0006714072078466415,0.00015259254723787308,0,-0.000213623046875,-0.000152587890625,0.0006103701889514923,0.0014038514345884323,0.0016479995101690292,0.0014954069629311562,0.0010681478306651115,0.00045777764171361923,0.00015259254723787308,0.00015259254723787308,-0.00030517578125,-0.0008544921875,-0.0009765625,-0.00115966796875,-0.0010986328125,-0.0006103515625,-0.00042724609375,-0.00042724609375,-0.00030517578125,-0.00042724609375,-0.00091552734375,-0.001068115234375,-0.000762939453125,-0.000335693359375,0.00009155552834272385,0.000030518509447574615,-0.0003662109375,-0.00042724609375,-0.0003662109375,-0.000213623046875,0.00009155552834272385,0.0003662221133708954,0.0005798516795039177,0.0001831110566854477,-0.000213623046875,0,0.00030518509447574615,0.0006714072078466415,0.0010071108117699623,0.0009155552834272385,0.0007324442267417908,0.00039674062281847,0.0002441480755805969,0.00039674062281847,0.00039674062281847,0.0005493331700563431,0.0004272591322660446,0,-0.000396728515625,-0.000762939453125,-0.000823974609375,-0.00048828125,0,0.0004272591322660446,0.0007019257172942162,0.00079348124563694,0.0007324442267417908,0.00045777764171361923,0.00033570360392332077,0.0008545182645320892,0.0016479995101690292,0.0016174810007214546,0.0009460737928748131,0.0004882961511611938,0.00015259254723787308,-0.00006103515625,0.000030518509447574615,0.0004882961511611938,0.0007019257172942162,0.00012207403779029846,-0.000518798828125,-0.001007080078125,-0.001556396484375,-0.00152587890625,-0.00103759765625,-0.0006103515625,-0.00048828125,-0.000762939453125,-0.00103759765625,-0.001007080078125,-0.000885009765625,-0.00067138671875,-0.00048828125,-0.000396728515625,-0.00018310546875,0.00015259254723787308,0.0002441480755805969,-0.00018310546875,-0.00054931640625,-0.000518798828125,-0.000335693359375,-0.000091552734375,-0.000244140625,-0.0006103515625,-0.00091552734375,-0.001220703125,-0.00103759765625,-0.000396728515625,0.0002136295661330223,0.00030518509447574615,0,0.00012207403779029846,0.00039674062281847,0.0004272591322660446,0.00045777764171361923,0.0009155552834272385,0.001739555038511753,0.002136295661330223,0.0021057771518826485,0.0016479995101690292,0.0007629627361893654,0.00039674062281847,0.0007324442267417908,0.0010681478306651115,0.0010071108117699623,0.0007324442267417908,0.0006714072078466415,0.0002136295661330223,-0.000518798828125,-0.000518798828125,0.00006103701889514923,0.0005188146606087685,0.0004882961511611938,0.00012207403779029846,-0.000396728515625,-0.000579833984375,-0.0001220703125,0.000030518509447574615,0.000030518509447574615,0.0002441480755805969,0.00006103701889514923,-0.000274658203125,-0.00054931640625,-0.0008544921875,-0.000518798828125,0.00015259254723787308,0.00033570360392332077,0.00012207403779029846,0.00009155552834272385,0.00006103701889514923,-0.00042724609375,-0.000457763671875,0.00006103701889514923,0.0002136295661330223,0.000030518509447574615,-0.00006103515625,-0.00042724609375,-0.0009765625,-0.00115966796875,-0.000701904296875,-0.0001220703125,-0.000091552734375,-0.000396728515625,-0.000457763671875,-0.000518798828125,-0.0006103515625,0.00006103701889514923,0.0012207403779029846,0.001739555038511753,0.0017090365290641785,0.00158696249127388,0.00119022186845541,0.0007629627361893654,0.0007019257172942162,0.0007324442267417908,0.0006103701889514923,0.0003662221133708954,0,-0.000213623046875,-0.000152587890625,-0.000244140625,-0.000213623046875,0.0003662221133708954,0.0008239997550845146,0.0007019257172942162,0.00033570360392332077,-0.00018310546875,-0.0006103515625,-0.000244140625,0.00039674062281847,0.0005798516795039177,0.00033570360392332077,-0.00006103515625,-0.00054931640625,-0.000823974609375,-0.000885009765625,-0.0006103515625,-0.000152587890625,-0.000274658203125,-0.00079345703125,-0.001434326171875,-0.0020751953125,-0.001983642578125,-0.001373291015625,-0.001190185546875,-0.0010986328125,-0.000732421875,-0.000579833984375,-0.000885009765625,-0.00103759765625,-0.00103759765625,-0.001129150390625,-0.000885009765625,-0.000457763671875,-0.00042724609375,-0.0003662109375,-0.0001220703125,-0.000091552734375,0.00006103701889514923,0.0006714072078466415,0.0011597033590078354,0.0010071108117699623,0.0007324442267417908,0.0005493331700563431,-0.0001220703125,-0.000579833984375,-0.0001220703125,0.0002441480755805969,0.00027466658502817154,0.0003662221133708954,0.0002441480755805969,-0.000244140625,-0.000335693359375,0.0002136295661330223,0.0003662221133708954,0.00012207403779029846,0.00027466658502817154,0.00033570360392332077,0.00006103701889514923,0.0004882961511611938,0.0010986663401126862,0.0009460737928748131,0.0009765923023223877,0.0014954069629311562,0.0014954069629311562,0.0010681478306651115,0.0008239997550845146,0.0006714072078466415,0.00030518509447574615,0.00033570360392332077,0.0007629627361893654,0.00030518509447574615,-0.00018310546875,0.000030518509447574615,-0.000213623046875,-0.000335693359375,0.0002441480755805969,0.00039674062281847,0.0001831110566854477,0.00006103701889514923,-0.00018310546875,-0.000335693359375,-0.00006103515625,0.0002136295661330223,0.0001831110566854477,0.00012207403779029846,0.000030518509447574615,-0.00042724609375,-0.000518798828125,-0.000152587890625,0.00012207403779029846,0.00033570360392332077,0.00009155552834272385,-0.000091552734375,0,-0.000030517578125,-0.00006103515625,-0.00018310546875,-0.00006103515625,0.00045777764171361923,0.00039674062281847,-0.000091552734375,-0.00042724609375,-0.00079345703125,-0.000946044921875,-0.000885009765625,-0.00079345703125,-0.0006103515625,-0.00030517578125,-0.000152587890625,-0.000518798828125,-0.000732421875,-0.00030517578125,0.0001831110566854477,0.0001831110566854477,-0.0001220703125,-0.000030517578125,0,-0.00018310546875,-0.000091552734375,-0.000030517578125,-0.000152587890625,-0.000244140625,0.00006103701889514923,0.00030518509447574615,0.00033570360392332077,0.0006408886983990669,0.0006103701889514923,0.00015259254723787308,0.0002441480755805969,0.00079348124563694,0.001037629321217537,0.0010071108117699623,0.0008850367739796638,0.0004882961511611938,0,-0.000335693359375,-0.000457763671875,-0.000244140625,-0.000091552734375,-0.000030517578125,-0.00018310546875,-0.00048828125,-0.000213623046875,0.00015259254723787308,0.00012207403779029846,0,-0.000030517578125,0.00027466658502817154,0.0006408886983990669,0.0005188146606087685,0.0001831110566854477,-0.0003662109375,-0.001190185546875,-0.00140380859375,-0.00128173828125,-0.00146484375,-0.001495361328125,-0.001373291015625,-0.00128173828125,-0.000885009765625,-0.00042724609375,0.000030518509447574615,0.0004882961511611938,0.0006103701889514923,0.0007324442267417908,0.00079348124563694,0.0005188146606087685,0.00012207403779029846,-0.00018310546875,-0.000274658203125,-0.00054931640625,-0.000946044921875,-0.00079345703125,-0.000701904296875,-0.000823974609375,-0.0006103515625,-0.00018310546875,0.00033570360392332077,0.0009460737928748131,0.0014648884534835815,0.0012512588873505592,0.00045777764171361923,0.0002136295661330223,0.00045777764171361923,0.00039674062281847,0.0002136295661330223,0.0002136295661330223,-0.000213623046875,-0.001068115234375,-0.00140380859375,-0.00091552734375,-0.000396728515625,-0.00048828125,-0.0006103515625,-0.000152587890625,0.0004272591322660446,0.0007629627361893654,0.0008850367739796638,0.0008850367739796638,0.0009460737928748131,0.0012512588873505592,0.001434369944036007,0.001342814415693283,0.0013122959062457085,0.0010681478306651115,0.0007629627361893654,0.0003662221133708954,-0.000274658203125,-0.00042724609375,-0.000396728515625,-0.000885009765625,-0.001312255859375,-0.001373291015625,-0.0010986328125,-0.000640869140625,-0.000274658203125,-0.000091552734375,-0.00006103515625,-0.00018310546875,0,0.0005188146606087685,0.0006103701889514923,0.0005188146606087685,0.0005798516795039177,0.0006408886983990669,0.0006103701889514923,0.00079348124563694,0.0012207403779029846,0.0010681478306651115,0.0003662221133708954,0.000030518509447574615,-0.000335693359375,-0.000946044921875,-0.0010986328125,-0.00091552734375,-0.000762939453125,-0.00067138671875,-0.00048828125,-0.000274658203125,0.000030518509447574615,0.00030518509447574615,0,-0.00018310546875,-0.000030517578125,-0.000091552734375,-0.0001220703125,0.00027466658502817154,0.0005798516795039177,0.0005798516795039177,0.0008239997550845146,0.0011291848495602608,0.0008850367739796638,0.0002441480755805969,-0.000152587890625,-0.00048828125,-0.00091552734375,-0.00079345703125,-0.00030517578125,-0.00042724609375,-0.00079345703125,-0.000579833984375,-0.000244140625,-0.000335693359375,-0.00030517578125,0,-0.000091552734375,-0.000091552734375,0.0001831110566854477,0.0002136295661330223,0.0002136295661330223,0.0004882961511611938,0.0006103701889514923,0.0006714072078466415,0.0009460737928748131,0.0011291848495602608,0.0010071108117699623,0.0006714072078466415,0.00045777764171361923,0.00033570360392332077,0.0002136295661330223,0.0003662221133708954,0.0006103701889514923,0.0006408886983990669,0.00039674062281847,0.0001831110566854477,0.00009155552834272385,0,-0.000030517578125,-0.00006103515625,-0.00048828125,-0.00103759765625,-0.0010986328125,-0.00103759765625,-0.000946044921875,-0.000579833984375,-0.0003662109375,-0.000335693359375,-0.00018310546875,-0.000152587890625,-0.000396728515625,-0.00054931640625,-0.0006103515625,-0.00091552734375,-0.001129150390625,-0.00079345703125,-0.00042724609375,-0.0003662109375,-0.000030517578125,0.00039674062281847,0.0005493331700563431,0.0006714072078466415,0.0010681478306651115,0.0012512588873505592,0.0012512588873505592,0.0013733329251408577,0.0010986663401126862,0.0005188146606087685,0.0005493331700563431,0.00079348124563694,0.00027466658502817154,-0.000213623046875,0,0.0001831110566854477,0.00030518509447574615,0.0006714072078466415,0.0010071108117699623,0.001037629321217537,0.0010071108117699623,0.00119022186845541,0.0012207403779029846,0.0011597033590078354,0.00158696249127388,0.0020142216235399246,0.0021057771518826485,0.00198370311409235,0.0015564439818263054,0.0009155552834272385,0.00033570360392332077,-0.000244140625,-0.000762939453125,-0.000701904296875,-0.000518798828125,-0.0006103515625,-0.000518798828125,-0.000823974609375,-0.001495361328125,-0.001190185546875,-0.0006103515625,-0.000732421875,-0.00067138671875,-0.0006103515625,-0.00103759765625,-0.00140380859375,-0.001312255859375,-0.00079345703125,-0.0003662109375,-0.0003662109375,-0.000518798828125,-0.00067138671875,-0.000640869140625,-0.00048828125,-0.0001220703125,0.0003662221133708954,0.00045777764171361923,0.0004272591322660446,0.0002441480755805969,-0.00006103515625,-0.000213623046875,-0.000762939453125,-0.001129150390625,-0.0009765625,-0.000732421875,-0.000030517578125,0.0003662221133708954,0.0001831110566854477,-0.000030517578125,-0.000396728515625,-0.000244140625,0.0002441480755805969,0.00033570360392332077,0.00027466658502817154,0.0001831110566854477,-0.000091552734375,-0.000579833984375,-0.0008544921875,-0.000732421875,-0.000579833984375,-0.00048828125,-0.00048828125,-0.0006103515625,-0.000457763671875,-0.00030517578125,-0.00067138671875,-0.001129150390625,-0.0010986328125,-0.0008544921875,-0.000701904296875,-0.000396728515625,-0.0001220703125,-0.000640869140625,-0.0009765625,-0.000457763671875,0.00015259254723787308,0.00039674062281847,0.00027466658502817154,0.000030518509447574615,-0.000335693359375,-0.00048828125,-0.000091552734375,0.0004882961511611938,0.0010681478306651115,0.0012512588873505592,0.0010071108117699623,0.0008545182645320892,0.00079348124563694,0.0008239997550845146,0.0008850367739796638,0.0009155552834272385,0.0007019257172942162,0,-0.00042724609375,-0.000457763671875,-0.000640869140625,-0.000640869140625,-0.00054931640625,-0.000213623046875,0.00039674062281847,0.00039674062281847,0.00009155552834272385,0,-0.00018310546875,0.00009155552834272385,0.0007629627361893654,0.0009460737928748131,0.0005188146606087685,-0.00006103515625,-0.0006103515625,-0.00091552734375,-0.00048828125,0.0007629627361893654,0.001739555038511753,0.00158696249127388,0.0009155552834272385,0.0004882961511611938,0.00009155552834272385,-0.0001220703125,0.00039674062281847,0.0011291848495602608,0.0011291848495602608,0.0005188146606087685,0.00015259254723787308,-0.00006103515625,-0.00030517578125,0.000030518509447574615,0.0005188146606087685,0.0004882961511611938,0.00030518509447574615,0.00012207403779029846,-0.00048828125,-0.00128173828125,-0.00103759765625,0,0.0007324442267417908,0.0010986663401126862,0.0010986663401126862,0.0007019257172942162,0.00033570360392332077,-0.000213623046875,-0.000732421875,-0.00048828125,-0.00006103515625,-0.00054931640625,-0.001617431640625,-0.00201416015625,-0.00201416015625,-0.00201416015625,-0.001373291015625,-0.0006103515625,-0.00042724609375,-0.000579833984375,-0.000640869140625,-0.0006103515625,-0.000823974609375,-0.00067138671875,0,0.0001831110566854477,-0.0001220703125,0.000030518509447574615,0.0006408886983990669,0.0003662221133708954,-0.000457763671875,-0.0006103515625,-0.000213623046875,0.000030518509447574615,0.00009155552834272385,0.0001831110566854477,0.0002136295661330223,0.00030518509447574615,0.0007324442267417908,0.0010681478306651115,0.0008850367739796638,0.0006103701889514923,0.00045777764171361923,0.00027466658502817154,-0.00018310546875,-0.00048828125,-0.0001220703125,0.0004272591322660446,0.00033570360392332077,-0.000091552734375,-0.000152587890625,-0.000030517578125,-0.000213623046875,-0.000152587890625,0.0002136295661330223,0.0002441480755805969,0.0002136295661330223,0.0006103701889514923,0.0005188146606087685,-0.000152587890625,-0.000457763671875,-0.000152587890625,-0.000030517578125,-0.00006103515625,0.00027466658502817154,0.00039674062281847,0,-0.00006103515625,0.00015259254723787308,0.00027466658502817154,0.0005188146606087685,0.0010071108117699623,0.0011597033590078354,0.0007019257172942162,0.00027466658502817154,0.000030518509447574615,-0.000152587890625,0,0.0001831110566854477,-0.000030517578125,-0.000213623046875,-0.0001220703125,-0.000335693359375,-0.000518798828125,0,0.00045777764171361923,0.0004272591322660446,0.0008545182645320892,0.0013122959062457085,0.001037629321217537,0.0008545182645320892,0.001037629321217537,0.001037629321217537,0.0008850367739796638,0.0006103701889514923,0,-0.00042724609375,-0.000152587890625,0.0003662221133708954,0.00079348124563694,0.00119022186845541,0.0011597033590078354,0.00039674062281847,-0.00018310546875,0.00009155552834272385,0.0006714072078466415,0.001037629321217537,0.0010986663401126862,0.0004272591322660446,-0.00054931640625,-0.000946044921875,-0.0010986328125,-0.00115966796875,-0.000732421875,-0.000213623046875,-0.000518798828125,-0.00164794921875,-0.001861572265625,-0.001220703125,-0.0009765625,-0.00042724609375,0.00009155552834272385,-0.0001220703125,-0.000244140625,-0.000335693359375,-0.000579833984375,-0.0006103515625,-0.00006103515625,0.0007019257172942162,0.0006714072078466415,0.00006103701889514923,-0.00042724609375,-0.00079345703125,-0.000762939453125,-0.0003662109375,0.00039674062281847,0.0010681478306651115,0.0008545182645320892,0.00027466658502817154,-0.000244140625,-0.00042724609375,-0.000091552734375,0.000030518509447574615,0.0002136295661330223,0.0002136295661330223,-0.00018310546875,-0.000396728515625,-0.00018310546875,0.00012207403779029846,0.00027466658502817154,0.00027466658502817154,0.00009155552834272385,-0.0003662109375,-0.000396728515625,-0.000396728515625,-0.000762939453125,-0.000579833984375,-0.0001220703125,-0.000091552734375,-0.000244140625,-0.000244140625,-0.000213623046875,-0.00048828125,-0.0006103515625,-0.00048828125,-0.00054931640625,-0.00079345703125,-0.00091552734375,-0.00091552734375,-0.00115966796875,-0.001068115234375,-0.000396728515625,-0.0001220703125,-0.00054931640625,-0.000885009765625,-0.0009765625,-0.000732421875,-0.000091552734375,-0.00006103515625,-0.000701904296875,-0.0008544921875,-0.00054931640625,-0.000274658203125,-0.000213623046875,0,0.00033570360392332077,0.0004272591322660446,0.00033570360392332077,0.0005798516795039177,0.0009765923023223877,0.0012817773967981339,0.0016479995101690292,0.0015259254723787308,0.0011597033590078354,0.0010986663401126862,0.0011291848495602608,0.001037629321217537,0.0007019257172942162,0.0004882961511611938,0.0007019257172942162,0.0005798516795039177,0.00027466658502817154,0.00033570360392332077,0.0002136295661330223,0.00012207403779029846,0.00015259254723787308,0.00006103701889514923,0.00027466658502817154,0.00033570360392332077,0.00006103701889514923,-0.00006103515625,-0.000213623046875,-0.00006103515625,0.00012207403779029846,-0.000213623046875,-0.00067138671875,-0.000885009765625,-0.000701904296875,-0.000244140625,-0.000213623046875,-0.000396728515625,-0.000213623046875,0.00012207403779029846,0.00015259254723787308,0.00039674062281847,0.0011291848495602608,0.0012512588873505592,0.0008850367739796638,0.0007324442267417908,0.0005188146606087685,0.0001831110566854477,0.0004882961511611938,0.0011291848495602608,0.0010071108117699623,0.0004272591322660446,0.0001831110566854477,0.0004272591322660446,0.0006714072078466415,0.0007019257172942162,0.0009460737928748131,0.0013122959062457085,0.0009765923023223877,0.0006408886983990669,0.00079348124563694,0.0005493331700563431,0.0001831110566854477,0.0005493331700563431,0.0009460737928748131,0.00079348124563694,0.0004272591322660446,-0.000030517578125,-0.00042724609375,-0.000732421875,-0.000762939453125,-0.000518798828125,-0.000640869140625,-0.001251220703125,-0.002044677734375,-0.002410888671875,-0.0020751953125,-0.001495361328125,-0.000823974609375,-0.000244140625,-0.000213623046875,-0.000640869140625,-0.000762939453125,-0.00048828125,-0.000396728515625,-0.0001220703125,0.0003662221133708954,0.00033570360392332077,-0.00006103515625,-0.000213623046875,-0.00030517578125,-0.0006103515625,-0.00079345703125,-0.00048828125,-0.000213623046875,-0.0001220703125,0.00006103701889514923,0.00030518509447574615,0.00030518509447574615,0.0002441480755805969,0.00030518509447574615,0.00033570360392332077,0.0002441480755805969,0.00012207403779029846,0.00006103701889514923,0.00009155552834272385,0.00012207403779029846,0,0.00015259254723787308,0.0004272591322660446,0.00006103701889514923,-0.000274658203125,0.00006103701889514923,0.00033570360392332077,0.00027466658502817154,0.0007324442267417908,0.001434369944036007,0.00119022186845541,0.0008545182645320892,0.00119022186845541,0.0012512588873505592,0.0007629627361893654,0.0001831110566854477,-0.00006103515625,0.000030518509447574615,0.00015259254723787308,0.0001831110566854477,0.00012207403779029846,-0.0001220703125,-0.00030517578125,-0.000396728515625,-0.000274658203125,0.00009155552834272385,0.00045777764171361923,0.0002136295661330223,-0.000274658203125,-0.00030517578125,-0.000030517578125,-0.000091552734375,-0.000091552734375,0.00015259254723787308,-0.000091552734375,-0.00048828125,-0.000030517578125,0.0004272591322660446,0.00039674062281847,0.0005798516795039177,0.0008850367739796638,0.00079348124563694,0.0004882961511611938,0.00027466658502817154,0.00012207403779029846,-0.00006103515625,-0.00006103515625,0.000030518509447574615,-0.000030517578125,-0.000152587890625,-0.000335693359375,-0.0008544921875,-0.001495361328125,-0.0013427734375,-0.00048828125,-0.0001220703125,-0.000213623046875,-0.00048828125,-0.001220703125,-0.001495361328125,-0.001220703125,-0.0010986328125,-0.000701904296875,-0.000213623046875,-0.000457763671875,-0.001190185546875,-0.001434326171875,-0.0010986328125,-0.000885009765625,-0.001190185546875,-0.001434326171875,-0.00189208984375,-0.002227783203125,-0.001861572265625,-0.001617431640625,-0.001617431640625,-0.001220703125,-0.00091552734375,-0.000732421875,-0.000244140625,0.00033570360392332077,0.00079348124563694,0.0009765923023223877,0.001037629321217537,0.00119022186845541,0.0008850367739796638,0.0001831110566854477,-0.000213623046875,-0.000091552734375,0.00030518509447574615,0.0002136295661330223,0.00015259254723787308,0.0004272591322660446,0.0002441480755805969,0,-0.000152587890625,-0.000030517578125,0.0003662221133708954,0.0008239997550845146,0.0010071108117699623,0.0004272591322660446,-0.000213623046875,0.00015259254723787308,0.0007629627361893654,0.0010986663401126862,0.0014038514345884323,0.0013122959062457085,0.0007629627361893654,0.0003662221133708954,0.0005493331700563431,0.0007019257172942162,0.0005188146606087685,0.0006714072078466415,0.0007324442267417908,0.0004882961511611938,0.0006408886983990669,0.0007324442267417908,0.0006103701889514923,0.00015259254723787308,-0.0003662109375,-0.000274658203125,-0.00042724609375,-0.0009765625,-0.001434326171875,-0.00164794921875,-0.00128173828125,-0.000579833984375,0.0002136295661330223,0.0007019257172942162,0.0006408886983990669,0.0005798516795039177,0.0006103701889514923,0.0006408886983990669,0.0005798516795039177,0.0005493331700563431,0.00079348124563694,0.00027466658502817154,-0.00042724609375,-0.000244140625,0,0.000030518509447574615,-0.000091552734375,-0.000732421875,-0.0015869140625,-0.001739501953125,-0.00103759765625,-0.000213623046875,-0.000030517578125,-0.00030517578125,-0.000030517578125,0.0007324442267417908,0.0009460737928748131,0.0006408886983990669,0.0009155552834272385,0.00119022186845541,0.0010986663401126862,0.0013122959062457085,0.0014954069629311562,0.0014954069629311562,0.0011597033590078354,0.0005188146606087685,0.00006103701889514923,-0.000091552734375,0.00009155552834272385,0.00045777764171361923,0.0004272591322660446,0.0002136295661330223,0.00006103701889514923,0,0,0.000030518509447574615,0.00027466658502817154,0.0005188146606087685,0.00039674062281847,0.0002441480755805969,0.0004882961511611938,0.0008850367739796638,0.0009155552834272385,0.0005798516795039177,0.0005798516795039177,0.0009460737928748131,0.0013122959062457085,0.0010986663401126862,0.0004272591322660446,0.00006103701889514923,-0.00018310546875,-0.00030517578125,-0.000152587890625,-0.000152587890625,-0.000518798828125,-0.001251220703125,-0.001708984375,-0.0015869140625,-0.001373291015625,-0.0009765625,-0.00067138671875,-0.00067138671875,-0.000701904296875,-0.000335693359375,0.00012207403779029846,0.00006103701889514923,0.00015259254723787308,0.0005493331700563431,0.0005493331700563431,0.00027466658502817154,0,-0.000030517578125,0.000030518509447574615,-0.00006103515625,-0.000213623046875,-0.00054931640625,-0.001190185546875,-0.001678466796875,-0.0020751953125,-0.002471923828125,-0.00225830078125,-0.00128173828125,-0.000457763671875,-0.00042724609375,-0.00091552734375,-0.001220703125,-0.00091552734375,-0.00030517578125,0.000030518509447574615,0.0003662221133708954,0.0006714072078466415,0.00030518509447574615,-0.00042724609375,-0.00042724609375,0.0002441480755805969,0.0006714072078466415,0.0009460737928748131,0.0010681478306651115,0.0004882961511611938,-0.000152587890625,-0.000518798828125,-0.0003662109375,0.00006103701889514923,0,0,0,-0.000701904296875,-0.00115966796875,-0.0008544921875,-0.00042724609375,-0.00006103515625,0.0005493331700563431,0.0011291848495602608,0.0010071108117699623,0.00033570360392332077,0,0.0002136295661330223,0.0004272591322660446,0.0006714072078466415,0.0009765923023223877,0.0010071108117699623,0.0006714072078466415,0.0002441480755805969,-0.0001220703125,0,0.00027466658502817154,0.000030518509447574615,-0.000244140625,-0.000244140625,0.000030518509447574615,0.0002441480755805969,0.0003662221133708954,0.0005798516795039177,0.0005493331700563431,0.0007629627361893654,0.0011291848495602608,0.0009765923023223877,0.0008850367739796638,0.0008850367739796638,0.00079348124563694,0.0007324442267417908,0.0007324442267417908,0.0009155552834272385,0.0012207403779029846,0.0017090365290641785,0.0016785180196166039,0.0006103701889514923,-0.00018310546875,-0.000335693359375,-0.000335693359375,-0.00030517578125,-0.000335693359375,-0.000274658203125,-0.000335693359375,-0.000640869140625,-0.001007080078125,-0.001251220703125,-0.000762939453125,0.00012207403779029846,0.00045777764171361923,0.0005188146606087685,0.00039674062281847,-0.00006103515625,-0.000885009765625,-0.001312255859375,-0.000640869140625,-0.00006103515625,-0.000152587890625,-0.00018310546875,-0.000762939453125,-0.001617431640625,-0.001678466796875,-0.001251220703125,-0.0006103515625,0.00015259254723787308,0.0008850367739796638,0.0007019257172942162,-0.00018310546875,-0.00042724609375,-0.00006103515625,0.0005493331700563431,0.0012817773967981339,0.0014038514345884323,0.0009460737928748131,0.0007324442267417908,0.00079348124563694,0.00027466658502817154,-0.00018310546875,0.00027466658502817154,0.0007629627361893654,0.0007629627361893654,0.00079348124563694,0.0006714072078466415,0.00045777764171361923,0.0005493331700563431,0.0004272591322660446,-0.000335693359375,-0.000732421875,-0.00006103515625,0.0004882961511611938,0.0004272591322660446,0.0001831110566854477,0,-0.000030517578125,0.000030518509447574615,0.00006103701889514923,0,0.00039674062281847,0.001342814415693283,0.0014038514345884323,0.00012207403779029846,-0.001007080078125,-0.00146484375,-0.001312255859375,-0.000518798828125,0.000030518509447574615,0.0003662221133708954,0.0002441480755805969,-0.000518798828125,-0.00128173828125,-0.001556396484375,-0.000946044921875,-0.000152587890625,0.00006103701889514923,0,-0.000701904296875,-0.00146484375,-0.001312255859375,-0.0003662109375,0.0005798516795039177,0.0010071108117699623,0.0009765923023223877,0.0004272591322660446,-0.00018310546875,-0.000091552734375,0.000030518509447574615,0.00015259254723787308,0.0010071108117699623,0.00158696249127388,0.0009155552834272385,0.00009155552834272385,-0.00006103515625,-0.000213623046875,-0.00018310546875,0.0004272591322660446,0.0007629627361893654,0.00027466658502817154,-0.0003662109375,-0.0006103515625,-0.00079345703125,-0.00067138671875,0.00012207403779029846,0.0004272591322660446,-0.000030517578125,-0.00030517578125,-0.000274658203125,-0.000091552734375,0.00012207403779029846,0.0006103701889514923,0.00079348124563694,0.00027466658502817154,-0.0001220703125,-0.00018310546875,-0.000152587890625,0.00006103701889514923,0.0002441480755805969,-0.000091552734375,-0.0009765625,-0.001373291015625,-0.001190185546875,-0.001129150390625,-0.00091552734375,-0.00030517578125,-0.000244140625,-0.00048828125,-0.0006103515625,-0.000518798828125,0.00015259254723787308,0.0009460737928748131,0.0012817773967981339,0.0008239997550845146,-0.0001220703125,-0.0006103515625,-0.000762939453125,-0.000579833984375,0.0003662221133708954,0.0010681478306651115,0.0007324442267417908,0.0001831110566854477,-0.000518798828125,-0.0013427734375,-0.00115966796875,-0.000213623046875,0.0005798516795039177,0.0006714072078466415,0,-0.000885009765625,-0.001617431640625,-0.0015869140625,-0.000823974609375,0.00012207403779029846,0.0007324442267417908,0.0004882961511611938,-0.00042724609375,-0.00115966796875,-0.000762939453125,0.0002441480755805969,0.0008239997550845146,0.00079348124563694,0.0007324442267417908,0.0005493331700563431,-0.00018310546875,-0.000457763671875,0.00009155552834272385,0.0005798516795039177,0.00027466658502817154,-0.0003662109375,-0.0009765625,-0.001617431640625,-0.001861572265625,-0.0010986328125,-0.000030517578125,0.0003662221133708954,0.0002136295661330223,-0.000274658203125,-0.0008544921875,-0.000823974609375,-0.000030517578125,0.001037629321217537,0.0016785180196166039,0.001434369944036007,0.0009155552834272385,0.00027466658502817154,-0.000152587890625,0.00045777764171361923,0.0014038514345884323,0.0012817773967981339,0.0005798516795039177,-0.00018310546875,-0.001312255859375,-0.001739501953125,-0.000946044921875,0,0.0004272591322660446,0.00012207403779029846,-0.000579833984375,-0.00079345703125,-0.000518798828125,0.00033570360392332077,0.0016785180196166039,0.002533036284148693,0.00238044373691082,0.0012512588873505592,0,-0.00030517578125,0.0006103701889514923,0.0018005920574069023,0.0021973326802253723,0.0019531846046447754,0.0012512588873505592,0.0003662221133708954,-0.000152587890625,-0.000091552734375,0.0003662221133708954,0.0006103701889514923,0.0002136295661330223,-0.00091552734375,-0.002288818359375,-0.00262451171875,-0.001800537109375,-0.000701904296875,0,0.00009155552834272385,-0.000274658203125,-0.001190185546875,-0.001617431640625,-0.000732421875,0.0001831110566854477,0.00045777764171361923,0.0006408886983990669,-0.0001220703125,-0.001678466796875,-0.00201416015625,-0.00115966796875,-0.000274658203125,0.00006103701889514923,-0.00018310546875]")},2948:function(e,t,n){var r=n(2140),s=n(9980),a=n(1730),i=n(7405),o=n(4026),u=n(865),l=n(8721);l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},2140:function(e,t,n){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},865:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},9980:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},4026:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},7405:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},1730:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},8721:function(e,t,n){var r;!function(s,a){var i,o=this,u=256,l=a.pow(u,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(s)]}}():e,3),r),d=new f(r),x=function(){for(var e=d.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=p&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=p&s+1],n=n*u+i[p&(i[s]=i[a=p&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[p&s]=p&(n^=19*t[p&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),s),e.exports){e.exports=d;try{i=n(3906)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}([],Math)},3129:function(e,t,n){var r=n(626),s=n(477),a=n(2868),i=n(8197),o=n(1954),u=n(2408),l=n(1662);l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},626:function(e,t,n){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},2408:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},477:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},1954:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},8197:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},2868:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},1662:function(e,t,n){var r;!function(s,a){var i,o=this,u=256,l=a.pow(u,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(s)]}}():e,3),r),d=new f(r),x=function(){for(var e=d.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=p&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=p&s+1],n=n*u+i[p&(i[s]=i[a=p&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[p&s]=p&(n^=19*t[p&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),s),e.exports){e.exports=d;try{i=n(3906)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}([],Math)},7232:function(e,t,n){"use strict";n.r(t),n.d(t,{Abs:function(){return Ye},Acos:function(){return Ze},Acosh:function(){return Je},AdadeltaOptimizer:function(){return bu},AdagradOptimizer:function(){return wu},AdamOptimizer:function(){return Iu},AdamaxOptimizer:function(){return Eu},Add:function(){return Qe},AddN:function(){return et},All:function(){return tt},Any:function(){return nt},ArgMax:function(){return rt},ArgMin:function(){return st},Asin:function(){return at},Asinh:function(){return it},Atan:function(){return ot},Atan2:function(){return lt},Atanh:function(){return ut},AvgPool:function(){return ct},AvgPool3D:function(){return pt},AvgPool3DGrad:function(){return dt},AvgPoolGrad:function(){return ht},BatchMatMul:function(){return ft},BatchToSpaceND:function(){return mt},Bincount:function(){return gt},BroadcastTo:function(){return yt},Callback:function(){return wI},CallbackList:function(){return ob},Cast:function(){return bt},Ceil:function(){return xt},ClipByValue:function(){return wt},Complex:function(){return vt},ComplexAbs:function(){return kt},Concat:function(){return It},Conv2D:function(){return Nt},Conv2DBackpropFilter:function(){return St},Conv2DBackpropInput:function(){return Ct},Conv3D:function(){return Tt},Conv3DBackpropFilterV2:function(){return $t},Conv3DBackpropInputV2:function(){return Et},Cos:function(){return At},Cosh:function(){return Rt},CropAndResize:function(){return Ft},Cumsum:function(){return _t},CustomCallback:function(){return cb},DataStorage:function(){return j},DenseBincount:function(){return Dt},DepthToSpace:function(){return Ot},DepthwiseConv2dNative:function(){return Mt},DepthwiseConv2dNativeBackpropFilter:function(){return Lt},DepthwiseConv2dNativeBackpropInput:function(){return zt},Diag:function(){return Bt},Dilation2D:function(){return Pt},Dilation2DBackpropFilter:function(){return Wt},Dilation2DBackpropInput:function(){return Vt},ENV:function(){return qe},EarlyStopping:function(){return II},Einsum:function(){return Gt},Elu:function(){return jt},EluGrad:function(){return Ht},Environment:function(){return Ue},Equal:function(){return Kt},Erf:function(){return qt},Exp:function(){return Xt},ExpandDims:function(){return Yt},Expm1:function(){return Zt},FFT:function(){return Jt},Fill:function(){return Qt},FlipLeftRight:function(){return en},Floor:function(){return tn},FloorDiv:function(){return nn},FromPixels:function(){return Yr},FusedBatchNorm:function(){return rn},FusedConv2D:function(){return Qr},FusedDepthwiseConv2D:function(){return es},GatherNd:function(){return an},GatherV2:function(){return sn},GraphModel:function(){return PN},Greater:function(){return on},GreaterEqual:function(){return un},History:function(){return lb},IFFT:function(){return cn},Identity:function(){return ln},Imag:function(){return hn},InputSpec:function(){return Ky},IsFinite:function(){return pn},IsInf:function(){return dn},IsNan:function(){return fn},KernelBackend:function(){return H},LRN:function(){return Sn},LRNGrad:function(){return Cn},LayerVariable:function(){return jy},LayersModel:function(){return Ix},LeakyRelu:function(){return mn},Less:function(){return gn},LessEqual:function(){return yn},LinSpace:function(){return bn},Log:function(){return xn},Log1p:function(){return wn},LogSoftmax:function(){return Nn},LogicalAnd:function(){return vn},LogicalNot:function(){return kn},LogicalOr:function(){return In},Max:function(){return Tn},MaxPool:function(){return En},MaxPool3D:function(){return Rn},MaxPool3DGrad:function(){return _n},MaxPoolGrad:function(){return An},MaxPoolWithArgmax:function(){return Fn},Maximum:function(){return $n},Mean:function(){return Dn},Min:function(){return On},Minimum:function(){return Mn},MirrorPad:function(){return Ln},Mod:function(){return zn},MomentumOptimizer:function(){return Ru},Multinomial:function(){return Bn},Multiply:function(){return Pn},Neg:function(){return Vn},NonMaxSuppressionV3:function(){return Un},NonMaxSuppressionV4:function(){return Gn},NonMaxSuppressionV5:function(){return jn},NotEqual:function(){return Wn},OP_SCOPE_SUFFIX:function(){return wa},OneHot:function(){return qn},OnesLike:function(){return Hn},Optimizer:function(){return yu},Pack:function(){return Kn},PadV2:function(){return Xn},Pool:function(){return Yn},Pow:function(){return Zn},Prelu:function(){return Jn},Prod:function(){return Qn},RMSPropOptimizer:function(){return _u},RNN:function(){return _w},Range:function(){return er},Rank:function(){return qs},Real:function(){return tr},RealDiv:function(){return Ut},Reciprocal:function(){return nr},Reduction:function(){return rd},Relu:function(){return rr},Relu6:function(){return lr},Reshape:function(){return sr},ResizeBilinear:function(){return or},ResizeBilinearGrad:function(){return ur},ResizeNearestNeighbor:function(){return ar},ResizeNearestNeighborGrad:function(){return ir},Reverse:function(){return cr},RotateWithOffset:function(){return Zr},Round:function(){return hr},Rsqrt:function(){return pr},SGDOptimizer:function(){return Au},ScatterNd:function(){return dr},Select:function(){return fr},Selu:function(){return mr},Sequential:function(){return Tx},Sigmoid:function(){return wr},Sign:function(){return xr},Sin:function(){return yr},Sinh:function(){return br},Slice:function(){return gr},Softmax:function(){return Cr},Softplus:function(){return vr},SpaceToBatchND:function(){return Nr},SparseFillEmptyRows:function(){return Tr},SparseReshape:function(){return $r},SparseSegmentMean:function(){return Er},SparseSegmentSum:function(){return Ar},SparseToDense:function(){return Rr},SplitV:function(){return Sr},Sqrt:function(){return kr},Square:function(){return Fr},SquaredDifference:function(){return _r},Step:function(){return Xr},StridedSlice:function(){return Dr},StringNGrams:function(){return Or},StringSplit:function(){return Mr},StringToHashBucketFast:function(){return Lr},Sub:function(){return zr},Sum:function(){return Ir},SymbolicTensor:function(){return Xy},Tan:function(){return Br},Tanh:function(){return Pr},Tensor:function(){return Gs},TensorBuffer:function(){return Ps},Tile:function(){return Vr},TopK:function(){return Wr},Transform:function(){return Ur},Transpose:function(){return Gr},Unique:function(){return jr},Unpack:function(){return Hr},UnsortedSegmentSum:function(){return qr},Variable:function(){return Hs},ZerosLike:function(){return Kr},_FusedMatMul:function(){return Jr},abs:function(){return Nu},acos:function(){return Fu},acosh:function(){return Du},add:function(){return nu},addN:function(){return Ou},all:function(){return Mu},any:function(){return Lu},argMax:function(){return zu},argMin:function(){return Bu},asin:function(){return Pu},asinh:function(){return Vu},atan:function(){return Wu},atan2:function(){return Uu},atanh:function(){return Gu},avgPool:function(){return al},avgPool3d:function(){return il},backend:function(){return eu},backend_util:function(){return g},basicLSTMCell:function(){return hl},batchNorm:function(){return dl},batchNorm2d:function(){return fl},batchNorm3d:function(){return ml},batchNorm4d:function(){return gl},batchToSpaceND:function(){return pl},bincount:function(){return yl},booleanMaskAsync:function(){return ap},broadcastTo:function(){return bl},browser:function(){return u},buffer:function(){return vi},callbacks:function(){return NI},cast:function(){return ki},ceil:function(){return xl},clipByValue:function(){return wl},clone:function(){return Ii},complex:function(){return ka},concat:function(){return ol},concat1d:function(){return vl},concat2d:function(){return kl},concat3d:function(){return Il},concat4d:function(){return Nl},constraints:function(){return b},conv1d:function(){return Cl},conv2d:function(){return Sl},conv2dTranspose:function(){return $l},conv3d:function(){return El},conv3dTranspose:function(){return Rl},copyRegisteredKernels:function(){return cs},cos:function(){return _l},cosh:function(){return Fl},cosineWindow:function(){return fp},cumsum:function(){return Dl},customGrad:function(){return fu},data:function(){return U},denseBincount:function(){return Ol},deprecationWarn:function(){return zo},depthToSpace:function(){return Ml},depthwiseConv2d:function(){return Ll},deregisterOp:function(){return AI},device_util:function(){return a},diag:function(){return zl},dilation2d:function(){return Bl},disableDeprecationWarnings:function(){return Lo},dispose:function(){return Go},disposeVariables:function(){return Bo},div:function(){return su},divNoNan:function(){return Wl},dot:function(){return Ul},dropout:function(){return pp},einsum:function(){return Gl},elu:function(){return jl},enableDebugMode:function(){return Mo},enableProdMode:function(){return Oo},enclosingPowerOfTwo:function(){return dp},engine:function(){return Po},env:function(){return je},equal:function(){return Pl},erf:function(){return Hl},exp:function(){return ql},expandDims:function(){return Kl},expm1:function(){return Xl},eye:function(){return Zl},fft:function(){return Oh},fill:function(){return xu},findBackend:function(){return Zo},findBackendFactory:function(){return Jo},floor:function(){return Jl},floorDiv:function(){return ru},fused:function(){return f},gather:function(){return Ql},gatherND:function(){return hp},gather_util:function(){return l},getBackend:function(){return Xo},getGradient:function(){return ss},getKernel:function(){return rs},getKernelsForBackend:function(){return as},grad:function(){return lu},grads:function(){return cu},greater:function(){return ec},greaterEqual:function(){return tc},ifft:function(){return Mh},imag:function(){return nc},image:function(){return kd},inTopKAsync:function(){return mp},initializers:function(){return x},input:function(){return Rx},io:function(){return i},irfft:function(){return Lh},isFinite:function(){return rc},isInf:function(){return sc},isNaN:function(){return ac},keep:function(){return jo},kernel_impls:function(){return y},layers:function(){return w},leakyRelu:function(){return ic},less:function(){return oc},lessEqual:function(){return uc},linalg:function(){return Id},linspace:function(){return lc},loadGraphModel:function(){return VN},loadLayersModel:function(){return Ax},localResponseNormalization:function(){return cc},log:function(){return hc},log1p:function(){return pc},logSigmoid:function(){return mc},logSoftmax:function(){return bc},logSumExp:function(){return Tc},logicalAnd:function(){return $c},logicalNot:function(){return Ec},logicalOr:function(){return Ac},logicalXor:function(){return Rc},losses:function(){return Nd},matMul:function(){return Wi},math:function(){return o},max:function(){return gc},maxPool:function(){return _c},maxPool3d:function(){return Fc},maxPoolWithArgmax:function(){return Dc},maximum:function(){return $u},mean:function(){return Oc},memory:function(){return Vo},meshgrid:function(){return zc},metrics:function(){return v},min:function(){return Bc},minimum:function(){return Pc},mirrorPad:function(){return Vc},mod:function(){return Wc},model:function(){return $x},models:function(){return k},moments:function(){return Uc},movingAverage:function(){return up},mul:function(){return au},multiRNNCell:function(){return Gc},multinomial:function(){return jc},neg:function(){return dc},nextFrame:function(){return Ad},norm:function(){return op},notEqual:function(){return Hc},oneHot:function(){return Ui},ones:function(){return Lc},onesLike:function(){return qc},op:function(){return va},outerProduct:function(){return Kc},pad:function(){return Xc},pad1d:function(){return Yc},pad2d:function(){return Zc},pad3d:function(){return Jc},pad4d:function(){return Qc},pool:function(){return th},pow:function(){return vu},prelu:function(){return nh},print:function(){return Ni},prod:function(){return rh},profile:function(){return Wo},rand:function(){return sh},randomGamma:function(){return lh},randomNormal:function(){return ch},randomUniform:function(){return hh},range:function(){return ph},ready:function(){return Ko},real:function(){return dh},reciprocal:function(){return fh},registerBackend:function(){return Qo},registerCallbackConstructor:function(){return _x},registerGradient:function(){return os},registerKernel:function(){return is},registerOp:function(){return $I},regularizers:function(){return I},relu:function(){return mh},relu6:function(){return gh},removeBackend:function(){return Yo},reshape:function(){return sl},reverse:function(){return yh},reverse1d:function(){return bh},reverse2d:function(){return xh},reverse3d:function(){return wh},reverse4d:function(){return vh},rfft:function(){return Bh},round:function(){return kh},rsqrt:function(){return Ih},scalar:function(){return gu},scatterND:function(){return lp},scatter_util:function(){return c},selu:function(){return Nh},separableConv2d:function(){return Sh},sequential:function(){return Ex},serialization:function(){return p},setBackend:function(){return qo},setPlatform:function(){return tu},setdiff1dAsync:function(){return Ch},sigmoid:function(){return ul},sign:function(){return Th},signal:function(){return vd},sin:function(){return $h},sinh:function(){return Eh},slice:function(){return ll},slice1d:function(){return Ah},slice2d:function(){return Rh},slice3d:function(){return _h},slice4d:function(){return Fh},slice_util:function(){return h},softmax:function(){return Dh},softplus:function(){return fc},spaceToBatchND:function(){return eh},sparse:function(){return Sd},sparseToDense:function(){return cp},spectral:function(){return wd},split:function(){return zh},sqrt:function(){return iu},square:function(){return ou},squaredDifference:function(){return Ph},squeeze:function(){return Vh},stack:function(){return Wh},step:function(){return Uh},stridedSlice:function(){return Gh},string:function(){return Cd},sub:function(){return ku},sum:function(){return yc},sumOutType:function(){return ea},tan:function(){return jh},tanh:function(){return cl},tensor:function(){return Na},tensor1d:function(){return Hh},tensor2d:function(){return qh},tensor3d:function(){return Hi},tensor4d:function(){return Kh},tensor5d:function(){return Xh},tensor6d:function(){return Yh},tensor_util:function(){return s},test_util:function(){return d},tidy:function(){return Uo},tile:function(){return Yl},time:function(){return Ho},topk:function(){return Zh},train:function(){return $d},transpose:function(){return Gi},truncatedNormal:function(){return Jh},unique:function(){return Qh},unregisterGradient:function(){return ls},unregisterKernel:function(){return us},unsortedSegmentSum:function(){return ep},unstack:function(){return tp},upcastType:function(){return Qs},util:function(){return r},valueAndGrad:function(){return hu},valueAndGrads:function(){return pu},variable:function(){return np},variableGrads:function(){return du},version:function(){return KP},version_converter:function(){return WN},version_core:function(){return Do},version_layers:function(){return Xb},where:function(){return Vl},whereAsync:function(){return sp},zeros:function(){return Mc},zerosLike:function(){return uu}});var r={};n.r(r),n.d(r,{arraysEqual:function(){return ue},assert:function(){return ne},assertNonNegativeIntegerDimensions:function(){return ze},assertNonNull:function(){return se},assertShapesMatch:function(){return re},bytesFromStringArray:function(){return Se},bytesPerElement:function(){return Ne},checkConversionForErrors:function(){return we},clamp:function(){return Y},computeStrides:function(){return _e},createScalarValue:function(){return Cs},createShuffledIndices:function(){return pe},decodeString:function(){return Rs},distSquared:function(){return te},encodeString:function(){return As},fetch:function(){return Es},fingerPrint64:function(){return Ss},flatten:function(){return ae},getArrayFromDType:function(){return xe},getTypedArrayFromDType:function(){return be},hasEncodingLoss:function(){return ke},hexToLong:function(){return fs},indexToLoc:function(){return Pe},inferDtype:function(){return Ee},inferFromImplicitShape:function(){return me},isBoolean:function(){return Te},isFunction:function(){return Ae},isInt:function(){return le},isNumber:function(){return $e},isPromise:function(){return Ve},isScalarShape:function(){return oe},isString:function(){return Ce},isTypedArray:function(){return Ie},isValidDtype:function(){return ve},locToIndex:function(){return Be},makeOnesTypedArray:function(){return Oe},makeZerosNestedTypedArray:function(){return Le},makeZerosTypedArray:function(){return Me},nearestDivisor:function(){return Re},nearestLargerEven:function(){return Z},now:function(){return $s},parseAxisParam:function(){return ge},randUniform:function(){return ee},repeatedTry:function(){return fe},rightPad:function(){return de},shuffle:function(){return K},shuffleCombo:function(){return X},sizeFromShape:function(){return ie},sizeToSquarishShape:function(){return he},squeezeShape:function(){return ye},sum:function(){return Q},swap:function(){return J},tanh:function(){return ce},toNestedArray:function(){return De},toTypedArray:function(){return Ts}});var s={};n.r(s),n.d(s,{assertTypesMatch:function(){return na},getTensorsInContainer:function(){return sa},isTensorInList:function(){return ra},makeTypesMatch:function(){return ta}});var a={};n.r(a),n.d(a,{isBrowser:function(){return da},isMobile:function(){return pa}});var i={};n.r(i),n.d(i,{browserFiles:function(){return $i},browserHTTPRequest:function(){return Li},concatenateArrayBuffers:function(){return Ra},copyModel:function(){return mi},decodeWeights:function(){return Ta},encodeWeights:function(){return Ca},fromMemory:function(){return Pi},getLoadHandlers:function(){return Va},getModelArtifactsForJSON:function(){return Da},getModelArtifactsInfoForJSON:function(){return Oa},getSaveHandlers:function(){return Pa},http:function(){return Mi},isHTTPScheme:function(){return Di},listModels:function(){return di},loadWeights:function(){return Ri},moveModel:function(){return gi},registerLoadRouter:function(){return Ba},registerSaveRouter:function(){return za},removeModel:function(){return fi},weightsLoaderFactory:function(){return _i},withSaveHandler:function(){return Vi}});var o={};n.r(o),n.d(o,{confusionMatrix:function(){return ji}});var u={};n.r(u),n.d(u,{fromPixels:function(){return Ji},fromPixelsAsync:function(){return Yi},toPixels:function(){return Zi}});var l={};n.r(l),n.d(l,{prepareAndValidate:function(){return Qi}});var c={};n.r(c),n.d(c,{calculateShapes:function(){return no},validateInput:function(){return to},validateUpdateShape:function(){return eo}});var h={};n.r(h),n.d(h,{assertParamsValid:function(){return ro},computeFlatOffset:function(){return yo},computeOutShape:function(){return ao},getNormalizedAxes:function(){return lo},isSliceContinous:function(){return go},maskToAxes:function(){return so},parseSliceParams:function(){return bo},sliceInfo:function(){return xo},startForAxis:function(){return fo},startIndicesWithElidedDims:function(){return co},stopForAxis:function(){return mo},stopIndicesWithElidedDims:function(){return ho},stridesForAxis:function(){return po},stridesWithElidedDims:function(){return io}});var p={};n.r(p),n.d(p,{Serializable:function(){return wo},SerializationMap:function(){return vo},registerClass:function(){return ko}});var d={};n.r(d),n.d(d,{TEST_EPSILON_FLOAT16:function(){return Io},encodeStrings:function(){return Fo},expectArrayBuffersEqual:function(){return _o},expectArraysClose:function(){return No},expectArraysEqual:function(){return $o},expectNumbersClose:function(){return Eo},expectPromiseToFail:function(){return To},expectValuesInRange:function(){return Ro},testEpsilon:function(){return So}});var f={};n.r(f),n.d(f,{conv2d:function(){return vp},depthwiseConv2d:function(){return Np},matMul:function(){return Sp}});var m={};n.r(m),n.d(m,{collectGatherOpShapeInfo:function(){return yf},computeOutShape:function(){return gf},segOpComputeOptimalWindowSize:function(){return mf}});var g={};n.r(g),n.d(g,{ERF_A1:function(){return Gd},ERF_A2:function(){return jd},ERF_A3:function(){return Hd},ERF_A4:function(){return qd},ERF_A5:function(){return Kd},ERF_P:function(){return Ud},PARALLELIZE_THRESHOLD:function(){return Fd},SELU_SCALE:function(){return Wd},SELU_SCALEALPHA:function(){return Vd},applyActivation:function(){return xp},assertAndGetBroadcastShape:function(){return Tu},assertAxesAreInnerMostDims:function(){return Ic},assertParamsConsistent:function(){return Rd},assignToTypedArray:function(){return nf},axesAreInnerMostDims:function(){return xc},calculateShapes:function(){return no},checkEinsumDimSizes:function(){return cf},combineLocations:function(){return wc},complexWithEvenIndex:function(){return Qd},complexWithOddIndex:function(){return ef},computeConv2DInfo:function(){return Ku},computeConv3DInfo:function(){return Xu},computeDefaultPad:function(){return Yu},computeDilation2DInfo:function(){return ju},computeOptimalWindowSize:function(){return Dd},computeOutAndReduceShapes:function(){return vc},computeOutShape:function(){return _d},computePool2DInfo:function(){return Hu},computePool3DInfo:function(){return qu},convertConv2DDataFormat:function(){return rl},decodeEinsumEquation:function(){return uf},eitherStridesOrDilationsAreOne:function(){return nl},expandShapeToKeepDim:function(){return kc},exponent:function(){return sf},exponents:function(){return rf},fromStringArrayToUint8:function(){return xf},fromUint8ToStringArray:function(){return bf},getAxesPermutation:function(){return Nc},getBroadcastDims:function(){return Su},getComplexWithIndex:function(){return tf},getEinsumComputePath:function(){return hf},getEinsumPermutation:function(){return lf},getFusedBiasGradient:function(){return bp},getFusedDyActivation:function(){return yp},getImageCenter:function(){return Od},getInnerMostAxes:function(){return Cc},getPermuted:function(){return Ld},getReductionAxes:function(){return Cu},getReshaped:function(){return Md},getReshapedPermuted:function(){return zd},getSliceBeginCoords:function(){return Bd},getSliceSize:function(){return Pd},getUndoAxesPermutation:function(){return Sc},isIdentityPermutation:function(){return pf},log:function(){return Yd},mergeRealAndImagArrays:function(){return Zd},prepareAndValidate:function(){return Qi},prepareSplitSize:function(){return ff},segment_util:function(){return m},shouldFuse:function(){return wp},slice_util:function(){return h},splitRealAndImagArrays:function(){return Jd},tupleValuesAreOne:function(){return tl},upcastType:function(){return Qs},validateInput:function(){return to},validateUpdateShape:function(){return eo},warn:function(){return Xd}});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:function(){return Lp},nonMaxSuppressionV4Impl:function(){return zp},nonMaxSuppressionV5Impl:function(){return Bp},whereImpl:function(){return rp}});var b={};n.r(b),n.d(b,{maxNorm:function(){return dg},minMaxNorm:function(){return gg},nonNeg:function(){return mg},unitNorm:function(){return fg}});var x={};n.r(x),n.d(x,{constant:function(){return ky},glorotNormal:function(){return Ey},glorotUniform:function(){return $y},heNormal:function(){return Ay},heUniform:function(){return Ry},identity:function(){return Cy},leCunNormal:function(){return _y},leCunUniform:function(){return Fy},ones:function(){return vy},orthogonal:function(){return Dy},randomNormal:function(){return Ny},randomUniform:function(){return Iy},truncatedNormal:function(){return Sy},varianceScaling:function(){return Ty},zeros:function(){return wy}});var w={};n.r(w),n.d(w,{Layer:function(){return Qy},RNN:function(){return _w},RNNCell:function(){return Fw},activation:function(){return tk},add:function(){return ck},alphaDropout:function(){return eI},average:function(){return hk},averagePooling1d:function(){return wk},averagePooling2d:function(){return Ik},averagePooling3d:function(){return Ck},avgPool1d:function(){return vk},avgPool2d:function(){return Nk},avgPool3d:function(){return Tk},avgPooling1d:function(){return kk},avgPooling2d:function(){return Sk},avgPooling3d:function(){return $k},batchNormalization:function(){return yk},bidirectional:function(){return Hk},concatenate:function(){return pk},conv1d:function(){return Hv},conv2d:function(){return qv},conv2dTranspose:function(){return Kv},conv3d:function(){return Xv},conv3dTranspose:function(){return Yv},convLstm2d:function(){return Wk},convLstm2dCell:function(){return Uk},cropping2D:function(){return Jv},dense:function(){return nk},depthwiseConv2d:function(){return ek},dot:function(){return gk},dropout:function(){return rk},elu:function(){return Pv},embedding:function(){return lk},flatten:function(){return ak},gaussianDropout:function(){return Qk},gaussianNoise:function(){return Jk},globalAveragePooling1d:function(){return Ek},globalAveragePooling2d:function(){return Ak},globalMaxPool1d:function(){return Kk},globalMaxPool2d:function(){return Xk},globalMaxPooling1d:function(){return Rk},globalMaxPooling2d:function(){return _k},gru:function(){return Mk},gruCell:function(){return Lk},input:function(){return Rx},inputLayer:function(){return Bv},layerNormalization:function(){return bk},leakyReLU:function(){return Wv},lstm:function(){return zk},lstmCell:function(){return Bk},masking:function(){return tI},maxPool1d:function(){return Yk},maxPool2d:function(){return Zk},maxPooling1d:function(){return Fk},maxPooling2d:function(){return Dk},maxPooling3d:function(){return Ok},maximum:function(){return dk},minimum:function(){return fk},multiply:function(){return mk},permute:function(){return uk},prelu:function(){return Uv},reLU:function(){return Vv},repeatVector:function(){return ik},reshape:function(){return ok},rnn:function(){return Gk},separableConv2d:function(){return Zv},simpleRNN:function(){return Pk},simpleRNNCell:function(){return Vk},softmax:function(){return Gv},spatialDropout1d:function(){return sk},stackedRNNCells:function(){return jk},thresholdedReLU:function(){return jv},timeDistributed:function(){return qk},upSampling2d:function(){return Qv},zeroPadding2d:function(){return xk}});var v={};n.r(v),n.d(v,{MAPE:function(){return pI},MSE:function(){return mI},binaryAccuracy:function(){return nI},binaryCrossentropy:function(){return rI},categoricalAccuracy:function(){return aI},categoricalCrossentropy:function(){return iI},cosineProximity:function(){return lI},mape:function(){return dI},meanAbsoluteError:function(){return cI},meanAbsolutePercentageError:function(){return hI},meanSquaredError:function(){return fI},mse:function(){return gI},precision:function(){return oI},recall:function(){return uI},sparseCategoricalAccuracy:function(){return sI}});var k={};n.r(k),n.d(k,{modelFromJSON:function(){return Sx}});var I={};n.r(I),n.d(I,{l1:function(){return bI},l1l2:function(){return yI},l2:function(){return xI}});var N={};n.r(N),n.d(N,{json:function(){return zI}});var S={};n.r(S),n.d(S,{json:function(){return BI}});var C={};n.r(C),n.d(C,{json:function(){return PI}});var T={};n.r(T),n.d(T,{json:function(){return VI}});var $={};n.r($),n.d($,{json:function(){return WI}});var E={};n.r(E),n.d(E,{json:function(){return UI}});var A={};n.r(A),n.d(A,{json:function(){return GI}});var R={};n.r(R),n.d(R,{json:function(){return jI}});var _={};n.r(_),n.d(_,{json:function(){return HI}});var F={};n.r(F),n.d(F,{json:function(){return qI}});var D={};n.r(D),n.d(D,{json:function(){return KI}});var O={};n.r(O),n.d(O,{json:function(){return XI}});var M={};n.r(M),n.d(M,{json:function(){return YI}});var L={};n.r(L),n.d(L,{json:function(){return ZI}});var z={};n.r(z),n.d(z,{json:function(){return JI}});var B={};n.r(B),n.d(B,{json:function(){return QI}});var P={};n.r(P),n.d(P,{json:function(){return eN}});var V={};n.r(V),n.d(V,{json:function(){return tN}});var W={};n.r(W),n.d(W,{json:function(){return nN}});var U={};n.r(U),n.d(U,{CSVDataset:function(){return FS},Dataset:function(){return vS},FileDataSource:function(){return HS},TextLineDataset:function(){return CS},URLDataSource:function(){return qS},array:function(){return IS},csv:function(){return KS},func:function(){return XS},generator:function(){return YS},microphone:function(){return JS},version_data:function(){return QS},webcam:function(){return ZS},zip:function(){return NS}});var G={};n.r(G),n.d(G,{addImpl:function(){return RC},bincountImpl:function(){return IT},bincountReduceImpl:function(){return NT},ceilImpl:function(){return TT},concatImpl:function(){return FT},equalImpl:function(){return m$},expImpl:function(){return C$},expm1Impl:function(){return R$},floorImpl:function(){return K$},gatherNdImpl:function(){return nE},gatherV2Impl:function(){return sE},greaterEqualImpl:function(){return lE},greaterImpl:function(){return iE},lessEqualImpl:function(){return kE},lessImpl:function(){return xE},linSpaceImpl:function(){return SE},logImpl:function(){return TE},maxImpl:function(){return WE},maximumImpl:function(){return jE},minimumImpl:function(){return tA},multiplyImpl:function(){return o$},negImpl:function(){return pA},notEqualImpl:function(){return wA},prodImpl:function(){return FA},rangeImpl:function(){return OA},rsqrtImpl:function(){return qA},simpleAbsImpl:function(){return PC},sliceImpl:function(){return xT},sparseFillEmptyRowsImpl:function(){return dR},sparseReshapeImpl:function(){return mR},sparseSegmentReductionImpl:function(){return yR},squaredDifferenceImpl:function(){return SR},stridedSliceImpl:function(){return AR},stringNGramsImpl:function(){return FR},stringSplitImpl:function(){return MR},stringToHashBucketFastImpl:function(){return zR},subImpl:function(){return L$},tileImpl:function(){return UR},topKImpl:function(){return HR},transposeImpl:function(){return qC},uniqueImpl:function(){return ZR}});class j{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class H{refCount(e){return q("refCount")}incRef(e){return q("incRef")}timerAvailable(){return!0}time(e){return q("time")}read(e){return q("read")}readSync(e){return q("readSync")}numDataIds(){return q("numDataIds")}disposeData(e,t){return q("disposeData")}write(e,t,n){return q("write")}move(e,t,n,r,s){return q("move")}memory(){return q("memory")}floatPrecision(){return q("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return q("dispose")}}function q(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function K(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,J(e,t,n)}function X(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,J(e,n,r),J(t,n,r)}function Y(e,t,n){return Math.max(e,Math.min(t,n))}function Z(e){return e%2==0?e:e+1}function J(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function Q(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function ee(e,t){const n=Math.random();return t*n+(1-n)*e}function te(e,t){let n=0;for(let r=0;r<e.length;r++){const s=Number(e[r])-Number(t[r]);n+=s*s}return n}function ne(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function re(e,t,n=""){ne(ue(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function se(e){ne(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function ae(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||Ie(e)&&!n)for(let r=0;r<e.length;++r)ae(e[r],t,n);else t.push(e);return t}function ie(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function oe(e){return 0===e.length}function ue(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function le(e){return e%1==0}function ce(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function he(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function pe(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return K(t),t}function de(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function fe(e,t=(e=>0),n){return new Promise(((r,s)=>{let a=0;const i=()=>{if(e())return void r();a++;const o=t(a);null!=n&&a>=n?s():setTimeout(i,o)};i()}))}function me(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const s=e.slice();return s[r]=t/n,s}function ge(e,t){const n=t.length;return ne((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),ne(e.every((e=>le(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function ye(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:ge(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function be(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function xe(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function we(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function ve(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function ke(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function Ie(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function Ne(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function Se(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function Ce(e){return"string"==typeof e||e instanceof String}function Te(e){return"boolean"==typeof e}function $e(e){return"number"==typeof e}function Ee(e){return Array.isArray(e)?Ee(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":$e(e)?"float32":Ce(e)?"string":Te(e)?"bool":"float32"}function Ae(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Re(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function _e(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function Fe(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=Fe(e+t*o,i,n,r)}return s}function De(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return Fe(0,e,t,n)}function Oe(e,t){const n=Me(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Me(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Le(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return De(e,new Float32Array(n));if("int32"===t)return De(e,new Int32Array(n));if("bool"===t)return De(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function ze(e){e.forEach((t=>{ne(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Be(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Pe(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function Ve(e){return e&&e.then&&"function"==typeof e.then}const We="tfjsflags";class Ue{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Ge,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Ve(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(We in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function Ge(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function je(){return qe}let He,qe=null;function Ke(){if(null==He){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}He=e}return He}function Xe(e,t){const n=function(){const e=Ke();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const Ye="Abs",Ze="Acos",Je="Acosh",Qe="Add",et="AddN",tt="All",nt="Any",rt="ArgMax",st="ArgMin",at="Asin",it="Asinh",ot="Atan",ut="Atanh",lt="Atan2",ct="AvgPool",ht="AvgPoolGrad",pt="AvgPool3D",dt="AvgPool3DGrad",ft="BatchMatMul",mt="BatchToSpaceND",gt="Bincount",yt="BroadcastTo",bt="Cast",xt="Ceil",wt="ClipByValue",vt="Complex",kt="ComplexAbs",It="Concat",Nt="Conv2D",St="Conv2DBackpropFilter",Ct="Conv2DBackpropInput",Tt="Conv3D",$t="Conv3DBackpropFilterV2",Et="Conv3DBackpropInputV2",At="Cos",Rt="Cosh",_t="Cumsum",Ft="CropAndResize",Dt="DenseBincount",Ot="DepthToSpace",Mt="DepthwiseConv2dNative",Lt="DepthwiseConv2dNativeBackpropFilter",zt="DepthwiseConv2dNativeBackpropInput",Bt="Diag",Pt="Dilation2D",Vt="Dilation2DBackpropInput",Wt="Dilation2DBackpropFilter",Ut="RealDiv",Gt="Einsum",jt="Elu",Ht="EluGrad",qt="Erf",Kt="Equal",Xt="Exp",Yt="ExpandDims",Zt="Expm1",Jt="FFT",Qt="Fill",en="FlipLeftRight",tn="Floor",nn="FloorDiv",rn="FusedBatchNorm",sn="GatherV2",an="GatherNd",on="Greater",un="GreaterEqual",ln="Identity",cn="IFFT",hn="Imag",pn="IsFinite",dn="IsInf",fn="IsNan",mn="LeakyRelu",gn="Less",yn="LessEqual",bn="LinSpace",xn="Log",wn="Log1p",vn="LogicalAnd",kn="LogicalNot",In="LogicalOr",Nn="LogSoftmax",Sn="LRN",Cn="LRNGrad",Tn="Max",$n="Maximum",En="MaxPool",An="MaxPoolGrad",Rn="MaxPool3D",_n="MaxPool3DGrad",Fn="MaxPoolWithArgmax",Dn="Mean",On="Min",Mn="Minimum",Ln="MirrorPad",zn="Mod",Bn="Multinomial",Pn="Multiply",Vn="Neg",Wn="NotEqual",Un="NonMaxSuppressionV3",Gn="NonMaxSuppressionV4",jn="NonMaxSuppressionV5",Hn="OnesLike",qn="OneHot",Kn="Pack",Xn="PadV2",Yn="Pool",Zn="Pow",Jn="Prelu",Qn="Prod",er="Range",tr="Real",nr="Reciprocal",rr="Relu",sr="Reshape",ar="ResizeNearestNeighbor",ir="ResizeNearestNeighborGrad",or="ResizeBilinear",ur="ResizeBilinearGrad",lr="Relu6",cr="Reverse",hr="Round",pr="Rsqrt",dr="ScatterNd",fr="Select",mr="Selu",gr="Slice",yr="Sin",br="Sinh",xr="Sign",wr="Sigmoid",vr="Softplus",kr="Sqrt",Ir="Sum",Nr="SpaceToBatchND",Sr="SplitV",Cr="Softmax",Tr="SparseFillEmptyRows",$r="SparseReshape",Er="SparseSegmentMean",Ar="SparseSegmentSum",Rr="SparseToDense",_r="SquaredDifference",Fr="Square",Dr="StridedSlice",Or="StringNGrams",Mr="StringSplit",Lr="StringToHashBucketFast",zr="Sub",Br="Tan",Pr="Tanh",Vr="Tile",Wr="TopK",Ur="Transform",Gr="Transpose",jr="Unique",Hr="Unpack",qr="UnsortedSegmentSum",Kr="ZerosLike",Xr="Step",Yr="FromPixels",Zr="RotateWithOffset",Jr="_FusedMatMul",Qr="FusedConv2D",es="FusedDepthwiseConv2D",ts=Xe("kernelRegistry",(()=>new Map)),ns=Xe("gradRegistry",(()=>new Map));function rs(e,t){const n=hs(e,t);return ts.get(n)}function ss(e){return ns.get(e)}function as(e){const t=ts.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,i]=s,[o]=a.split("_");o===e&&n.push(i)}return n}function is(e){const{kernelName:t,backendName:n}=e,r=hs(t,n);ts.has(r)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),ts.set(r,e)}function os(e){const{kernelName:t}=e;ns.has(t)&&je().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),ns.set(t,e)}function us(e,t){const n=hs(e,t);if(!ts.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);ts.delete(n)}function ls(e){if(!ns.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);ns.delete(e)}function cs(e,t){as(e).forEach((e=>{is(Object.assign({},e,{backendName:t}))}))}function hs(e,t){return`${t}_${e}`}var ps=n(3720);const ds=n.n(ps)()||ps;function fs(e){return ds.fromString(e,!0,16)}const ms=fs("c3a5c85c97cb3127"),gs=fs("b492b66fbe98f273"),ys=fs("9ae16a3b2f90404f");function bs(e){return e.xor(e.shru(47))}function xs(e,t,n){const r=e.slice(t,t+n);return ds.fromBytes(Array.from(r),!0,!0)}function ws(e,t){return xs(e,t,8)}function vs(e,t){return xs(e,t,4)}function ks(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Is(e,t,n=fs("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let s=t.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function Ns(e,t,n,r){return function(e,t,n,r,s,a){s=s.add(e),a=ks(a.add(s).add(r),21);const i=s;return s=(s=s.add(t)).add(n),a=a.add(ks(s,44)),[s.add(r),a.add(i)]}(ws(e,t),ws(e,t+8),ws(e,t+16),ws(e,t+24),n,r)}function Ss(e,t=e.length){const n=ds.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=ys.add(2*t),r=ws(e,0).add(ys),s=ws(e,t-8);return Is(ks(s,37).mul(n).add(r),ks(r,25).add(s).mul(n),n)}if(t>=4){const n=ys.add(2*t);return Is(vs(e,0).shl(3).add(t),vs(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return bs(ys.mul(n).xor(ms.mul(r))).mul(ys)}return ys}(e,t):function(e,t=e.length){const n=ys.add(2*t),r=ws(e,0).mul(gs),s=ws(e,8),a=ws(e,t-8).mul(n),i=ws(e,t-16).mul(ys);return Is(ks(r.add(s),43).add(ks(a,30)).add(i),r.add(ks(s.add(ys),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=ys.add(2*t),r=ws(e,0).mul(ys),s=ws(e,8),a=ws(e,t-8).mul(n),i=ws(e,t-16).mul(ys),o=ks(r.add(s),43).add(ks(a,30)).add(i),u=Is(o,r.add(ks(s.add(ys),18)).add(a),n),l=ws(e,16).mul(n),c=ws(e,24),h=o.add(ws(e,t-32)).mul(n),p=u.add(ws(e,t-24)).mul(n);return Is(ks(l.add(c),43).add(ks(h,30)).add(p),l.add(ks(c.add(r),18)).add(h),n)}(e,t);let r=n,s=n.mul(gs).add(113),a=bs(s.mul(ys).add(113)).mul(ys),i=[ds.UZERO,ds.UZERO],o=[ds.UZERO,ds.UZERO];r=r.mul(ys).add(ws(e,0));let u=0;const l=64*(t-1>>6),c=l+(t-1&63)-63;do{r=ks(r.add(s).add(i[0]).add(ws(e,u+8)),37).mul(gs),s=ks(s.add(i[1]).add(ws(e,u+48)),42).mul(gs),r=r.xor(o[1]),s=s.add(i[0]).add(ws(e,u+40)),a=ks(a.add(o[0]),33).mul(gs),i=Ns(e,u,i[1].mul(gs),r.add(o[0])),o=Ns(e,u+32,a.add(o[1]),s.add(ws(e,u+16))),[a,r]=[r,a],u+=64}while(u!==l);const h=gs.add(a.and(255).shl(1));return u=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),r=ks(r.add(s).add(i[0]).add(ws(e,u+8)),37).mul(h),s=ks(s.add(i[1]).add(ws(e,u+48)),42).mul(h),r=r.xor(o[1].mul(9)),s=s.add(i[0].mul(9).add(ws(e,u+40))),a=ks(a.add(o[0]),33).mul(h),i=Ns(e,u,i[1].mul(h),r.add(o[0])),o=Ns(e,u+32,a.add(o[1]),s.add(ws(e,u+16))),[a,r]=[r,a],Is(Is(i[0],o[0],h).add(bs(s).mul(ms)).add(a),Is(i[1],o[1],h).add(r),h)}function Cs(e,t){return"string"===t?As(e):Ts([e],t)}function Ts(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=ae(e)),je().getBool("DEBUG")&&we(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function $s(){return je().platform.now()}function Es(e,t){return je().platform.fetch(e,t)}function As(e,t="utf-8"){return t=t||"utf-8",je().platform.encode(e,t)}function Rs(e,t="utf-8"){return t=t||"utf-8",je().platform.decode(e,t)}class _s{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Ds)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const i=$s();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:$s()-i})}if(je().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then((t=>{Fs(t,n.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function Fs(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Ds{logKernelProfile(e,t,n,r,s,a){const i="number"==typeof r?de(`${r}ms`,9):r.error,o=de(e,25),u=t.rank,l=t.size,c=de(t.shape.toString(),14);let h="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;h+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${o}\t%c${i}\t%c${u}D ${c}\t%c${l}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Os(e,t,n,r){const s=_e(t),a=function(e,t,n,r){const s=ie(t),a=r[r.length-1],i=new Array(a).fill(0),o=t.length,u="complex64"===n?Bs(e):e;if(o>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],Ms(u[t+e],0,n).length)}return i}(e,t,n,s),i=t.length,o=zs(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${i}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(o.map((e=>"    "+e)).join("\n")),u.join("\n")}function Ms(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:Ce(e)?`'${e}'`:"bool"===n?Ls(e):parseFloat(e.toFixed(7)).toString(),de(r,t)}function Ls(e){return 0===e?"false":"true"}function zs(e,t,n,r,s,a=!0){const i="complex64"===n?2:1,o=t[0],u=t.length;if(0===u){if("complex64"===n){return[Ms(Bs(e)[0],0,n)]}return"bool"===n?[Ls(e[0])]:[e[0].toString()]}if(1===u){if(o>20){const t=3*i;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(r=Bs(r),a=Bs(a)),["["+r.map(((e,t)=>Ms(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Ms(e,s[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Bs(e):Array.from(e)).map(((e,t)=>Ms(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),c=r.slice(1),h=r[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const r=t*h,a=r+h;p.push(...zs(e.slice(r,a),l,n,c,s,!1))}p.push("...");for(let t=o-3;t<o;t++){const r=t*h,a=r+h;p.push(...zs(e.slice(r,a),l,n,c,s,t===o-1))}}else for(let t=0;t<o;t++){const r=t*h,a=r+h;p.push(...zs(e.slice(r,a),l,n,c,s,t===o-1))}const d=2===u?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<u;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Bs(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Ps{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ie(e),null!=n){const e=n.length;ne(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||xe(t,this.size),this.strides=_e(e)}set(e,...t){0===t.length&&(t=[0]),ne(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Vs().makeTensor(this.values,this.shape,this.dtype)}}let Vs=null,Ws=null,Us=null;class Gs{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ie(e),this.strides=_e(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Ws.buffer(this.shape,this.dtype,e)}bufferSync(){return Ws.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return De(this.shape,e,"complex64"===this.dtype)}arraySync(){return De(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Vs().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Rs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=Vs().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Rs(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Vs().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Vs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Ws.print(this,e)}clone(){return this.throwIfDisposed(),Ws.clone(this)}toString(e=!1){return Os(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Ws.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Vs().makeVariable(this,e,t,n)}}function js(){return Xe("Tensor",(()=>Gs))}Object.defineProperty(Gs,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),js();class Hs extends Gs{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!ue(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Vs().disposeTensor(this),this.dataId=e.dataId,Vs().incRef(this,null)}dispose(){Vs().disposeVariable(this),this.isDisposedInternal=!0}}var qs,Ks,Xs,Ys,Zs;Object.defineProperty(Hs,Symbol.hasInstance,{value:e=>e instanceof Gs&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(qs||(qs={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Ks||(Ks={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Xs||(Xs={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Ys||(Ys={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Zs||(Zs={}));const Js={float32:Ys,int32:Ks,bool:Xs,complex64:Zs};function Qs(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Js[e][t]}function ea(e){return Qs(e,"int32")}function ta(e,t){if(e.dtype===t.dtype)return[e,t];const n=Qs(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function na(e,t){ne(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function ra(e,t){return t.some((t=>t.id===e.id))}function sa(e){const t=[];return aa(e,t,new Set),t}function aa(e,t,n){if(null==e)return;if(e instanceof Gs)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),aa(r,t,n))}}function ia(e){return null!=e.kernelName}class oa{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class ua{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new oa}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new _s(this.backendInstance),!0}setupRegisteredKernels(){as(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){as(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof H||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return ua.nextTensorId++}nextVariableId(){return ua.nextVariableId++}clone(e){const t=ca.runKernel(ln,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return ca.runKernel(bt,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=rs(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-t-s-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=ia(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(ia(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=rs(t,this.backendName);ne(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const l=i.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)}));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:c}=e,h=ia(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(u,l,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),r&&this.addTapeNode(u,l,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const r=ss(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(ne(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>s[t]));return a.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&Ce(e[0])&&(s=e.map((e=>As(e))));const a=r.write(s,t,n),i=new Gs(t,n,a,this.nextTensorId());if(this.trackTensor(i,r),"string"===n){const e=this.state.tensorInfo.get(a),t=Se(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){const s=new Gs(t,n=n||"float32",e,this.nextTensorId());return this.trackTensor(s,r),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Hs(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*Ne(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Hs||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*Ne(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},o=ss(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=Me(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=sa(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n,r=!1){if(ne(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));ne(s instanceof Gs,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach((e=>r[e.id]=!0)),o=!0,s[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=Oe(ie(e),"float32");return ca.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const i=a.inputs[t];if(!ue(s.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=s;else{const t=e[i.id];e[i.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),ha);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){return ne(Ae(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;ne(t.every((e=>e instanceof Gs)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};t.forEach(((e,t)=>{r[t]=e}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),ne(n.value instanceof Gs,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),ne(Ae(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];ne(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),ne(a.every((e=>e instanceof Gs)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=$s(),n=await this.backend.time(e);return n.wallMs=$s()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new oa;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function la(){const e=Ke();if(null==e._tfengine){const t=new Ue(e);e._tfengine=new ua(t)}var t;return t=e._tfengine.ENV,qe=t,Vs=()=>e._tfengine,e._tfengine}ua.nextTensorId=0,ua.nextVariableId=0;const ca=la();function ha(e,t){const n={a:e,b:t};return ca.runKernel(Qe,n)}function pa(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function da(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const fa=je();function ma(e,t){let n=e;if(Ie(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Ie(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&je().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&ga(e,r,[]),r}function ga(e,t,n){if(n=n||[],!Array.isArray(e)&&!Ie(e))return void ne(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));ne(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),ne(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let t=0;t<e.length;++t)ga(e[t],r,n.concat(t))}function ya(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function ba(e,t,n,r="numeric"){if(e instanceof Gs)return ya(r,e.dtype,t,n),e;let s=Ee(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),ya(r,s,t,n),null==e||!Ie(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=ma(e,s);Ie(e)||Array.isArray(e)||(e=[e]);const i="string"!==s?Ts(e,s):ae(e,[],!0);return ca.makeTensor(i,a,s)}function xa(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>ba(e,`${t}[${s}]`,n,r)))}fa.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),fa.registerFlag("IS_BROWSER",(()=>da())),fa.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),fa.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),fa.registerFlag("PROD",(()=>!1)),fa.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>fa.getBool("DEBUG"))),fa.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),fa.registerFlag("IS_TEST",(()=>!1)),fa.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),fa.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1));const wa="__op";function va(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=wa;const s=(...e)=>{ca.startScope(n);try{const t=r(...e);return Ve(t)&&console.error("Cannot return a Promise inside of tidy."),ca.endScope(t),t}catch(e){throw ca.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const ka=va({complex_:function(e,t){const n=ba(e,"real","complex"),r=ba(t,"imag","complex");re(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return ca.runKernel(vt,s)}});function Ia(e,t,n,r){if(null==r&&(r=Ee(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Ie(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ze(t);const e=ie(t),r=ie(n);ne(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==ie(t.slice(e));ne(n[e]===t[e]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Ie(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?Ts(e,r):ae(e,[],!0),ca.makeTensor(e,t,r)}function Na(e,t,n){return Ia(e,t,ma(e,n),n)}const Sa={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Ca(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const i=s[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const u={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=4,r.set(n,s),s+=n.length}e(r)}));r.push(e)}else r.push(o.data());null!=t&&(u.group=t),n.push(u)}return{data:$a(await Promise.all(r)),specs:n}}function Ta(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,u=ie(o);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Sa[n.dtype],c=e.slice(s,s+u*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Ma()),l=r(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*o}else if("string"===i){const t=ie(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+4))[0];s+=4;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=Sa[i],a=e.slice(s,s+u*r);if("float32"===i)l=new Float32Array(a);else if("int32"===i)l=new Int32Array(a);else if("bool"===i)l=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=Na(e,o,"float32"),i=Na(r,o,"float32");n[t]=ka(s,i),s.dispose(),i.dispose()}}s+=u*r}"complex64"!==i&&(n[t]=Na(l,o,i))}return n}function $a(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const Ea="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Aa(e){return Ea?Buffer.byteLength(e):new Blob([e]).size}function Ra(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function _a(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function Fa(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function Da(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[r,s]=await t(e.weightsManifest);n.weightSpecs=r,n.weightData=s}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function Oa(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Aa(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Aa(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Ma(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const i=r[s],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[s]=o}return new Float32Array(s)}}class La{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==La.instance&&(La.instance=new La),La.instance}static registerSaveRouter(e){La.getInstance().saveRouters.push(e)}static registerLoadRouter(e){La.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return La.getHandlers(e,"save")}static getLoadHandlers(e,t){return La.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?La.getInstance().loadRouters:La.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const za=e=>La.registerSaveRouter(e),Ba=e=>La.registerLoadRouter(e),Pa=e=>La.getSaveHandlers(e),Va=(e,t)=>La.getLoadHandlers(e,t),Wa="tensorflowjs",Ua="models_store",Ga="model_info_store";function ja(){if(!je().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Ha(e){const t=e.result;t.createObjectStore(Ua,{keyPath:"modelPath"}),t.createObjectStore(Ga,{keyPath:"modelPath"})}class qa{constructor(e){if(this.indexedDB=ja(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(Wa,1);r.onupgradeneeded=()=>Ha(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(Ua,"readonly"),r=t.objectStore(Ua).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=Oa(t),a=s.transaction(Ga,"readwrite");let i=a.objectStore(Ga);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;o.onsuccess=()=>{u=s.transaction(Ua,"readwrite");const o=u.objectStore(Ua).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});o.onsuccess=()=>e({modelArtifactsInfo:r}),o.onerror=e=>{i=a.objectStore(Ga);const t=i.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(o.error)),t.onerror=e=>(s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}qa.URL_SCHEME="indexeddb://";const Ka=e=>{return je().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(qa.URL_SCHEME)?(t=e.slice(qa.URL_SCHEME.length),new qa(t)):null;var t};La.registerSaveRouter(Ka),La.registerLoadRouter(Ka);class Xa{constructor(){this.indexedDB=ja()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Wa,1);n.onupgradeneeded=()=>Ha(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(Ga,"readonly"),a=s.objectStore(Ga).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(qa.URL_SCHEME)?t.slice(qa.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(Wa,1);r.onupgradeneeded=()=>Ha(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(Ga,"readwrite"),i=a.objectStore(Ga),o=i.get(e);let u;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=i.delete(e),a=()=>{u=s.transaction(Ua,"readwrite");const r=u.objectStore(Ua).delete(e);r.onsuccess=()=>t(o.result.modelArtifactsInfo),r.onerror=e=>n(o.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(o.error))}},o.onerror=e=>(s.close(),n(o.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const Ya="/",Za="tensorflowjs_models",Ja="info",Qa="model_topology",ei="weight_specs",ti="weight_data",ni="model_metadata";function ri(e){return{info:[Za,e,Ja].join(Ya),topology:[Za,e,Qa].join(Ya),weightSpecs:[Za,e,ei].join(Ya),weightData:[Za,e,ti].join(Ya),modelMetadata:[Za,e,ni].join(Ya)}}function si(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function ai(e){const t=e.split(Ya);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Ya)}class ii{constructor(e){if(!je().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ri(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Oa(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Ea)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw si(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Ea){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}ii.URL_SCHEME="localstorage://";const oi=e=>{return je().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ii.URL_SCHEME)?(t=e.slice(ii.URL_SCHEME.length),new ii(t)):null;var t};La.registerSaveRouter(oi),La.registerLoadRouter(oi);class ui{constructor(){ne(je().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),ne("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Za+Ya,n=Ya+Ja;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[ai(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=ri(e=(t=e).startsWith(ii.URL_SCHEME)?t.slice(ii.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return si(n),r}}const li="://";class ci{constructor(){this.managers={}}static getInstance(){return null==ci.instance&&(ci.instance=new ci),ci.instance}static registerManager(e,t){ne(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(li)&&(e=e.slice(0,e.indexOf(li))),ne(e.length>0,(()=>"scheme must not be an empty string."));const n=ci.getInstance();ne(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function hi(e){if(-1===e.indexOf(li))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${ci.getSchemes().join(",")}`);return{scheme:e.split(li)[0],path:e.split(li)[1]}}async function pi(e,t,n=!1){ne(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=La.getLoadHandlers(e);ne(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),ne(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=La.getSaveHandlers(t);ne(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),ne(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const i=a[0],o=hi(e).scheme,u=hi(e).path,l=o===hi(e).scheme,c=await s.load();n&&l&&await ci.getManager(o).removeModel(u);const h=await i.save(c);return n&&!l&&await ci.getManager(o).removeModel(u),h.modelArtifactsInfo}async function di(){const e=ci.getSchemes(),t={};for(const n of e){const e=await ci.getManager(n).listModels();for(const r in e){t[n+li+r]=e[r]}}return t}async function fi(e){const t=hi(e);return ci.getManager(t.scheme).removeModel(t.path)}async function mi(e,t){return pi(e,t,!1)}async function gi(e,t){return pi(e,t,!0)}class yi{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(je().get("IS_BROWSER")){je().setPlatform("browser",new yi);try{ci.registerManager(ii.URL_SCHEME,new ui)}catch(e){}try{ci.registerManager(qa.URL_SCHEME,new Xa)}catch(e){}}const bi=()=>n(8352);let xi;class wi{constructor(){this.util=n(1758),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=je().global.fetch?je().global.fetch(e,t):(null==xi&&(xi=bi()),xi(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function vi(e,t="float32",n){return t=t||"float32",ze(e),new Ps(e,t,n)}je().get("IS_NODE")&&je().setPlatform("node",new wi);const ki=va({cast_:function(e,t){const n=ba(e,"x","cast");if(!ve(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return ca.runKernel(bt,r,s)}});const Ii=va({clone_:function(e){const t={x:ba(e,"x","clone","string_or_numeric")};return ca.runKernel(ln,t)}});function Ni(e,t=!1){console.log(e.toString(t))}la();Ws={buffer:vi,cast:ki,clone:Ii,print:Ni};function Si(e){return new Promise((e=>setTimeout(e))).then(e)}class Ci{constructor(e){if(!je().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ci.URL_SCHEME)&&(e=e.slice(Ci.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Fa(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Si((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Si((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Oa(e)}}}}Ci.URL_SCHEME="downloads://";class Ti{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Da(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,Ra(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>_a(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=_a(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function $i(e){return new Ti(e)}function Ei(e,t,n,r){!function(e){ne(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){ne(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),ne(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),ne(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++s/e.length*(r-n);return t(i),a})),a))))}async function Ai(e,t){null==t&&(t={});const n=null==t.fetchFunc?je().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await Ei(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await Ei(s,t.onProgress,.5,1)}async function Ri(e,t="",n,r){return _i((e=>Ai(e,{requestInit:r})))(e,t,n)}function _i(e){return async(t,n="",r)=>{const s=t.map((()=>!1)),a={},i=null!=r?r.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=Sa[u]*ie(e.shape),c=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=l}))})),!i.every((e=>e))){const e=r.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),h={};let p=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=c[p+e].byteLength;const s=new ArrayBuffer(r),i=new Uint8Array(s);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=Ta(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}La.registerSaveRouter((e=>je().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ci.URL_SCHEME)?function(e="model"){return new Ci(e)}(e.slice(Ci.URL_SCHEME.length)):null));class Fi{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(ne("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=je().platform.fetch,ne(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&ne(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Fa(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Oa(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Da(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(s+e+r);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,Ra(await Ai(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Di(e){return null!=e.match(Fi.URL_SCHEME_REGEX)}Fi.URL_SCHEME_REGEX=/^https?:\/\//;const Oi=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Di(e))):Di(e),n)return Mi(e,t)}return null};function Mi(e,t){return new Fi(e,t)}function Li(e,t){return Mi(e,t)}La.registerSaveRouter(Oi),La.registerLoadRouter(Oi);class zi{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class Bi{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function Pi(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new zi(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new zi({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new zi({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Vi(e){return new Bi(e)}const Wi=va({matMul_:function(e,t,n=!1,r=!1){let s=ba(e,"a","matMul"),a=ba(t,"b","matMul");[s,a]=ta(s,a);const i={a:s,b:a},o={transposeA:n,transposeB:r};return ca.runKernel(ft,i,o)}});const Ui=va({oneHot_:function(e,t,n=1,r=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s={indices:ba(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:r};return ca.runKernel(qn,s,a)}});const Gi=va({transpose_:function(e,t){const n=ba(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),ne(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{ne(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:t};return ca.runKernel(Gr,r,s)}});const ji=va({confusionMatrix_:function(e,t,n){const r=ba(e,"labels","confusionMatrix"),s=ba(t,"predictions","confusionMatrix");ne(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),ne(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),ne(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),ne(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),ne(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=Ui(ki(r,"int32"),n),i=Ui(ki(s,"int32"),n),o=Gi(a),u=Wi(o,i);return ki(u,"int32")}});function Hi(e,t,n){if(se(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=ma(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ia(e,t,r,n)}let qi;function Ki(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,s=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)s=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(s){const t=2;if(s&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=rs(Yr,ca.backendName)){const n={pixels:e},r={numChannels:t};return ca.runKernel(Yr,n,r)}const[u,l]=s?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,u,l).data:r||n?c=e.data:(a||s||o)&&(null==qi&&(qi=document.createElement("canvas").getContext("2d")),qi.canvas.width=u,qi.canvas.height=l,qi.drawImage(e,0,0,u,l),c=qi.getImageData(0,0,u,l).data),4===t)h=new Int32Array(c);else{const e=u*l;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return Hi(h,[l,u,t],"int32")}function Xi(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function Yi(e,t=3){let n=null;if(je().getBool("WRAP_TO_IMAGEBITMAP")&&Xi(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return Ki(n,t)}async function Zi(e,t){let n=ba(e,"img","toPixels");if(!(e instanceof Gs)){const e=n;n=ki(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,u=new Uint8ClampedArray(s*r*4);for(let e=0;e<r*s;++e){const t=[0,0,0,255];for(let r=0;r<a;r++){const s=i[e*a+r];if("float32"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===a?(t[0]=s*o,t[1]=s*o,t[2]=s*o):t[r]=s*o}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=s,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,s,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const Ji=va({fromPixels_:Ki});function Qi(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===ie(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const s=t.shape,a=s[s.length-1];let i=1;for(let e=0;e<s.length-1;++e)i*=s[e];const o=e.shape,u=s.slice();u.pop();let l=1;for(let e=a;e<n;++e)l*=o[e],u.push(o[e]);const c=[..._e(e.shape).map((e=>e/l)),1].slice(0,a);return[u,i,l,c]}function eo(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}function to(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}eo(n,t,e)}function no(e,t,n){const r=t.shape.length,s=r>1?t.shape[r-1]:1,a=n.length;let i=1;for(let e=s;e<a;++e)i*=n[e];const o=s<1?1:s;return{sliceRank:s,numUpdates:ie(t.shape)/o,sliceSize:i,strides:[..._e(n.slice(0,s)),1],outputSize:ie(n)}}function ro(e,t,n){const r=e.shape.length;ne(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),ne(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)ne(t[s]+n[s]<=e.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${t[s]+n[s]}) would overflow input.shape[${s}] (${e.shape[s]})`))}function so(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function ao(e,t,n){const r=[];for(let s=0;s<e.length;s++)r[s]=Math.ceil((t[s]-e[s])/n[s]);return r}function io(e,t,n,r){const s=[...e];for(let e=s.length;e<r.length;e++)s.push(1);for(let e=0;e<n;e++)0===e?s[t]=1:(s.splice(t,0,1),s.pop());return s}function oo(e,t,n){return n<=e?n:n-(t-1)}function uo(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function lo(e,t,n,r,s,a,i,o,u){const l=e.length;let c=new Array(l),h=new Array(l),p=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=co(i,u,l,r,e),h=ho(o,u,l,s,e),p=io(a,u,l,e)}else for(let t=0;t<l;t++)c[t]=fo(i,r,a,e,t,u),h[t]=mo(o,s,a,e,t,u),p[t]=po(a,t,u);return{begin:c,end:h,strides:p}}function co(e,t,n,r,s){const a=[...s],i=uo(n,t);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=0;else{const i=oo(t,n,s);let o=r[i];e&1<<i&&(o=0),a[s]=o}return a}function ho(e,t,n,r,s){const a=[...s],i=uo(n,t);for(let s=0;s<a.length;s++)if(i.indexOf(s)>-1)a[s]=Number.MAX_SAFE_INTEGER;else{const i=oo(t,n,s);let o=r[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[s]=o}for(let e=0;e<a.length;e++){const t=s[e];a[e]<0&&(a[e]+=t),a[e]=Y(0,a[e],s[e])}return a}function po(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function fo(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=Y(0,i,u-1),i}function mo(e,t,n,r,s,a){let i=t[s];const o=n[s]||1;(e&1<<s||a&1<<s||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[s];return i<0&&(i+=u),i=o>0?Y(0,i,u):Y(-1,i,u-1),i}function go(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let s=r+1;s<n.length;s++)if(t[s]>0||n[s]!==e[s])return!1;return!0}function yo(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function bo(e,t,n){let r;const s=e.shape.length;let a;return r="number"==typeof t?[t,...new Array(s-1).fill(0)]:t.length<s?t.concat(new Array(s-t.length).fill(0)):t.slice(),r.forEach((e=>{ne(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(s).fill(-1):"number"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(ne(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,a]}function xo(e,t,n,r,s,a,i,o,u){let l=t.slice(),c=n.slice(),h=r;null==r&&(h=new Array(l.length));const p=so(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-l.length,f=so(o),m=e.slice();f.forEach((e=>{l[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=lo(m,p,d,l,c,h,s,a,i);l=g,c=y,h=b;const x=so(u);x.forEach((e=>{c[e]=l[e]+1,h[e]=1}));const w=ao(l,c,h),v=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:l,$end:c,$strides:h,size:w,newShape:m,outShape:v}}class wo{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class vo{constructor(){this.classNameMap={}}static getMap(){return null==vo.instance&&(vo.instance=new vo),vo.instance}static register(e){vo.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function ko(e){ne(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),ne("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),ne(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),vo.register(e)}const Io=.1;function No(e,t,n){return null==n&&(n=So()),Co(e,t,((e,t)=>Ao(e,t,n)))}function So(){return 32===ca.backend.floatPrecision()?.001:Io}function Co(e,t,n){let r=!0;if((Ie(e)||Ie(t))&&(r=!1),Ie(e)&&Ie(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=ma(e),r=ma(t);if(!ue(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=Ie(e)?e:ae(e),a=Ie(t)?t:ae(t);if(s.length!==a.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${a.length}.\nActual:   ${s}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=s[e],r=a[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${s}.\nExpected: ${a}.`)}}function To(e,t){e().then((()=>t.fail()),(()=>t()))}function $o(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Ce(e)||Ce(e[0])||Ce(t)||Ce(t[0])?Co(e,n,((e,t)=>e==t)):Co(e,t,((e,t)=>Ao(e,t,0)))}function Eo(e,t,n){if(null==n&&(n=So()),!Ao(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Ao(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Ro(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function _o(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function Fo(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Fo(n):e[t]=As(n)}return e}const Do="3.8.0";function Oo(){je().set("PROD",!0)}function Mo(){je().set("DEBUG",!0)}function Lo(){je().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function zo(e){je().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Bo(){ca.disposeVariables()}function Po(){return ca}function Vo(){return ca.memory()}function Wo(e){return ca.profile(e)}function Uo(e,t){return ca.tidy(e,t)}function Go(e){sa(e).forEach((e=>e.dispose()))}function jo(e){return ca.keep(e)}function Ho(e){return ca.time(e)}function qo(e){return ca.setBackend(e)}function Ko(){return ca.ready()}function Xo(){return ca.backendName}function Yo(e){ca.removeBackend(e)}function Zo(e){return ca.findBackend(e)}function Jo(e){return ca.findBackendFactory(e)}function Qo(e,t,n=1){return ca.registerBackend(e,t,n)}function eu(){return ca.backend}function tu(e,t){je().setPlatform(e,t)}Us=zo;const nu=va({add_:function(e,t){let n=ba(e,"a","add"),r=ba(t,"b","add");[n,r]=ta(n,r);const s={a:n,b:r};return ca.runKernel(Qe,s)}});const ru=va({floorDiv_:function(e,t){let n=ba(e,"a","floorDiv"),r=ba(t,"b","floorDiv");[n,r]=ta(n,r);const s={a:n,b:r};return ca.runKernel(nn,s)}});const su=va({div_:function(e,t){let n=ba(e,"a","div"),r=ba(t,"b","div");if([n,r]=ta(n,r),"int32"===n.dtype&&"int32"===r.dtype)return ru(n,r);const s={a:n,b:r};return ca.runKernel(Ut,s,{})}});const au=va({mul_:function(e,t){let n=ba(e,"a","mul"),r=ba(t,"b","mul");[n,r]=ta(n,r);const s={a:n,b:r};return ca.runKernel(Pn,s)}});const iu=va({sqrt_:function(e){const t={x:ba(e,"x","sqrt")};return ca.runKernel(kr,t)}});const ou=va({square_:function(e){const t=ba(e,"x","square");return ca.runKernel("Square",{x:t},{})}});const uu=va({zerosLike_:function(e){const t={x:ba(e,"x","zerosLike")};return ca.runKernel(Kr,t)}});function lu(e){return ne(Ae(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const r=ba(t,"x","tf.grad","string_or_numeric"),s=null!=n?ba(n,"dy","tf.grad"):null;return ca.tidy((()=>{const{value:t,grads:n}=ca.gradients((()=>e(r)),[r],s);return null!=s&&re(t.shape,s.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),mu(n),n[0]}))}}function cu(e){return ne(Ae(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{ne(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const r=xa(t,"args","tf.grads","string_or_numeric"),s=null!=n?ba(n,"dy","tf.grads"):null;return ca.tidy((()=>{const{value:t,grads:n}=ca.gradients((()=>e(...r)),r,s);return null!=s&&re(t.shape,s.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),mu(n),n}))}}function hu(e){return ne(Ae(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{ne(t instanceof Gs,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),ne(null==n||n instanceof Gs,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:r,value:s}=ca.gradients((()=>e(t)),[t],n);return mu(r),{grad:r[0],value:s}}}function pu(e){return ne(Ae(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{ne(Array.isArray(t)&&t.every((e=>e instanceof Gs)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),ne(null==n||n instanceof Gs,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const r=ca.gradients((()=>e(...t)),t,n);return null!=n&&re(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),mu(r.grads),r}}function du(e,t){ne(Ae(e),(()=>"The f passed in variableGrads(f) must be a function")),ne(null==t||Array.isArray(t)&&t.every((e=>e instanceof Hs)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in ca.registeredVariables)t.push(ca.registeredVariables[e])}const r=n?t.filter((e=>!e.trainable)):null,s=t.length;ne((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:a,grads:i}=ca.gradients(e,t,null,!0);ne(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),ne(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=r&&r.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function fu(e){return ca.customGrad(e)}function mu(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function gu(e,t){if((Ie(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Ie(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ia(e,[],[],t)}class yu extends wo{minimize(e,t=!1,n){const{value:r,grads:s}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:s[e.name]})));this.applyGradients(e)}else this.applyGradients(s);return Go(s),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return du(e,t)}dispose(){null!=this.iterations_&&Go(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:gu(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(yu,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class bu extends yu{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=ca.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ca.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Uo((()=>uu(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Uo((()=>uu(r).variable(false)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Uo((()=>{const e=nu(au(a,this.rho),au(ou(s),1-this.rho)),t=au(su(iu(nu(i,this.epsilon)),iu(nu(a,this.epsilon))),s),n=nu(au(i,this.rho),au(ou(t),1-this.rho));a.assign(e),i.assign(n);const o=nu(au(t,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Go(this.accumulatedGrads.map((e=>e.variable))),Go(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function xu(e,t,n){const r={shape:e,value:t,dtype:n};return ca.runKernel(Qt,{},r)}bu.className="Adadelta",ko(bu);class wu extends yu{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ca.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Uo((()=>xu(r.shape,this.initialAccumulatorValue).variable(e)))}}const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=this.accumulatedGrads[n].variable;Uo((()=>{const e=nu(a,ou(s));a.assign(e);const t=nu(au(su(s,iu(nu(e,ca.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Go(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}wu.className="Adagrad",ko(wu);const vu=va({pow_:function(e,t){let n=ba(e,"base","pow"),r=ba(t,"exp","pow");[n,r]=ta(n,r);const s={a:n,b:r};return ca.runKernel(Zn,s)}});const ku=va({sub_:function(e,t){let n=ba(e,"a","sub"),r=ba(t,"b","sub");[n,r]=ta(n,r);const s={a:n,b:r};return ca.runKernel(zr,s)}});class Iu extends yu{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Uo((()=>{this.accBeta1=gu(t).variable(),this.accBeta2=gu(n).variable()})),null==r&&(this.epsilon=ca.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Uo((()=>{const n=ku(1,this.accBeta1),r=ku(1,this.accBeta2);t.forEach(((t,s)=>{const a=ca.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:Uo((()=>uu(a).variable(false)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${t}/v`,variable:Uo((()=>uu(a).variable(false)))});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedSecondMoment[s].variable,l=nu(au(o,this.beta1),au(i,1-this.beta1)),c=nu(au(u,this.beta2),au(ou(i),1-this.beta2)),h=su(l,n),p=su(c,r);o.assign(l),u.assign(c);const d=nu(au(su(h,nu(iu(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(au(this.accBeta1,this.beta1)),this.accBeta2.assign(au(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Go(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Go(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Uo((()=>{this.accBeta1.assign(vu(this.beta1,this.iterations_+1)),this.accBeta2.assign(vu(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Iu.className="Adam",ko(Iu);const Nu=va({abs_:function(e){const t=ba(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return ca.runKernel(kt,e)}{const e={x:t};return ca.runKernel(Ye,e)}}});function Su(e,t){const n=e.length,r=[];for(let s=0;s<n;s++){const a=n-1-s,i=e[a]||1;(t[t.length-1-s]||1)>1&&1===i&&r.unshift(a)}return r}function Cu(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,i=t[a];(null==s||1===s&&i>1)&&n.unshift(a)}return n}function Tu(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}const $u=va({maximum_:function(e,t){let n=ba(e,"a","maximum"),r=ba(t,"b","maximum");[n,r]=ta(n,r),"bool"===n.dtype&&(n=ki(n,"int32"),r=ki(r,"int32")),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel($n,s)}});class Eu extends yu{constructor(e,t,n,r=null,s=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Uo((()=>{this.iteration=gu(0).variable(),this.accBeta1=gu(t).variable()})),null==r&&(this.epsilon=ca.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Uo((()=>{const n=ku(1,this.accBeta1),r=su(-this.learningRate,nu(au(this.iteration,this.decay),1));t.forEach(((t,s)=>{const a=ca.registeredVariables[t];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${t}/m`,variable:uu(a).variable(false)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${t}/v`,variable:uu(a).variable(false)});const i=Array.isArray(e)?e[s].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[s].variable,u=this.accumulatedWeightedInfNorm[s].variable,l=nu(au(o,this.beta1),au(i,1-this.beta1)),c=au(u,this.beta2),h=Nu(i),p=$u(c,h);o.assign(l),u.assign(p);const d=nu(au(su(r,n),su(l,nu(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(nu(this.iteration,1)),this.accBeta1.assign(au(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Go(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Go(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Eu.className="Adamax",ko(Eu);class Au extends yu{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const s=ca.registeredVariables[t];Uo((()=>{const e=nu(au(this.c,r),s);s.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=jo(gu(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Au.className="SGD",ko(Au);class Ru extends Au{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=gu(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ca.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Uo((()=>uu(r).variable(e)))}}const s=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Uo((()=>{let e;const t=nu(au(this.m,s),a);e=this.useNesterov?nu(au(this.c,nu(a,au(t,this.m))),r):nu(au(this.c,t),r),s.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Go(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Ru.className="Momentum",ko(Ru);class _u extends yu{constructor(e,t=.9,n=0,r=null,s=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=ca.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=ca.registeredVariables[t],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Uo((()=>uu(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Uo((()=>uu(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Uo((()=>uu(r).variable(s)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Uo((()=>{const e=nu(au(i,this.decay),au(ou(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,s=nu(au(t,this.decay),au(a,1-this.decay)),u=su(au(a,this.learningRate),iu(ku(e,nu(ou(s),this.epsilon)))),l=nu(au(o,this.momentum),u);i.assign(e),t.assign(s),o.assign(l);const c=ku(r,l);r.assign(c)}else{const e=nu(au(i,this.decay),au(ou(a),1-this.decay)),t=nu(au(o,this.momentum),su(au(a,this.learningRate),iu(nu(e,this.epsilon))));i.assign(e),o.assign(t);const n=ku(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Go(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Go(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Go(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}_u.className="RMSProp",ko(_u);const Fu=va({acos_:function(e){const t={x:ba(e,"x","acos")};return ca.runKernel(Ze,t)}});const Du=va({acosh_:function(e){const t={x:ba(e,"x","acosh")};return ca.runKernel(Je,t)}});const Ou=va({addN_:function(e){ne(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),ne(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>ba(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!ue(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return ca.runKernel(et,r)}});const Mu=va({all_:function(e,t=null,n=!1){const r={x:ba(e,"x","all","bool")},s={axis:t,keepDims:n};return ca.runKernel(tt,r,s)}});const Lu=va({any_:function(e,t=null,n=!1){const r={x:ba(e,"x","any","bool")},s={axis:t,keepDims:n};return ca.runKernel(nt,r,s)}});const zu=va({argMax_:function(e,t=0){const n={x:ba(e,"x","argMax")},r={axis:t};return ca.runKernel(rt,n,r)}});const Bu=va({argMin_:function(e,t=0){const n={x:ba(e,"x","argMin")},r={axis:t};return ca.runKernel(st,n,r)}});const Pu=va({asin_:function(e){const t={x:ba(e,"x","asin")};return ca.runKernel(at,t)}});const Vu=va({asinh_:function(e){const t={x:ba(e,"x","asinh")};return ca.runKernel(it,t)}});const Wu=va({atan_:function(e){const t={x:ba(e,"x","atan")};return ca.runKernel(ot,t)}});const Uu=va({atan2_:function(e,t){let n=ba(e,"a","atan2"),r=ba(t,"b","atan2");[n,r]=ta(n,r);const s={a:n,b:r};return ca.runKernel(lt,s)}});const Gu=va({atanh_:function(e){const t={x:ba(e,"x","atanh")};return ca.runKernel(ut,t)}});function ju(e,t,n,r,s="NHWC",a){return Ku(e,[...t,e[3]],n,a,r,null,null,rl(s))}function Hu(e,t,n,r,s,a,i="channelsLast"){const[o,u]=Zu(t);let l;if("channelsLast"===i)l=[o,u,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);l=[o,u,e[1],e[1]]}return Ku(e,l,n,r,s,a,!1,i)}function qu(e,t,n,r,s,a,i="NDHWC"){const[o,u,l]=Ju(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,u,l,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,u,l,e[1],e[1]]}return Xu(e,c,n,r,s,!1,h,a)}function Ku(e,t,n,r,s,a,i=!1,o="channelsLast"){let[u,l,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,h,l,c]=e}const[p,d,,f]=t,[m,g]=Zu(n),[y,b]=Zu(r),x=Qu(p,y),w=Qu(d,b),{padInfo:v,outHeight:k,outWidth:I}=function(e,t,n,r,s,a,i,o,u){let l,c,h;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Yu(e,t,n));const a=e[0],i=e[1],o=el((a-t+2*r)/n+1,s),u=el((i-t+2*r)/n+1,s);return[o,u]}([t,n],a,r,e,o);c=s[0],h=s[1]}else if("same"===e){c=Math.ceil(t/r),h=Math.ceil(n/s);const e=Math.max(0,(c-1)*r+a-t),o=Math.max(0,(h-1)*s+i-n),u=Math.floor(e/2),p=e-u,d=Math.floor(o/2);l={top:u,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/r),h=Math.ceil((n-i+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=el((t-a+p+d)/r+1,o),h=el((n-i+f+m)/s+1,o)}}return{padInfo:l,outHeight:c,outWidth:h}}(s,l,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[u,N,k,I]:"channelsLast"===o&&(S=[u,k,I,N]),{batchSize:u,dataFormat:o,inHeight:l,inWidth:c,inChannels:h,outHeight:k,outWidth:I,outChannels:N,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Xu(e,t,n,r,s,a=!1,i="channelsLast",o){let[u,l,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,l,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,p,l,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Ju(n),[w,v,k]=Ju(r),I=Qu(d,w),N=Qu(f,v),S=Qu(m,k),{padInfo:C,outDepth:T,outHeight:$,outWidth:E}=function(e,t,n,r,s,a,i,o,u,l,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,s,a){null==s&&(s=Yu(e,t,r));const i=e[0],o=e[1],u=e[2],l=el((i-t+2*s)/r+1,a),c=el((o-t+2*s)/r+1,a),h=el((u-t+2*s)/r+1,a);return[l,c,h,n]}([t,n,r,1],o,1,s,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/s),d=Math.ceil(n/a),f=Math.ceil(r/i);const e=(p-1)*s+o-t,c=(d-1)*a+u-n,m=(f-1)*i+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/s),d=Math.ceil((n-u+1)/a),f=Math.ceil((r-l+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(s,l,c,h,y,b,x,I,N,S,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[u,A,T,$,E]:"channelsLast"===i&&(R=[u,T,$,E,A]),{batchSize:u,dataFormat:i,inDepth:l,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:$,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:R,filterShape:t}}function Yu(e,t,n,r=1){const s=Qu(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}function Zu(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Ju(e){return"number"==typeof e?[e,e,e]:e}function Qu(e,t){return t<=1?e:e+(e-1)*(t-1)}function el(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function tl(e){const[t,n,r]=Zu(e);return 1===t&&1===n&&1===r}function nl(e,t){return tl(e)||tl(t)}function rl(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const sl=va({reshape_:function(e,t){const n={x:ba(e,"x","reshape","string_or_numeric")},r={shape:t};return ca.runKernel(sr,n,r)}});const al=va({avgPool_:function(e,t,n,r,s){const a=ba(e,"x","avgPool","float32");ne(nl(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=sl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ne(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=s&&ne(le(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:i},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let c=ca.runKernel(ct,u,l);return c=ki(c,a.dtype),o?sl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const il=va({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const i=ba(e,"x","avgPool3d","float32");let o=i,u=!1;4===i.rank&&(u=!0,o=sl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ne(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),ne("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=s&&ne(le(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:o},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let h=ca.runKernel(pt,l,c);return h=ki(h,o.dtype),u?sl(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const ol=va({concat_:function(e,t=0){ne(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=xa(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Ii(n[0]);const r=n,s={axis:t};return ca.runKernel(It,r,s)}});const ul=va({sigmoid_:function(e){const t={x:ba(e,"x","sigmoid")};return ca.runKernel(wr,t)}});const ll=va({slice_:function(e,t,n){const r=ba(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return ca.runKernel(gr,s,a)}});const cl=va({tanh_:function(e){const t={x:ba(e,"x","tanh")};return ca.runKernel(Pr,t)}});const hl=va({basicLSTMCell_:function(e,t,n,r,s,a){const i=ba(e,"forgetBias","basicLSTMCell"),o=ba(t,"lstmKernel","basicLSTMCell"),u=ba(n,"lstmBias","basicLSTMCell"),l=ba(r,"data","basicLSTMCell"),c=ba(s,"c","basicLSTMCell"),h=ba(a,"h","basicLSTMCell"),p=ol([l,h],1),d=Wi(p,o),f=nu(d,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=ll(f,[0,0],y),x=ll(f,[0,g],y),w=ll(f,[0,2*g],y),v=ll(f,[0,3*g],y),k=nu(au(ul(b),cl(x)),au(c,ul(nu(i,w))));return[k,au(cl(k),ul(v))]}});const pl=va({batchToSpaceND_:function(e,t,n){const r=ba(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));ne(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),ne(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),ne(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},i={blockShape:t,crops:n};return ca.runKernel(mt,a,i)}});const dl=va({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const i=ba(e,"x","batchNorm"),o=ba(t,"mean","batchNorm"),u=ba(n,"variance","batchNorm");let l,c;null!=s&&(l=ba(s,"scale","batchNorm")),null!=r&&(c=ba(r,"offset","batchNorm")),ne(o.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ne(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ne(null==l||o.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?sl(e,[1,1,1,e.size]):2===e.rank?sl(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?sl(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:l,offset:c,mean:o,variance:u},p={varianceEpsilon:a},d=ca.runKernel(rn,h,p);return sl(d,i.shape)}});const fl=va({batchNorm2d_:function(e,t,n,r,s,a){const i=ba(e,"x","batchNorm"),o=ba(t,"mean","batchNorm"),u=ba(n,"variance","batchNorm");let l,c;return null!=s&&(l=ba(s,"scale","batchNorm")),null!=r&&(c=ba(r,"offset","batchNorm")),ne(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),ne(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),ne(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&ne(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&ne(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),dl(i,o,u,c,l,a)}});const ml=va({batchNorm3d_:function(e,t,n,r,s,a){const i=ba(e,"x","batchNorm"),o=ba(t,"mean","batchNorm"),u=ba(n,"variance","batchNorm");let l,c;return null!=s&&(l=ba(s,"scale","batchNorm")),null!=r&&(c=ba(r,"offset","batchNorm")),ne(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),ne(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),ne(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&ne(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&ne(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),dl(i,o,u,c,l,a)}});const gl=va({batchNorm4d_:function(e,t,n,r,s,a){const i=ba(e,"x","batchNorm"),o=ba(t,"mean","batchNorm"),u=ba(n,"variance","batchNorm");let l,c;return null!=s&&(l=ba(s,"scale","batchNorm")),null!=r&&(c=ba(r,"offset","batchNorm")),ne(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),ne(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),ne(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&ne(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&ne(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),dl(i,o,u,c,l,a)}});const yl=va({bincount_:function(e,t,n){const r=ba(e,"x","bincount"),s=ba(t,"weights","bincount");ne("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),ne(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ne(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},i={size:n};return ca.runKernel(gt,a,i)}});const bl=va({broadcastTo_:function(e,t){let n=ba(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=sl(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Ii(n);const i={x:n},o={reps:a};return ca.runKernel(Vr,i,o)}});const xl=va({ceil_:function(e){const t={x:ba(e,"x","ceil")};return ca.runKernel(xt,t)}});const wl=va({clipByValue_:function(e,t,n){const r=ba(e,"x","clipByValue");ne(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:t,clipValueMax:n};return ca.runKernel(wt,s,a)}});const vl=va({concat1d_:function(e){return ol(e,0)}});const kl=va({concat2d_:function(e,t){return ol(e,t)}});const Il=va({concat3d_:function(e,t){return ol(e,t)}});const Nl=va({concat4d_:function(e,t){return ol(e,t)}});const Sl=va({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=ba(e,"x","conv2d"),u=ba(t,"filter","conv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=sl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ne(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),ne(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),null!=i&&ne(le(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h="NHWC"===s?l.shape[3]:l.shape[1];ne(h===u.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${u.shape[2]}.`)),ne(nl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:l,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},f=ca.runKernel(Nt,p,d);return c?sl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Cl=va({conv1d_:function(e,t,n,r,s="NWC",a=1,i){const o=ba(e,"x","conv1d"),u=ba(t,"filter","conv1d");let l=o,c=!1;2===o.rank&&(c=!0,l=sl(o,[1,o.shape[0],o.shape[1]])),ne(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),ne(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),null!=i&&ne(le(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),ne(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),ne(nl(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),ne("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=sl(u,[1,u.shape[0],u.shape[1],u.shape[2]]),p=sl(l,[l.shape[0],1,l.shape[1],l.shape[2]]),d=Sl(p,h,[1,n],r,"NHWC",[1,a],i);return sl(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Tl=va({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",i){ne(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,u=t,l=!1;3===t.rank&&(l=!0,u=sl(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),ne(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),ne(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),ne(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?u.shape[3]:u.shape[1];ne(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),ne(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&ne(le(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const p={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,inputShape:o},f=ca.runKernel(Ct,p,d);return l?sl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const $l=va({conv2dTranspose_:function(e,t,n,r,s,a){const i=ba(e,"x","conv2dTranspose"),o=ba(t,"filter","conv2dTranspose");return Tl(n,i,o,r,s,"NHWC",a)}});const El=va({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const i=ba(e,"x","conv3d"),o=ba(t,"filter","conv3d");let u=i,l=!1;4===i.rank&&(l=!0,u=sl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ne(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),ne(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),ne(u.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),ne(nl(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ne("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:u,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:a},p=ca.runKernel(Tt,c,h);return l?sl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Al=va({conv3DBackpropInput_:function(e,t,n,r,s){ne(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=sl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=i.shape[4];ne(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),ne(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),ne(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),ne(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),ne(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:s,strides:r,inputShape:a},p=ca.runKernel(Et,c,h);return o?sl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Rl=va({conv3dTranspose_:function(e,t,n,r,s){const a=ba(e,"x","conv3dTranspose"),i=ba(t,"filter","conv3dTranspose");return Al(n,a,i,r,s)}});const _l=va({cos_:function(e){const t={x:ba(e,"x","cos")};return ca.runKernel(At,t)}});const Fl=va({cosh_:function(e){const t={x:ba(e,"x","cosh")};return ca.runKernel(Rt,t)}});const Dl=va({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:ba(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return ca.runKernel(_t,s,a)}});const Ol=va({denseBincount_:function(e,t,n,r=!1){const s=ba(e,"x","denseBincount"),a=ba(t,"weights","denseBincount");ne("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),ne(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),ne(n>=0,(()=>`size must be non-negative, but got ${n}.`)),ne(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const i={x:s,weights:a},o={size:n,binaryOutput:r};return ca.runKernel(Dt,i,o)}});const Ml=va({depthToSpace_:function(e,t,n="NHWC"){const r=ba(e,"x","depthToSpace"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];ne(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),ne(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),ne(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`));const o={x:r},u={blockSize:t,dataFormat:n};return ca.runKernel(Ot,o,u)}});const Ll=va({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],i){const o=ba(e,"x","depthwiseConv2d"),u=ba(t,"filter","depthwiseConv2d");let l=o,c=!1;3===o.rank&&(c=!0,l=sl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),ne(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),ne(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),ne(l.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),null!=i&&ne(le(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:l,filter:u},p={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i},d=ca.runKernel(Mt,h,p);return c?sl(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const zl=va({diag_:function(e){const t={x:ba(e,"x","diag")};return ca.runKernel(Bt,t)}});const Bl=va({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const i=ba(e,"x","dilation2d"),o=ba(t,"filter","dilation2d");ne(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),ne(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),ne("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=i,l=!1;3===i.rank&&(u=sl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=!0);const c={x:u,filter:o},h={strides:n,pad:r,dilations:s},p=ca.runKernel(Pt,c,h);return l?sl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Pl=va({equal_:function(e,t){let n=ba(e,"a","equal","string_or_numeric"),r=ba(t,"b","equal","string_or_numeric");[n,r]=ta(n,r),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(Kt,s)}});const Vl=va({where_:function(e,t,n){const r=ba(t,"a","where"),s=ba(n,"b","where"),a=ba(e,"condition","where","bool"),i=Tu(Tu(a.shape,r.shape),s.shape),o={condition:bl(a,i),t:bl(r,i),e:bl(s,i)};return ca.runKernel(fr,o)}});const Wl=va({divNoNan_:function(e,t){let n=ba(e,"a","div"),r=ba(t,"b","div");[n,r]=ta(n,r);const s=su(n,r),a=uu(s),i=Pl(r,a);return Vl(i,a,s)}});const Ul=va({dot_:function(e,t){const n=ba(e,"t1","dot"),r=ba(t,"t2","dot");ne(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(ne(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=sl(n,[1,-1]),t=sl(r,[-1,1]),s=Wi(e,t);return sl(s,[])}if(1===n.rank&&2===r.rank){const e=sl(n,[1,-1]),t=sl(r,[r.shape[0],r.shape[1]]),s=Wi(e,t);return sl(s,[s.size])}if(2===n.rank&&1===r.rank){const e=sl(r,[-1,1]),t=Wi(n,e);return sl(t,[t.size])}{const e=sl(r,[r.shape[0],r.shape[1]]);return Wi(n,e)}}});const Gl=va({einsum_:function(e,...t){const n=t.map(((e,t)=>ba(e,`tensors${t}`,"einsum"))),r={equation:e};return ca.runKernel(Gt,n,r)}});const jl=va({elu_:function(e){const t={x:ba(e,"x","elu")};return ca.runKernel(jt,t)}});const Hl=va({erf_:function(e){let t=ba(e,"x","erf");ne("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=ki(t,"float32"));const n={x:t};return ca.runKernel(qt,n)}});const ql=va({exp_:function(e){const t={x:ba(e,"x","exp")};return ca.runKernel(Xt,t)}});const Kl=va({expandDims_:function(e,t=0){const n=ba(e,"x","expandDims","string_or_numeric");ne(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return ca.runKernel(Yt,r,s)}});const Xl=va({expm1_:function(e){const t={x:ba(e,"x","expm1")};return ca.runKernel(Zt,t)}});const Yl=va({tile_:function(e,t){const n=ba(e,"x","tile","string_or_numeric");ne(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return ca.runKernel(Vr,r,s)}});const Zl=va({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=vi([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const i=sl(s.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return Yl(Kl(i,0),[n[0],1,1]);if(2===n.length)return Yl(Kl(Kl(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Yl(Kl(Kl(Kl(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const Jl=va({floor_:function(e){const t={x:ba(e,"x","floor")};return ca.runKernel(tn,t)}});const Ql=va({gather_:function(e,t,n=0,r=0){const s={x:ba(e,"x","gather"),indices:ba(t,"indices","gather","int32")},a={axis:n,batchDims:r};return ca.runKernel(sn,s,a)}});const ec=va({greater_:function(e,t){let n=ba(e,"a","greater","string_or_numeric"),r=ba(t,"b","greater","string_or_numeric");[n,r]=ta(n,r),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(on,s)}});const tc=va({greaterEqual_:function(e,t){let n=ba(e,"a","greaterEqual","string_or_numeric"),r=ba(t,"b","greaterEqual","string_or_numeric");[n,r]=ta(n,r),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(un,s)}});const nc=va({imag_:function(e){const t={input:ba(e,"input","imag")};return ca.runKernel(hn,t)}});const rc=va({isFinite_:function(e){const t={x:ba(e,"x","isFinite")};return ca.runKernel(pn,t)}});const sc=va({isInf_:function(e){const t={x:ba(e,"x","isInf")};return ca.runKernel(dn,t)}});const ac=va({isNaN_:function(e){const t={x:ba(e,"x","isNaN")};return ca.runKernel(fn,t)}});const ic=va({leakyRelu_:function(e,t=.2){const n={x:ba(e,"x","leakyRelu")},r={alpha:t};return ca.runKernel(mn,n,r)}});const oc=va({less_:function(e,t){let n=ba(e,"a","less","string_or_numeric"),r=ba(t,"b","less","string_or_numeric");[n,r]=ta(n,r),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(gn,s)}});const uc=va({lessEqual_:function(e,t){let n=ba(e,"a","lessEqual","string_or_numeric"),r=ba(t,"b","lessEqual","string_or_numeric");[n,r]=ta(n,r),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(yn,s)}});function lc(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return ca.runKernel(bn,{},r)}const cc=va({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=ba(e,"x","localResponseNormalization");ne(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),ne(le(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=sl(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:i},l={depthRadius:t,bias:n,alpha:r,beta:s},c=ca.runKernel(Sn,u,l);return o?sl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const hc=va({log_:function(e){const t={x:ba(e,"x","log")};return ca.runKernel(xn,t)}});const pc=va({log1p_:function(e){const t={x:ba(e,"x","log1p")};return ca.runKernel(wn,t)}});const dc=va({neg_:function(e){const t={x:ba(e,"x","neg")};return ca.runKernel(Vn,t)}});const fc=va({softplus_:function(e){const t={x:ba(e,"x","softplus")};return ca.runKernel(vr,t)}});const mc=va({logSigmoid_:function(e){const t=ba(e,"x","logSigmoid");return fu((e=>({value:dc(fc(dc(e))),gradFunc:t=>au(t,ul(dc(e)))})))(t)}});const gc=va({max_:function(e,t=null,n=!1){const r={x:ba(e,"x","max")},s={reductionIndices:t,keepDims:n};return ca.runKernel(Tn,r,s)}});const yc=va({sum_:function(e,t=null,n=!1){let r=ba(e,"x","sum");"bool"===r.dtype&&(r=ki(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return ca.runKernel(Ir,s,a)}});const bc=va({logSoftmax_:function(e,t=-1){const n=ba(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return fu(((e,n)=>{const r=gc(e,t,!0),s=ku(e,r),a=ku(ki(s,"float32"),hc(yc(ql(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=ql(r);return ku(e,au(yc(e,t,!0),s))}}}))(n)}});function xc(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function wc(e,t,n){const r=e.length+t.length,s=[];let a=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(e[a++]):s.push(t[i++]);return s}function vc(e,t){const n=[],r=e.length;for(let s=0;s<r;s++)-1===t.indexOf(s)&&n.push(e[s]);return[n,t.map((t=>e[t]))]}function kc(e,t){return wc(e,t.map((e=>1)),t)}function Ic(e,t,n){ne(xc(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Nc(e,t){if(xc(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function Sc(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Cc(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const Tc=va({logSumExp_:function(e,t=null,n=!1){const r=ba(e,"x","logSumExp"),s=ge(t,r.shape),a=gc(r,s,!0),i=ku(r,a),o=ql(i),u=yc(o,s),l=hc(u),c=nu(sl(a,l.shape),l);if(n){const e=kc(c.shape,s);return sl(c,e)}return c}});const $c=va({logicalAnd_:function(e,t){const n=ba(e,"a","logicalAnd","bool"),r=ba(t,"b","logicalAnd","bool");Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(vn,s)}});const Ec=va({logicalNot_:function(e){const t={x:ba(e,"x","logicalNot","bool")};return ca.runKernel(kn,t)}});const Ac=va({logicalOr_:function(e,t){const n=ba(e,"a","logicalOr","bool"),r=ba(t,"b","logicalOr","bool");Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(In,s)}});const Rc=va({logicalXor_:function(e,t){const n=ba(e,"a","logicalXor","bool"),r=ba(t,"b","logicalXor","bool");return Tu(n.shape,r.shape),$c(Ac(e,t),Ec($c(e,t)))}});const _c=va({maxPool_:function(e,t,n,r,s){const a=ba(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=sl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ne(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),ne(nl(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&ne(le(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:i},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},c=ca.runKernel(En,u,l);return o?sl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Fc=va({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const i=ba(e,"x","maxPool3d");let o=i,u=!1;4===i.rank&&(u=!0,o=sl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),ne(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),ne("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),null!=s&&ne(le(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:o},c={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},h=ca.runKernel(Rn,l,c);return u?sl(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Dc=va({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:ba(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},o=ca.runKernel(Fn,a,i);return{result:o[0],indexes:o[1]}}});const Oc=va({mean_:function(e,t=null,n=!1){const r={x:ba(e,"x","mean")},s={axis:t,keepDims:n};return ca.runKernel(Dn,r,s)}});function Mc(e,t="float32"){if("complex64"===t){const t=Mc(e,"float32"),n=Mc(e,"float32");return ka(t,n)}const n=Me(ie(e),t);return ca.makeTensor(n,e,t)}function Lc(e,t="float32"){if("complex64"===t){const t=Lc(e,"float32"),n=Mc(e,"float32");return ka(t,n)}const n=Oe(ie(e),t);return ca.makeTensor(n,e,t)}function zc(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=ba(e,"x","meshgrid",e instanceof Gs?e.dtype:"float32");if(void 0===t)return[r];let s=ba(t,"y","meshgrid",t instanceof Gs?t.dtype:"float32");const a=ie(r.shape),i=ie(s.shape);return"xy"===n?(r=sl(r,[1,-1]),s=sl(s,[-1,1]),[Wi(Lc([i,1],r.dtype),r),Wi(s,Lc([1,a],s.dtype))]):(r=sl(r,[-1,1]),s=sl(s,[1,-1]),[Wi(r,Lc([1,i],r.dtype)),Wi(Lc([a,1],s.dtype),s)])}const Bc=va({min_:function(e,t=null,n=!1){const r={x:ba(e,"x","min")},s={axis:t,keepDims:n};return ca.runKernel(On,r,s)}});const Pc=va({minimum_:function(e,t){let n=ba(e,"a","minimum"),r=ba(t,"b","minimum");[n,r]=ta(n,r),"bool"===n.dtype&&(n=ki(n,"int32"),r=ki(r,"int32")),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(Mn,s)}});const Vc=va({mirrorPad_:function(e,t,n){ne("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=ba(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");ne(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)ne(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),ne(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},i={x:r};return ca.runKernel(Ln,i,a)}});const Wc=va({mod_:function(e,t){let n=ba(e,"a","mod"),r=ba(t,"b","mod");[n,r]=ta(n,r);const s={a:n,b:r};return ca.runKernel(zn,s)}});const Uc=va({moments_:function(e,t=null,n=!1){const r=ge(t,(e=ba(e,"x","moments")).shape),s=Oc(e,r,n);let a=s.shape;n||(a=kc(s.shape,r));const i=ou(ku(ki(e,"float32"),sl(s,a)));return{mean:s,variance:Oc(i,r,n)}}});const Gc=va({multiRNNCell_:function(e,t,n,r){const s=ba(t,"data","multiRNNCell"),a=xa(n,"c","multiRNNCell"),i=xa(r,"h","multiRNNCell");let o=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);u.push(n[0]),u.push(n[1]),o=n[1]}const l=[],c=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),c.push(u[e+1]);return[l,c]}});const jc=va({multinomial_:function(e,t,n,r=!1){const s=ba(e,"logits","multinomial"),a=s.size,i=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?sl(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=ca.runKernel(Bn,o,u);return 1===i?sl(l,[l.size]):l}});const Hc=va({notEqual_:function(e,t){let n=ba(e,"a","notEqual","string_or_numeric"),r=ba(t,"b","notEqual","string_or_numeric");[n,r]=ta(n,r),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(Wn,s)}});const qc=va({onesLike_:function(e){const t={x:ba(e,"x","onesLike")};return ca.runKernel(Hn,t)}});const Kc=va({outerProduct_:function(e,t){const n=ba(e,"v1","outerProduct"),r=ba(t,"v2","outerProduct");ne(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=sl(n,[-1,1]),a=sl(r,[1,-1]);return Wi(s,a)}});const Xc=va({pad_:function(e,t,n=0){const r=ba(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return ca.runKernel(Xn,a,s)}});const Yc=va({pad1d_:function(e,t,n=0){return ne(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),Xc(e,[t],n)}});const Zc=va({pad2d_:function(e,t,n=0){return ne(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Xc(e,t,n)}});const Jc=va({pad3d_:function(e,t,n=0){return ne(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Xc(e,t,n)}});const Qc=va({pad4d_:function(e,t,n=0){return ne(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Xc(e,t,n)}});const eh=va({spaceToBatchND_:function(e,t,n){const r=ba(e,"x","spaceToBatchND");ne(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),ne(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),ne(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]==0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return ca.runKernel(Nr,s,a)}});const th=va({pool_:function(e,t,n,r,s,a){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=ba(e,"x","maxPool");let o=i,u=!1;3===i.rank&&(u=!0,o=sl(i,[1,i.shape[0],i.shape[1],i.shape[2]])),ne(nl(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const l=Hu(o.shape,t,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),s=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],s[t]]))}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=s.map(((e,t)=>e+i[t])),u=t.map(((e,t)=>[r[t],o[t]])),l=t.map(((e,t)=>[0,i[t]]));return[u,l]}([l.inHeight,l.inWidth],c,h),m=p?r:"valid",g=p?o:eh(o,c,d),y=("avg"===n?()=>al(g,t,a,m):()=>_c(g,t,a,m))(),b=p?y:pl(y,c,f);return u?sl(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});const nh=va({prelu_:function(e,t){const n={x:ba(e,"x","prelu"),alpha:ba(t,"alpha","prelu")};return ca.runKernel(Jn,n)}});const rh=va({prod_:function(e,t=null,n=!1){let r=ba(e,"x","prod");"bool"===r.dtype&&(r=ki(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return ca.runKernel(Qn,s,a)}});const sh=va({rand_:function(e,t,n){const r=ie(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return ca.makeTensor(s,e,n)}});var ah=n(3129);class ih{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=ah.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*s*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class oh{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=ah.alea(s.toString()),this.randn=new ih(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class uh{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=ah.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const lh=va({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new oh(t,n,r,s),i=vi(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const ch=va({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new ih(t,n,r,!1,s),i=vi(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const hh=va({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=vi(e,r),i=new uh(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function ph(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return ca.runKernel(er,{},s)}const dh=va({real_:function(e){const t={input:ba(e,"input","real")};return ca.runKernel(tr,t)}});const fh=va({reciprocal_:function(e){const t={x:ba(e,"x","reciprocal")};return ca.runKernel(nr,t)}});const mh=va({relu_:function(e){const t={x:ba(e,"x","relu")};return ca.runKernel(rr,t)}});const gh=va({relu6_:function(e){const t={x:ba(e,"x","relu6")};return ca.runKernel(lr,t)}});const yh=va({reverse_:function(e,t){const n={x:ba(e,"x","reverse")},r={dims:t};return ca.runKernel(cr,n,r)}});const bh=va({reverse1d_:function(e){const t=ba(e,"x","reverse");return ne(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),yh(t,0)}});const xh=va({reverse2d_:function(e,t){const n=ba(e,"x","reverse");return ne(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),yh(n,t)}});const wh=va({reverse3d_:function(e,t){const n=ba(e,"x","reverse");return ne(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),yh(n,t)}});const vh=va({reverse4d_:function(e,t){const n=ba(e,"x","reverse");return ne(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),yh(n,t)}});const kh=va({round_:function(e){const t={x:ba(e,"x","round")};return ca.runKernel(hr,t)}});const Ih=va({rsqrt_:function(e){const t={x:ba(e,"x","rsqrt")};return ca.runKernel(pr,t)}});const Nh=va({selu_:function(e){const t={x:ba(e,"x","selu")};return ca.runKernel(mr,t)}});const Sh=va({separableConv2d_:function(e,t,n,r,s,a=[1,1],i="NHWC"){const o=ba(e,"x","separableConv2d"),u=ba(t,"depthwiseFilter","separableConv2d"),l=ba(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=sl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");ne(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),ne(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),ne(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),ne(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),ne(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const p=u.shape[2],d=u.shape[3];ne(l.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${l.shape[2]}.`));const f=Ll(c,u,r,s,i,a),m=Sl(f,l,1,"valid",i);return h?sl(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Ch=async function(e,t){const n=ba(e,"x","setdiff1d"),r=ba(t,"y","setdiff1d");ne(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),ne(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),ne(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),i=new Set(a);let o=0;for(let e=0;e<s.length;e++)i.has(s[e])||o++;const u=new Ps([o],n.dtype),l=new Ps([o],"int32");for(let e=0,t=0;e<s.length;e++)i.has(s[e])||(u.values[t]=s[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]};const Th=va({sign_:function(e){const t={x:ba(e,"x","sign")};return ca.runKernel(xr,t)}});const $h=va({sin_:function(e){const t={x:ba(e,"x","sin")};return ca.runKernel(yr,t)}});const Eh=va({sinh_:function(e){const t={x:ba(e,"x","sinh")};return ca.runKernel(br,t)}});const Ah=va({slice1d_:function(e,t,n){const r=ba(e,"x","slice1d");return ne(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),ll(r,[t],[n])}});const Rh=va({slice2d_:function(e,t,n){const r=ba(e,"x","slice2d");return ne(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),ll(r,t,n)}});const _h=va({slice3d_:function(e,t,n){const r=ba(e,"x","slice3d");return ne(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),ll(r,t,n)}});const Fh=va({slice4d_:function(e,t,n){const r=ba(e,"x","slice4d");return ne(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),ll(r,t,n)}});const Dh=va({softmax_:function(e,t=-1){const n=ba(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return ca.runKernel(Cr,r,s)}});const Oh=va({fft_:function(e){ne("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ca.runKernel(Jt,t)}});const Mh=va({ifft_:function(e){ne("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return ca.runKernel(cn,t)}});const Lh=va({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=sl(e,[n,t]);r=Mh(s)}else{const s=[n,2*(t-1)],a=sl(dh(e),[n,t]),i=sl(nc(e),[n,t]),o=yh(ll(a,[0,1],[n,t-2]),1),u=au(yh(ll(i,[0,1],[n,t-2]),1),gu(-1)),l=ol([a,o],1),c=ol([i,u],1),h=sl(ka(l,c),[s[0],s[1]]);r=Mh(h)}if(r=dh(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=sl(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const zh=va({split_:function(e,t,n=0){const r={x:ba(e,"x","split")},s={numOrSizeSplits:t,axis:n};return ca.runKernel(Sr,r,s)}});const Bh=va({rfft_:function(e,t){ne("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=ll(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=ol([e,Mc(r)],e.shape.length-1),n=t}else s=e;const a=uu(s),i=sl(ka(s,a),[r,n]),o=Oh(i),u=Math.floor(n/2)+1,l=dh(o),c=nc(o),h=zh(l,[u,n-u],l.shape.length-1),p=zh(c,[u,n-u],c.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,sl(ka(h[0],p[0]),d)}});const Ph=va({squaredDifference_:function(e,t){let n=ba(e,"a","squaredDifference"),r=ba(t,"b","squaredDifference");[n,r]=ta(n,r),Tu(n.shape,r.shape);const s={a:n,b:r};return ca.runKernel(_r,s,{})}});const Vh=va({squeeze_:function(e,t){const n=ba(e,"x","squeeze");return sl(n,ye(n.shape,t).newShape)}});const Wh=va({stack_:function(e,t=0){const n=xa(e,"tensors","stack","string_or_numeric");ne(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&ne(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return ca.runKernel(Kn,r,s)}});const Uh=va({step_:function(e,t=0){const n={x:ba(e,"x","step")},r={alpha:t};return ca.runKernel(Xr,n,r)}});const Gh=va({stridedSlice_:function(e,t,n,r,s=0,a=0,i=0,o=0,u=0){const l={x:ba(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:u};return ca.runKernel(Dr,l,c)}});const jh=va({tan_:function(e){const t={x:ba(e,"x","tan")};return ca.runKernel(Br,t)}});function Hh(e,t){se(e);const n=ma(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ia(e,null,n,t)}function qh(e,t,n){if(se(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=ma(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ia(e,t,r,n)}function Kh(e,t,n){if(se(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=ma(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ia(e,t,r,n)}function Xh(e,t,n){if(se(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=ma(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Ia(e,t,r,n)}function Yh(e,t,n){if(se(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=ma(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Ia(e,t=t||r,r,n)}const Zh=va({topk_:function(e,t=1,n=!0){const r=ba(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},i={k:t,sorted:n},[o,u]=ca.runKernel(Wr,a,i);return{values:o,indices:u}}});const Jh=va({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new ih(t,n,r,!0,s),i=vi(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const Qh=va({unique_:function(e,t=0){const n=ba(e,"x","unique","string_or_numeric");ne(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,i]=ca.runKernel(jr,r,s);return{values:a,indices:i}}});const ep=va({unsortedSegmentSum_:function(e,t,n){const r=ba(e,"x","unsortedSegmentSum"),s=ba(t,"segmentIds","unsortedSegmentSum","int32");ne(le(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},i={numSegments:n};return ca.runKernel(qr,a,i)}});const tp=va({unstack_:function(e,t=0){const n=ba(e,"x","unstack","string_or_numeric");ne(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return ca.runKernel(Hr,r,s)}});function np(e,t=!0,n,r){return ca.makeVariable(e,t,n,r)}function rp(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=vi(e,"int32"),s=vi([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),i=t*e.length;s.values.set(a,i)}return s.toTensor()}const sp=async function(e){const t=ba(e,"condition","whereAsync","bool"),n=await t.data(),r=rp(t.shape,n);return e!==t&&t.dispose(),r};const ap=async function(e,t,n){const r=ba(e,"tensor","boolMask"),s=ba(t,"mask","boolMask","bool"),a=null==n?0:n,i=s.rank,o=r.shape;ne(i>0,(()=>"mask cannot be scalar")),re(o.slice(a,a+i),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+i;e++)u*=o[e];const l=o.slice(0,a).concat([u],o.slice(a+i)),c=sl(r,l),h=sl(s,[-1]),p=await sp(h),d=Vh(p,[1]),f=Ql(c,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};function ip(e,t,n=null){if(0===e.rank)return Nu(e);if(1!==e.rank&&null===n)return ip(sl(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return yc(Nu(e),n);if(t===1/0)return gc(Nu(e),n);if(t===-1/0)return Bc(Nu(e),n);if("euclidean"===t||2===t)return iu(yc(vu(Nu(e),gu(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return gc(yc(Nu(e),n[0]),n[1]-1);if(t===1/0)return gc(yc(Nu(e),n[1]),n[0]);if(t===-1/0)return Bc(yc(Nu(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return iu(yc(ou(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const op=va({norm_:function(e,t="euclidean",n=null,r=!1){const s=ip(e=ba(e,"x","norm"),t,n);let a=s.shape;if(r){const t=ge(n,e.shape);a=kc(s.shape,t)}return sl(s,a)}});const up=va({movingAverage_:function(e,t,n,r,s=!0){const a=ba(e,"v","movingAverage"),i=ba(t,"x","movingAverage"),o=ba(n,"decay","movingAverage");na(a,i),ne(ue(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const u=gu(1),l=ku(u,o);let c=au(ku(i,a),l);if(s){ne(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=ba(r,"step","movingAverage");c=su(c,ku(u,vu(o,e)))}return nu(a,c)}});const lp=va({scatterND_:function(e,t,n){const r=ba(e,"indices","scatterND","int32"),s=ba(t,"updates","scatterND");to(s,r,n);const a={indices:r,updates:s},i={shape:n};return ca.runKernel(dr,a,i)}});const cp=va({sparseToDense_:function(e,t,n,r=0){const s=ba(e,"sparseIndices","sparseToDense","int32"),a=ba(t,"sparseValues","sparseToDense"),i=ba(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,i);const o={sparseIndices:s,sparseValues:a,defaultValue:i},u={outputShape:n};return ca.runKernel(Rr,o,u)}});const hp=va({gatherND_:function(e,t){const n=ba(t,"indices","gatherND","int32"),r={params:ba(e,"x","gatherND","string_or_numeric"),indices:n};return ca.runKernel(an,r)}});const pp=va({dropout_:function(e,t,n,r){const s=ba(e,"x","dropout");if(ne("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),ne(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Gs?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(ue(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),i=1-t,o=su(Jl(nu(hh(a,0,1,"float32",r),i)),i);return au(s,o)}});function dp(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function fp(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(i)}return Hh(s,"float32")}const mp=async function(e,t,n=1){const r=ba(e,"predictions","inTopK"),s=ba(t,"targets","inTopK");ne(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),ne(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),re(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];ne(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await r.data(),o=await s.data(),[u,l]=[i.length/a,a],c=be("bool",u);for(let e=0;e<u;e++){const t=e*l,r=i.subarray(t,t+l),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(s[t].index===o[e]){c[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),Na(c,s.shape,"bool")};const gp=va({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",i){let o=e;3===e.rank&&(o=sl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=sl(t,[1,t.shape[0],t.shape[1],t.shape[2]])),ne(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),ne(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),ne(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?u.shape[3]:u.shape[1];ne(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),ne(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&ne(le(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:o,dy:u},p={strides:r,pad:s,dataFormat:a,dimRoundingMode:i,filterShape:n};return ca.runKernel(St,h,p)}});function yp(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return au(e,Uh(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function bp(e,t){let n=t;const r=Cu(e.shape,t.shape);return r.length>0&&(n=yc(n,r)),sl(n,e.shape)}function xp(e,t,n,r){if("linear"===t)return e;if("relu"===t)return mh(e);if("elu"===t)return jl(e);if("relu6"===t)return gh(e);if("prelu"===t)return nh(e,n);if("leakyrelu"===t)return ic(e,r);if("sigmoid"===t)return ul(e);throw new Error(`Unknown fused activation ${t}.`)}const wp=(e,t)=>!(e>0)||"linear"===t;const vp=va({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(u=u||"linear",!1===wp(ca.state.gradientDepth,u)){let h=Sl(e,t,n,r,s,a,i);return null!=o&&(h=nu(h,o)),xp(h,u,l,c)}const h=ba(e,"x","conv2d"),p=ba(t,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=sl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ne(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),ne(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),null!=i&&ne(le(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`)),ne(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),ne(nl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),ne("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const m=Ku(d.shape,p.shape,n,a,r,i);let g,y;null!=o&&(g=ba(o,"bias","fused conv2d"),[g]=ta(g,h),Tu(m.outShape,g.shape)),null!=l&&(y=ba(l,"prelu weights","fused conv2d"));const b=(e,t)=>{const[s,i,o,l]=t,c=yp(e,o,u);ne(tl(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Tl(i.shape,c,s,n,r),gp(i,c,s.shape,n,r)];if(null!=l){const e=bp(l,c);h.push(e)}return h},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};if(null==o){return fu(((e,t,n)=>{let r=ca.runKernel(Qr,x,w);return n([t,e,r]),f&&(r=sl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p)}return fu(((e,t,n,r)=>{let s=ca.runKernel(Qr,x,w);return r([t,e,s,n]),f&&(s=sl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p,g)}});const kp=va({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],i){let o=e;3===e.rank&&(o=sl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=sl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:o,dy:u},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,filterShape:n};return ca.runKernel(Lt,l,c)}});const Ip=va({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],i){let o=t,u=!1;3===t.rank&&(u=!0,o=sl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:o,filter:n},c={strides:r,pad:s,dimRoundingMode:i,dilations:a,inputShape:e},h=ca.runKernel(zt,l,c);return u?sl(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Np=va({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:c}){if(!1===wp(ca.state.gradientDepth,u)){let h=Ll(e,t,n,r,s,a,i);return null!=o&&(h=nu(h,o)),xp(h,u,l,c)}const h=ba(e,"x","depthwiseConv2d"),p=ba(t,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=sl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),ne(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),ne(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),ne(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),ne(nl(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&ne(le(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${r}.`));const m=Ku(d.shape,p.shape,n,a,r,i,!0);let g,y;null!=o&&(g=ba(o,"bias","fused conv2d"),[g]=ta(g,h),Tu(m.outShape,g.shape)),null!=l&&(y=ba(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{ne(tl(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,o,l,c]=t,h=yp(e,l,u),p=Ip(o.shape,h,s,n,r,a,i),d=kp(o,h,s.shape,n,r,a,i);if(null!=c){return[p,d,bp(g,h)]}return[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:i,activation:u,leakyreluAlpha:c};if(null==o){return fu(((e,t,n)=>{let r=ca.runKernel(es,x,w);return n([t,e,r]),f&&(r=sl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p)}return fu(((e,t,n,r)=>{let s=ca.runKernel(es,x,w);return r([t,e,s,n]),f&&(s=sl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p,g)}});const Sp=va({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===wp(ca.state.gradientDepth,a)){let u=Wi(e,t,n,r);return null!=s&&(u=nu(u,s)),xp(u,a,i,o)}let u=ba(e,"a","fused matMul"),l=ba(t,"b","fused matMul");[u,l]=ta(u,l);const c=n?u.shape[u.rank-2]:u.shape[u.rank-1],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],p=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=ie(f),y=ie(m);ne(u.rank>=2&&l.rank>=2&&u.rank===l.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${u.rank} and ${l.rank}.`)),ne(ue(f,m),(()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${u.shape} and ${l.shape} must match.`)),ne(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=u.shape.slice(0,-2).concat([p,d]),x=sl(u,n?[g,c,p]:[g,p,c]),w=sl(l,r?[y,d,h]:[y,h,d]);let v,k;null!=s&&(v=ba(s,"bias","fused matMul"),[v]=ta(v,u),Tu(b,v.shape)),null!=i&&(k=ba(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,u,l]=t,c=yp(sl(e,u.shape),u,a);let h,p;if(n||r?!n&&r?(h=Wi(c,o,!1,!1),p=Wi(c,i,!0,!1)):n&&!r?(h=Wi(o,c,!1,!0),p=Wi(i,c,!1,!1)):(h=Wi(o,c,!0,!0),p=Wi(c,i,!0,!0)):(h=Wi(c,o,!1,!0),p=Wi(i,c,!0,!1)),null!=s){return[h,p,bp(l,c)]}return[h,p]},N={a:x,b:w,bias:v,preluActivationWeights:k},S={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:o};if(null==s){return fu(((e,t,n)=>{const r=ca.runKernel(Jr,N,S);return n([e,t,r]),{value:sl(r,b),gradFunc:I}}))(x,w)}return fu(((e,t,n,r)=>{const s=ca.runKernel(Jr,N,S);return r([e,t,s,n]),{value:sl(s,b),gradFunc:I}}))(x,w,v)}});const Cp=va({hammingWindow_:function(e){return fp(e,.54,.46)}});const Tp=va({hannWindow_:function(e){return fp(e,.5,.5)}});const $p=va({frame_:function(e,t,n,r=!1,s=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(ll(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,o=ol([ll(e,a,t-r),xu([r],s)]);i.push(o),a+=n}return 0===i.length?qh([],[0,t]):sl(ol(i),[i.length,t])}});const Ep=va({stft_:function(e,t,n,r,s=Tp){null==r&&(r=dp(t));const a=$p(e,t,n),i=au(a,s(t));return Bh(i,r)}});const Ap=va({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const i=ba(e,"image","cropAndResize"),o=ba(t,"boxes","cropAndResize","float32"),u=ba(n,"boxInd","cropAndResize","int32"),l=o.shape[0];ne(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),ne(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${o.shape}.`)),ne(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${o.shape}.`)),ne(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),ne(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),ne("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:i,boxes:o,boxInd:u},h={method:s,extrapolationValue:a,cropSize:r};return ca.runKernel(Ft,c,h)}});const Rp=va({flipLeftRight_:function(e){const t=ba(e,"image","flipLeftRight","float32");ne(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return ca.runKernel(en,n,{})}});const _p=va({rotateWithOffset_:function(e,t,n=0,r=.5){const s=ba(e,"image","rotateWithOffset","float32");ne(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},i={radians:t,fillValue:n,center:r};return ca.runKernel(Zr,a,i)}});function Fp(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),ne(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),ne(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),ne(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),ne(1===t.rank,(()=>"scores must be a 1D tensor")),ne(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),ne(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Dp=va({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=ba(e,"boxes","nonMaxSuppression"),i=ba(t,"scores","nonMaxSuppression"),o=Fp(a,i,n,r,s),u={maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold};return ca.runKernel(Un,{boxes:a,scores:i},u)}});function Op(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,i=!1;for(;r<s;){a=r+(s-r>>>1);const o=n(t,e[a]);o>0?r=a+1:(s=a,i=!o)}return i?r:-r-1}(e,t,n||Mp)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function Mp(e,t){return e>t?1:e<t?-1:0}function Lp(e,t,n,r,s){return Pp(e,t,n,r,s,0)}function zp(e,t,n,r,s,a){return Pp(e,t,n,r,s,0,!1,a,!0)}function Bp(e,t,n,r,s,a){return Pp(e,t,n,r,s,a,!0)}function Pp(e,t,n,r,s,a,i=!1,o=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>s&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Up);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<s)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Vp(e,a,h[n]);if(i>=r){o=!0;break}if(t.score=t.score*Wp(r,c,i),t.score<=s)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>s&&Op(l,t,Up))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),u&&(m.validOutputs=d),m}function Vp(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),p=Math.max(s[1],s[3]),d=(o-a)*(u-i),f=(h-l)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,l),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(u,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Wp(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Up(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Gp=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=ba(e,"boxes","nonMaxSuppressionAsync"),i=ba(t,"scores","nonMaxSuppressionAsync"),o=Fp(a,i,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const u=await Promise.all([a.data(),i.data()]),l=u[0],c=u[1],{selectedIndices:h}=Lp(l,c,n,r,s);return a!==e&&a.dispose(),i!==t&&i.dispose(),Hh(h,"int32")};const jp=va({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=ba(e,"boxes","nonMaxSuppression"),o=ba(t,"scores","nonMaxSuppression"),u=Fp(i,o,n,r,s,a),l={boxes:i,scores:o},c={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},h=ca.runKernel(jn,l,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Hp=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const i=ba(e,"boxes","nonMaxSuppressionAsync"),o=ba(t,"scores","nonMaxSuppressionAsync"),u=Fp(i,o,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([i.data(),o.data()]),c=l[0],h=l[1],{selectedIndices:p,selectedScores:d}=Bp(c,h,n,r,s,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Hh(p,"int32"),selectedScores:Hh(d)}};const qp=va({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=ba(e,"boxes","nonMaxSuppression"),o=ba(t,"scores","nonMaxSuppression"),u=Fp(i,o,n,r,s,null),l={boxes:i,scores:o},c={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},h=ca.runKernel(Gn,l,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Kp=async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const i=ba(e,"boxes","nonMaxSuppressionAsync"),o=ba(t,"scores","nonMaxSuppressionAsync"),u=Fp(i,o,n,r,s,null),l=u.maxOutputSize,c=u.iouThreshold,h=u.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=zp(p,d,l,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:Hh(f,"int32"),validOutputs:gu(m,"int32")}};const Xp=va({resizeBilinear_:function(e,t,n=!1,r=!1){const s=ba(e,"images","resizeBilinear");ne(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),ne(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),ne(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,i=!1;3===s.rank&&(i=!0,a=sl(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=ca.runKernel(or,o,u);return i?sl(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Yp=va({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=ba(e,"images","resizeNearestNeighbor");ne(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),ne(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),ne("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),ne(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,i=!1;3===s.rank&&(i=!0,a=sl(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,o={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=ca.runKernel(ar,o,u);return i?sl(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Zp=va({threshold_:function(e,t="binary",n=!1,r=.5){const s=ba(e,"image","threshold"),a=s.shape[0]*s.shape[1];let i,o,u,l,c=au(Hh([r]),255);if(ne(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),ne(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),ne("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),ne("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[i,o,u]=zh(s,[1,1,1],-1);const e=au(i,.2989),t=au(o,.587),n=au(u,.114);l=nu(nu(e,t),n)}else l=e;if("otsu"===t){c=function(e,t){let n,r,s,a,i,o,u=Hh([-1]),l=Hh([0]),c=Hh([0]);for(let h=0;h<e.size-1;h++){n=ll(e,0,h+1),r=ll(e,h+1),i=su(yc(n),t),o=su(yc(r),t);const p=yc(au(n,ph(0,n.size)));s=su(p,yc(n));const d=xu(r.shape,n.size),f=nu(ph(0,r.size),d),m=au(r,f);a=su(yc(m),yc(r));const g=ku(s,a),y=ku(s,a),b=au(i,o);c=au(au(b,g),y);const x=ec(c,l);l=Vl(x,c,l),u=Vl(x,Hh([h]),u)}return u}(yl(ki(kh(l),"int32"),Na([]),256),a)}const h=n?uc(l,c):ec(l,c);return ki(au(h,255),"int32")}});const Jp=va({transform_:function(e,t,n="nearest",r="constant",s=0,a){const i=ba(e,"image","transform","float32"),o=ba(t,"transforms","transform","float32");ne(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),ne(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),ne(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:i,transforms:o},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return ca.runKernel(Ur,u,l)}});const Qp=va({bandPart_:function(e,t,n){ne(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),ne(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=ba(e,"a","bandPart");ne(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,i]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=sl(ph(0,a,1,"int32"),[-1,1]),u=ph(0,i,1,"int32"),l=ku(o,u),c=$c(uc(l,gu(+t,"int32")),tc(l,gu(-n,"int32"))),h=Mc([a,i],r.dtype);return sl(Wh(tp(sl(r,[-1,a,i])).map((e=>Vl(c,e,h)))),s)}});const ed=va({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,ne(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)ne(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=zh(e,e.shape[0],0).map((e=>Vh(e,[0])));ne(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let t=0;t<e.length;++t)n.push(ca.tidy((()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=au(yc(au(n[r],e)),n[r]);e=ku(e,t)}return su(e,op(e,"euclidean"))})));return t?Wh(n,0):n}});function td(e,t=!1){return ca.tidy((()=>{ne(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=Zl(n),a=Ii(e);const i=qh([[1]],[1,1]);let o=Ii(i);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=o,l=s;[o,a,s]=ca.tidy((()=>{const t=ll(a,[e,e],[n-e,1]),u=op(t),l=ll(a,[e,e],[1,1]),c=Vl(ec(l,0),qh([[-1]]),qh([[1]])),h=ku(l,au(c,u)),p=su(t,h);o=1===p.shape[0]?Ii(i):ol([i,ll(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=dc(su(Wi(c,h),u)),f=ll(a,[e,0],[n-e,r]),m=au(d,o),g=Gi(o);if(0===e)a=ku(f,Wi(m,Wi(g,f)));else{const t=ku(f,Wi(m,Wi(g,f)));a=ol([ll(a,[0,0],[e,r]),t],0)}const y=Gi(m),b=ll(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=ku(b,Wi(Wi(b,o),y));else{const t=ku(b,Wi(Wi(b,o),y));s=ol([ll(s,[0,0],[n,e]),t],1)}return[o,a,s]})),Go([t,u,l])}return!t&&n>r&&(s=ll(s,[0,0],[n,r]),a=ll(a,[0,0],[r,r])),[s,a]}))}const nd=va({qr_:function(e,t=!1){if(ne(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return td(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=tp(sl(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=td(e,t);s.push(n),a.push(r)}));return[sl(Wh(s,0),e.shape),sl(Wh(a,0),e.shape)]}}});var rd;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(rd||(rd={}));const sd=va({computeWeightedLoss_:function(e,t,n=rd.SUM_BY_NONZERO_WEIGHTS){const r=ba(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=ba(t,"weights","computeWeightedLoss"));const a=null==s?r:au(r,s);if(n===rd.NONE)return a;if(n===rd.SUM)return yc(a);if(n===rd.MEAN){if(null==s)return Oc(a);{const e=r.size/s.size,t=su(yc(a),yc(s));return e>1?su(t,gu(e)):t}}if(n===rd.SUM_BY_NONZERO_WEIGHTS){if(null==s)return su(yc(a),gu(r.size));{const e=au(s,Lc(r.shape)),t=ki(yc(Hc(e,gu(0))),"float32");return su(yc(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const ad=va({absoluteDifference_:function(e,t,n,r=rd.SUM_BY_NONZERO_WEIGHTS){const s=ba(e,"labels","absoluteDifference"),a=ba(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=ba(n,"weights","absoluteDifference")),re(s.shape,a.shape,"Error in absoluteDifference: ");const o=Nu(ku(s,a));return sd(o,i,r)}});const id=va({cosineDistance_:function(e,t,n,r,s=rd.SUM_BY_NONZERO_WEIGHTS){const a=ba(e,"labels","cosineDistance"),i=ba(t,"predictions","cosineDistance");let o=null;null!=r&&(o=ba(r,"weights","cosineDistance")),re(a.shape,i.shape,"Error in cosineDistance: ");const u=gu(1),l=ku(u,yc(au(a,i),n,!0));return sd(l,o,s)}});const od=va({hingeLoss_:function(e,t,n,r=rd.SUM_BY_NONZERO_WEIGHTS){let s=ba(e,"labels","hingeLoss");const a=ba(t,"predictions","hingeLoss");let i=null;null!=n&&(i=ba(n,"weights","hingeLoss")),re(s.shape,a.shape,"Error in hingeLoss: ");const o=gu(1);s=ku(au(gu(2),s),o);const u=mh(ku(o,au(s,a)));return sd(u,i,r)}});const ud=va({huberLoss_:function(e,t,n,r=1,s=rd.SUM_BY_NONZERO_WEIGHTS){const a=ba(e,"labels","huberLoss"),i=ba(t,"predictions","huberLoss");let o=null;null!=n&&(o=ba(n,"weights","huberLoss")),re(a.shape,i.shape,"Error in huberLoss: ");const u=gu(r),l=Nu(ku(i,a)),c=Pc(l,u),h=ku(l,c),p=nu(au(gu(.5),ou(c)),au(u,h));return sd(p,o,s)}});const ld=va({logLoss_:function(e,t,n,r=1e-7,s=rd.SUM_BY_NONZERO_WEIGHTS){const a=ba(e,"labels","logLoss"),i=ba(t,"predictions","logLoss");let o=null;null!=n&&(o=ba(n,"weights","logLoss")),re(a.shape,i.shape,"Error in logLoss: ");const u=gu(1),l=gu(r),c=dc(au(a,hc(nu(i,l)))),h=au(ku(u,a),hc(nu(ku(u,i),l))),p=ku(c,h);return sd(p,o,s)}});const cd=va({meanSquaredError_:function(e,t,n,r=rd.SUM_BY_NONZERO_WEIGHTS){const s=ba(e,"labels","meanSquaredError"),a=ba(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=ba(n,"weights","meanSquaredError")),re(s.shape,a.shape,"Error in meanSquaredError: ");const o=Ph(s,a);return sd(o,i,r)}});const hd=va({sigmoidCrossEntropy_:function(e,t,n,r=0,s=rd.SUM_BY_NONZERO_WEIGHTS){let a=ba(e,"multiClassLabels","sigmoidCrossEntropy");const i=ba(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=ba(n,"weights","sigmoidCrossEntropy")),re(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=gu(r),t=gu(1),n=gu(.5);a=nu(au(a,ku(t,e)),au(n,e))}const u=function(e,t){const n=ba(e,"labels","sigmoidCrossEntropyWithLogits"),r=ba(t,"logits","sigmoidCrossEntropyWithLogits");re(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=mh(r),a=au(r,n),i=pc(ql(dc(Nu(r))));return nu(ku(s,a),i)}(a,i);return sd(u,o,s)}});const pd=va({softmaxCrossEntropy_:function(e,t,n,r=0,s=rd.SUM_BY_NONZERO_WEIGHTS){let a=ba(e,"onehotLabels","softmaxCrossEntropy");const i=ba(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=ba(n,"weights","softmaxCrossEntropy")),re(a.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){const e=gu(r),t=gu(1),n=gu(a.shape[1]);a=nu(au(a,ku(t,e)),su(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return fu(((e,t,r)=>{const s=Tc(t,[n],!0),a=ku(ki(t,"float32"),s);r([e,a]);const i=dc(au(a,e));return{value:yc(i,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=kc(e.shape,[n]);return[au(sl(e,a),ku(ki(r,"float32"),ql(s))),au(sl(e,a),ku(ql(s),ki(r,"float32")))]}}}))(e,t)}(a,i);return sd(u,o,s)}});const dd=va({sparseFillEmptyRows_:function(e,t,n,r){const s=ba(e,"indices","sparseFillEmptyRows"),a=ba(t,"values","sparseFillEmptyRows"),i=ba(n,"denseShape","sparseFillEmptyRows"),o=ba(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const u={indices:s,values:a,denseShape:i,defaultValue:o},l=ca.runKernel(Tr,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const fd=va({sparseReshape_:function(e,t,n){const r=ba(e,"inputIndices","sparseReshape"),s=ba(t,"inputShape","sparseReshape"),a=ba(n,"newShape","sparseReshape");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:r,inputShape:s,newShape:a},o=ca.runKernel($r,i);return{outputIndices:o[0],outputShape:o[1]}}});const md=va({sparseSegmentMean_:function(e,t,n){const r=ba(e,"data","sparseSegmentMean"),s=ba(t,"indices","sparseSegmentMean"),a=ba(n,"segmentIds","sparseSegmentMean");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:r,indices:s,segmentIds:a};return ca.runKernel(Er,i)}});const gd=va({sparseSegmentSum_:function(e,t,n){const r=ba(e,"data","sparseSegmentSum"),s=ba(t,"indices","sparseSegmentSum"),a=ba(n,"segmentIds","sparseSegmentSum");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:r,indices:s,segmentIds:a};return ca.runKernel(Ar,i)}});const yd=va({stringNGrams_:function(e,t,n,r,s,a,i,o){const u=ba(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=ba(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:i,preserveShortSequences:o},h={data:u,dataSplits:l},p=ca.runKernel(Or,h,c);return{nGrams:p[0],nGramsSplits:p[1]}}});const bd=va({stringSplit_:function(e,t,n=!0){const r=ba(e,"input","stringSplit","string"),s=ba(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},i={input:r,delimiter:s},o=ca.runKernel(Mr,i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const xd=va({stringToHashBucketFast_:function(e,t){const n=ba(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return ca.runKernel(Lr,s,r)}}),wd={fft:Oh,ifft:Mh,rfft:Bh,irfft:Lh},vd={hammingWindow:Cp,hannWindow:Tp,frame:$p,stft:Ep},kd={flipLeftRight:Rp,resizeNearestNeighbor:Yp,resizeBilinear:Xp,rotateWithOffset:_p,cropAndResize:Ap,nonMaxSuppression:Dp,nonMaxSuppressionAsync:Gp,nonMaxSuppressionWithScore:jp,nonMaxSuppressionWithScoreAsync:Hp,nonMaxSuppressionPadded:qp,nonMaxSuppressionPaddedAsync:Kp,threshold:Zp,transform:Jp},Id={bandPart:Qp,gramSchmidt:ed,qr:nd},Nd={absoluteDifference:ad,computeWeightedLoss:sd,cosineDistance:id,hingeLoss:od,huberLoss:ud,logLoss:ld,meanSquaredError:cd,sigmoidCrossEntropy:hd,softmaxCrossEntropy:pd},Sd={sparseFillEmptyRows:dd,sparseReshape:fd,sparseSegmentMean:md,sparseSegmentSum:gd},Cd={stringNGrams:yd,stringSplit:bd,stringToHashBucketFast:xd};class Td{static sgd(e){return new Au(e)}static momentum(e,t,n=!1){return new Ru(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,s=!1){return new _u(e,t,n,r,s)}static adam(e=.001,t=.9,n=.999,r=null){return new Iu(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new bu(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,s=0){return new Eu(e,t,n,r,s)}static adagrad(e,t=.1){return new wu(e,t)}}const $d={sgd:Td.sgd,momentum:Td.momentum,adadelta:Td.adadelta,adagrad:Td.adagrad,rmsprop:Td.rmsprop,adamax:Td.adamax,adam:Td.adam},Ed="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Ad(){return new Promise((e=>Ed((()=>e()))))}function Rd(e,t){const n=e[0].length;e.forEach(((e,t)=>{ne(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),ne(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,s)=>{for(let a=0;a<n;a++)ne(a===t||e[a]===r[a],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function _d(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}const Fd=30;function Dd(e){return e<=Fd?e:Re(e,Math.floor(Math.sqrt(e)))}function Od(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Md(e,t,n,r=!0){let s=[];if(r)s=s.concat(t.slice(0)),s.push(e[0]/n),s=s.concat(e.slice(1));else{s=s.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)s=s.concat([e[r+1]/t[r],t[r]]);s=s.concat(e.slice(n+1))}return s}function Ld(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function zd(e,t,n,r=!0){const s=[];r?s.push(e[0]/n):s.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?s.push(t[n-1]*e[n]):s.push(e[n]/t[n-1]):s.push(e[n]);return s}function Bd(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function Pd(e,t,n){const r=e.slice(0,1);for(let s=0;s<n;++s)r.push(e[s+1]-t[s][0]-t[s][1]);return r}const Vd=1.7580993408473768,Wd=1.0507009873554805,Ud=.3275911,Gd=.254829592,jd=-.284496736,Hd=1.421413741,qd=-1.453152027,Kd=1.061405429;function Xd(...e){je().getBool("IS_TEST")||console.warn(...e)}function Yd(...e){je().getBool("IS_TEST")||console.log(...e)}function Zd(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Jd(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Qd(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function ef(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function tf(e,t){return{real:e[2*t],imag:e[2*t+1]}}function nf(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function rf(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let s=0;s<Math.ceil(e/2);s++){const a=(t?2:-2)*Math.PI*(s/e);n[s]=Math.cos(a),r[s]=Math.sin(a)}return{real:n,imag:r}}function sf(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const af="->",of=/->/g;function uf(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(of,"").length)/af.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,s]=e.split(af);ne(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=r.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<s.length;++e){const t=s[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const u=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<a[e].length;++t)u[e].push(o.indexOf(a[e][t]))}const l=o.length,c=[];for(let e=s.length;e<l;++e)c.push(e);return{allDims:o,summedDims:c,idDims:u}}function lf(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function cf(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const s=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=s[n]:ne(r[t[e][n]]===s[n],(()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function hf(e,t){const n=e,r=[];let s=0;0===e.length&&n.push(-1),s=e.length+1;for(let e=0;e<s;++e)r.push([]);const a=[];for(let e=0;e<n.length;++e){const s=df(t,n[e]);for(const t of s)-1===a.indexOf(t)&&(r[e].push(t),a.push(t))}return{path:n,steps:r}}function pf(e){return e.every(((e,t)=>e===t))}function df(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function ff(e,t,n=0){let r=[];if("number"==typeof t)ne(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{ne(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}ne(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function mf(e,t){let n,r=!1;for(e<=Fd?(n=e,r=!0):n=Re(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Re(e,n+1);return n}function gf(e,t,n){const r=[],s=e.length;for(let a=0;a<s;a++)a!==t?r.push(e[a]):r.push(n);return r}function yf(e,t,n,r){const s=t.shape.length,a=e.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>a)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${a}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let u=1,l=1,c=1;for(let t=0;t<r;++t)o.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)o.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<s;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:i,outputShape:o}}function bf(e){try{return e.map((e=>Rs(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function xf(e){return e.map((e=>As(e)))}const wf={kernelName:Ye,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(e,Uh(ki(n,"float32"),-1))}}},vf={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ou(ki(n,"float32")),r=iu(ku(gu(1),t));return dc(su(e,r))}}}},kf={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=iu(ku(ou(ki(n,"float32")),1));return su(e,t)}}}},If={kernelName:Qe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Tu(n.shape,r.shape);return{a:()=>{let t=e;const r=Cu(n.shape,s);return r.length>0&&(t=yc(t,r)),sl(t,n.shape)},b:()=>{let t=e;const n=Cu(r.shape,s);return n.length>0&&(t=yc(t,n)),sl(t,r.shape)}}}},Nf={kernelName:et,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,r)=>{n[r]=()=>e.clone()})),n}},Sf={kernelName:rt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uu(n)}}},Cf={kernelName:st,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>uu(n)}}},Tf={kernelName:at,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,iu(ku(gu(1),ou(ki(n,"float32")))))}}},$f={kernelName:it,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=iu(nu(gu(1),ou(ki(n,"float32"))));return su(e,t)}}}},Ef={kernelName:lt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Tu(n.shape,r.shape);return{a:()=>{const t=nu(ou(n),ou(r));let a=au(e,su(r,t));const i=Cu(n.shape,s);return i.length>0&&(a=yc(a,i)),sl(a,n.shape)},b:()=>{const t=nu(ou(n),ou(r));let a=dc(au(e,su(n,t)));const i=Cu(r.shape,s);return i.length>0&&(a=yc(a,i)),sl(a,r.shape)}}}},Af={kernelName:ot,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,nu(ou(ki(n,"float32")),1))}}},Rf={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,ku(gu(1),ou(ki(n,"float32"))))}}};const _f=va({avgPool3dGrad_:function(e,t,n,r,s,a){const i=ba(e,"dy","avgPool3dGrad"),o=ba(t,"input","avgPool3dGrad");let u=i,l=o,c=!1;4===o.rank&&(c=!0,u=sl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),l=sl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),ne(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),ne(5===l.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${l.rank}.`)),null!=a&&ne(le(s),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const h={dy:u,input:l},p={filterSize:n,strides:r,pad:s,dimRoundingMode:a},d=ca.runKernel(dt,h,p);return c?sl(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Ff={kernelName:pt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>_f(e,r,s,a,i,o)}}};const Df=va({avgPoolGrad_:function(e,t,n,r,s){const a=ba(e,"dy","avgPoolGrad"),i=ba(t,"input","avgPoolGrad");ne(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,u=a,l=!1;3===i.rank&&(l=!0,o=sl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=sl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),ne(4===u.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`)),ne(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:u,input:o},h={filterSize:n,strides:r,pad:s},p=ca.runKernel(ht,c,h);return l?sl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Of={kernelName:ct,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{filterSize:s,strides:a,pad:i}=n;return{x:()=>Df(e,r,s,a,i)}}},Mf={kernelName:ft,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[r,s]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Wi(e,s,!1,!1),b:()=>Wi(e,r,!0,!1)}:a&&!i?{a:()=>Wi(s,e,!1,!0),b:()=>Wi(r,e,!1,!1)}:{a:()=>Wi(s,e,!0,!0),b:()=>Wi(e,r,!0,!0)}:{a:()=>Wi(e,s,!1,!0),b:()=>Wi(r,e,!0,!1)}}},Lf={kernelName:mt,gradFunc:(e,t,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>eh(e,r,s)}}},zf={kernelName:yt,gradFunc:(e,t,n)=>{const r=n,s=r.inputShape,a=r.shape,i=Array.from(a);for(let e=s.length-1;e>=0;e--)if(s[e]===a[e])i[e]=1;else if(1!==s[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>yc(e,o,!0)}}},Bf={kernelName:bt,gradFunc:e=>({x:()=>e.clone()})},Pf={kernelName:xt,gradFunc:e=>({x:()=>uu(e)})},Vf={kernelName:wt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{clipValueMin:s,clipValueMax:a}=n;return{x:()=>Vl($c(tc(r,s),uc(r,a)),e,uu(e))}}},Wf={kernelName:kt,inputsToSave:["x"],gradFunc:wf.gradFunc},Uf={kernelName:It,saveAllInputs:!0,gradFunc:(e,t,n)=>{const r=t.map((e=>e.shape)),{axis:s}=n,a=ge(s,t[0].shape)[0],i=r.map((e=>e[a]));return zh(e,i,a).map((e=>()=>e))}},Gf={kernelName:Nt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{dilations:a,strides:i,pad:o,dataFormat:u}=n;return ne(tl(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Tl(r.shape,e,s,i,o,u),filter:()=>gp(r,e,s.shape,i,o,u)}}},jf={kernelName:Ct,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:u}=n;return{dy:()=>Sl(e,s,a,i,o,1,u),filter:()=>gp(e,r,s.shape,a,i,o,u)}}};const Hf=va({conv3DBackpropFilter_:function(e,t,n,r,s){let a=e;4===e.rank&&(a=sl(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=sl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),ne(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),ne(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),ne(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),ne(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),ne(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},u={strides:r,pad:s,filterShape:n};return ca.runKernel($t,o,u)}}),qf={kernelName:Tt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a}=n;ne(tl(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[i,o]=t;return{x:()=>Al(i.shape,e,o,s,a),filter:()=>Hf(i,e,o.shape,s,a)}}},Kf={kernelName:At,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(dc($h(ki(n,"float32"))),e)}}},Xf={kernelName:Rt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(Eh(ki(n,"float32")),e)}}},Yf={kernelName:_t,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s,exclusive:a,reverse:i}=n;return{x:()=>{const t=Nc([s],r.rank);let n=Dl(e,s,a,!i);return null!=t&&(n=Gi(n,t)),n}}}},Zf={kernelName:Mt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:r,strides:s,pad:a,dimRoundingMode:i}=n,o=null==r?[1,1]:r;ne(tl(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[u,l]=t;return ne(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`)),ne(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${l.rank}.`)),ne(u.shape[3]===l.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),ne(nl(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),null!=i&&ne(le(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Ip(u.shape,e,l,s,a,r,i),filter:()=>kp(u,e,l.shape,s,a,r,i)}}},Jf={kernelName:Pt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[r,s]=t,a={x:r,filter:s,dy:e},i={x:r,filter:s,dy:e};return{x:()=>ca.runKernel(Vt,a,n),filter:()=>ca.runKernel(Wt,i,n)}}},Qf={kernelName:jt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,r={dy:e,y:n};return{x:()=>ca.runKernel(Ht,r)}}},em={kernelName:qt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=au(ql(dc(ou(n))),2/Math.sqrt(Math.PI));return{x:()=>au(e,r)}}},tm={kernelName:Xt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(e,n)}}},nm={kernelName:Yt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>sl(e,n.shape)}}},rm={kernelName:Zt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(e,ql(n))}}},sm={kernelName:tn,gradFunc:e=>({x:()=>uu(e)})},am={kernelName:nn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Tu(n.shape,r.shape);return{a:()=>{const t=su(e,ki(r,"float32")),a=Cu(n.shape,s);return a.length>0?sl(yc(t,a),n.shape):t},b:()=>{let t=au(e,ki(n,"float32"));const a=Cu(r.shape,s);a.length>0&&(t=sl(yc(t,a),r.shape));const i=ou(r);return dc(su(t,ki(i,"float32")))}}}},im={kernelName:rn,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:r}=n,[s,a,i,o]=t,u=null==o?gu(1):o,l=Cu(a.shape,s.shape),c=[];if(1===a.rank){for(let e=0;e<s.shape.length-1;++e)c.push(s.shape[e]);c.push(1)}const h=ku(s,a),p=au(e,u),d=Ih(nu(i,gu(r))),f=au(au(au(d,d),d),gu(-.5));return{x:()=>1===a.rank?sl(au(au(e,Yl(sl(d,[1,1,1,a.shape[0]]),c)),u),s.shape):sl(au(au(e,d),u),s.shape),mean:()=>{let e=au(au(d,gu(-1)),p);return 1===a.rank&&(e=yc(e,l)),sl(e,a.shape)},variance:()=>{let e=au(au(f,h),p);return 1===a.rank&&(e=yc(e,l)),sl(e,a.shape)},scale:()=>{const t=au(h,d);let n=au(e,t);return 1===a.rank&&(n=yc(n,l)),sl(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=yc(t,l)),sl(t,a.shape)}}}},om={kernelName:sn,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[r,s]=t,{axis:a}=n,i=ge(a,r.shape)[0];return{x:()=>{const t=r.shape,n=s.size,o=t.slice(0,i),u=o.length,l=t.slice(a,t.length).slice(1),c=l.length,h=um(0,u),p=um(u+1,u+1+c),d=lm([o,[n],l]),f=sl(e,d),m=sl(s,[n]),g=lm([[u],h,p]),y=Gi(f,g);let b=ep(y,m,r.shape[i]);const x=Sc(g);return b=Gi(b,x),b},indices:()=>s}}};function um(e,t){const n=[];for(let r=e;r<t;++r)n.push(r);return n}function lm(e){const t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}const cm={kernelName:un,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>uu(n),b:()=>uu(r)}}},hm={kernelName:ln,gradFunc:e=>({x:()=>ki(e,"float32")})},pm={kernelName:pn,gradFunc:e=>({x:()=>uu(e)})},dm={kernelName:dn,gradFunc:e=>({x:()=>uu(e)})},fm={kernelName:fn,gradFunc:e=>({x:()=>uu(e)})},mm={kernelName:mn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{alpha:s}=n,a=ec(r,0);return{x:()=>Vl(a,e,au(e,s))}}},gm={kernelName:wn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,nu(n,1))}}},ym={kernelName:xn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,ki(n,"float32"))}}},bm={kernelName:Nn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n;return{logits:()=>{const t=ql(r);return ku(e,au(yc(e,s,!0),t))}}}};const xm=va({localResponseNormalizationBackprop_:function(e,t,n,r=5,s=1,a=1,i=.5){const o={x:e,y:t,dy:n},u={depthRadius:r,bias:s,alpha:a,beta:i};return ca.runKernel(Cn,o,u)}}),wm={kernelName:Sn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{depthRadius:a,bias:i,alpha:o,beta:u}=n;return{x:()=>xm(r,s,e,a,i,o,u)}}};function vm(e,t,n,r){return t.rank<n.rank&&(t=sl(t,kc(t.shape,r))),e.rank<n.rank&&(e=sl(e,kc(e.shape,r))),{x:()=>au(e,ki(Pl(n,t),e.dtype))}}const km={kernelName:Tn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{reductionIndices:s}=r,a=t[0],i=vm(e,t[1],a,ge(s,a.shape));return{x:()=>i.x()}}},Im={kernelName:$n,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>au(e,ki(tc(n,r),"float32")),b:()=>au(e,ki(oc(n,r),"float32"))}}};const Nm=va({maxPool3dGrad_:function(e,t,n,r,s,a,i){const o=ba(e,"dy","maxPool3dGrad"),u=ba(t,"input","maxPool3dGrad"),l=ba(n,"output","maxPool3dGrad");let c=o,h=u,p=l,d=!1;4===u.rank&&(d=!0,c=sl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=sl(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=sl(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),ne(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),ne(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),ne(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),null!=i&&ne(le(a),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const f={dy:c,input:h,output:p},m={filterSize:r,strides:s,pad:a,dimRoundingMode:i},g=ca.runKernel(_n,f,m);return d?sl(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),Sm={kernelName:Rn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=n;return{x:()=>Nm(e,r,s,a,i,o,u)}}};const Cm=va({maxPoolGrad_:function(e,t,n,r,s,a,i){const o=ba(e,"dy","maxPoolGrad"),u=ba(t,"input","maxPoolGrad"),l=ba(n,"output","maxPoolGrad");ne(u.rank===o.rank,(()=>`Rank of input (${u.rank}) does not match rank of dy (${o.rank})`)),ne(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),ne(4===u.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`)),null!=i&&ne(le(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:u,output:l},h={filterSize:r,strides:s,pad:a,dimRoundingMode:i};return ca.runKernel(An,c,h)}}),Tm={kernelName:Xn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>ll(e,a,r.shape)}}},$m={kernelName:Nr,gradFunc:(e,t,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>pl(e,r,s)}}},Em={kernelName:Sr,gradFunc:(e,t,n)=>{const{axis:r}=n;return{x:()=>ol(e,r)}}};const Am=[wf,vf,kf,If,Nf,Sf,Cf,Tf,$f,Ef,Af,Rf,Ff,Of,Mf,Lf,zf,Bf,Pf,Vf,Wf,Uf,jf,Gf,qf,Kf,Xf,Yf,Zf,Jf,{kernelName:Ut,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Tu(n.shape,r.shape);return{a:()=>{const t=su(e,ki(r,"float32")),a=Cu(n.shape,s);return a.length>0?sl(yc(t,a),n.shape):t},b:()=>{let t=au(e,ki(n,"float32"));const a=Cu(r.shape,s);a.length>0&&(t=sl(yc(t,a),r.shape));const i=ou(r);return dc(su(t,ki(i,"float32")))}}}},Qf,em,tm,nm,rm,am,sm,im,om,cm,hm,pm,dm,fm,mm,gm,ym,bm,wm,km,km,Im,Sm,{kernelName:En,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r,s]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Cm(e,r,s,a,i,o)}}},{kernelName:Dn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{axis:s}=n,a=ge(s,r.shape),i=ie(vc(r.shape,a)[1]);return{x:()=>{const t=r.shape.slice();a.forEach((e=>{t[e]=1}));const n=sl(e,t);return su(au(n,Lc(r.shape,"float32")),i)}}}},{kernelName:On,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const r=n,{axis:s}=r,[a,i]=t,o=vm(e,i,a,ge(s,a.shape));return{x:()=>o.x()}}},{kernelName:Mn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t;return{a:()=>au(e,ki(uc(n,r),"float32")),b:()=>au(e,ki(ec(n,r),"float32"))}}},{kernelName:Ln,inputsToSave:["x"],gradFunc:(e,t,n)=>{const r=t[0],{paddings:s}=n,a=s.map((e=>e[0]));return{x:()=>ll(e,a,r.shape)}}},{kernelName:zn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Tu(n.shape,r.shape);return{a:()=>{const t=Cu(n.shape,s);return t.length>0?sl(yc(e,t),n.shape):e},b:()=>{const t=au(e,dc(Jl(su(n,r)))),a=Cu(r.shape,s);return a.length>0?sl(yc(t,a),r.shape):t}}}},{kernelName:Pn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Tu(n.shape,r.shape);return{a:()=>{const t=au(e,ki(r,"float32")),a=Cu(n.shape,s);return a.length>0?sl(yc(t,a),n.shape):t},b:()=>{const t=au(e,ki(n,"float32")),a=Cu(r.shape,s);return a.length>0?sl(yc(t,a),r.shape):t}}}},{kernelName:Vn,gradFunc:e=>({x:()=>dc(e)})},{kernelName:qn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Mc(n.shape,"float32")}}},{kernelName:Hn,gradFunc:e=>({x:()=>uu(e)})},{kernelName:Kn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:r}=n;return tp(e,r).map((e=>()=>e))}},Tm,Tm,{kernelName:Zn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,r,s]=t,a=n,i=r,o=Tu(a.shape,i.shape);return{a:()=>{const t=ki(i,"float32");let n=au(e,au(t,vu(a,ku(t,gu(1)))));const r=Cu(a.shape,o);return r.length>0&&(n=yc(n,r)),sl(n,a.shape)},b:()=>{const t=ec(a,0),n=Vl(t,hc(a),uu(a));let r=au(e,au(s,n));const u=Cu(i.shape,o);return u.length>0&&(r=yc(r,u)),sl(r,i.shape)}}}},{kernelName:Jn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,r]=t,s=ec(n,0);return{x:()=>Vl(s,e,au(e,r)),alpha:()=>{let t=Vl(s,uu(e),au(e,n));const a=Cu(r.shape,e.shape);return a.length>0&&(t=yc(t,a)),sl(t,r.shape)}}}},{kernelName:nr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,dc(ou(n)))}}},{kernelName:lr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,r=au(uc(n,6),Uh(n));return{x:()=>au(e,ki(r,"float32"))}}},{kernelName:rr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(e,ki(Uh(n),"float32"))}}},{kernelName:sr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>sl(e,n.shape)}}},{kernelName:or,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>ca.runKernel(ur,s,n)}}},{kernelName:ar,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[r]=t,s={dy:e,images:r};return{images:()=>ca.runKernel(ir,s,n)}}},{kernelName:cr,gradFunc:(e,t,n)=>{const{dims:r}=n,s=ge(r,e.shape);return{x:()=>yh(e,s)}}},{kernelName:hr,gradFunc:e=>({x:()=>uu(e)})},{kernelName:pr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dc(su(e,au(vu(n,1.5),2)))}}},{kernelName:fr,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>ki(uu(n),"float32"),t:()=>au(e,ki(n,e.dtype)),e:()=>au(e,ki(Ec(n),e.dtype))}}},{kernelName:mr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ec(n,gu(0)),r=gu(Vd),s=gu(Wd),a=au(e,s),i=au(au(e,r),ql(ki(n,"float32")));return Vl(t,a,i)}}}},{kernelName:wr,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(e,au(n,ku(gu(1),n)))}}},{kernelName:xr,gradFunc:e=>({x:()=>uu(e)})},{kernelName:yr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(_l(ki(n,"float32")),e)}}},{kernelName:br,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(Fl(ki(n,"float32")),e)}}},{kernelName:gr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{begin:s,size:a}=n,i=r.shape,[o,u]=bo(r,s,a),l=[];for(let t=0;t<e.rank;t++)l.push([o[t],i[t]-o[t]-u[t]]);return{x:()=>Xc(e,l)}}},{kernelName:Cr,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[r]=t,{dim:s}=n,a=au(e,r);return{logits:()=>ku(a,au(yc(a,[s],true),r))}}},{kernelName:vr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(e,ul(n))}}},$m,$m,Em,Em,{kernelName:kr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,au(iu(ki(n,"float32")),2))}}},{kernelName:_r,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=gu(2);return{a:()=>au(e,au(s,ku(n,r))),b:()=>au(e,au(s,ku(r,n)))}}},{kernelName:Fr,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(e,au(ki(n,"float32"),2))}}},{kernelName:Xr,gradFunc:e=>({x:()=>uu(e)})},{kernelName:zr,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,r]=t,s=Tu(n.shape,r.shape);return{a:()=>{let t=e;const r=Cu(n.shape,s);return r.length>0&&(t=yc(t,r)),sl(t,n.shape)},b:()=>{let t=e;const n=Cu(r.shape,s);return n.length>0&&(t=yc(t,n)),sl(dc(t),r.shape)}}}},{kernelName:Ir,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,s=r.shape.slice(),{axis:a}=n;ge(a,r.shape).forEach((e=>{s[e]=1}));const i=sl(e,s),o=au(i,Lc(r.shape,"float32"));return{x:()=>o}}},{kernelName:Br,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>su(e,ou(_l(n)))}}},{kernelName:Pr,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>au(ku(gu(1),ou(n)),e)}}},{kernelName:Vr,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[r]=t,{reps:s}=n;return{x:()=>{let t=uu(r);if(1===r.rank)for(let n=0;n<s[0];++n)t=nu(t,ll(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)t=nu(t,ll(e,[n*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)t=nu(t,ll(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let a=0;a<s[1];++a)for(let i=0;i<s[2];++i)for(let o=0;o<s[3];++o)t=nu(t,ll(e,[n*r.shape[0],a*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return t}}}},{kernelName:Gr,gradFunc:(e,t,n)=>{const r=n,{perm:s}=r,a=Sc(s);return{x:()=>Gi(e,a)}}},{kernelName:Hr,gradFunc:(e,t,n)=>{const r=n,{axis:s}=r;return{value:()=>Wh(e,s)}}},{kernelName:qr,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=$u(t,uu(t)),r=Ql(e,n);let s=tc(t,gu(0,"int32"));const a=r.rank-s.rank;for(let e=0;e<a;++e)s=Kl(s,e+1);s=$c(s,Lc(r.shape,"bool"));const i=uu(r);return Vl(s,r,i)}(e,n)}}},{kernelName:Kr,gradFunc:e=>({x:()=>uu(e)})}];for(const e of Am)os(e);let Rm;function _m(){return null==Rm&&(Rm=eu().epsilon()),Rm}js().prototype.abs=function(){return this.throwIfDisposed(),Nu(this)},js().prototype.acos=function(){return this.throwIfDisposed(),Fu(this)},js().prototype.acosh=function(){return this.throwIfDisposed(),Du(this)},js().prototype.add=function(e){return this.throwIfDisposed(),nu(this,e)},js().prototype.all=function(e,t){return this.throwIfDisposed(),Mu(this,e,t)},js().prototype.any=function(e,t){return this.throwIfDisposed(),Lu(this,e,t)},js().prototype.argMax=function(e){return this.throwIfDisposed(),zu(this,e)},js().prototype.argMin=function(e){return this.throwIfDisposed(),Bu(this,e)},js().prototype.asScalar=function(){return this.throwIfDisposed(),ne(1===this.size,(()=>"The array must have only 1 element.")),sl(this,[])},js().prototype.asType=function(e){return this.throwIfDisposed(),ki(this,e)},js().prototype.as1D=function(){return this.throwIfDisposed(),sl(this,[this.size])},js().prototype.as2D=function(e,t){return this.throwIfDisposed(),sl(this,[e,t])},js().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),sl(this,[e,t,n])},js().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),sl(this,[e,t,n,r])},js().prototype.as5D=function(e,t,n,r,s){return this.throwIfDisposed(),sl(this,[e,t,n,r,s])},js().prototype.asin=function(){return this.throwIfDisposed(),Pu(this)},js().prototype.asinh=function(){return this.throwIfDisposed(),Vu(this)},js().prototype.atan=function(){return this.throwIfDisposed(),Wu(this)},js().prototype.atan2=function(e){return this.throwIfDisposed(),Uu(this,e)},js().prototype.atanh=function(){return this.throwIfDisposed(),Gu(this)},js().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),al(this,e,t,n,r)},js().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),pl(this,e,t)},js().prototype.batchNorm=function(e,t,n,r,s){return this.throwIfDisposed(),dl(this,e,t,n,r,s)},js().prototype.broadcastTo=function(e){return this.throwIfDisposed(),bl(this,e)},js().prototype.cast=function(e){return this.throwIfDisposed(),ki(this,e)},js().prototype.ceil=function(){return this.throwIfDisposed(),xl(this)},js().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),wl(this,e,t)},js().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof Gs&&(e=[e]),ol([this,...e],t)},js().prototype.conv1d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Cl(this,e,t,n,r,s,a)},js().prototype.conv2dTranspose=function(e,t,n,r,s){return this.throwIfDisposed(),$l(this,e,t,n,r,s)},js().prototype.conv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Sl(this,e,t,n,r,s,a)},js().prototype.cos=function(){return this.throwIfDisposed(),_l(this)},js().prototype.cosh=function(){return this.throwIfDisposed(),Fl(this)},js().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Dl(this,e,t,n)},js().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Ml(this,e,t)},js().prototype.depthwiseConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Ll(this,e,t,n,r,s,a)},js().prototype.dilation2d=function(e,t,n,r,s){return this.throwIfDisposed(),Bl(this,e,t,n,r,s)},js().prototype.divNoNan=function(e){return this.throwIfDisposed(),Wl(this,e)},js().prototype.div=function(e){return this.throwIfDisposed(),su(this,e)},js().prototype.dot=function(e){return this.throwIfDisposed(),Ul(this,e)},js().prototype.elu=function(){return this.throwIfDisposed(),jl(this)},js().prototype.equal=function(e){return this.throwIfDisposed(),Pl(this,e)},js().prototype.erf=function(){return this.throwIfDisposed(),Hl(this)},js().prototype.exp=function(){return this.throwIfDisposed(),ql(this)},js().prototype.expandDims=function(e){return this.throwIfDisposed(),Kl(this,e)},js().prototype.expm1=function(){return this.throwIfDisposed(),Xl(this)},js().prototype.fft=function(){return this.throwIfDisposed(),Oh(this)},js().prototype.flatten=function(){return this.throwIfDisposed(),sl(this,[this.size])},js().prototype.floor=function(){return this.throwIfDisposed(),Jl(this)},js().prototype.floorDiv=function(e){return this.throwIfDisposed(),ru(this,e)},js().prototype.gather=function(e,t){return this.throwIfDisposed(),Ql(this,e,t)},js().prototype.greaterEqual=function(e){return this.throwIfDisposed(),tc(this,e)},js().prototype.greater=function(e){return this.throwIfDisposed(),ec(this,e)},js().prototype.ifft=function(){return this.throwIfDisposed(),Mh(this)},js().prototype.irfft=function(){return this.throwIfDisposed(),Lh(this)},js().prototype.isFinite=function(){return this.throwIfDisposed(),rc(this)},js().prototype.isInf=function(){return this.throwIfDisposed(),sc(this)},js().prototype.isNaN=function(){return this.throwIfDisposed(),ac(this)},js().prototype.leakyRelu=function(e){return this.throwIfDisposed(),ic(this,e)},js().prototype.lessEqual=function(e){return this.throwIfDisposed(),uc(this,e)},js().prototype.less=function(e){return this.throwIfDisposed(),oc(this,e)},js().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),cc(this,e,t,n,r)},js().prototype.logSigmoid=function(){return this.throwIfDisposed(),mc(this)},js().prototype.logSoftmax=function(e){return this.throwIfDisposed(),bc(this,e)},js().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Tc(this,e,t)},js().prototype.log=function(){return this.throwIfDisposed(),hc(this)},js().prototype.log1p=function(){return this.throwIfDisposed(),pc(this)},js().prototype.logicalAnd=function(e){return this.throwIfDisposed(),$c(this,e)},js().prototype.logicalNot=function(){return this.throwIfDisposed(),Ec(this)},js().prototype.logicalOr=function(e){return this.throwIfDisposed(),Ac(this,e)},js().prototype.logicalXor=function(e){return this.throwIfDisposed(),Rc(this,e)},js().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Wi(this,e,t,n)},js().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),_c(this,e,t,n,r)},js().prototype.max=function(e,t){return this.throwIfDisposed(),gc(this,e,t)},js().prototype.maximum=function(e){return this.throwIfDisposed(),$u(this,e)},js().prototype.mean=function(e,t){return this.throwIfDisposed(),Oc(this,e,t)},js().prototype.min=function(e,t){return this.throwIfDisposed(),Bc(this,e,t)},js().prototype.minimum=function(e){return this.throwIfDisposed(),Pc(this,e)},js().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Vc(this,e,t)},js().prototype.mod=function(e){return this.throwIfDisposed(),Wc(this,e)},js().prototype.mul=function(e){return this.throwIfDisposed(),au(this,e)},js().prototype.neg=function(){return this.throwIfDisposed(),dc(this)},js().prototype.norm=function(e,t,n){return this.throwIfDisposed(),op(this,e,t,n)},js().prototype.notEqual=function(e){return this.throwIfDisposed(),Hc(this,e)},js().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Ui(this,e,t,n)},js().prototype.onesLike=function(){return this.throwIfDisposed(),qc(this)},js().prototype.pad=function(e,t){return this.throwIfDisposed(),Xc(this,e,t)},js().prototype.pool=function(e,t,n,r,s){return this.throwIfDisposed(),th(this,e,t,n,r,s)},js().prototype.pow=function(e){return this.throwIfDisposed(),vu(this,e)},js().prototype.prelu=function(e){return this.throwIfDisposed(),nh(this,e)},js().prototype.prod=function(e,t){return this.throwIfDisposed(),rh(this,e,t)},js().prototype.reciprocal=function(){return this.throwIfDisposed(),fh(this)},js().prototype.relu=function(){return this.throwIfDisposed(),mh(this)},js().prototype.relu6=function(){return this.throwIfDisposed(),gh(this)},js().prototype.reshapeAs=function(e){return this.throwIfDisposed(),sl(this,e.shape)},js().prototype.reshape=function(e){return this.throwIfDisposed(),sl(this,e)},js().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Xp(this,e,t,n)},js().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Yp(this,e,t,n)},js().prototype.reverse=function(e){return this.throwIfDisposed(),yh(this,e)},js().prototype.rfft=function(){return this.throwIfDisposed(),Bh(this)},js().prototype.round=function(){return this.throwIfDisposed(),kh(this)},js().prototype.rsqrt=function(){return this.throwIfDisposed(),Ih(this)},js().prototype.selu=function(){return this.throwIfDisposed(),Nh(this)},js().prototype.separableConv2d=function(e,t,n,r,s,a){return this.throwIfDisposed(),Sh(this,e,t,n,r,s,a)},js().prototype.sigmoid=function(){return this.throwIfDisposed(),ul(this)},js().prototype.sign=function(){return this.throwIfDisposed(),Th(this)},js().prototype.sin=function(){return this.throwIfDisposed(),$h(this)},js().prototype.sinh=function(){return this.throwIfDisposed(),Eh(this)},js().prototype.slice=function(e,t){return this.throwIfDisposed(),ll(this,e,t)},js().prototype.softmax=function(e){return this.throwIfDisposed(),Dh(this,e)},js().prototype.softplus=function(){return this.throwIfDisposed(),fc(this)},js().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),eh(this,e,t)},js().prototype.split=function(e,t){return this.throwIfDisposed(),zh(this,e,t)},js().prototype.sqrt=function(){return this.throwIfDisposed(),iu(this)},js().prototype.square=function(){return this.throwIfDisposed(),ou(this)},js().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Ph(this,e)},js().prototype.squeeze=function(e){return this.throwIfDisposed(),Vh(this,e)},js().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof Gs?[this,e]:[this,...e];return Wh(n,t)},js().prototype.step=function(e){return this.throwIfDisposed(),Uh(this,e)},js().prototype.stridedSlice=function(e,t,n,r,s,a,i,o){return this.throwIfDisposed(),Gh(this,e,t,n,r,s,a,i,o)},js().prototype.sub=function(e){return this.throwIfDisposed(),ku(this,e)},js().prototype.sum=function(e,t){return this.throwIfDisposed(),yc(this,e,t)},js().prototype.tan=function(){return this.throwIfDisposed(),jh(this)},js().prototype.tanh=function(){return this.throwIfDisposed(),cl(this)},js().prototype.tile=function(e){return this.throwIfDisposed(),Yl(this,e)},js().prototype.toBool=function(){return this.throwIfDisposed(),ki(this,"bool")},js().prototype.toFloat=function(){return this.throwIfDisposed(),ki(this,"float32")},js().prototype.toInt=function(){return this.throwIfDisposed(),ki(this,"int32")},js().prototype.topk=function(e,t){return this.throwIfDisposed(),Zh(this,e,t)},js().prototype.transpose=function(e){return this.throwIfDisposed(),Gi(this,e)},js().prototype.unique=function(e){return this.throwIfDisposed(),Qh(this,e)},js().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),ep(this,e,t)},js().prototype.unstack=function(e){return this.throwIfDisposed(),tp(this,e)},js().prototype.where=function(e,t){return this.throwIfDisposed(),Vl(e,this,t)},js().prototype.zerosLike=function(){return this.throwIfDisposed(),uu(this)};class Fm extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Fm.prototype)}}class Dm extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Dm.prototype)}}class Om extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Om.prototype)}}class Mm extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Mm.prototype)}}class Lm extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Lm.prototype)}}Error;function zm(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Bm(e,t){if(!e)throw new Lm(t)}function Pm(e,t){let n=0;for(const r of e)r===t&&n++;return n}function Vm(e){return 1===e.length?e[0]:e}function Wm(e){return Array.isArray(e)?e:[e]}function Um(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Gm(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let jm={};function Hm(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function qm(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>qm(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?qm(t):e[n]=t.value)}}}function Km(e,t={},n={},r="object",s=!1){if("string"==typeof e){const s=e;let a;if(s in n)a=n[s];else if(s in jm)a=jm[s];else if(a=t[s],null==a)throw new Om(`Unknown ${r}: ${e}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Om(`${r}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,u;if(i in n?[o,u]=n[i]:i in jm?[o,u]=jm.className:i in t&&([o,u]=t[i]),null==o)throw new Om(`Unknown ${r}: ${i}. This may be due to one of the following reasons:\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const e={};for(const t of Object.keys(jm))e[t]=jm[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},jm);for(const e of Object.keys(n))jm[e]=n[e];qm(a.config);const r=u(o,a.config,n,s);return jm=Object.assign({},t),r}{const e=Object.assign({},jm);for(const e of Object.keys(n))jm[e]=n[e];const t=new o(a.config);return jm=Object.assign({},e),t}}}function Xm(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Ym(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Zm(e){if(null==e)throw new Om(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function Jm(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Om(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function Qm(e,t,n=0,r=1/0){return Bm(n>=0),Bm(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every((e=>typeof e===t))}function eg(e,t){Array.isArray(e)?(ne(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>eg(e,`element ${n+1} of ${t}`)))):ne(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${tg(e)}.`))}function tg(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>tg(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function ng(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function rg(e,t){return Uo((()=>iu(yc(au(e,e),t,!0))))}class sg extends wo{getConfig(){return{}}}class ag extends sg{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Uo((()=>{const t=rg(e,this.axis),n=wl(t,0,this.maxValue);return au(e,su(n,nu(_m(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}ag.className="MaxNorm",ko(ag);class ig extends sg{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Uo((()=>su(e,nu(_m(),rg(e,this.axis)))))}getConfig(){return{axis:this.axis}}}ig.className="UnitNorm",ko(ig);class og extends sg{apply(e){return mh(e)}}og.className="NonNeg",ko(og);class ug extends sg{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Uo((()=>{const t=rg(e,this.axis),n=nu(au(this.rate,wl(t,this.minValue,this.maxValue)),au(1-this.rate,t));return au(e,su(n,nu(_m(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}ug.className="MinMaxNorm",ko(ug);const lg={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function cg(e){return Hm(e)}function hg(e,t={}){return Km(e,vo.getMap().classNameMap,t,"constraint")}function pg(e){if(null==e)return null;if("string"==typeof e){return hg({className:e in lg?lg[e]:e,config:{}})}return e instanceof sg?e:hg(e)}function dg(e){return new ag(e)}function fg(e){return new ig(e)}function mg(){return new og}function gg(e){return new ug(e)}const yg=["channelsFirst","channelsLast"],bg=["nearest","bilinear"],xg=["valid","same","causal"],wg=["max","avg"],vg=["sum","mul","concat","ave"],kg=new Map;function Ig(e){Jm(yg,"DataFormat",e)}function Ng(e){Jm(xg,"PaddingMode",e)}function Sg(e){Jm(wg,"PoolMode",e)}const Cg=[];function Tg(e,t){Cg.push(e);try{const e=t();return Cg.pop(),e}catch(e){throw Cg.pop(),e}}function $g(e){if(!Rg(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===Cg.length?"":Cg.join("/")+"/")+e}function Eg(e){if(!Rg(e))throw new Error("Not a valid tensor name: '"+e+"'");kg.has(e)||kg.set(e,0);const t=kg.get(e);if(kg.set(e,kg.get(e)+1),t>0){const n=`${e}_${t}`;return kg.set(n,1),n}return e}const Ag=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Rg(e){return!!e.match(Ag)}function _g(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let s=t;s<n;++s)r*=e[s];return r}function Fg(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r<t&&(t=r)}return t}function Dg(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const r=e[n];r>t&&(t=r)}return t}function Og(e,t){if(t<e)throw new Om(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let r=e;r<t;++r)n.push(r);return n}function Mg(e,t){return ki(e,t)}function Lg(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),sl(e,n)}function zg(e,t,n){return Uo((()=>{switch(e.rank){case 1:return Ah(e,t,n);case 2:return Rh(e,[t,0],[n,e.shape[1]]);case 3:return _h(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Fh(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return ll(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return ll(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Om(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Bg(e,t,n){return Uo((()=>{switch(e.rank){case 1:return Ah(e,t,n);case 2:return Rh(e,[0,t],[e.shape[0],n]);case 3:return _h(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Fh(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Om(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Pg(e,t,n,r){return Uo((()=>{switch(e.rank){case 1:return Ah(e,t,n);case 2:switch(r){case 1:return zg(e,t,n);case 2:return Bg(e,t,n);default:throw new Om(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return zg(e,t,n);case 2:return _h(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Bg(e,t,n);default:throw new Om(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return zg(e,t,n);case 2:return Fh(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Fh(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Bg(e,t,n);default:throw new Om(`The axis is not within the rank of the tensor ${r}`)}default:throw new Om(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Vg(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),ol(e,t)}function Wg(e,t){switch(e.rank){case 1:return vl([e,t]);case 2:return kl([e,t],0);case 3:return Il([e,t],0);case 4:return Nl([e,t],0);default:throw new Om(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Ug(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Om(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return Yl(e,t)}function Gg(e,t=0,n=1,r,s){return ch(e,t,n,r,s)}function jg(e,t,n,r){if(e.rank<2||t.rank<2)throw new Mm(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Mm(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){return Sp({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?Kg(e.rank,r,"channelsLast"):null,activation:n})}{const s=e.shape.slice(),a=s.pop();e=sl(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),u=i.pop(),l=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=sl(Gi(t,c),[u,-1]);const h=[...s,...l];return sl(Sp({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?Kg(e.rank,r,"channelsLast"):null,activation:n}),h)}}function Hg(e,t,n){return Uo((()=>(t=Array.isArray(t)?Hh(t,"int32"):ki(t,"int32"),Ql(e,t,n))))}function qg(e){return au(e,e)}function Kg(e,t,n){const r=t.shape;if(1!==t.rank&&t.rank!==e)throw new Om(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?sl(t,[1,r[0],1,1,1]):sl(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?sl(t,[1,1,1,1,r[0]]):sl(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?sl(t,[1,r[0],1,1]):sl(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?sl(t,[1,1,1,r[0]]):sl(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?sl(t,[1,r[0],1]):sl(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?sl(t,[1,1,r[0]]):sl(t,[1].concat(r))}else if(e<3)return t;throw new Om(`Unsupported input rank by biasAdd: ${t.rank}`)}function Xg(e,t,n){return Uo((()=>(null==n&&(n="channelsLast"),Ig(n),nu(e,Kg(e.rank,t,n)))))}function Yg(e,t,n,r){return Uo((()=>pp(e,t,n,r)))}function Zg(e,t,n=!1){return n?e():t()}const Jg=["fanIn","fanOut","fanAvg"],Qg=["normal","uniform","truncatedNormal"];class ey extends wo{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class ty extends ey{apply(e,t){return Mc(e,t)}}ty.className="Zeros",ko(ty);class ny extends ey{apply(e,t){return Lc(e,t)}}ny.className="Ones",ko(ny);class ry extends ey{constructor(e){if(super(),"object"!=typeof e)throw new Om(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Om(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Uo((()=>au(gu(this.value),Lc(e,t))))}getConfig(){return{value:this.value}}}ry.className="Constant",ko(ry);class sy extends ey{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return hh(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}sy.className="RandomUniform",ko(sy);class ay extends ey{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Mm(`randomNormal does not support dType ${t}.`);return Gg(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ay.className="RandomNormal",ko(ay);class iy extends ey{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Mm(`truncatedNormal does not support dType ${t}.`);return Jh(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}iy.className="TruncatedNormal",ko(iy);class oy extends ey{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Uo((()=>{if(2!==e.length||e[0]!==e[1])throw new Om("Identity matrix initializer can only be used for 2D square matrices.");return au(this.gain,Zl(e[0]))}))}getConfig(){return{gain:this.gain}}}oy.className="Identity",ko(oy);class uy extends ey{constructor(e){if(super(),e.scale<0)throw new Om(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,Jm(Jg,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){Jm(Qg,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,r;if(Ig(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=_g(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){const t=_g(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{const t=_g(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],s=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,r):"fanOut"===this.mode?a/=Math.max(1,s):a/=Math.max(1,(r+s)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Mm(`${this.getClassName()} does not support dType ${t}.`);return Jh(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return hh(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}uy.className="VarianceScaling",ko(uy);class ly extends uy{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return uy.className}}ly.className="GlorotUniform",ko(ly);class cy extends uy{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return uy.className}}cy.className="GlorotNormal",ko(cy);class hy extends uy{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return uy.className}}hy.className="HeNormal",ko(hy);class py extends uy{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return uy.className}}py.className="HeUniform",ko(py);class dy extends uy{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return uy.className}}dy.className="LeCunNormal",ko(dy);class fy extends uy{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return uy.className}}fy.className="LeCunNormal",ko(fy);class my extends ey{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Mm("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return Uo((()=>{if(e.length<2)throw new Mm("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Gg(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Id.gramSchmidt(t);return e[0]>e[1]&&(n=Gi(n)),au(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}my.className="Orthogonal",ko(my);const gy={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function yy(e,t={}){return Km(e,vo.getMap().classNameMap,t,"initializer")}function by(e){return Hm(e)}function xy(e){if("string"==typeof e){const t=e in gy?gy[e]:e;if("GlorotNormal"===t)return new cy;if("GlorotUniform"===t)return new ly;if("HeNormal"===t)return new hy;if("HeUniform"===t)return new py;if("LeCunNormal"===t)return new dy;if("LeCunUniform"===t)return new fy;{const e={};return e.className=t,e.config={},yy(e)}}return e instanceof ey?e:yy(e)}function wy(){return new ty}function vy(){return new ny}function ky(e){return new ry(e)}function Iy(e){return new sy(e)}function Ny(e){return new ay(e)}function Sy(e){return new iy(e)}function Cy(e){return new oy(e)}function Ty(e){return new uy(e)}function $y(e){return new ly(e)}function Ey(e){return new cy(e)}function Ay(e){return new hy(e)}function Ry(e){return new py(e)}function _y(e){return new dy(e)}function Fy(e){return new fy(e)}function Dy(e){return new my(e)}let Oy=0;function My(){return Oy++}const Ly={};function zy(e=""){return e in Ly||(Ly[e]=0),Ly[e]+=1,e+Ly[e].toString()}function By(e){return Array.isArray(e)&&Array.isArray(e[0])}function Py(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Vy(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Om(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Wy(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Om(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Uy(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const Gy="Variable";class jy{constructor(e,t="float32",n="Variable",r=!0,s=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=My(),n=null==n?Gy:n,this.originalName=$g(n),this.name=Eg(this.originalName),this.trainable_=r,this.constraint=s,this.val=np(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function Hy(e){return e.map((e=>e.read()))}function qy(e){e.forEach((e=>{e[0].write(e[1])}))}class Ky{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Xy{constructor(e,t,n,r,s,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=i,this.id=My(),null!=a&&(this.originalName=$g(a),this.name=Eg(this.originalName)),this.rank=t.length}}let Yy=0;class Zy{constructor(e,t){this.callArgs=t,this.id=Yy++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Jy=0;class Qy extends wo{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Jy++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Um(e)+"_"+zy(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Dm(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Om(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Vm(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Vm(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Fm(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Fm(`Layer ${this.name} is not connected, no input to return.`);return Vm(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Fm(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Fm(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Vm(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Wm(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Wm(this.inputSpec);if(e.length!==t.length)throw new Om(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const r=e[n],s=t[n];if(null==s)continue;const a=r.rank;if(null!=s.ndim&&a!==s.ndim)throw new Om(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${a}`);if(null!=s.maxNDim&&a>s.maxNDim)throw new Om(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${a}`);if(null!=s.minNDim&&a<s.minNDim)throw new Om(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${a}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Om(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const e=r.shape;for(const t in s.axes){const r=Number(t),a=s.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=a&&-1===[a,null].indexOf(i))throw new Om(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=s.shape)for(let e=0;e<s.shape.length;++e){const t=s.shape[e],a=r.shape[e];if(null!=t&&null!=a&&t!==a)throw new Om(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Wm(e);let r=!0;for(const e of n)if(!(e instanceof Xy)){r=!1;break}let s=!0;for(const e of n)if(e instanceof Xy){s=!1;break}if(r===s)throw new Om("Arguments to apply() must be all SymbolicTensors or all Tensors");return Tg(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Wm(e))t.push(n.shape);this.build(Vm(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(e),s){let r=this.call(e,t);const s=Wm(r),a=[];for(let e of s)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(r=Vm(a),null!=this.activityRegularizer)throw new Mm("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{const n=function(e){e=Wm(e);const t=[];for(const n of e)t.push(n.shape);return Vm(t)}(e),r=this.computeOutputShape(n);let s;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new Xy(a,n,this,Wm(e),t,this.name,r))):new Xy(a,r,this,Wm(e),t,this.name),this.addInboundNode(e,s,null,null,n,r,t),this._refCount++,null!=this.activityRegularizer)throw new Mm("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Fm(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Fm(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Dm(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Uy(this.weights)}build(e){this.built=!0}getWeights(e=!1){return Hy(e?this.trainableWeights:this.weights)}setWeights(e){Uo((()=>{const t=this.weights;if(t.length!==e.length)throw new Om(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],r=Hy(t);for(let s=0;s<r.length;++s){const a=r[s],i=t[s],o=e[s];if(!ue(a.shape,o.shape))throw new Om(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}qy(n)}))}addWeight(e,t,n,r,s,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Om(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=xy("zeros"));const o=r.apply(t,n),u=new jy(o,n,e,a,i);return o.dispose(),null!=s&&this.addLoss((()=>s.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Wm(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,r,s,a,i=null){const o=Wm(e);t=Wm(t),n=Wm(n),r=Wm(r),s=Py(s),a=Py(a);const u=[],l=[],c=[];for(const e of o)u.push(e.sourceLayer),l.push(e.nodeIndex),c.push(e.tensorIndex);new Zy({outboundLayer:this,inboundLayers:u,nodeIndices:l,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function eb(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const r=eb(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of r)-1===t.indexOf(e)&&t.push(e)}return t}}}class tb extends Qy{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:zy("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Om("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Om("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Om("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const r=new Xy(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Zy({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Om(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function nb(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Om("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new tb({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function rb(e){if(null==e)return;const t=[],n=[],r=[];for(const s in e){const a=e[s];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(s),r.push(e)}}if(t.length>0){const s=await Promise.all(t);for(let t=0;t<s.length;++t)e[n[t]]=s[t][0];Go(r)}}function sb(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var ab;tb.className="InputLayer",ko(tb),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(ab||(ab={}));class ib{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class ob{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class ub extends ib{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const s=Uo((()=>nu(this.totals[e],au(r,n))));this.totals[e]=s,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Uo((()=>{const n=au(su(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),jo(t[e])})))}}class lb extends ib{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const r in this.history){const s=this.history[r];for(let a=0;a<s.length;++a)if("number"!=typeof s[a]){const i=s[a];e.push(i.data()),t.push(r),n.push(a)}}const r=await Promise.all(e);for(let e=0;e<r.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class cb extends ib{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");$e(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,r=$s();return(...s)=>{const a=$s();return a-r<t||(r=a,n=e(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const r=[];null!=this.yield&&(await rb(n),r.push(this.yield(e,t,n))),r.push(Ad()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await rb(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await rb(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Ad()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await rb(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await rb(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Ad()):$e(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await rb(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await rb(e),await this.trainEnd(e))}}function hb(e,t){if(null==e&&(e={}),e instanceof ib)return[e];if(Array.isArray(e)&&e[0]instanceof ib)return e;return Wm(e).map((e=>new cb(e,t)))}class pb{constructor(){}static registerCallbackConstructor(e,t){ne(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),pb.checkForDuplicate(t),null==pb.constructors[e]&&(pb.constructors[e]=[]),pb.constructors[e].push(t)}static checkForDuplicate(e){for(const t in pb.constructors){pb.constructors[+t].forEach((t=>{if(t===e)throw new Om("Duplicate callback constructor.")}))}}static clear(){pb.constructors={}}static createCallbacks(e){const t=[];for(const n in pb.constructors){const r=+n;e>=r&&t.push(...pb.constructors[r])}return t.map((e=>new e))}}function db(e,t,n,r,s,a,i,o,u){const l=new lb,c=[new ub,...pb.createCallbacks(t)];null!=e&&c.push(...e),c.push(l);const h=new ob(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:u}),{callbackList:h,history:l}}function fb(e,t={},n=!1){return Km(e,vo.getMap().classNameMap,t,"layer",n)}function mb(e,t){return Uo((()=>{"float32"!==e.dtype&&(e=ki(e,"float32"));const n=yc(qg(e),t,!0),r=xu(n.shape,_m()),s=iu($u(n,r));return su(e,s)}))}function gb(e,t){return Uo((()=>Oc(qg(ku(t,e)),-1)))}function yb(e,t){return Uo((()=>Oc(Nu(ku(t,e)),-1)))}function bb(e,t){return Uo((()=>{const n=ku(e,t),r=wl(Nu(e),_m(),Number.MAX_VALUE),s=Nu(su(n,r));return au(100,Oc(s,-1))}))}function xb(e,t){return Uo((()=>{const n=wl(t,_m(),Number.MAX_VALUE),r=hc(nu(1,n)),s=wl(e,_m(),Number.MAX_VALUE),a=hc(nu(1,s));return Oc(qg(ku(r,a)),-1)}))}function wb(e,t,n=!1){return Uo((()=>{if(n)t=Dh(t);else{const e=yc(t,t.shape.length-1,!0);t=su(t,e)}return t=wl(t,_m(),1-_m()),dc(yc(au(ki(e,"float32"),hc(t)),t.shape.length-1))}))}function vb(e,t,n=!1){return Uo((()=>{const r=ki(Jl(function(e){const t=[_g(e.shape)];return sl(e,t)}(e)),"int32"),s=(t=wl(t,_m(),1-_m())).shape;return wb(sl(Ui(r,s[s.length-1]),s),t,n)}))}function kb(e,t){return Uo((()=>{let n;return n=wl(t,_m(),1-_m()),n=hc(su(n,ku(1,n))),Oc(function(e,t){if(!ue(e.shape,t.shape))throw new Om(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Uo((()=>{const n=mh(t),r=dc(Nu(t));return nu(ku(n,au(t,e)),pc(ql(r)))}))}(e,n),-1)}))}function Ib(e,t){return Uo((()=>{const n=wl(e,_m(),1),r=wl(t,_m(),1);return yc(au(e,hc(su(n,r))),-1)}))}function Nb(e,t){return Uo((()=>{const n=mb(e,-1),r=mb(t,-1),s=au(n,r);return dc(yc(s,-1))}))}pb.constructors={};const Sb={meanSquaredError:gb,meanAbsoluteError:yb,meanAbsolutePercentageError:bb,meanSquaredLogarithmicError:xb,squaredHinge:function(e,t){return Uo((()=>{const n=$u(0,ku(1,au(e,t)));return Oc(qg(n),-1)}))},hinge:function(e,t){return Uo((()=>{const n=$u(0,ku(1,au(e,t)));return Oc(n,-1)}))},categoricalHinge:function(e,t){return Uo((()=>{const n=yc(au(e,t),-1),r=gc(au(ku(1,e),t),-1);return $u(0,nu(1,ku(r,n)))}))},logcosh:function(e,t){return Uo((()=>{const n=Math.log(2),r=ku(t,e),s=ku(nu(r,fc(au(-2,r))),n);return Oc(s,-1)}))},categoricalCrossentropy:wb,sparseCategoricalCrossentropy:vb,binaryCrossentropy:kb,kullbackLeiblerDivergence:Ib,poisson:function(e,t){return Uo((()=>{const n=hc(nu(_m(),t));return Oc(ku(t,au(e,n)),-1)}))},cosineProximity:Nb};function Cb(e){if("string"==typeof e){if(e in Sb)return Sb[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Om(t)}return e}function Tb(e,t){return Uo((()=>{const n=au(.5,qc(t)),r=Mg(ec(t,n),e.dtype);return Oc(Pl(e,r),-1)}))}function $b(e,t){return Uo((()=>Mg(Pl(zu(e,-1),zu(t,-1)),"float32")))}function Eb(e,t){return Uo((()=>ki(yc($c(Pl(e,1),Pl(t,1))),"float32")))}function Ab(e,t){return Uo((()=>{const n=Eb(e,t),r=function(e,t){return Uo((()=>ki(yc($c(Pl(e,0),Pl(t,1))),"float32")))}(e,t),s=nu(n,r);return ki(Vl(ec(s,0),su(n,s),0),"float32")}))}function Rb(e,t){return Uo((()=>{const n=Eb(e,t),r=function(e,t){return Uo((()=>ki(yc($c(Pl(e,1),Pl(t,0))),"float32")))}(e,t),s=nu(n,r);return ki(Vl(ec(s,0),su(n,s),0),"float32")}))}function _b(e,t){return kb(e,t)}function Fb(e,t){return e.rank===t.rank&&(e=Vh(e,[e.rank-1])),(t=zu(t,-1)).dtype!==e.dtype&&(t=ki(t,e.dtype)),ki(Pl(e,t),"float32")}const Db=wb,Ob=vb,Mb={binaryAccuracy:Tb,categoricalAccuracy:$b,precision:Ab,categoricalCrossentropy:Db,sparseCategoricalCrossentropy:Ob,mse:gb,MSE:gb,mae:yb,MAE:yb,mape:bb,MAPE:bb,cosine:Nb};function Lb(e){if("string"==typeof e&&e in Mb)return Mb[e];if("string"!=typeof e&&null!=e)return e;throw new Om(`Unknown metric ${e}`)}function zb(e){if(Bm(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Sb))if(Sb[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Mb))if(Mb[n]===e){t=n;break}return void 0!==t?t:e.name}}const Bb=1048576;function Pb(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Vb(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>Bb&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Vb(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Vb(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Vb(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function Wb(e,t,n,r=console.log){const s=function(e){let t=!0;const n=[],r=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(s?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!s){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}r("_".repeat(t)),Ub(a,n,r),r("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)s?Gb(o[e],n,r):jb(o[e],n,i,r),r((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const u=function(e){let t;t=null!=e.collectedTrainableWeights?Uy(e.collectedTrainableWeights):Uy(e.trainableWeights);return t}(e),l=Uy(e.nonTrainableWeights);r(`Total params: ${u+l}`),r(`Trainable params: ${u}`),r(`Non-trainable params: ${l}`),r("_".repeat(t))}function Ub(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function Gb(e,t,n){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}Ub([`${e.name} (${e.getClassName()})`,r,e.countParams().toString()],t,n)}function jb(e,t,n,r){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,r=t.nodeIndices[e],s=t.tensorIndices[e];a.push(`${n}[${r}][${s}]`)}const i=e.name,o=e.getClassName(),u=0===a.length?"":a[0];Ub([`${i} (${o})`,s,e.countParams().toString(),u],t,r);for(let e=1;e<a.length;++e)Ub(["","","",a[e]],t,r)}function Hb(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function qb(e,t){if(null===e)return null;if("string"==typeof e)return Gm(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];Hb(t,s,r)?n.push(r):n.push(qb(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{const e=Gm(n);t[e]=qb(r,e)}}return t}}function Kb(e,t){if(null==e)return null;if("string"==typeof e)return Um(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],r=e.length;for(let s=0;s<r;++s){const r=e[s];Hb(t,s,r)?n.push(r):n.push(Kb(r,t))}return n}{const t={};for(const n of Object.keys(e)){const r=e[n],s=Um(n);t[s]="name"!==n&&"className"!==n||"string"!=typeof r?Kb(r,n):r}return t}}const Xb="3.8.0";class Yb{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Yb)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Om(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return ki(t,e.dtype)}catch(n){throw new Om(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Xy){if(null==this.id2Value[e.id])throw new Om(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Om(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Xy){if(null==this.id2Value[e.id])throw new Om(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Om(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Go(this.id2Mask)}}const Zb={},Jb={};function Qb(e,t,n,r){const s=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),u=[],l=t.names();for(const e of o)-1!==l.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==Zb[c]){const e=function(e,t){ne(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],r={};if(1===e.length){const s=tx(e[0],t);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const a of e){const{sorted:e,recipientMap:i}=tx(a,t);for(const t of e)s.has(t.name)||(n.push(t),s.add(t.name));for(const e in i)null==r[e]&&(r[e]=new Set),i[e].forEach((t=>r[e].add(t)))}}return{sorted:n,recipientCounts:ex(r)}}(i,t);h=e.sorted,p=e.recipientCounts,Zb[c]=h,Jb[c]=p}h=Zb[c],p={},s||Object.assign(p,Jb[c]);const d=new Yb(t);for(let e=0;e<h.length;++e){if(null!=r){const e=Vo().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof tb)continue;const l=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),r=d.getMask(e);l.push(n),c.push(r),null!=r&&(m=!0),s||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Wm(i.apply(l,n));let y=null;i.supportsMasking&&(y=i.computeMask(l,c));const b=nx(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}s||Go(f)}return d.disposeMasks(),a?u:u[0]}function ex(e){const t={};for(const n in e)t[n]=e[n].size;return t}function tx(e,t){const n=new Set,r=[],s={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),r.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==s[t.name]&&(s[t.name]=new Set),s[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:r,recipientMap:s}}function nx(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class rx extends Qy{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=zy(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Ym(this.inputs).length!==this.inputs.length)throw new Om(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Ym(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;Bm(0===n,"input layer has >1 nodes"),Bm(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof tb))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},r={},s={},a={},i=[],o=(e,t,n,r,s,u)=>{null!=r&&null!=s&&null!=u||(r=e.sourceLayer,s=e.nodeIndex,u=e.tensorIndex);const l=r.inboundNodes[s];if(-1!==n.indexOf(l))throw new Dm(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(l))return;this.containerNodes.add(rx.nodeKey(r,s)),r.id in a||(a[r.id]=Object.keys(a).length),-1===n.indexOf(l)&&n.push(l);const c=l.inboundLayers.length;for(let e=0;e<c;e++){const r=l.inputTensors[e],s=l.inboundLayers[e],a=l.nodeIndices[e],i=l.tensorIndices[e];o(r,t,n,s,a,i)}for(t.push(l);n.indexOf(l)>=0;)n.splice(n.indexOf(l),1);i.push(l)},u=[],l=[];for(const e of this.outputs)o(e,u,l);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];a=Math.max(a,i),r[e.outboundLayer.id]=a,s[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let r=0;r<e.inboundLayers.length;r++){const s=e.inboundLayers[r],i=e.nodeIndices[r],o=s.inboundNodes[i],u=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,u),n[o.id]=o}}const h={};for(const e in t){const r=t[e];r in h||(h[r]=[]),h[r].push(n[e])}const p={};for(const e in r){const t=r[e];t in p||(p[t]=[]),p[t].push(s[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(Xm);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],r=a[t.id];return n<r?-1:n>r?1:0}));for(const e of t)e instanceof rx&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(Xm);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Dm(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Dm(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Zy({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Om("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let r=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Om(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}const s=[];for(const r in e){let a=r;if(null==n[r]){const e=r.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])s.push([n[a],e[r]]);else if(t)throw new Om(`Provided weight data has no target variable: ${r}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Om(`${e.length} of ${r} weights are not set: ${e}`)}qy(s)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Xb}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Kb(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Uo((()=>{e=Wm(e);const n=new Yb;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return Qb(this.outputs,n,t)}))}computeMask(e,t){return Uo((()=>{let n;return e=Wm(e),n=null==t?zm(null,e.length):Wm(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Py(e);if(t.length!==this.inputLayers.length)throw new Om(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const r=this.inputLayers[e],s=t[e];n[r.name+"_0_0"]=s}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Xm);if(r.length>1)for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const r=[];for(let t=0;t<e.inboundLayers.length;t++){const s=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${s.name}_${a}_${i}`];r.push(o)}const s=Py(t.computeOutputShape(Vm(r))),a=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){n[`${t.name}_${a}_${e}`]=s[e]}}}const s=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],s=`${t.name}_${n}_${r}`;a.push(s)}for(let e=0;e<a.length;e++){const t=a[e];Bm(t in n),s.push(n[t])}return Vm(s)}runInternalGraph(e,t){null==t&&(t=zm(null,e.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],a=e[r],i=t[r];n[s.id]=[a,i]}const r=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Xm);for(const e of r){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,r=e.inputTensors,s=e.outputTensors,a=new Array;for(const e of r)e.id in n&&a.push(n[e.id]);if(a.length===r.length){let r,i,o,u,l={};if(null!=e.callArgs&&(l=e.callArgs),1===a.length){const[e,n]=a[0];null==l.mask&&(l.mask=n),o=Wm(t.call(e,l)),u=Wm(t.computeMask(e,n)),r=[e],i=[n]}else r=a.map((e=>e[0])),i=a.map((e=>e[1])),null==l.mask&&(l.mask=i),o=Wm(t.call(r,l)),u=Wm(t.computeMask(r,i));if(t.activityRegularizer)throw new Mm("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<s.length;++e){const t=s[e],r=o[e],a=u[e];n[t.id]=[r,a]}}}}const s=[],a=[],i=[];for(const e of this.outputs){Bm(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,r]=n[e.id];i.push(t.shape),s.push(t),a.push(r)}return[s,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof rx?1:0;for(let r=0;r<e.inboundNodes.length;r++){const s=rx.nodeKey(e,r);this.containerNodes.has(s)&&(t[s]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Om(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Om("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Om(`No such layer: ${e}`)}calculateLosses(){return Uo((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const r=rx.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const r=e.getClassName(),s=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const r=e.inboundNodes[n],s=rx.nodeKey(e,n);let i={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){const e=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],a=r.nodeIndices[n],o=r.tensorIndices[n];let u=t[rx.nodeKey(s,a)];null==u&&(u=0),e.push([s.name,u,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=r,i.config=s,i.inboundNodes=a,n.push(i)}e.layers=n;const r=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],s=this.inputLayersNodeIndices[e],a=rx.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];r.push([n.name,i,o])}e.inputLayers=r;const s=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],a=rx.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];s.push([n.name,i,o])}return e.outputLayers=s,e}static fromConfig(e,t,n={},r=!1){const s={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let r;for(const a of t){const o=a[0],u=a[1],l=a[2];if(r=null==a[3]?{}:a[3],!(o in s))return void i(e,t);const c=s[o];if(c.inboundNodes.length<=u)return void i(e,t);const h=c.inboundNodes[u];n.push(h.outputTensors[l])}n.length>0&&e.apply(Vm(n),r)}function u(e){const n=e.name,a=fb(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(r),s[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Om(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const l=t.name,c=t.layers;for(const e of c)u(e);for(;!Zm(a);)for(const e of c){const t=s[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],r=e[2];Bm(t in s);const a=s[t].inboundNodes[n].outputTensors;h.push(a[r])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],r=e[2];Bm(t in s);const a=s[t].inboundNodes[n].outputTensors;p.push(a[r])}return new e({inputs:h,outputs:p,name:l})}get stateful(){if(this._stateful)throw new Om("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Uo((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function sx(e,t,n){const r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function ax(e,t){return sx(e,t,"classWeight")}async function ix(e,t,n,r){if(null!=t||null!=r)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Uo((()=>{if(1===e.shape.length)return Ii(e);if(2===e.shape.length){if(e.shape[1]>1){return zu(e,1)}if(1===e.shape[1])return sl(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await t.data());Go(t);const s=[];return r.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);s.push(n[e])})),Hh(s,"float32")}return null}function ox(e,t){return au(e,t)}function ux(e,t){let n,r;const s=t;n=s.xs,r=s.ys,ne(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=lx("input",e.inputNames,n),i=lx("output",e.outputNames,r),o=a[0].shape[0];ne(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),ne(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)ne(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)ne(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function lx(e,t,n){if(n instanceof Gs)return[n];if(Array.isArray(n))return ne(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const r=[];for(const s of t){if(null==n[s])throw new Om(`The feature data generated by the dataset lacks the required ${e} key '${s}'.`);r.push(n[s])}return r}}async function cx(e,t,n){const r=null!=n.batchesPerEpoch;if(ne(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),ne(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),ne(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),ne(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),ne(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const s=null!=n.validationData;let a,i;if(s)if(hx(n.validationData))ne(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Mm("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),u=e.getDedupedMetricsNames();let l;l=s?u.slice().concat(u.map((e=>"val_"+e))):u.slice();const c=hb(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=db(c,h,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,s,l);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const l={};await p.onEpochBegin(f);let c=0,h=0;for(r||(m=await t.iterator());!r||c<n.batchesPerEpoch;){const t=await m.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:r,ys:s}=ux(e,t.value),a={};a.batch=h,a.size=r[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=ax(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await ix(s[e],null,t[e]))}const l=r.concat(s).concat(i),d=o(l);Go(l);for(let e=0;e<u.length;++e){const t=u[e],n=d[e];a[t]=n,jo(n)}await p.onBatchEnd(h,a),sb(a),h++,c++}if(r?c>=n.batchesPerEpoch:t.done){if(s){let t;t=hx(n.validationData)?Wm(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Wm(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)l[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,l),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function hx(e){return"function"==typeof e.iterator}function px(e){ne(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function dx(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>zg(e,t,n-t))):zg(e,t,n-t)}function fx(e,t){return Uo((()=>null==e?null:Array.isArray(e)?e.map((e=>fx(e,t))):Hg(e,"int32"===t.dtype?t:ki(t,"int32"))))}function mx(e,t){const n=[];let r=0,s=null;for(;r<e;)s=r+t,s>=e&&(s=e),n.push([r,s]),r=s;return n}async function gx(e,t,n,r={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,a,i,o,u,l,c;e.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;px(h);const p=!1,d=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,p,h);s=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Mm("validationData including sample weights is not supported yet."):new Om(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);i=r.validationData[0],o=r.validationData[1];const t=!0,n=await e.standardizeUserData(i,o,null,null,t,h);u=n[0],l=n[1],f=u.concat(l)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const e=Math.floor(s[0].shape[0]*(1-r.validationSplit)),t=s[0].shape[0];u=dx(s,e,t),s=dx(s,0,e),l=dx(a,e,t),a=dx(a,0,e),f=u.concat(l)}else null!=r.validationSteps&&(m=!0);const g=s.concat(a).concat(c);e.checkTrainableWeightsConsistency();const y=e.makeTrainFunction(),b=e.getDedupedMetricsNames();let x,w;m?(e.makeTestFunction(),x=e.testFunction,w=b.slice().concat(b.map((e=>"val_"+e)))):(x=null,f=[],w=b.slice());const v=hb(r.callbacks,r.yieldEvery);return await async function(e,t,n,r,s,a,i,o,u,l,c,h,p,d,f){null==s&&(s=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=u&&null!=l&&(m=!0),null!=f&&(m=!0,null==d))throw new Om("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=e.checkNumSamples(n,s,d,"steps_per_epoch");let y;null!=g&&(y=Og(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=db(o,i,a,p,g,d,s,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new Mm("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new Mm("batch shuffling is not implemneted yet");c&&K(y);const i=Hh(y),o=mx(g,s);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),Uo((()=>{const p=o[c][0],d=o[c][1],f=zg(i,p,d-p);h.batch=c,h.size=d-p;const g=fx(n,f),y=t(g);for(let e=0;e<r.length;++e){const t=r[e],n=y[e];h[t]=n,jo(n)}if(c===o.length-1&&m){const t=e.testLoop(u,l,s);for(let e=0;e<r.length;++e){const n=r[e],s=t[e];jo(s),a["val_"+n]=s}}})),await b.onBatchEnd(c,h),sb(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,y,g,b,h,r.epochs,r.verbose,v,x,f,r.shuffle,w,r.initialEpoch,null,null)}finally{e.isTraining=!1,bx(s,t),bx(a,n),bx(u,i),bx(l,o),null!=c&&Go(c)}}function yx(e){const t=[];e instanceof Gs&&(e=[e]);for(let n=0;n<e.length;++n){const r=e[n];if(1===r.rank)t.push(Lg(r,1));else{if(0===r.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(r)}}return t}function bx(e,t){if(null==e)return;const n=[];if(t instanceof Gs)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const r=t[e];n.push(r.id)}const r=[];if(e instanceof Gs)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&r.push(e)}));else if(null!=e)for(const t in e){const s=e[t];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((e=>{e.isDisposed||e.dispose()}))}function xx(e){return Array.isArray(e)}function wx(e){return!function(e){return e instanceof Gs}(e)&&!xx(e)}function vx(e,t,n,r=!0,s=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(xx(e)&&e.length>0)t=!0;else if(wx(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Om(`Error when checking model ${s} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(wx(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Om(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(xx(e)){if((e=e).length!==t.length)throw new Om(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new Om(`The model ${s} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=yx(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Om(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[e][a];if(null!=u&&u>=0&&o!==u)throw new Om(`Error when checking ${s}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function kx(e,t,n,r=!0,s=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Om(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Om(`The model expects ${t.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Om(`Error when checking ${s}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!r)continue;const o=i.shape[a],u=n[e][a];if(null!=u&&u!==o)throw new Om(`Error when checking ${s}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Ix extends rx{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Om("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");Wb(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>$d.adagrad(.01),Adadelta:()=>$d.adadelta(1,.95,_m()),Adam:()=>$d.adam(.001,.9,.999,_m()),Adamax:()=>$d.adamax(.002,.9,.999,_m(),0),RMSProp:()=>$d.rmsprop(.001,.9,0,_m()),SGD:()=>$d.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Om(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof yu))throw new Om("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Om(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>Cb(e)))}else{const n=Cb(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Om(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Cb(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Tg("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const r=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),s=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Tg("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,r,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let s;1===t[t.length-1]||this.lossFunctions[e]===kb?-1!==["accuracy","acc"].indexOf(i)?r=Tb:-1!==["crossentropy","ce"].indexOf(i)&&(r=_b):this.lossFunctions[e]===vb?-1!==["accuracy","acc"].indexOf(i)?r=Fb:-1!==["crossentropy","ce"].indexOf(i)&&(r=Ob):-1!==["accuracy","acc"].indexOf(i)?r=$b:-1!==["crossentropy","ce"].indexOf(i)&&(r=Db),-1!==["accuracy","acc"].indexOf(i)?s="acc":-1!==["crossentropy","ce"].indexOf(i)&&(s="ce"),a=r,n=""+s}else{const e=Lb(i);a=e,n=""+zb(i)}let t;Tg(n,(()=>{t=a})),s(e,n,t)}})(r[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const r=null==n.batchSize?32:n.batchSize;px(r);const s=this.standardizeUserDataXY(e,t,!0,r);try{const a=s[0].concat(s[1]);this.makeTestFunction();const i=this.testFunction;return Vm(this.testLoop(i,a,r,n.verbose,n.steps))}finally{bx(s[0],e),bx(s[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const r=null!=(n=n||{}).batches,s=e.testFunction;let a=[];if(n.verbose>0)throw new Mm("Verbose mode is not implemented yet.");ne(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,u=0;for(;!r||u<n.batches;){const t=await i.next();if(a=Uo((()=>{if(t.value){const{xs:n,ys:r}=ux(e,t.value),i=n.concat(r),l=Uo((()=>s(i)));if(Go(i),0===u)for(let e=0;e<l.length;++e)a.push(gu(0));const c=i[0].shape[0];for(let e=0;e<l.length;++e){const t=l[e],n=a[e];a[e]=Uo((()=>nu(a[e],au(c,t)))),u>0&&Go(n)}Go(l),o+=c,++u}return a})),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=su(a[e],o),Go(t)}return Vm(a)}(this,e,t)}checkNumSamples(e,t,n,r="steps"){let s;if(null!=n){if(s=null,null!=t)throw new Om(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Om(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return s}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Om("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),r=n?t:[t],s=this.retrieveSymbolicTensors(r),a=new Yb;if(e instanceof Gs&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Om(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Om(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=Qb(s,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=zm(null,e.length);let n=e.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],a=s.map((e=>e.name));for(let r=0;r<e.length;++r){const i=a.indexOf(e[r]);if(-1!==i&&(t[r]=s[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,r)=>{null==t&&n.push(e[r])})),new Om(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Uo((()=>{const r=this.checkNumSamples(e);if(n)throw new Mm("Verbose predictLoop() is not implemented yet.");const s=mx(r,t),a=this.outputs.map((e=>[]));for(let t=0;t<s.length;++t){Uo((()=>{const n=s[t][0],r=s[t][1],a=dx(e,n,r),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Yb(i);return Qb(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return Vm(a.map((e=>ol(e,0))))}))}predict(e,t={}){const n=yx(e);kx(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==t.batchSize?32:t.batchSize;return px(r),this.predictLoop(n,r)}finally{bx(n,e)}}predictOnBatch(e){kx(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new Dm("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const s=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===vb?s.push(t.slice(0,t.length-1).concat([1])):s.push(t)}if(function(e,t,n){const r=Ym(e.map((e=>e.shape[0])));r.sort();const s=Ym(t.map((e=>e.shape[0])));if(s.sort(),r.length>1)throw new Om(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(s.length>1)throw new Om(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(r.length>0&&s.length>0&&!ue(r,s))throw new Om(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(e=vx(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=vx(t,this.feedOutputNames,s,!1,"target")),function(e,t,n){const r=[gb,kb,wb];for(let s=0;s<e.length;++s){const a=e[s],i=t[s],o=n[s];if(null!=i){if(i===wb&&1===a.shape[a.shape.length-1])throw new Om(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const r=e[n],s=t[n];if(null!=s&&r!==s)throw new Om(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new Om(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,s=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,s,a);if(null!=n)throw new Error("sample weight is not supported yet.");let u=null;if(null!=r){const e=ax(r,this.outputNames);u=[];for(let t=0;t<e.length;++t)u.push(await ix(o[t],null,e[t]))}return[i,o,u]}testLoop(e,t,n,r=0,s){return Uo((()=>{const a=this.checkNumSamples(t,n,s,"steps"),i=[];if(r>0)throw new Mm("Verbose mode is not implemented yet.");if(null!=s)throw new Mm("steps mode in testLoop() is not implemented yet");{const r=mx(a,n),s=Hh(Og(0,a));for(let n=0;n<r.length;++n){const a=r[n][0],o=r[n][1],u=zg(s,a,o-a),l=fx(t,u),c=e(l);if(0===n)for(let e=0;e<c.length;++e)i.push(gu(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=nu(i[e],au(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=su(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const r=e[n];let s=r;if(Pm(e,r)>1){s+=`_${Pm(e.slice(0,n),r)}`}t.push(s)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Yb(e),o=Qb(this.outputs,i,{training:!0});let u;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(r[e],o[e]);null!=s[e]&&(n=ox(n,s[e]));const a=Oc(n);t.push(a),u=0===e?n:nu(u,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],s=this.metricsTensors[e][1];n=Oc(t(r[s],o[s]))}jo(n),a.push(n)}return u=Oc(u),this.calculateLosses().forEach((e=>{u=nu(u,e)})),u}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Uo((()=>{const t=[];let n;const r=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:r[e]});const i=new Yb(a),o=Qb(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const r=this.lossFunctions[e],a=Oc(r(s[e],o[e]));n=0===e?a:nu(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],r=this.metricsTensors[e][1],a=Oc(n(s[r],o[r]));t.push(a)}return t}))}async fit(e,t,n={}){return gx(this,e,t,n)}async fitDataset(e,t){return cx(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),r=n[0],s=n[1],a=this.makeTrainFunction()(r.concat(s)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Go(a),Vm(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let e=0;e<r.length;++e)n&&!r[e].trainable||t.push({name:r[e].originalName,tensor:s[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Vo().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Vo().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Um(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Um(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const r of t){if("string"!=typeof n[r])throw new Error("Serialization of non-string loss is not supported.");e[r]=Um(n[r])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Um(zb(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Um(zb(e))));{const e={};for(const t in this.metrics)e[t]=Um(zb(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=fb(qb(e.optimizer_config));let n,r;if("string"==typeof e.loss)n=Gm(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Gm(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Gm(e.loss[t])}if(Array.isArray(e.metrics))r=e.metrics.map((e=>Gm(e)));else if(null!=e.metrics){r={};for(const t in e.metrics)r[t]=Gm(e.metrics[t])}this.compile({loss:n,metrics:r,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Pa(e);if(0===t.length)throw new Om(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Om(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Om("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Ca(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Xb}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:s}=await Ca(await this.optimizer.getWeights(),e);n.specs.push(...s),n.data=Ra([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Pb(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,e.save(r)}setUserDefinedMetadata(e){Pb(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Ix.className="Model",ko(Ix);class Nx extends Ix{}async function Sx(e,t){"modelTopology"in e||(e={modelTopology:e});let n=(e=e).modelTopology;null!=n.model_config&&(n=n.model_config);const r=fb(qb(n),t);if(null!=e.weightsManifest){const t=await Ri(e.weightsManifest,e.pathPrefix,r.weights.map((e=>e.originalName))),n={};for(const e of r.weights)n[e.originalName]=t[e.originalName];r.loadWeights(n),Go(t)}return r}async function Cx(e,t){if(null==t&&(t={}),"string"==typeof e){const n=Va(e,t);if(0===n.length)n.push(Li(e,t));else if(n.length>1)throw new Om(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){null==n&&(n={});if(null==e.load)throw new Om("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const r=await e.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const a=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&a,o=fb(qb(s),t,i),u=r.trainingConfig;null!=u&&o.loadTrainingConfig(u);null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata);if(null!=r.weightData){if(null==r.weightSpecs)throw new Om("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=Ta(e,t),r={},s=[];return t.forEach((e=>{"optimizer"===e.group?s.push({name:e.name,tensor:n[e.name]}):r[e.name]=n[e.name]})),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),Go(e),Go(t.map((e=>e.tensor)))}return o}(e,void 0,t)}Nx.className="Functional",ko(Nx);class Tx extends Ix{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:zy("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Om(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Tx||e instanceof Ix;let n;if(t){if(n=e,1!==n.outputs.length)throw new Om("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Om("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Om("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=nb({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Om(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Om("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=eb(this.outputs[0])}this.inboundNodes=[],new Zy({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:zm(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Wy(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ix({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Dm("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Dm("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Dm("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Dm("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let s,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Om("Legacy serialization format not supported yet.");s=t}else ne(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),s=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Tx))throw new Mm(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of s){const t=fb(e,void 0,r);r&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Om("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Om("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function $x(e){return new Ix(e)}function Ex(e){return new Tx(e)}function Ax(e,t){return null==t&&(t={}),Cx(e,t)}function Rx(e){return nb(e)}function _x(e,t){pb.registerCallbackConstructor(e,t)}Tx.className="Sequential",ko(Tx);class Fx extends wo{getConfig(){return{}}}class Dx extends Fx{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Mm(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return jl(e)}(e,t)}}Dx.className="elu",ko(Dx);class Ox extends Fx{apply(e){return Nh(e)}}Ox.className="selu",ko(Ox);class Mx extends Fx{apply(e){return mh(e)}}Mx.className="relu",ko(Mx);class Lx extends Fx{apply(e){return Uo((()=>Pc(6,mh(e))))}}Lx.className="relu6",ko(Lx);class zx extends Fx{apply(e){return e}}zx.className="linear",ko(zx);class Bx extends Fx{apply(e){return ul(e)}}Bx.className="sigmoid",ko(Bx);class Px extends Fx{apply(e){return function(e){return Uo((()=>{const t=nu(.5,au(.2,e));return wl(t,0,1)}))}(e)}}Px.className="hardSigmoid",ko(Px);class Vx extends Fx{apply(e){return fc(e)}}Vx.className="softplus",ko(Vx);class Wx extends Fx{apply(e){return function(e){return Uo((()=>su(e,nu(Nu(e),1))))}(e)}}Wx.className="softsign",ko(Wx);class Ux extends Fx{apply(e){return cl(e)}}Ux.className="tanh",ko(Ux);class Gx extends Fx{apply(e,t=-1){return Dh(e,t)}}Gx.className="softmax",ko(Gx);class jx extends Fx{apply(e,t=-1){return bc(e,t)}}jx.className="logSoftmax",ko(jx);class Hx extends Fx{apply(e,t=1){return Uo((()=>au(ul(au(e,t)),e)))}}Hx.className="swish",ko(Hx);class qx extends Fx{apply(e){return Uo((()=>au(e,cl(fc(e)))))}}function Kx(e){return e.getClassName()}function Xx(e,t={}){return Km(e,vo.getMap().classNameMap,t,"activation")}function Yx(e){if(null==e){const e={className:"linear",config:{}};return Xx(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},Xx(t)}return e instanceof Fx?e:Xx(e)}function Zx(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}qx.className="mish",ko(qx);class Jx extends wo{}class Qx extends Jx{constructor(e){super(),Zx(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Uo((()=>{let t=Mc([1]);return this.hasL1&&(t=nu(t,yc(au(this.l1,Nu(e))))),this.hasL2&&(t=nu(t,yc(au(this.l2,qg(e))))),sl(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Qx.className="L1L2",ko(Qx);const ew={l1l2:"L1L2"};function tw(e){return Hm(e)}function nw(e,t={}){return Km(e,vo.getMap().classNameMap,t,"regularizer")}function rw(e){if(null==e)return null;if("string"==typeof e){return nw({className:e in ew?ew[e]:e,config:{}})}return e instanceof Jx?e:nw(e)}class sw extends Qy{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Vy(e);let n=mh(e);return null!=this.maxValue&&(n=wl(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}sw.className="ReLU",ko(sw);class aw extends Qy{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Vy(e);return ic(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}aw.className="LeakyReLU",ko(aw);class iw extends Qy{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=xy(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=rw(e.alphaRegularizer),this.alphaConstraint=pg(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Om(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Wy(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Ky({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Vy(e),nh(e,this.alpha.read())}getConfig(){const e={alphaInitializer:by(this.alphaInitializer),alphaRegularizer:tw(this.alphaRegularizer),alphaConstraint:cg(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}iw.className="PReLU",ko(iw);class ow extends Qy{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Mm(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Vy(e);return jl(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}ow.className="ELU",ko(ow);class uw extends Qy{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Vy(e);return au(n,ki(ec(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}uw.className="ThresholdedReLU",ko(uw);class lw extends Qy{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Gx).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Vy(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function cw(e,t,n){if("number"==typeof e)return zm(e,t);if(e.length!==t)throw new Om(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let s=0;s<t;++s){const a=e[s];if((r=a)!==parseInt(r.toString(),10))throw new Om(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var r}function hw(e,t,n,r,s=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(s-1))+1,Math.floor((a+r-1)/r)}function pw(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+Dg([n-t,0]);else{if("same"!==r)throw new Om(`Unsupport padding mode: ${r}.`);e*=t}return e}function dw(e,t){return Uo((()=>(Ig(t),"channelsFirst"===t?Gi(e,[0,2,3,1]):e)))}function fw(e,t){return Uo((()=>(Ig(t),"channelsFirst"===t?Gi(e,[0,2,3,4,1]):e)))}function mw(e,t,n,r=1,s="valid",a,i=1){return Uo((()=>{if(null==a&&(a="channelsLast"),Ig(a),3!==e.shape.length)throw new Om(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Om(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Om(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=Gi(e,[0,2,1])),"causal"===s)throw new Mm("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Cl(e,t,r,"same"===s?"same":"valid","NWC",i);return null!=n&&(o=Xg(o,n)),o}))}function gw(e,t,n,r=[1,1],s="valid",a,i,o=null){return Uo((()=>{if(null==a&&(a="channelsLast"),Ig(a),3!==e.rank&&4!==e.rank)throw new Om(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Om(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let u=dw(e,a);if("causal"===s)throw new Mm("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=vp({x:u,filter:t,strides:r,pad:"same"===s?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(u=Gi(u,[0,3,1,2])),u}))}function yw(e,t,n,r=[1,1,1],s="valid",a,i){return Uo((()=>{if(null==a&&(a="channelsLast"),Ig(a),4!==e.rank&&5!==e.rank)throw new Om(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Om(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=fw(e,a);if("causal"===s)throw new Mm("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=El(o,t,r,"same"===s?"same":"valid","NDHWC",i),null!=n&&(o=Xg(o,n)),"channelsFirst"===a&&(o=Gi(o,[0,4,1,2,3])),o}))}lw.className="Softmax",ko(lw);class bw extends Qy{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",bw.verifyArgs(t),this.rank=e,eg(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Mm(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=cw(t.kernelSize,e,"kernelSize"),this.strides=cw(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Ng(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Ig(this.dataFormat),this.activation=Yx(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=xy(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=pg(t.biasConstraint),this.biasRegularizer=rw(t.biasRegularizer),this.activityRegularizer=rw(t.activityRegularizer),this.dilationRate=cw(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Om(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Om(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Om(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Bm("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!Qm(e.kernelSize,"number",1,3))throw new Om(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Kx(this.activation),useBias:this.useBias,biasInitializer:by(this.biasInitializer),biasRegularizer:tw(this.biasRegularizer),activityRegularizer:tw(this.activityRegularizer),biasConstraint:cg(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class xw extends bw{constructor(e,t){super(e,t),this.kernel=null,xw.verifyArgs(t),this.filters=t.filters,eg(this.filters,"filters"),this.kernelInitializer=xy(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=pg(t.kernelConstraint),this.kernelRegularizer=rw(t.kernelRegularizer)}build(e){e=Wy(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Om(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Uo((()=>{let t;e=Vy(e);const n=null==this.bias?null:this.bias.read(),r=ng(this.activation.getClassName());if(null!=r&&2===this.rank)t=gw(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=mw(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=gw(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Mm("convolutions greater than 3D are not implemented yet.");t=yw(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Wy(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const r=hw(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t),r.push(this.filters)):(r.push(this.filters),r=r.concat(t)),r}getConfig(){const e={filters:this.filters,kernelInitializer:by(this.kernelInitializer),kernelRegularizer:tw(this.kernelRegularizer),kernelConstraint:cg(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Om(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class ww extends xw{constructor(e){super(2,e),ww.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qm(e.kernelSize,"number",1,2))throw new Om(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}ww.className="Conv2D",ko(ww);class vw extends xw{constructor(e){super(3,e),vw.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Om(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}vw.className="Conv3D",ko(vw);class kw extends ww{constructor(e){if(super(e),this.inputSpec=[new Ky({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Om(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Wy(e)).length)throw new Om("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Om("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Ky({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Uo((()=>{let t=Vy(e);if(4!==t.shape.length)throw new Om(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a;"channelsFirst"===this.dataFormat?(s=2,a=3):(s=1,a=2);const i=n[s],o=n[a],u=this.kernelSize[0],l=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[r,pw(i,c,u,this.padding),pw(o,h,l,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Gi(t,[0,2,3,1]));let d=$l(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Gi(d,[0,3,1,2])),null!=this.bias&&(d=Xg(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Wy(e)).slice();let n,r,s;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],u=this.strides[1];return t[n]=this.filters,t[r]=pw(t[r],o,a,this.padding),t[s]=pw(t[s],u,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}kw.className="Conv2DTranspose",ko(kw);class Iw extends vw{constructor(e){if(super(e),this.inputSpec=[new Ky({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Om(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=Wy(e)).length)throw new Om("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Om("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Ky({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Uo((()=>{let t=Vy(e);if(5!==t.shape.length)throw new Om(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,r=n[0];let s,a,i;"channelsFirst"===this.dataFormat?(i=2,s=3,a=4):(i=1,s=2,a=3);const o=n[i],u=n[s],l=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,pw(o,d,c,this.padding),pw(u,f,h,this.padding),pw(l,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Gi(t,[0,2,3,4,1]));let y=Rl(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Gi(y,[0,4,1,2,3])),null!==this.bias&&(y=Xg(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=Wy(e)).slice();let n,r,s,a;"channelsFirst"===this.dataFormat?(n=1,r=2,s=3,a=4):(n=4,r=1,s=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],u=this.kernelSize[2],l=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[r]=pw(t[r],l,i,this.padding),t[s]=pw(t[s],c,o,this.padding),t[a]=pw(t[a],h,u,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Iw.className="Conv3DTranspose",ko(Iw);class Nw extends xw{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Om("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Om("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Om(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=xy(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=rw(t.depthwiseRegularizer),this.depthwiseConstraint=pg(t.depthwiseConstraint),this.pointwiseInitializer=xy(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=rw(t.pointwiseRegularizer),this.pointwiseConstraint=pg(t.pointwiseConstraint)}build(e){if((e=Wy(e)).length<this.rank+2)throw new Om(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Om(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let e=0;e<this.rank;++e)s.push(1);s.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",s,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new Ky({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Uo((()=>{let t;if(e=Vy(e),1===this.rank)throw new Mm("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Gi(e,[0,2,3,1])),t=Sh(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Xg(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Gi(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=by(this.depthwiseInitializer),e.pointwiseInitializer=by(this.pointwiseInitializer),e.depthwiseRegularizer=tw(this.depthwiseRegularizer),e.pointwiseRegularizer=tw(this.pointwiseRegularizer),e.depthwiseConstraint=cg(this.depthwiseConstraint),e.pointwiseConstraint=cg(this.pointwiseConstraint),e}}Nw.className="SeparableConv";class Sw extends Nw{constructor(e){super(2,e)}}Sw.className="SeparableConv2D",ko(Sw);class Cw extends xw{constructor(e){super(1,e),Cw.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qm(e.kernelSize,"number",1,1))throw new Om(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Cw.className="Conv1D",ko(Cw);class Tw extends Qy{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Uo((()=>{if(e=Vy(e),"channelsLast"===this.dataFormat){const t=Pg(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Pg(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Pg(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Pg(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Tw.className="Cropping2D",ko(Tw);class $w extends Qy{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ig(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,Jm(bg,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Uo((()=>{let t=Vy(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Gi(t,[0,2,3,1]);const e=this.size[0]*n[2],r=this.size[1]*n[3],s="nearest"===this.interpolation?kd.resizeNearestNeighbor(t,[e,r]):kd.resizeBilinear(t,[e,r]);return Gi(s,[0,3,1,2])}{const e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?kd.resizeNearestNeighbor(t,[e,r]):kd.resizeBilinear(t,[e,r])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}$w.className="UpSampling2D",ko($w);class Ew extends bw{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=xy(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=pg(e.depthwiseConstraint),this.depthwiseRegularizer=rw(e.depthwiseRegularizer)}build(e){if((e=Wy(e)).length<4)throw new Om(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Om(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Uo((()=>{let t=function(e,t,n=[1,1],r="valid",s,a){return Uo((()=>{null==s&&(s="channelsLast"),Ig(s);let i=dw(e,s);if(4!==e.rank)throw new Om(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Om(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Ll(i,t,n,"same"===r?"same":"valid","NHWC",a),"channelsFirst"===s&&(i=Gi(i,[0,3,1,2])),i}))}(e=Vy(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Xg(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Wy(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,s=hw(t,this.kernelSize[0],this.padding,this.strides[0]),a=hw(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,s,a]:[e[0],s,a,r]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=by(this.depthwiseInitializer),e.depthwiseRegularizer=tw(this.depthwiseRegularizer),e.depthwiseConstraint=cg(this.depthwiseRegularizer),e}}function Aw(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new Om("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function s(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=s(t),constants:n=s(n)}}function Rw(e,t,n,r=!1,s,a,i=!1,o=!1){return Uo((()=>{const u=t.shape.length;if(u<3)throw new Om(`Input should be at least 3D, but is ${u}D.`);const l=[1,0].concat(Og(2,u));if(t=Gi(t,l),null!=a)throw new Mm("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=s&&((s=ki(ki(s,"bool"),"float32")).rank===u-1&&(s=Kl(s,-1)),s=Gi(s,l)),r&&(t=yh(t,0),null!=s&&(s=yh(s,0)));const c=[];let h,p=n;const d=t.shape[0],f=tp(t);let m,g;null!=s&&(m=tp(s));for(let t=0;t<d;++t){const n=f[t],r=Uo((()=>e(n,p)));if(null==s)h=r[0],p=r[1];else{const e=Uo((()=>{const e=m[t],n=ku(qc(e),e);return{output:nu(au(r[0],e),au(p[0],n)),newStates:p.map(((t,s)=>nu(au(r[1][s],e),au(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=Wh(c,1)}return[h,g,p]}))}Ew.className="DepthwiseConv2D",ko(Ew);class _w extends Qy{constructor(e){let t;if(super(e),null==e.cell)throw new Om("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Pw({cells:e.cell}):e.cell,null==t.stateSize)throw new Om("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Ky({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return Og(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){By(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let r;if(r=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const r of t)n.push([e[0],r]);return[r].concat(n)}return r}computeMask(e,t){return Uo((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Mm("Constants support is not implemented in RNN yet.");By(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Ky({shape:[t,null,...n]});const r=[e[0]].concat(e.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!ue(this.stateSpec.map((e=>e.shape[e.shape.length-1])),s))throw new Om(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((e=>new Ky({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Uo((()=>{if(!this.stateful)throw new Fm("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Om("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Mc([n,e]))):this.states_=[Mc([n,this.cell.stateSize])];else if(null==e)Go(this.states_),null!=this.keptStates&&(Go(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Mc([n,e]))):this.states_[0]=Mc([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Om(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Go(this.states_);for(let t=0;t<this.states_.length;++t){const r=e[t],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,s];if(!ue(r.shape,a))throw new Om(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map((e=>jo(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Aw(e,n,r,this.numConstants);e=s.inputs,n=s.initialState,r=s.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Ky({shape:e.shape}));i=i.concat(this.stateSpec)}null!=r&&(t.constants=r,a=a.concat(r),this.numConstants=r.length);if(a[0]instanceof Xy){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Uo((()=>{const n=null==t?null:t.mask,r=null==t?null:t.training;let s=null==t?null:t.initialState;e=Vy(e),null==s&&(s=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==a)throw new Om(`RNN Layer has ${a} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:r},o=Rw(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,s,this.goBackwards,n,null,this.unroll,this.returnSequences),u=o[0],l=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?l:u;return this.returnState?[h].concat(c):h}))}getInitialState(e){return Uo((()=>{let t=Mc(e.shape);return t=yc(t,[1,2]),t=Lg(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Ug(t,[1,e]):t)):this.cell.stateSize>1?[Ug(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===_w.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const r=fb(t.cell,n);return new e(Object.assign(t,{cell:r}))}}_w.className="RNN",ko(_w);class Fw extends Qy{}class Dw extends Fw{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,eg(this.units,"units"),this.activation=Yx(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xy(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xy(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xy(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=rw(e.kernelRegularizer),this.recurrentRegularizer=rw(e.recurrentRegularizer),this.biasRegularizer=rw(e.biasRegularizer),this.kernelConstraint=pg(e.kernelConstraint),this.recurrentConstraint=pg(e.recurrentConstraint),this.biasConstraint=pg(e.biasConstraint),this.dropout=Fg([1,Dg([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Fg([1,Dg([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Wy(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Uo((()=>{if(2!==(e=e).length)throw new Om(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const r=null!=t.training&&t.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Vw({ones:()=>qc(e),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Vw({ones:()=>qc(n),rate:this.recurrentDropout,training:r}));const a=this.dropoutMask,i=this.recurrentDropoutMask;s=jg(null!=a?au(e,a):e,this.kernel.read()),null!=this.bias&&(s=Xg(s,this.bias.read())),null!=i&&(n=au(n,i));let o=nu(s,jg(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Kx(this.activation),useBias:this.useBias,kernelInitializer:by(this.kernelInitializer),recurrentInitializer:by(this.recurrentInitializer),biasInitializer:by(this.biasInitializer),kernelRegularizer:tw(this.kernelRegularizer),recurrentRegularizer:tw(this.recurrentRegularizer),biasRegularizer:tw(this.biasRegularizer),activityRegularizer:tw(this.activityRegularizer),kernelConstraint:cg(this.kernelConstraint),recurrentConstraint:cg(this.recurrentConstraint),biasConstraint:cg(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Dw.className="SimpleRNNCell",ko(Dw);class Ow extends _w{constructor(e){e.cell=new Dw(e),super(e)}call(e,t){return Uo((()=>{null!=this.cell.dropoutMask&&(Go(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Go(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return new e(t)}}Ow.className="SimpleRNN",ko(Ow);class Mw extends Fw{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Om("GRUCell does not support reset_after parameter set to true.");this.units=e.units,eg(this.units,"units"),this.activation=Yx(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Yx(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xy(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xy(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xy(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=rw(e.kernelRegularizer),this.recurrentRegularizer=rw(e.recurrentRegularizer),this.biasRegularizer=rw(e.biasRegularizer),this.kernelConstraint=pg(e.kernelConstraint),this.recurrentConstraint=pg(e.recurrentConstraint),this.biasConstraint=pg(e.biasConstraint),this.dropout=Fg([1,Dg([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Fg([1,Dg([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Wy(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Uo((()=>{if(2!==(e=e).length)throw new Om(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let r=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Vw({ones:()=>qc(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Vw({ones:()=>qc(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,u;0<this.dropout&&this.dropout<1&&(e=au(e,s[0]));let l=jg(e,this.kernel.read());this.useBias&&(l=Xg(l,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=au(r,a[0]));const c=this.recurrentKernel.read(),[h,p]=zh(c,[2*this.units,this.units],c.rank-1),d=jg(r,h),[f,m,g]=zh(l,3,l.rank-1),[y,b]=zh(d,2,d.rank-1);i=this.recurrentActivation.apply(nu(f,y)),o=this.recurrentActivation.apply(nu(m,b));const x=jg(au(o,r),p);u=this.activation.apply(nu(g,x));const w=nu(au(i,r),au(nu(1,dc(i)),u));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Kx(this.activation),recurrentActivation:Kx(this.recurrentActivation),useBias:this.useBias,kernelInitializer:by(this.kernelInitializer),recurrentInitializer:by(this.recurrentInitializer),biasInitializer:by(this.biasInitializer),kernelRegularizer:tw(this.kernelRegularizer),recurrentRegularizer:tw(this.recurrentRegularizer),biasRegularizer:tw(this.biasRegularizer),activityRegularizer:tw(this.activityRegularizer),kernelConstraint:cg(this.kernelConstraint),recurrentConstraint:cg(this.recurrentConstraint),biasConstraint:cg(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Mw.className="GRUCell",ko(Mw);class Lw extends _w{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Mw(e),super(e)}call(e,t){return Uo((()=>{null!=this.cell.dropoutMask&&(Go(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Go(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Lw.className="GRU",ko(Lw);class zw extends Fw{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,eg(this.units,"units"),this.activation=Yx(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Yx(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=xy(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=xy(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=xy(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=rw(e.kernelRegularizer),this.recurrentRegularizer=rw(e.recurrentRegularizer),this.biasRegularizer=rw(e.biasRegularizer),this.kernelConstraint=pg(e.kernelConstraint),this.recurrentConstraint=pg(e.recurrentConstraint),this.biasConstraint=pg(e.biasConstraint),this.dropout=Fg([1,Dg([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Fg([1,Dg([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Wy(e))[e.length-1];let r;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;r=new((t=class extends ey{apply(t,r){const s=e.apply([n]),a=(new ny).apply([n]),i=e.apply([2*n]);return Wg(Wg(s,a),i)}}).className="CustomInit",t)}else r=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Uo((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Om(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let r=e[1];const s=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Vw({ones:()=>qc(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Vw({ones:()=>qc(r),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,u,l,c;0<this.dropout&&this.dropout<1&&(e=au(e,a[0]));let h=jg(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=au(r,i[0])),h=nu(h,jg(r,this.recurrentKernel.read())),this.useBias&&(h=Xg(h,this.bias.read()));const[p,d,f,m]=zh(h,4,h.rank-1);o=this.recurrentActivation.apply(p),u=this.recurrentActivation.apply(d),l=nu(au(u,s),au(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=au(c,this.activation.apply(l));return[g,g,l]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Kx(this.activation),recurrentActivation:Kx(this.recurrentActivation),useBias:this.useBias,kernelInitializer:by(this.kernelInitializer),recurrentInitializer:by(this.recurrentInitializer),biasInitializer:by(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:tw(this.kernelRegularizer),recurrentRegularizer:tw(this.recurrentRegularizer),biasRegularizer:tw(this.biasRegularizer),activityRegularizer:tw(this.activityRegularizer),kernelConstraint:cg(this.kernelConstraint),recurrentConstraint:cg(this.recurrentConstraint),biasConstraint:cg(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}zw.className="LSTMCell",ko(zw);class Bw extends _w{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new zw(e),super(e)}call(e,t){return Uo((()=>{null!=this.cell.dropoutMask&&(Go(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Go(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Bw.className="LSTM",ko(Bw);class Pw extends Fw{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Uo((()=>{let n=(e=e).slice(1);const r=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?r.push(n.splice(0,e.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=r[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),s.push(a.slice(1))}n=[];for(const e of s.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;By(e)&&(e=e[0]),e=e,this.cells.forEach(((n,r)=>{Tg(`RNNCell_${r}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const r=[];for(const e of t.cells)r.push(fb(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return Hy(e)}setWeights(e){const t=[];for(const n of this.cells){const r=n.weights.length,s=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],s[e]])}qy(t)}}function Vw(e){const{ones:t,rate:n,training:r=!1,count:s=1}=e,a=()=>Yg(t(),n),i=()=>Zg(a,t,r);if(!s||s<=1)return jo(i().clone());return Array(s).fill(void 0).map(i).map((e=>jo(e.clone())))}Pw.className="StackedRNNCells",ko(Pw);var Ww=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(e);s<r.length;s++)t.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(e,r[s])&&(n[r[s]]=e[r[s]])}return n};class Uw extends _w{constructor(e){if(e.unroll)throw new Mm("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Mm("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Ky({ndim:5})]}call(e,t){return Uo((()=>{if(null!=this.cell.dropoutMask&&(Go(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Go(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Om("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,r=null==t?null:t.training,s=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:s})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Uo((()=>{const{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),s=Mc([r[0],...r.slice(2)]);return Array.isArray(t)?Array(t.length).fill(s):[s]}))}resetStates(e,t=!1){Uo((()=>{if(!this.stateful)throw new Fm("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new Om("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Mc(s))):this.states_=[Mc(s)];else if(null==e)Go(this.states_),null!=this.keptStates&&(Go(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Mc(s))):this.states_[0]=Mc(s);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Om(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Go(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],r=s;if(!ue(n.shape,r))throw new Om(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>jo(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:r,padding:s,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,u=e[o?3:2],l=e[o?4:3],c=hw(u,r[0],s,a[0],i[0]),h=hw(l,r[1],s,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Uw.className="ConvRNN2D";class Gw extends zw{constructor(e){const{filters:t,kernelSize:n,strides:r,padding:s,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,eg(this.filters,"filters"),this.kernelSize=cw(n,2,"kernelSize"),this.kernelSize.forEach((e=>eg(e,"kernelSize"))),this.strides=cw(r||1,2,"strides"),this.strides.forEach((e=>eg(e,"strides"))),this.padding=s||"valid",Ng(this.padding),this.dataFormat=a||"channelsLast",Ig(this.dataFormat),this.dilationRate=cw(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>eg(e,"dilationRate")))}build(e){var t;e=Wy(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Om(`The channel dimension of the input should be defined. Found ${e[n]}`);const r=e[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;e=new((t=class extends ey{apply(e,t){return Vg([n.apply([r]),Lc([r]),n.apply([2*r])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Uo((()=>{if(3!==e.length)throw new Om(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,r=e[0],s=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Vw({ones:()=>qc(r),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?au(t[n],e):e;let u=o(r,i,0),l=o(r,i,1),c=o(r,i,2),h=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Vw({ones:()=>qc(s),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(s,p,0),f=o(s,p,1),m=o(s,p,2),g=o(s,p,3);const[y,b,x,w]=zh(this.kernel.read(),4,3),[v,k,I,N]=this.useBias?zh(this.bias.read(),4):[null,null,null,null];u=this.inputConv(u,y,v,this.padding),l=this.inputConv(l,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,C,T,$]=zh(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,C),m=this.recurrentConv(m,T),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(nu(u,d)),A=this.recurrentActivation.apply(nu(l,f)),R=nu(au(A,a),au(E,this.activation.apply(nu(c,m)))),_=au(this.recurrentActivation.apply(nu(h,g)),this.activation.apply(R));return[_,_,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=Ww(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(e,t,n,r){const s=Sl(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Xg(s,n,this.dataFormat):s}recurrentConv(e,t){return Sl(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Gw.className="ConvLSTM2DCell",ko(Gw);class jw extends Uw{constructor(e){const t=new Gw(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}jw.className="ConvLSTM2D",ko(jw);class Hw extends Qy{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);const n=Vy(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,r=this.getNoiseShape(n);return Zg((()=>Yg(n,this.rate,r,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Hw.className="Dropout",ko(Hw);class qw extends Hw{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}qw.className="SpatialDropout1D",ko(qw);class Kw extends Qy{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,eg(this.units,"units"),this.activation=Yx(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=xy(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=xy(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=pg(e.kernelConstraint),this.biasConstraint=pg(e.biasConstraint),this.kernelRegularizer=rw(e.kernelRegularizer),this.biasRegularizer=rw(e.biasRegularizer),this.activityRegularizer=rw(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Wy(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Wy(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);const n=Vy(e),r=ng(this.activation.getClassName());let s;return null!=r?s=jg(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=jg(n,this.kernel.read()),null!=this.bias&&(s=Xg(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const e={units:this.units,activation:Kx(this.activation),useBias:this.useBias,kernelInitializer:by(this.kernelInitializer),biasInitializer:by(this.biasInitializer),kernelRegularizer:tw(this.kernelRegularizer),biasRegularizer:tw(this.biasRegularizer),activityRegularizer:tw(this.activityRegularizer),kernelConstraint:cg(this.kernelConstraint),biasConstraint:cg(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Kw.className="Dense",ko(Kw);class Xw extends Qy{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Wy(e);for(const t of e.slice(1))if(null==t)throw new Om(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],_g(e,1)]}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);let n=Vy(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Gi(n,e)}return function(e){if(e.rank<=1)throw new Om(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],_g(e.shape,1)];return sl(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Xw.className="Flatten",ko(Xw);class Yw extends Qy{constructor(e){super(e),this.supportsMasking=!0,this.activation=Yx(e.activation)}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);const n=Vy(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Kx(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Yw.className="Activation",ko(Yw);class Zw extends Qy{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Uo((()=>{return e=Vy(e),t=e,n=this.n,Uo((()=>{if(2!==t.shape.length)throw new Om(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Ug(Lg(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Zw.className="RepeatVector",ko(Zw);class Jw extends Qy{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",r=t.slice();let s=1,a=null;for(let e=0;e<r.length;++e){const t=r[e];if(this.isUnknown(t)){if(null!==a)throw new Om("Can only specifiy one unknown dimension.");a=e}else s*=t}const i=_g(e);if(null!==a){if(0===s||i%s!=0)throw new Om(n);r[a]=i/s}else if(i!==s)throw new Om(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);const n=Vy(e),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return sl(n,s)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}Jw.className="Reshape",ko(Jw);class Qw extends Qy{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Og(1,e.dims.length+1);if(!ue(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Ky({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Wy(e)).slice();return this.dims.forEach(((n,r)=>{t[r+1]=e[n]})),t}call(e,t){return Gi(Vy(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}Qw.className="Permute",ko(Qw);class ev extends Qy{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Vy(e);return Lu(Hc(n,this.maskValue),-1)}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);const n=Vy(e),r=Lu(Hc(n,this.maskValue),-1,!0);return au(n,ki(r,n.dtype))}))}}ev.className="Masking",ko(ev);class tv extends Qy{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Wm(e.inputLength))}this.inputDim=e.inputDim,eg(this.inputDim,"inputDim"),this.outputDim=e.outputDim,eg(this.outputDim,"outputDim"),this.embeddingsInitializer=xy(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=rw(e.embeddingsRegularizer),this.activityRegularizer=rw(e.activityRegularizer),this.embeddingsConstraint=pg(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Uo((()=>this.maskZero?(e=Vy(e),Hc(e,uu(e))):null))}computeOutputShape(e){if(e=Wy(e),null==this.inputLength)return[...e,this.outputDim];const t=Wm(this.inputLength);if(t.length!==e.length-1)throw new Om(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){const s=t[r],a=e[r+1];if(null!=s&&null!=a&&s!==a)throw new Om(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==s&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);let n=Vy(e);"int32"!==n.dtype&&(n=Mg(n,"int32"));const r=Hg(this.embeddings.read(),sl(n,[n.size]));return sl(r,Wy(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:by(this.embeddingsInitializer),embeddingsRegularizer:tw(this.embeddingsRegularizer),activityRegularizer:tw(this.activityRegularizer),embeddingsConstraint:cg(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}tv.className="Embedding",ko(tv);class nv extends Qy{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Mm}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){const s=e[e.length-t.length+r],a=t[r];if(null==s||null==a||s<0||a<0)n.push(null);else if(1===s)n.push(a);else if(1===a)n.push(s);else{if(s!==a)throw new Om("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(s)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Wy(e)]),(e=e).length<2)throw new Om(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Ym(t),t.length>1)throw new Om(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=e.map((e=>e.length));-1===e.indexOf(null)&&1===Ym(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Uo((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const r=Dg(n);for(let n of e){const e=n.rank;for(let t=0;t<r-e;++t)n=Lg(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const r of e){const e=r.rank;if(null==e){const e=r.shape,s=e[0],a=e.slice(1).concat([s]);let i=sl(r,[s].concat(_g(e.slice(1))));i=Gi(i,[1,0]),i=sl(i,a),t.push(i),n=!0}else if(e>1){const s=Og(1,e).concat([0]);t.push(Gi(r,s)),n=!0}else t.push(r)}let r=this.mergeFunction(t);const s=r.rank;if(n)if(null==s){const e=r.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));r=sl(Gi(sl(r,[-1,t]),[1,0]),n)}else if(s>1){const e=[s-1].concat(Og(0,s-1));r=Gi(r,e)}return r}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Ym(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Uo((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Om("`mask` should be an Array");if(!Array.isArray(e))throw new Om("`inputs` should be an Array");if(t.length!==e.length)throw new Om(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:Kl(e,0))))[0];for(let e=1;e<t.length-1;++e)n=$c(n,t[e]);return n}))}}class rv extends nv{constructor(e){super(e)}mergeFunction(e){return Uo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=nu(t,e[n]);return t}))}}rv.className="Add",ko(rv);class sv extends nv{constructor(e){super(e)}mergeFunction(e){return Uo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=au(t,e[n]);return t}))}}sv.className="Multiply",ko(sv);class av extends nv{constructor(e){super(e)}mergeFunction(e){return Uo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=nu(t,e[n]);return au(1/e.length,t)}))}}av.className="Average",ko(av);class iv extends nv{constructor(e){super(e)}mergeFunction(e){return Uo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=$u(t,e[n]);return t}))}}iv.className="Maximum",ko(iv);class ov extends nv{constructor(e){super(e)}mergeFunction(e){return Uo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Pc(t,e[n]);return t}))}}ov.className="Minimum",ko(ov);class uv extends nv{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Om("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const r=e[t].slice();r.splice(this.axis,1);let s=!1;for(const e of n)if(ue(e,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new Om("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Uo((()=>Vg(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Om("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[r]||null==e[r]){n[r]=null;break}n[r]+=e[r]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Om("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Om("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Om(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Uo((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(ki(qc(e[n]),"bool")):t[n].rank<e[n].rank?r.push(Kl(t[n],-1)):r.push(t[n]);const s=ol(r,this.axis);return Mu(s,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function lv(e,t){for(;e<0;)e+=t;return e}uv.className="Concatenate",ko(uv);class cv extends nv{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){ne(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Mm("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new Om(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Om(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>lv(t,e[n].shape.length))):[lv(this.axes,n.shape.length),lv(this.axes,r.shape.length)],this.normalize&&(n=mb(n,t[0]),r=mb(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Mm("batchDot is not implemented for tensors of 4D or higher rank yet");if(ne(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),ne(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Mm("batchDot is not implemented for complex64-type Tensors yet.");const r=e.shape.length,s=t.shape.length;null==n&&(n=[r-1,s-2]);const a=n;return Uo((()=>{let n,i;if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=sl(t,t.shape.concat(e))}else if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=sl(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?yc(au(e,t),a[0]):yc(au(Gi(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,r=a[1]===t.shape.length-1;i=Wi(e,t,n,r)}if(n>0){let e;e=r>s?r+s-3:r-1;const t=[];for(let r=e;r<e+n;++r)t.push(r);i=Vh(i,t)}return 1===i.shape.length&&(i=Kl(i,1)),i}))}(n,r,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[lv(this.axes,e.length),lv(this.axes,t.length)],n}computeOutputShape(e){ne(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Mm("Dot layer does not support tensors of 4D or higher rank yet.");const r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=t.concat(n);return 1===s.length&&s.push(1),s}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}cv.className="Dot",ko(cv);class hv extends Qy{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);const n=Vy(e);return Zg((()=>nu(Gg(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}hv.className="GaussianNoise",ko(hv);class pv extends Qy{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Uo((()=>{this.invokeCallHook(e,t);const n=Vy(e);if(this.rate>0&&this.rate<1){return Zg((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return au(n,Gg(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}pv.className="GaussianDropout",ko(pv);class dv extends Qy{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Vy(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Uo((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Zg((()=>{const t=Vy(e),r=-1.7580993408473766;let s=tc(hh(n),this.rate);s=Mg(s,"float32");const a=((1-this.rate)*(1+this.rate*r**2))**-.5,i=-a*r*this.rate,o=nu(au(t,s),au(nu(s,-1),r));return nu(au(o,a),i)}),(()=>Vy(e)),t.training||!1)}return e}))}}function fv(e,t,n,r,s,a=.001){let i;if(2===e.rank)i=fl(e,t,n,r,s,a);else if(3===e.rank)i=ml(e,t,n,r,s,a);else{if(4!==e.rank)throw new Mm(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=gl(e,t,n,r,s,a)}return i}function mv(e,t,n,r,s=.001){return ue(r.slice().sort(),Og(0,e.rank-1))?function(e,t,n,r,s=.001){return Uo((()=>{const a=Uc(e,r),i=a.mean,o=a.variance;return[fv(e,i,o,n,t,s),i,o]}))}(e,t,n,r,s):function(e,t,n,r,s=.001){return Uo((()=>{const a=Uc(e,r),i=a.mean,o=a.variance,u=[];for(const t of Og(0,e.rank))-1!==r.indexOf(t)?u.push(1):u.push(e.shape[t]);const l=sl(i,u),c=sl(o,u),h=null==t?null:sl(t,u),p=null==n?null:sl(n,u);return[fv(e,l,c,p,h,s),i,o]}))}(e,t,n,r,s)}dv.className="AlphaDropout",ko(dv);class gv extends Qy{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=xy(e.betaInitializer||"zeros"),this.gammaInitializer=xy(e.gammaInitializer||"ones"),this.movingMeanInitializer=xy(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=xy(e.movingVarianceInitializer||"ones"),this.betaConstraint=pg(e.betaConstraint),this.gammaConstraint=pg(e.gammaConstraint),this.betaRegularizer=rw(e.betaRegularizer),this.gammaRegularizer=rw(e.gammaRegularizer)}build(e){e=Wy(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Om(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Ky({ndim:e.length,axes:{[t]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Uo((()=>{const n=null!=t.training&&t.training,r=Vy(e),s=r.shape,a=s.length,i=Og(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const u=zm(1,a);u[o]=s[o];const l=i.slice();l.sort();const c=!ue(l,Og(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=sl(this.movingMean.read(),u),t=sl(this.movingVariance.read(),u),n=this.center?sl(this.beta.read(),u):null,s=this.scale?sl(this.gamma.read(),u):null;return fv(r,e,t,n,s,this.epsilon)}return fv(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=mv(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{Uo((()=>{const r=1-n,s=e.read(),a=au(ku(s,t),r);e.write(ku(s,a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:by(this.betaInitializer),gammaInitializer:by(this.gammaInitializer),movingMeanInitializer:by(this.movingMeanInitializer),movingVarianceInitializer:by(this.movingVarianceInitializer),betaRegularizer:tw(this.betaRegularizer),gammaRegularizer:tw(this.gammaRegularizer),betaConstraint:cg(this.betaConstraint),gammaConstraint:cg(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}gv.className="BatchNormalization",ko(gv);class yv extends Qy{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=xy(e.betaInitializer||"zeros"),this.gammaInitializer=xy(e.gammaInitializer||"ones"),this.betaRegularizer=rw(e.betaRegularizer),this.gammaRegularizer=rw(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Wy(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Ym(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=Vy(e),r=n.shape,s=r.length;return Uo((()=>{let{mean:e,variance:t}=Uc(n,this.axis,!0);const a=zm(1,s);for(const e of this.axis)a[e]=r[e];const i=e=>null!=e&&e.shape.length!==s&&this.axis!==[s-1]?sl(e,a):e;let o=i(this.gamma.read()),u=i(this.beta.read());const l=[],c=[];for(let e=0;e<s;++e)-1!==this.axis.indexOf(e)?(l.push(r[e]),c.push(1)):(l.push(1),c.push(r[e]));return e=Yl(e,l),t=Yl(t,l),o=Yl(o,c),u=Yl(u,c),fv(n,e,t,u,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:by(this.betaInitializer),gammaInitializer:by(this.gammaInitializer),betaRegularizer:tw(this.betaRegularizer),gammaRegularizer:tw(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}yv.className="LayerNormalization",ko(yv);class bv extends Qy{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Om(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Om(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Om(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Ky({ndim:4})]}computeOutputShape(e){let t,n;return e=Wy(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Uo((()=>{return t=Vy(e),n=this.padding,r=this.dataFormat,Uo((()=>{if(4!==t.rank)throw new Om(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Om("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r="channelsLast"),"channelsLast"!==r&&"channelsFirst"!==r)throw new Om(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Xc(t,e)}));var t,n,r}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function xv(e,t,n,r,s,a){return Uo((()=>{let i;Ig(s),Sg(a),Ng(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=dw(e,s);const o="same"===r?"same":"valid";return i="max"===a?_c(e,t,n,o):al(e,t,n,o),"channelsFirst"===s&&(i=Gi(i,[0,3,1,2])),i}))}function wv(e,t,n,r,s,a){return Uo((()=>{let i;Ig(s),Sg(a),Ng(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==s&&(s="channelsLast"),null==a&&(a="max"),e=fw(e,s);const o="same"===r?"same":"valid";return i="max"===a?Fc(e,t,n,o):il(e,t,n,o),"channelsFirst"===s&&(i=Gi(i,[0,4,1,2,3])),i}))}bv.className="ZeroPadding2D",ko(bv);class vv extends Qy{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Om(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(eg(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Om(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}eg(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Ng(this.padding),this.inputSpec=[new Ky({ndim:3})]}computeOutputShape(e){const t=hw((e=Wy(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Uo((()=>{this.invokeCallHook(e,t),e=Lg(Vy(e),2);const n=this.poolingFunction(Vy(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Vh(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class kv extends vv{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Ig(s),Ng(r),xv(e,t,n,r,s,"max")}}kv.className="MaxPooling1D",ko(kv);class Iv extends vv{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Ig(s),Ng(r),xv(e,t,n,r,s,"avg")}}Iv.className="AveragePooling1D",ko(Iv);class Nv extends Qy{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Om(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];eg(this.poolSize,"poolSize"),eg(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ig(this.dataFormat),Ng(this.padding),this.inputSpec=[new Ky({ndim:4})]}computeOutputShape(e){e=Wy(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=hw(t,this.poolSize[0],this.padding,this.strides[0]),n=hw(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Uo((()=>(this.invokeCallHook(e,t),this.poolingFunction(Vy(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Sv extends Nv{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Ig(s),Ng(r),xv(e,t,n,r,s,"max")}}Sv.className="MaxPooling2D",ko(Sv);class Cv extends Nv{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Ig(s),Ng(r),xv(e,t,n,r,s,"avg")}}Cv.className="AveragePooling2D",ko(Cv);class Tv extends Qy{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Om(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];eg(this.poolSize,"poolSize"),eg(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ig(this.dataFormat),Ng(this.padding),this.inputSpec=[new Ky({ndim:5})]}computeOutputShape(e){e=Wy(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return t=hw(t,this.poolSize[0],this.padding,this.strides[0]),n=hw(n,this.poolSize[1],this.padding,this.strides[1]),r=hw(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return Uo((()=>(this.invokeCallHook(e,t),this.poolingFunction(Vy(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class $v extends Tv{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Ig(s),Ng(r),wv(e,t,n,r,s,"max")}}$v.className="MaxPooling3D",ko($v);class Ev extends Tv{constructor(e){super(e)}poolingFunction(e,t,n,r,s){return Ig(s),Ng(r),wv(e,t,n,r,s,"avg")}}Ev.className="AveragePooling3D",ko(Ev);class Av extends Qy{constructor(e){super(e),this.inputSpec=[new Ky({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Mm}}class Rv extends Av{constructor(e){super(e||{})}call(e,t){return Uo((()=>{const t=Vy(e);return Oc(t,1)}))}}Rv.className="GlobalAveragePooling1D",ko(Rv);class _v extends Av{constructor(e){super(e||{})}call(e,t){return Uo((()=>{const t=Vy(e);return gc(t,1)}))}}_v.className="GlobalMaxPooling1D",ko(_v);class Fv extends Qy{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ig(this.dataFormat),this.inputSpec=[new Ky({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Mm}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Dv extends Fv{call(e,t){return Uo((()=>{const t=Vy(e);return"channelsLast"===this.dataFormat?Oc(t,[1,2]):Oc(t,[2,3])}))}}Dv.className="GlobalAveragePooling2D",ko(Dv);class Ov extends Fv{call(e,t){return Uo((()=>{const t=Vy(e);return"channelsLast"===this.dataFormat?gc(t,[1,2]):gc(t,[2,3])}))}}Ov.className="GlobalMaxPooling2D",ko(Ov);class Mv extends Qy{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const r=fb(t.layer,n);delete t.layer;const s={layer:r};return Object.assign(s,t),new e(s)}}class Lv extends Mv{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Wy(e)).length<3)throw new Om(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Wy(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return Uo((()=>Rw(((e,n)=>[Vy(this.layer.call(e,t)),[]]),e=Vy(e),[],!1,null,null,!1,!0)[1]))}}Lv.className="TimeDistributed",ko(Lv);class zv extends Mv{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=fb(n),t.goBackwards=!0!==t.goBackwards;const r={};var s;if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=fb(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,s=this.mergeMode,Jm(vg,"BidirectionalMergeMode",s),e.weights)throw new Mm("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),t=s[0]):t=s[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):Vm(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});const s=Aw(e,n,r,this.numConstants);if(e=s.inputs,n=s.initialState,r=s.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Om("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const r=n.map((e=>new Ky({shape:e.shape})));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new Mm("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof Xy;for(const e of a)if(e instanceof Xy!==o)throw new Om("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),r=this.inputSpec.concat(i),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,t);return this.inputSpec=s,o}return super.apply(e,t)}call(e,t){return Uo((()=>{const n=t.initialState;let r,s,a,i;if(null==n)r=this.forwardLayer.call(e,t),s=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);r=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),s=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(r)&&(a=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=yh(s,1)),"concat"===this.mergeMode?i=Vg([r,s]):"sum"===this.mergeMode?i=nu(r,s):"ave"===this.mergeMode?i=au(.5,nu(r,s)):"mul"===this.mergeMode?i=au(r,s):null==this.mergeMode&&(i=[r,s]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Tg(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Tg(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=fb(t.layer);if(delete t.layer,null!=t.numConstants)throw new Mm("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const r=t;return r.layer=n,new e(r)}}function Bv(e){return new tb(e)}function Pv(e){return new ow(e)}function Vv(e){return new sw(e)}function Wv(e){return new aw(e)}function Uv(e){return new iw(e)}function Gv(e){return new lw(e)}function jv(e){return new uw(e)}function Hv(e){return new Cw(e)}function qv(e){return new ww(e)}function Kv(e){return new kw(e)}function Xv(e){return new vw(e)}function Yv(e){return new Iw(e)}function Zv(e){return new Sw(e)}function Jv(e){return new Tw(e)}function Qv(e){return new $w(e)}function ek(e){return new Ew(e)}function tk(e){return new Yw(e)}function nk(e){return new Kw(e)}function rk(e){return new Hw(e)}function sk(e){return new qw(e)}function ak(e){return new Xw(e)}function ik(e){return new Zw(e)}function ok(e){return new Jw(e)}function uk(e){return new Qw(e)}function lk(e){return new tv(e)}function ck(e){return new rv(e)}function hk(e){return new av(e)}function pk(e){return new uv(e)}function dk(e){return new iv(e)}function fk(e){return new ov(e)}function mk(e){return new sv(e)}function gk(e){return new cv(e)}function yk(e){return new gv(e)}function bk(e){return new yv(e)}function xk(e){return new bv(e)}function wk(e){return new Iv(e)}function vk(e){return wk(e)}function kk(e){return wk(e)}function Ik(e){return new Cv(e)}function Nk(e){return Ik(e)}function Sk(e){return Ik(e)}function Ck(e){return new Ev(e)}function Tk(e){return Ck(e)}function $k(e){return Ck(e)}function Ek(e){return new Rv(e)}function Ak(e){return new Dv(e)}function Rk(e){return new _v(e)}function _k(e){return new Ov(e)}function Fk(e){return new kv(e)}function Dk(e){return new Sv(e)}function Ok(e){return new $v(e)}function Mk(e){return new Lw(e)}function Lk(e){return new Mw(e)}function zk(e){return new Bw(e)}function Bk(e){return new zw(e)}function Pk(e){return new Ow(e)}function Vk(e){return new Dw(e)}function Wk(e){return new jw(e)}function Uk(e){return new Gw(e)}function Gk(e){return new _w(e)}function jk(e){return new Pw(e)}function Hk(e){return new zv(e)}function qk(e){return new Lv(e)}zv.className="Bidirectional",ko(zv);const Kk=Rk,Xk=_k,Yk=Fk,Zk=Dk;function Jk(e){return new hv(e)}function Qk(e){return new pv(e)}function eI(e){return new dv(e)}function tI(e){return new ev(e)}function nI(e,t){return Tb(e,t)}function rI(e,t){return _b(e,t)}function sI(e,t){return Fb(e,t)}function aI(e,t){return $b(e,t)}function iI(e,t){return Db(e,t)}function oI(e,t){return Ab(e,t)}function uI(e,t){return Rb(e,t)}function lI(e,t){return Nb(e,t)}function cI(e,t){return yb(e,t)}function hI(e,t){return bb(e,t)}function pI(e,t){return bb(e,t)}function dI(e,t){return bb(e,t)}function fI(e,t){return gb(e,t)}function mI(e,t){return gb(e,t)}function gI(e,t){return gb(e,t)}function yI(e){return new Qx(e)}function bI(e){return Zx(t=e),new Qx({l1:null!=t?t.l1:null,l2:0});var t}function xI(e){return Zx(t=e),new Qx({l2:null!=t?t.l2:null,l1:0});var t}class wI extends ib{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof Ix))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function vI(e,t){return e<t}function kI(e,t){return e>t}class II extends wI{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new Mm("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=vI:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=kI:this.monitorFunc=vI,this.monitorFunc===vI&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===vI?1/0:-1/0}async onEpochEnd(e,t){await rb(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const NI={earlyStopping:function(e){return new II(e)}};var SI,CI;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(SI||(SI={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(CI||(CI={}));const TI={};function $I(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};TI[e]=n}function EI(e){return TI[e]}function AI(e){delete TI[e]}function RI(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return _I(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,i).map((e=>_I(e,n,r,s)))}const o=_I(t.inputNames.slice(e)[0],n,r,s),u=o.dataSync();return"number"===a.type?u[0]:De(o.shape,u)}const i=t.attrParams[e];return i&&i.value}function _I(e,t,n,r){const[s,a]=OI(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[DI(s,e)]));return void 0!==i?t[DI(s,i)][a]:void 0}function FI(e,t){const[n,r,s]=OI(e);return[DI(n,t&&t.currentContextId),r,s]}function DI(e,t){return t?`${e}-${t}`:e}function OI(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function MI(e,t,n){let r=RI("pad",e,t,n);if("explicit"===r){r=RI("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function LI(e){return e.kept?e:Ii(e)}const zI=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],BI=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],PI=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],VI=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],WI=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],UI=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],GI=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],jI=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],HI=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],qI=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],KI=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],XI=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],YI=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],ZI=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],JI=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],QI=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],eN=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],tN=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],nN=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class rN{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[N,S,C,T,$,E,A,R,_,F,D,O,M,L,z,B,P,V,W].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=FI(e),a=i[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=FI(e),n=i[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=FI(e),n=i[t];n&&(n.signatureKey=l[e],o.push(n))})):o=r;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:u,weights:s,placeholders:r,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=EI(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=aN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=aN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=mN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=mN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=oN(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=oN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=fN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=fN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=iN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=iN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=yN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=yN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=dN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=dN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=gN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=cN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=cN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=hN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=hN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=lN(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=lN(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=FI(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:uN(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=FI(e),i=r[s];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=FI(i[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const o=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function sN(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=je().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function aN(e,t,n,r=!1){const s=e[t];return null!=s?sN(s.s,r):n}function iN(e,t,n){const r=e[t];return r?r.b:n}function oN(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function uN(e){switch("string"==typeof e&&(e=SI[e]),e){case SI.DT_FLOAT:return"float32";case SI.DT_INT32:case SI.DT_INT64:case SI.DT_INT8:case SI.DT_UINT8:return"int32";case SI.DT_BOOL:return"bool";case SI.DT_DOUBLE:return"float32";case SI.DT_STRING:return"string";default:return null}}function lN(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function cN(e,t,n){const r=e[t];return r&&r.type?uN(r.type):n}function hN(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>uN(e))):n}function pN(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function dN(e,t,n){const r=e[t];return r&&r.shape?pN(r.shape):n}function fN(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function mN(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>sN(e,r))):n}function gN(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>pN(e))):n}function yN(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class bN{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return _I(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return _I(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return oN(this.node.rawAttrs,e,t);if(null!=n.s)return aN(this.node.rawAttrs,e,t);if(null!=n.b)return iN(this.node.rawAttrs,e,t);if(null!=n.shape)return dN(this.node.rawAttrs,e,t);if(null!=n.type)return cN(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return fN(this.node.rawAttrs,e,t);if(null!=n.list.s)return mN(this.node.rawAttrs,e,t);if(null!=n.list.shape)return gN(this.node.rawAttrs,e,t);if(null!=n.list.b)return yN(this.node.rawAttrs,e,t);if(null!=n.list.type)return hN(this.node.rawAttrs,e,t)}return t}}function xN(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){ne(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];ne(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function wN(e){return"number"!=typeof e&&!e.some((e=>e<0))}function vN(e,t,n){let r=kN(e,n);const s=!wN(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=kN(e.shape,r)})),!wN(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function kN(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class IN{constructor(e,t,n,r,s,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=gu(0),jo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),xN(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,jo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Na([],[0].concat(this.elementShape));const n=this.readMany(e);return xN(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Wh(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Na([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return xN(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),ol(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,tp(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];Uo((()=>{t=sl(t,[1,n,s]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,e[n],s];a[n]=sl(ll(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class NN{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);xN(t,e.shape,"TensorList shape mismatch: "),jo(e)})),this.idTensor=gu(0),this.maxNumElements=r,jo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new NN([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);xN(e,this.elementShape,"TensorList shape mismatch: ");const r=vN(this.elementShape,this.tensors,e);return Uo((()=>{const e=this.tensors.map((e=>sl(e,r)));return Wh(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=vN(this.elementShape,this.tensors,e),r=this.tensors.pop();return xN(r.shape,e,"TensorList shape mismatch: "),sl(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(xN(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");jo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);xN(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=vN(this.elementShape,this.tensors,t);return sl(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);xN(this.elementShape,t.shape,"TensorList shape mismatch: "),jo(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);xN(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=vN(this.elementShape,this.tensors,n);return 0===e.length?Na([],[0].concat(r)):Uo((()=>{const t=e.map((e=>sl(this.tensors[e],r)));return Wh(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);xN(this.elementShape,t,"TensorList shape mismatch: ");const n=vN(this.elementShape,this.tensors,t);return 0===this.size()?Na([],[0].concat(n)):Uo((()=>{const e=this.tensors.map((e=>sl(e,n)));return ol(e,0)}))}}const SN=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=RI("thenBranch",e,t,n),s=RI("elseBranch",e,t,n),a=RI("cond",e,t,n),i=RI("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=RI("body",e,t,n),s=RI("cond",e,t,n),a=RI("args",e,t,n),i=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let u=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[LI(RI("pred",e,t,n))];case"Switch":{const r=RI("pred",e,t,n);let s=RI("data",e,t,n);return s.kept||(s=LI(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==_I(e,t,n)));if(r){return[LI(_I(r,t,n))]}return}case"Enter":{const r=RI("frameName",e,t,n),s=RI("tensor",e,t,n);return n.enterFrame(r),[LI(s)]}case"Exit":{const r=RI("tensor",e,t,n);return n.exitFrame(),[LI(r)]}case"NextIteration":{const r=RI("tensor",e,t,n);return n.nextIteration(),[LI(r)]}case"TensorArrayV3":{const r=RI("size",e,t,n),s=RI("dtype",e,t,n),a=RI("elementShape",e,t,n),i=RI("dynamicSize",e,t,n),o=RI("clearAfterRead",e,t,n),u=RI("identicalElementShapes",e,t,n),l=RI("name",e,t,n),c=new IN(l,s,r,a,u,i,o);return n.addTensorArray(c),[c.idTensor,gu(1)]}case"TensorArrayWriteV3":{const r=RI("tensorArrayId",e,t,n),s=RI("index",e,t,n),a=RI("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(s,a),[i.idTensor]}case"TensorArrayReadV3":{const r=RI("tensorArrayId",e,t,n),s=RI("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=RI("tensorArrayId",e,t,n),s=RI("indices",e,t,n),a=RI("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=RI("tensorArrayId",e,t,n),s=RI("indices",e,t,n),a=RI("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(s,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=RI("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=RI("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=RI("tensorArrayId",e,t,n),s=RI("tensor",e,t,n),a=RI("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(a,s),[i.idTensor]}case"TensorArraySizeV3":{const r=RI("tensorArrayId",e,t,n);return[gu(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=RI("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=RI("tensorListId",e,t,n),s=RI("index",e,t,n),a=RI("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(s,a),[i.idTensor]}case"TensorListGetItem":{const r=RI("tensorListId",e,t,n),s=RI("index",e,t,n),a=RI("elementShape",e,t,n),i=RI("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=RI("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new NN([],n,e.dtype,r),i=tp(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(RI("tensor",e,t,n),r,RI("elementShape",e,t,n),RI("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=RI("elementShape",e,t,n),s=RI("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new NN([],e,t,n)}(r,s,RI(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=RI("tensorListId",e,t,n),s=RI("indices",e,t,n),a=RI("elementShape",e,t,n),i=RI("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,i,a)]}case"TensorListStack":{const r=RI("tensorListId",e,t,n),s=RI("elementShape",e,t,n),a=RI("elementDType",e,t,n),i=RI("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,i)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);xN(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=tp(e);return new NN(s,t,r)}(RI("tensor",e,t,n),RI("elementShape",e,t,n),RI("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=RI("tensorListId",e,t,n),s=n.getTensorList(r.id),a=RI("dtype",e,t,n),i=RI("elementShape",e,t,n);return[s.concat(a,i)]}case"TensorListPushBack":{const r=RI("tensorListId",e,t,n),s=RI("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=RI("tensorListId",e,t,n),s=RI("elementShape",e,t,n),a=RI("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=RI("tensor",e,t,n),s=RI("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=kN(e.shape.slice(1),n),i=0===r?0:e.size/r,o=Uo((()=>{const n=[];e=sl(e,[1,r,i]);for(let r=0;r<t.length;++r){const o=[0,0===r?0:s[r-1],0],u=[1,t[r],i];n[r]=sl(ll(e,o,u),a)}return e.dispose(),n})),u=new NN([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)u.setItem(e,o[e]);return u}(r,RI("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function CN(e,t,n){const[r,s]=RI("fusedOps",e,t,n),a="biasadd"===r,i=!a,o="prelu"===s,u="fusedbatchnorm"===r,l=RI("numArgs",e,t,n);if(a){if(o&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=RI("strides",e,t,n),h=MI(e,t,n),p=RI("dataFormat",e,t,n).toUpperCase(),d=RI("dilations",e,t,n);let[f,m]=RI("args",e,t,n);i&&(m=f,f=void 0);return{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:RI("leakyreluAlpha",e,t,n)}}function TN(e,t,n){return{boxes:RI("boxes",e,t,n),scores:RI("scores",e,t,n),maxOutputSize:RI("maxOutputSize",e,t,n),iouThreshold:RI("iouThreshold",e,t,n),scoreThreshold:RI("scoreThreshold",e,t,n),softNmsSigma:RI("softNmsSigma",e,t,n)}}class $N{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=gu(0),this.tensorMap=new Map,jo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return gu(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Uo((()=>{const e=tp(t),r=n.length,s=e.length;ne(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];jo(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Uo((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return Wh(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function EN(e,t,n,r){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return Uo((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[nu(RI("a",e,t,n),RI("b",e,t,n))];case"AddN":return[Ou(RI("tensors",e,t,n))];case"FloorMod":case"Mod":return[Wc(RI("a",e,t,n),RI("b",e,t,n))];case"Mul":return[au(RI("a",e,t,n),RI("b",e,t,n))];case"RealDiv":case"Div":return[su(RI("a",e,t,n),RI("b",e,t,n))];case"DivNoNan":return[Wl(RI("a",e,t,n),RI("b",e,t,n))];case"FloorDiv":return[ru(RI("a",e,t,n),RI("b",e,t,n))];case"Sub":return[ku(RI("a",e,t,n),RI("b",e,t,n))];case"Minimum":return[Pc(RI("a",e,t,n),RI("b",e,t,n))];case"Maximum":return[$u(RI("a",e,t,n),RI("b",e,t,n))];case"Pow":return[vu(RI("a",e,t,n),RI("b",e,t,n))];case"SquaredDifference":return[Ph(RI("a",e,t,n),RI("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return Uo((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Nu(RI("x",e,t,n))];case"Acos":return[Fu(RI("x",e,t,n))];case"Acosh":return[Du(RI("x",e,t,n))];case"Asin":return[Pu(RI("x",e,t,n))];case"Asinh":return[Vu(RI("x",e,t,n))];case"Atan":return[Wu(RI("x",e,t,n))];case"Atan2":return[Uu(RI("x",e,t,n),RI("y",e,t,n))];case"Atanh":return[Gu(RI("x",e,t,n))];case"Ceil":return[xl(RI("x",e,t,n))];case"Complex":return[ka(RI("real",e,t,n),RI("imag",e,t,n))];case"Cos":return[_l(RI("x",e,t,n))];case"Cosh":return[Fl(RI("x",e,t,n))];case"Elu":return[jl(RI("x",e,t,n))];case"Erf":return[Hl(RI("x",e,t,n))];case"Exp":return[ql(RI("x",e,t,n))];case"Expm1":return[Xl(RI("x",e,t,n))];case"Floor":return[Jl(RI("x",e,t,n))];case"Log":return[hc(RI("x",e,t,n))];case"Log1p":return[pc(RI("x",e,t,n))];case"Imag":return[nc(RI("x",e,t,n))];case"Neg":return[dc(RI("x",e,t,n))];case"Reciprocal":return[fh(RI("x",e,t,n))];case"Real":return[dh(RI("x",e,t,n))];case"Relu":return[mh(RI("x",e,t,n))];case"Round":return[kh(RI("x",e,t,n))];case"Selu":return[Nh(RI("x",e,t,n))];case"Sigmoid":return[ul(RI("x",e,t,n))];case"Sin":return[$h(RI("x",e,t,n))];case"Sign":return[Th(RI("x",e,t,n))];case"Sinh":return[Eh(RI("x",e,t,n))];case"Softplus":return[fc(RI("x",e,t,n))];case"Sqrt":return[iu(RI("x",e,t,n))];case"Square":return[ou(RI("x",e,t,n))];case"Tanh":return[cl(RI("x",e,t,n))];case"Tan":return[jh(RI("x",e,t,n))];case"ClipByValue":return[wl(RI("x",e,t,n),RI("clipValueMin",e,t,n),RI("clipValueMax",e,t,n))];case"Relu6":return[gh(RI("x",e,t,n))];case"Rsqrt":return[Ih(_I(e.inputNames[0],t,n))];case"Prod":return[rh(RI("x",e,t,n),RI("axes",e,t,n))];case"LeakyRelu":return[ic(RI("x",e,t,n),RI("alpha",e,t,n))];case"Prelu":return[nh(RI("x",e,t,n),RI("alpha",e,t,n))];case"IsNan":return[ac(_I(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return SN(e,t,n);case"convolution":return Uo((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=RI("stride",e,t,n),s=RI("pad",e,t,n),a=RI("dataFormat",e,t,n).toUpperCase(),i=RI("dilation",e,t,n);return[Cl(RI("x",e,t,n),RI("filter",e,t,n),r,s,a,i)]}case"Conv2D":{const r=RI("strides",e,t,n),s=MI(e,t,n),a=RI("dataFormat",e,t,n).toUpperCase(),i=RI("dilations",e,t,n);return[Sl(RI("x",e,t,n),RI("filter",e,t,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l,leakyreluAlpha:c}=CN(e,t,n);return[vp({x:RI("x",e,t,n),filter:RI("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:i,biasArg:o,preluArg:u,activationFunc:l,leakyreluAlpha:c}=CN(e,t,n);return[Np({x:RI("x",e,t,n),filter:RI("filter",e,t,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:l,preluActivationWeights:u,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=RI("outputShape",e,t,n),s=RI("strides",e,t,n),a=MI(e,t,n);return[$l(RI("x",e,t,n),RI("filter",e,t,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=RI("strides",e,t,n),s=MI(e,t,n),a=RI("dilations",e,t,n),i=RI("dataFormat",e,t,n).toUpperCase();return[Ll(RI("input",e,t,n),RI("filter",e,t,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case"Conv3D":{const r=RI("strides",e,t,n),s=RI("pad",e,t,n),a=RI("dataFormat",e,t,n).toUpperCase(),i=RI("dilations",e,t,n);return[El(RI("x",e,t,n),RI("filter",e,t,n),[r[1],r[2],r[3]],s,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=RI("strides",e,t,n),s=RI("pad",e,t,n),a=RI("kernelSize",e,t,n);return[al(RI("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=RI("strides",e,t,n),s=RI("pad",e,t,n),a=RI("kernelSize",e,t,n);return[_c(RI("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=RI("strides",e,t,n),s=RI("pad",e,t,n),a=RI("kernelSize",e,t,n),i=RI("includeBatchInIndex",e,t,n),{result:o,indexes:u}=Dc(RI("x",e,t,n),[a[1],a[2]],[r[1],r[2]],s,i);return[o,u]}case"AvgPool3D":{const r=RI("strides",e,t,n),s=RI("pad",e,t,n),a=RI("kernelSize",e,t,n);return[il(RI("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=RI("strides",e,t,n),s=RI("pad",e,t,n),a=RI("kernelSize",e,t,n);return[Fc(RI("x",e,t,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=RI("strides",e,t,n),s=RI("pad",e,t,n),a=RI("dilations",e,t,n),i=r[1],o=r[2],u=a[1],l=a[2];return[Bl(RI("x",e,t,n),RI("filter",e,t,n),[i,o],s,[u,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return Uo((()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=RI("shape",e,t,n),s=RI("dtype",e,t,n);return[xu(r,RI("value",e,t,n),s)]}case"LinSpace":return[lc(RI("start",e,t,n),RI("stop",e,t,n),RI("num",e,t,n))];case"Multinomial":{const r=RI("logits",e,t,n),s=RI("numSamples",e,t,n),a=RI("seed",e,t,n);return[jc(r,s,a)]}case"OneHot":{const r=RI("indices",e,t,n),s=RI("depth",e,t,n),a=RI("onValue",e,t,n),i=RI("offValue",e,t,n);return[Ui(r,s,a,i)]}case"Ones":return[Lc(RI("shape",e,t,n),RI("dtype",e,t,n))];case"OnesLike":return[qc(RI("x",e,t,n))];case"RandomUniform":return[hh(RI("shape",e,t,n),RI("minval",e,t,n),RI("maxval",e,t,n),RI("dtype",e,t,n))];case"Range":return[ph(RI("start",e,t,n),RI("stop",e,t,n),RI("step",e,t,n),RI("dtype",e,t,n))];case"TruncatedNormal":{const r=RI("shape",e,t,n),s=RI("mean",e,t,n),a=RI("stdDev",e,t,n),i=RI("seed",e,t,n);return[Jh(r,s,a,RI("dtype",e,t,n),i)]}case"Zeros":return[Mc(RI("shape",e,t,n),RI("dtype",e,t,n))];case"ZerosLike":return[uu(RI("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:u}=TN(e,t,n),l=await kd.nonMaxSuppressionWithScoreAsync(r,s,a,i,o,u);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=TN(e,t,n),u=RI("padToMaxOutputSize",e,t,n),l=await kd.nonMaxSuppressionPaddedAsync(r,s,a,i,o,u);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=TN(e,t,n);return[await kd.nonMaxSuppressionAsync(r,s,a,i,o)]}case"Where":{const r=ki(RI("condition",e,t,n),"bool"),s=[await sp(r)];return r.dispose(),s}case"ListDiff":return Ch(RI("x",e,t,n),RI("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return Uo((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=RI("x",e,t,n),s=RI("k",e,t,n),a=RI("sorted",e,t,n),i=Zh(r,s,a);return[i.values,i.indices]}case"Unique":{const r=RI("x",e,t,n),s=Qh(r);return[s.values,s.indices]}case"UniqueV2":{const r=RI("x",e,t,n),s=RI("axis",e,t,n),a=Qh(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return Uo((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=RI("images",e,t,n),s=RI("size",e,t,n),a=RI("alignCorners",e,t,n),i=RI("halfPixelCenters",e,t,n);return[kd.resizeBilinear(r,[s[0],s[1]],a,i)]}case"ResizeNearestNeighbor":{const r=RI("images",e,t,n),s=RI("size",e,t,n),a=RI("alignCorners",e,t,n),i=RI("halfPixelCenters",e,t,n);return[kd.resizeNearestNeighbor(r,[s[0],s[1]],a,i)]}case"CropAndResize":{const r=RI("image",e,t,n),s=RI("boxes",e,t,n),a=RI("boxInd",e,t,n),i=RI("cropSize",e,t,n),o=RI("method",e,t,n),u=RI("extrapolationValue",e,t,n);return[kd.cropAndResize(r,s,a,i,o,u)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return Uo((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=RI("default",e,t,n);return[_I(e.name,t,n)||r];case"Placeholder":return[_I(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[LI(RI("x",e,t,n))];case"IdentityN":return RI("x",e,t,n).map((e=>LI(e)));case"Snapshot":return[LI(RI("x",e,t,n))];case"Shape":return[Hh(RI("x",e,t,n).shape,"int32")];case"ShapeN":return RI("x",e,t,n).map((e=>Hh(e.shape)));case"Size":return[gu(RI("x",e,t,n).size,"int32")];case"Rank":return[gu(RI("x",e,t,n).rank,"int32")];case"NoOp":return[gu(1)];case"Print":const s=RI("x",e,t,n),a=RI("data",e,t,n),i=RI("message",e,t,n),o=RI("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return Uo((()=>((e,t,n)=>{switch(e.op){case"Equal":return[Pl(RI("a",e,t,n),RI("b",e,t,n))];case"NotEqual":return[Hc(RI("a",e,t,n),RI("b",e,t,n))];case"Greater":return[ec(RI("a",e,t,n),RI("b",e,t,n))];case"GreaterEqual":return[tc(RI("a",e,t,n),RI("b",e,t,n))];case"Less":return[oc(RI("a",e,t,n),RI("b",e,t,n))];case"LessEqual":return[uc(RI("a",e,t,n),RI("b",e,t,n))];case"LogicalAnd":return[$c(RI("a",e,t,n),RI("b",e,t,n))];case"LogicalNot":return[Ec(RI("a",e,t,n))];case"LogicalOr":return[Ac(RI("a",e,t,n),RI("b",e,t,n))];case"Select":case"SelectV2":return[Vl(RI("condition",e,t,n),RI("a",e,t,n),RI("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return Uo((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Wi(RI("a",e,t,n),RI("b",e,t,n),RI("transposeA",e,t,n),RI("transposeB",e,t,n))];case"Einsum":return[Gl(RI("equation",e,t,n),...RI("tensors",e,t,n))];case"Transpose":return[Gi(RI("x",e,t,n),RI("perm",e,t,n))];case"_FusedMatMul":const[r,s]=RI("fusedOps",e,t,n),a="biasadd"===r,i="prelu"===s,o=RI("numArgs",e,t,n),u=RI("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=RI("args",e,t,n);return[Sp({a:RI("a",e,t,n),b:RI("b",e,t,n),transposeA:RI("transposeA",e,t,n),transposeB:RI("transposeB",e,t,n),bias:l,activation:s,preluActivationWeights:c,leakyreluAlpha:u})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return Uo((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[dl(RI("x",e,t,n),RI("mean",e,t,n),RI("variance",e,t,n),RI("offset",e,t,n),RI("scale",e,t,n),RI("epsilon",e,t,n))];case"LRN":return[cc(RI("x",e,t,n),RI("radius",e,t,n),RI("bias",e,t,n),RI("alpha",e,t,n),RI("beta",e,t,n))];case"Softmax":return[Dh(RI("x",e,t,n))];case"LogSoftmax":return[bc(RI("x",e,t,n))];case"SparseToDense":return[cp(RI("sparseIndices",e,t,n),RI("outputShape",e,t,n),RI("sparseValues",e,t,n),RI("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return Uo((()=>((e,t,n)=>{switch(e.op){case"Max":{const r=RI("axis",e,t,n),s=RI("keepDims",e,t,n);return[gc(RI("x",e,t,n),r,s)]}case"Mean":{const r=RI("axis",e,t,n),s=RI("keepDims",e,t,n);return[Oc(RI("x",e,t,n),r,s)]}case"Min":{const r=RI("axis",e,t,n),s=RI("keepDims",e,t,n);return[Bc(RI("x",e,t,n),r,s)]}case"Sum":{const r=RI("axis",e,t,n),s=RI("keepDims",e,t,n);return[yc(RI("x",e,t,n),r,s)]}case"All":{const r=RI("axis",e,t,n),s=RI("keepDims",e,t,n);return[Mu(RI("x",e,t,n),r,s)]}case"Any":{const r=RI("axis",e,t,n),s=RI("keepDims",e,t,n);return[Lu(RI("x",e,t,n),r,s)]}case"ArgMax":{const r=RI("axis",e,t,n);return[zu(RI("x",e,t,n),r)]}case"ArgMin":{const r=RI("axis",e,t,n);return[Bu(RI("x",e,t,n),r)]}case"Prod":{const r=RI("axis",e,t,n),s=RI("keepDims",e,t,n);return[rh(RI("x",e,t,n),r,s)]}case"Cumsum":{const r=RI("axis",e,t,n),s=RI("exclusive",e,t,n),a=RI("reverse",e,t,n);return[Dl(RI("x",e,t,n),r,s,a)]}case"Bincount":const r=RI("x",e,t,n),s=RI("weights",e,t,n),a=RI("size",e,t,n);return[yl(r,s,a)];case"DenseBincount":{const r=RI("x",e,t,n),s=RI("weights",e,t,n),a=RI("size",e,t,n),i=RI("binaryOutput",e,t,n);return[Ol(r,s,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return Uo((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=RI("n",e,t,n),s=RI("axis",e,t,n);let a=RI("tensors",e,t,n);return a=a.slice(0,r),[ol(a,s)]}case"Gather":{const r=RI("x",e,t,n),s=RI("indices",e,t,n);return[Ql(r,ki(s,"int32"),0)]}case"GatherV2":{const r=RI("axis",e,t,n),s=RI("batchDims",e,t,n),a=RI("x",e,t,n),i=RI("indices",e,t,n);return[Ql(a,ki(i,"int32"),r,s)]}case"Reverse":{const r=RI("dims",e,t,n),s=[];for(let e=0;e<r.length;e++)r[e]&&s.push(e);const a=RI("x",e,t,n);return[yh(a,s)]}case"ReverseV2":{const r=RI("axis",e,t,n),s=RI("x",e,t,n);return[yh(s,r)]}case"Slice":{const r=RI("begin",e,t,n),s=RI("size",e,t,n);return[ll(RI("x",e,t,n),r,s)]}case"StridedSlice":{const r=RI("begin",e,t,n),s=RI("end",e,t,n),a=RI("strides",e,t,n),i=RI("beginMask",e,t,n),o=RI("endMask",e,t,n),u=RI("ellipsisMask",e,t,n),l=RI("newAxisMask",e,t,n),c=RI("shrinkAxisMask",e,t,n),h=RI("x",e,t,n);return[Gh(h,r,s,a,i,o,u,l,c)]}case"Pack":return Uo((()=>{const r=RI("axis",e,t,n),s=RI("tensors",e,t,n),a=s[0].shape,i=Vh(s[0]).shape,o=s.map((e=>{const t=ue(e.shape,a);if(!t&&!ue(Vh(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:sl(e,a)}));return[Wh(o,r)]}));case"Unpack":{const r=RI("axis",e,t,n),s=RI("tensor",e,t,n);return tp(s,r)}case"Tile":{const r=RI("reps",e,t,n);return[Yl(RI("x",e,t,n),r)]}case"Split":case"SplitV":{const r=RI("axis",e,t,n),s=RI("numOrSizeSplits",e,t,n),a=RI("x",e,t,n);return zh(a,s,r)}case"ScatterNd":{const r=RI("indices",e,t,n),s=RI("values",e,t,n),a=RI("shape",e,t,n);return[lp(r,s,a)]}case"GatherNd":{const r=RI("x",e,t,n),s=RI("indices",e,t,n);return[hp(r,s)]}case"SparseToDense":{const r=RI("sparseIndices",e,t,n),s=RI("outputShape",e,t,n),a=RI("sparseValues",e,t,n),i=RI("defaultValue",e,t,n);return[cp(r,a,s,a.dtype===i.dtype?i:ki(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return Uo((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:s,emptyRowIndicator:a,reverseIndexMap:i}=Sd.sparseFillEmptyRows(RI("indices",e,t,n),RI("values",e,t,n),RI("denseShape",e,t,n),RI("defaultValue",e,t,n));return[r,s,a,i]}case"SparseReshape":{const{outputIndices:r,outputShape:s}=Sd.sparseReshape(RI("inputIndices",e,t,n),RI("inputShape",e,t,n),RI("newShape",e,t,n));return[r,s]}case"SparseSegmentMean":return[Sd.sparseSegmentMean(RI("data",e,t,n),RI("indices",e,t,n),RI("segmentIds",e,t,n))];case"SparseSegmentSum":return[Sd.sparseSegmentSum(RI("data",e,t,n),RI("indices",e,t,n),RI("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return Uo((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Oh(RI("x",e,t,n))];case"IFFT":return[Mh(RI("x",e,t,n))];case"RFFT":return[Bh(RI("x",e,t,n))];case"IRFFT":return[Lh(RI("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return Uo((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:s}=Cd.stringNGrams(RI("data",e,t,n),RI("dataSplits",e,t,n),RI("separator",e,t,n),RI("nGramWidths",e,t,n),RI("leftPad",e,t,n),RI("rightPad",e,t,n),RI("padWidth",e,t,n),RI("preserveShortSequences",e,t,n));return[r,s]}case"StringSplit":{const{indices:r,values:s,shape:a}=Cd.stringSplit(RI("input",e,t,n),RI("delimiter",e,t,n),RI("skipEmpty",e,t,n));return[r,s,a]}case"StringToHashBucketFast":return[Cd.stringToHashBucketFast(RI("input",e,t,n),RI("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return Uo((()=>((e,t,n)=>{switch(e.op){case"Cast":return[ki(RI("x",e,t,n),RI("dtype",e,t,n))];case"ExpandDims":{const r=RI("axis",e,t,n);return[Kl(RI("x",e,t,n),r)]}case"Squeeze":{const r=RI("axis",e,t,n);return[Vh(RI("x",e,t,n),r)]}case"Reshape":return[sl(RI("x",e,t,n),RI("shape",e,t,n))];case"MirrorPad":return[Vc(RI("x",e,t,n),RI("padding",e,t,n),RI("mode",e,t,n))];case"PadV2":case"Pad":return[Xc(RI("x",e,t,n),RI("padding",e,t,n),RI("constantValue",e,t,n))];case"SpaceToBatchND":{const r=RI("blockShape",e,t,n),s=RI("paddings",e,t,n);return[eh(RI("x",e,t,n),r,s)]}case"BatchToSpaceND":{const r=RI("blockShape",e,t,n),s=RI("crops",e,t,n);return[pl(RI("x",e,t,n),r,s)]}case"DepthToSpace":{const r=RI("blockSize",e,t,n),s=RI("dataFormat",e,t,n).toUpperCase();return[Ml(RI("x",e,t,n),r,s)]}case"BroadcastTo":return[bl(RI("x",e,t,n),RI("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=RI("keyDType",e,t,n),a=RI("valueDType",e,t,n),i=new $N(s,a);return r.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=RI("tableHandle",e,t,n,r),a=RI("keys",e,t,n),i=RI("values",e,t,n),o=r.getHashTableById(s.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const s=RI("tableHandle",e,t,n,r),a=RI("keys",e,t,n),i=RI("defaultValue",e,t,n),o=r.getHashTableById(s.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=RI("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const s=EI(e.op);if(s&&s.customExecutor)return s.customExecutor(new bN(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Ve(s)?s.then((e=>[].concat(e))):[].concat(s)}class AN{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function RN(e,t,n,r){const s=new Set,a=[];let i=null,o=null;const u=new Set,l=Object.keys(e).map((e=>OI(e)[0]));let c=[];null!=r&&(c=r.map((e=>OI(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(ON(e)||MN(e)||LN(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:i,syncInputs:o}}const _N=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],FN=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],DN=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function ON(e){return _N.indexOf(e.op)>=0}function MN(e){return FN.indexOf(e.op)>=0}function LN(e){return DN.indexOf(e.op)>=0}class zN{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new zN(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=RN(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],i=Object.keys(s).map((e=>OI(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{r.has(e.name)&&a.push(e)}));const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&a.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[OI(e)[0]])),s=t.map((e=>OI(e)[0]));let a=s.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(r,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const u={},l={};return Uo((()=>{const n=new AN(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=OI(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!r[t.name]){const e=EN(t,r,n,this._resourceManager);if(Ve(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,i)}}return null==this.parent&&n.dispose(a),t.map((e=>_I(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[DI(e,n.currentContextId)]}(e.name,n,r);null!=t&&t.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new AN(this.weightMap,r,s,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>_I(e,i,a))),u=o.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id)),c=new Set([...u,...l,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.kept||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[OI(e)[0]])),i=n.map((e=>OI(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:h}=RN(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=OI(t),s=[];s[r]=e[t],d[n]=s}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!ON(e)&&!_I(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return d}processStack(e,t,n,r,s,a,i,o,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&RI("isConstant",e.node,r,n)&&([c]=FI(e.node.name,n)),null==r[e.node.name]){const h=EN(e.node,r,n,this._resourceManager);c||([c]=FI(e.node.name,n));const p=n.currentContext;Ve(h)?l.push(h.then((l=>(r[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u),l)))):(r[c]=h,this.checkTensorForDisposal(c,e.node,r,n,a,i,o),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[i]=FI(e.name,n);!s[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!_I(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!_I(e,r,n)))&&(s[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=OI(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value;ne(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&ne(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=OI(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=OI(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class BN{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class PN{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new BN}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=Li(e,this.loadOptions);else{const t=Va(e,this.loadOptions);if(0===t.length)t.push(Li(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=Ta(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new zN(rN.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=rN.Instance.transformGraph(e.modelInitializer);this.initializer=new zN(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=Pa(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof Gs||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function VN(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new PN(e,t);return await n.load(),n}const WN="3.8.0";var UN,GN=n(6377);function jN(e,t,n=new Map,r=new Set){if(null==e)return null;if(r.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(s.recurse){if(YN(e)){const s=Array.isArray(e)?[]:{};r.add(e);for(const a in e){const i=jN(e[a],t,n,r);s[a]=i}return r.delete(e),s}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,s.value),s.value}function HN(e,t=KN){return qN(e,t)}function qN(e,t,n=new Set){const r=e[0];if(n.has(r))throw new Error("Circular references are not supported.");const s=t(e);if(s.recurse&&null!==s.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(s.recurse){if(YN(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const a in r){const r=qN(e.map((e=>e[a])),t,n);s[a]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function KN(e){return null===e?null:YN(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function XN(e,t){const n=new Map;jN(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(Ve(t)){const r=await t;n.set(e,r)}}return jN(e,t,n)}function YN(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Gs))}function ZN(e){return function(e,t){return jN(e,t)}(e,JN)}function JN(e){return e instanceof Gs?{value:e.clone(),recurse:!1}:YN(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class QN{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class eS extends QN{constructor(){super(eS.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function tS(e){return new aS(e)}function nS(e){return new iS(e)}function rS(e,t){return new yS(e,t)}eS.INITIAL_CAPACITY=32;class sS{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new dS(this,e)}filter(e){return new hS(this,e)}map(e){return new pS(this,e)}mapAsync(e){return new fS(this,e)}serialMapAsync(e){return new fS(this,e).serial()}flatmap(e){return new gS(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new cS(this,e,t)}columnMajorBatch(e,t=!0,n=KN){return this.rowMajorBatch(e,t).map((e=>HN(e,n)))}concatenate(e,t){return new yS(tS([this,e]),t)}take(e){return e<0||null==e?this:new lS(this,e)}skip(e){return e<0||null==e?this:new uS(this,e)}prefetch(e){return new xS(this,e)}shuffle(e,t){return new wS(this,e,t)}serial(){return new oS(this)}}class aS extends sS{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:ZN(e),done:!1}}}class iS extends sS{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class oS extends sS{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class uS extends sS{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Go(e.value)}return this.upstream.next()}}class lS extends sS{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class cS extends sS{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class hS extends sS{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Go(e.value)}}}class pS extends sS{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=sa(e.value),n=this.transform(e.value),r=sa(n);for(const e of t)ra(e,r)||e.dispose();return{value:n,done:!1}}}class dS extends sS{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class fS extends sS{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=sa(e.value),n=await this.transform(e.value),r=sa(n);for(const e of t)ra(e,r)||e.dispose();return{value:n,done:!1}}}class mS extends sS{constructor(){super(),this.outputQueue=new eS,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class gS extends mS{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=sa(e.value),n=this.transform(e.value),r=sa(n);this.outputQueue.pushAll(n);for(const e of t)ra(e,r)||e.dispose();return!0}}class yS extends sS{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(UN||(UN={}));class bS extends sS{constructor(e,t=UN.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const r=await XN(this.iterators,(function(e){if(e instanceof sS){return{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}}return{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case UN.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case UN.SHORTEST:return{value:null,done:!0};case UN.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class xS extends sS{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new QN(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class wS extends xS{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=GN.alea(n||$s().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class vS{constructor(){this.size=null}batch(e,t=!0){const n=this;let r;return ne(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),r=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),kS((async()=>(await n.iterator()).columnMajorBatch(e,t,SS)),r)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,kS((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,kS((async()=>(await t.iterator()).filter((t=>Uo((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return kS((async()=>(await t.iterator()).map((t=>Uo((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return kS((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return kS((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,kS((async()=>rS(nS((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,kS((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=GN.alea(t||$s().toString());return kS((async()=>{let t=s.int32();return n&&(t+=s.int32()),(await r.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,kS((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function kS(e,t=null){return new class extends vS{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function IS(e){return kS((async()=>tS(e)),e.length)}function NS(e){if(!YN(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return kS((async()=>function(e,t=UN.FAIL){return new bS(e,t)}(await XN(e,(e=>{if(e instanceof vS)return{value:e.iterator(),recurse:!1};if(YN(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),UN.SHORTEST)),t)}function SS(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(r=n)||"object"!=typeof r&&"function"!=typeof r||Array.isArray(n)||"object"==typeof n&&n instanceof Gs||Ie(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Gs?Wh(e):Na(e)}(e),recurse:!1}}var n,r;return{value:null,recurse:!0}}vS.MAX_BUFFER_SIZE=1e4;class CS extends vS{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const TS='"',$S=Symbol("out"),ES=Symbol("field"),AS=Symbol("quote"),RS=Symbol("quoteafterquote"),_S=Symbol("quoteinquote");class FS extends vS{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new CS(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(ne(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&ne(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(ne(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const a=this.fullColumnNames[s],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[s];let u=null;if(""===o)if(i&&void 0!==i.default)u=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);u=void 0}else{const e=Number(o);if(isNaN(e))u=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":u=e;break;case"int32":u=Math.floor(e);break;case"bool":u=this.getBoolean(o);break;default:u=e}else u=e}i&&i.isLabel?r[a]=u:n[a]=u}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let r=0;const s=e.length;let a=$S;for(let t=0;t<s;t++)switch(a){case $S:switch(e.charAt(t)){case TS:r=t+1,a=AS;break;case this.delimiter:if(r=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=$S;break;default:a=ES,r=t}break;case ES:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(r,t)),a=$S,r=t+1}break;case AS:switch(e.charAt(t)){case TS:a=RS}break;case RS:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(r,t-1)),a=$S,r=t+1;break;case TS:a=AS;break;default:a=_S}break;case _S:switch(e.charAt(t)){case TS:a=AS}}if(a===RS?n.push(e.substring(r,s-1)):n.push(e.substring(r)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class DS extends sS{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(je().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new DS(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((r=>{const s=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,r)=>n.set(e,r*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(ie(t));return n.set(e,n.length-e.length),Na(n,t)}}class OS extends sS{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=Hh([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,r=(1-t)/2,s=n+e,a=t+r;this.cropBox=qh([r,n,a,s],[1,4])}else this.cropBox=qh([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(je().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new OS(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&ne("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=Ji(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return Uo((()=>{const t=Kl(ki(e,"float32"),0);let n;n=kd.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const r=n.shape;return sl(n,r.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class MS{}class LS extends sS{split(e){return new zS(this,e)}}class zS extends LS{constructor(e,t){super(),this.upstream=e,this.impl=new BS(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class BS extends mS{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class PS extends sS{decodeUTF8(){return new VS(this)}}class VS extends LS{constructor(e){super(),this.upstream=e,this.impl=new WS(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class WS extends mS{constructor(e){if(super(),this.upstream=e,je().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(4589);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=je().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class US extends PS{constructor(e,t={}){super(),this.file=e,this.options=t,ne(e instanceof Uint8Array||!!je().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(s)},r.onabort=e=>t(new Error("Aborted")),r.onerror=e=>t(new Error(e.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n}));return{value:await e,done:!1}}}const GS=e=>({method:e.method,headers:e.headers,body:e.body,mode:e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,referrer:e.referrer,integrity:e.integrity});function jS(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class HS extends MS{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if(jS(this.input)&&je().get("IS_NODE")){const e=n(2993);this.input=e.readFileSync(this.input.substr(7))}return new US(this.input,this.options)}}class qS extends MS{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return jS(this.url)?new HS(this.url,this.fileOptions).iterator():async function(e,t={}){let n,r;"string"==typeof e?n=e:(n=e.url,r=GS(e));const s=await Es(n,r);if(s.ok){const e=new Uint8Array(await s.arrayBuffer());return new US(e,t)}throw new Error(s.statusText)}(this.url,this.fileOptions)}}function KS(e,t={}){return new FS(new qS(e),t)}function XS(e){const t=nS(e);return kS((async()=>t))}function YS(e){return kS((async()=>{const t=await e();return nS((()=>t.next()))}))}async function ZS(e,t){return OS.create(e,t)}async function JS(e){return DS.create(e)}const QS="3.8.0";function eC(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ne("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const tC=rp;class nC extends H{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new j(this,Po())}nextDataId(){return nC.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,je().get("IS_NODE")&&Xd("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Ce(n[0])){const s=n.map((e=>As(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,s){this.data.set(e,{values:t,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){return Zd(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Rs(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return vi(e.shape,e.dtype,n)}makeOutput(e,t,n){const r=this.write(e,t,n);return Po().makeTensorFromDataId(r,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=$s();e();return{kernelMs:$s()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){eC([e],"where");const t=this.readSync(e.dataId);return tC(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}nC.nextDataId=0;function rC(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(eC(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=ie(i.shape),c=n||i.dtype,h=xe(c,l);for(let e=0;e<l;++e)h[e]=t(u[e],s);return o.makeTensorInfo(i.shape,c,h)}}function sC(e,t,n){return({inputs:r,attrs:s,backend:a})=>{const{x:i}=r;if(eC(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,u=o.data.get(i.dataId).values,l=n||i.dtype,c=t(u,l,s);return o.makeTensorInfo(i.shape,l,c)}}Qo("cpu",(()=>new nC),1);const aC=rC(jt,(e=>e>=0?e:Math.exp(e)-1)),iC={kernelName:jt,backendName:"cpu",kernelFunc:aC};function oC(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const uC={kernelName:ln,backendName:"cpu",kernelFunc:oC};function lC(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r;eC([s],"leakyRelu");const i=ie(s.shape),o=n.data.get(s.dataId).values,u=be("float32",i);for(let e=0;e<o.length;e++)u[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(s.shape,"float32",u)}const cC={kernelName:mn,backendName:"cpu",kernelFunc:lC};function hC(e){return(t,n,r,s,a)=>{const i=Tu(t,n),o=i.length,u=_e(i),l=be(a,ie(i)),c=t.length,h=n.length,p=_e(t),d=_e(n),f=Su(t,i),m=Su(n,i);if(f.length+m.length===0)for(let t=0;t<l.length;++t)l[t]=e(r[t%r.length],s[t%s.length]);else for(let t=0;t<l.length;++t){const n=Pe(t,o,u),a=n.slice(-c);f.forEach((e=>a[e]=0));const i=Be(a,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=Be(g,h,d);l[t]=e(r[i],s[y])}return[l,i]}}const pC=hC(((e,t)=>e<0?t*e:e));function dC(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;eC([r,s],"prelu");const a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[o,u]=pC(r.shape,s.shape,a,i,r.dtype);return n.makeTensorInfo(u,r.dtype,o)}const fC={kernelName:Jn,backendName:"cpu",kernelFunc:dC},mC=rC(rr,(e=>Math.max(0,e))),gC={kernelName:rr,backendName:"cpu",kernelFunc:mC},yC=rC(lr,(e=>Math.min(Math.max(0,e),6))),bC={kernelName:lr,backendName:"cpu",kernelFunc:yC},xC=rC(wr,(e=>1/(1+Math.exp(-e)))),wC={kernelName:wr,backendName:"cpu",kernelFunc:xC};function vC(e,t,n,r,s){if("linear"===n)return oC({inputs:{x:t},backend:e});if("relu"===n)return mC({inputs:{x:t},backend:e});if("elu"===n)return aC({inputs:{x:t},backend:e});if("relu6"===n)return yC({inputs:{x:t},backend:e});if("prelu"===n)return dC({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return lC({inputs:{x:t},backend:e,attrs:{alpha:s}});if("sigmoid"===n)return xC({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function kC(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",a),imag:n.makeTensorInfo(s.shape,"float32",i)},o}const IC={kernelName:vt,backendName:"cpu",kernelFunc:kC};function NC(e,t,n="float32"){if("complex64"===n){return kC({inputs:{real:NC(e,t,"float32"),imag:NC(e,t,"float32")},backend:e})}const r=Me(ie(t),n);return e.makeTensorInfo(t,n,r)}function SC(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.real,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const CC={kernelName:tr,backendName:"cpu",kernelFunc:SC};function TC(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:a}=r;if("complex64"===a){if("complex64"===s.dtype)return oC({inputs:{x:s},backend:n});const e=NC(n,s.shape,s.dtype),t=TC({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=kC({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=SC({inputs:{input:s},backend:n}),t=TC({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!ke(s.dtype,a)){const e=oC({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(s.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(s.shape,"int32",t)}if("bool"===a){const e=n.data.get(s.dataId).values,t=Ts([0],s.dtype),[r,a]=hC(((e,t)=>e!==t?1:0))(s.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${a}`)}const $C={kernelName:bt,backendName:"cpu",kernelFunc:TC};function EC(e,t,n,r){return null==n?({inputs:n,backend:s})=>{const{a:a,b:i}=n,o=s;eC([a,i],e);const u=o.data.get(a.dataId).values,l=o.data.get(i.dataId).values,c="string"===a.dtype?bf(u):u,h="string"===a.dtype?bf(l):l,p=r||a.dtype,[d,f]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:s})=>{const{a:a,b:i}=e,o=s;if("complex64"===a.dtype||"complex64"===i.dtype){const e=TC({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),r=t.complexTensorInfos.real,s=t.complexTensorInfos.imag,u=o.data.get(r.dataId).values,l=o.data.get(s.dataId).values,c=TC({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,u,l,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=kC({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,s=r||a.dtype,[u,l]=t(a.shape,i.shape,e,n,s);return o.makeTensorInfo(l,s,u)}}}function AC(e){return(t,n,r,s,a,i)=>{const o=Tu(t,n),u=ie(o),l=o.length,c=_e(o),h=be("float32",u),p=be("float32",u),d=Su(t,o),f=Su(n,o),m=Zd(r,s),g=Zd(a,i),y=t.length,b=_e(t),x=n.length,w=_e(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,r=t%g.length,s=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);h[t]=s.real,p[t]=s.imag}else for(let t=0;t<h.length;t++){const n=Pe(t,l,c),r=n.slice(-y);d.forEach((e=>r[e]=0));const s=Be(r,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Be(a,x,w),o=e(m[2*s],m[2*s+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const RC=hC(((e,t)=>e+t)),_C=AC(((e,t,n,r)=>({real:e+n,imag:t+r}))),FC=EC(Qe,RC,_C),DC={kernelName:Qe,backendName:"cpu",kernelFunc:FC};function OC(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=ie(s.shape),o=me(a,i),u=ie(o);ne(i===u,(()=>`The new shape (${o}) has ${u} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:s.dataId,shape:o,dtype:s.dtype}}const MC={kernelName:sr,backendName:"cpu",kernelFunc:OC};function LC(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;eC([s,a],"matMul");const u=s.shape.length,l=a.shape.length,c=i?s.shape[u-2]:s.shape[u-1],h=o?a.shape[l-1]:a.shape[l-2],p=i?s.shape[u-1]:s.shape[u-2],d=o?a.shape[l-2]:a.shape[l-1],f=s.shape.slice(0,-2),m=a.shape.slice(0,-2),g=ie(f),y=ie(m);ne(u>=2&&l>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const b=(g>y?s.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);ne(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${s.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=OC({inputs:{x:s},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),v=OC({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],N=o?v.shape[1]:v.shape[2],S=Math.max(g,y),C=n.data.get(w.dataId).values,T=n.data.get(v.dataId).values,$=_e(w.shape),E=_e(v.shape),[A,R,_]=i?[$[0],1,$[1]]:[$[0],$[1],1],[F,D,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=vi([S,I,N],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<I;t+=B)for(let n=0;n<N;n+=B)for(let r=0;r<k;r+=B){const s=Math.min(t+B,I),a=Math.min(n+B,N),i=Math.min(r+B,k);for(let o=t;o<s;o++)for(let t=n;t<a;t++){let n=0;for(let s=r;s<i;s++){const r=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=C[r+o*R+s*_]*T[s*F+t*D+a]}z[e*M+(o*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const zC={kernelName:ft,backendName:"cpu",kernelFunc:LC};const BC={kernelName:Jr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;let p,d,f;const m=[];p=LC({inputs:{a:s,b:a},attrs:{transposeA:u,transposeB:l},backend:n}),i&&(d=FC({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=vC(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function PC(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const VC={kernelName:Ye,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;eC(t,"abs");let r=new Float32Array(ie(t.shape));return r=PC(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,"float32")}},WC=rC(Ze,(e=>Math.acos(e))),UC={kernelName:Ze,backendName:"cpu",kernelFunc:WC},GC=rC(Je,(e=>Math.acosh(e))),jC={kernelName:Je,backendName:"cpu",kernelFunc:GC};const HC={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;eC(t,"addN");const s=r.map((e=>n.data.get(e.dataId).values)),a=vi(r[0].shape,r[0].dtype),i=a.values;for(let e=0;e<r.length;e++){const t=s[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function qC(e,t,n,r,s){const a=t.length,i=ie(t),o=_e(t),u=_e(s),l=be(n,ie(s));for(let t=0;t<i;++t){const n=Pe(t,a,o),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[r[e]];l[Be(s,a,u)]=e[t]}return l}function KC(e){const{inputs:t,attrs:n,backend:r}=e,{x:s}=t,{perm:a}=n;eC(s,"transpose");const i=s.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=s.shape[a[e]];const u=qC(r.data.get(s.dataId).values,s.shape,s.dtype,a,o);return{dataId:r.write(u,o,s.dtype),shape:o,dtype:s.dtype}}const XC={kernelName:Gr,backendName:"cpu",kernelFunc:KC};const YC={kernelName:tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;eC(s,"all");const o=ge(a,s.shape);let u=o;const l=Nc(u,s.shape.length);let c=s;null!=l&&(c=KC({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Cc(u.length,s.shape.length)),Ic("all",u,c.shape.length);const[h,p]=vc(c.shape,u),d=ie(p),f=Me(ie(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=OC({inputs:{x:g},backend:n,attrs:{shape:kc(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const ZC={kernelName:nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;eC(s,"any");const o=ge(a,s.shape);let u=o;const l=Nc(u,s.shape.length);let c=s;null!=l&&(c=KC({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Cc(u.length,s.shape.length)),Ic("any",u,c.shape.length);const[h,p]=vc(c.shape,u),d=ie(p),f=Me(ie(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];n=n||r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=OC({inputs:{x:g},backend:n,attrs:{shape:kc(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const JC={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;eC(s,"argMax");let i=ge(a,s.shape);const o=Nc(i,s.shape.length);let u=s;const l=[];null!=o&&(u=KC({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Cc(i.length,u.shape.length)),i=[i[0]],Ic("argMax",i,u.shape.length);const[c,h]=vc(u.shape,i),p=Me(ie(c),"int32"),d=ie(h),f=n.data.get(u.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],r=0;for(let e=0;e<d;++e){const s=f[t+e];s>n&&(n=s,r=e)}p[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}};const QC={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;eC(s,"argMin");let i=ge(a,s.shape);const o=Nc(i,s.shape.length);let u=s;const l=[];null!=o&&(u=KC({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Cc(i.length,u.shape.length)),i=[i[0]],Ic("argMin",i,u.shape.length);const[c,h]=vc(u.shape,i),p=Me(ie(c),"int32"),d=ie(h),f=n.data.get(u.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],r=0;for(let e=0;e<d;++e){const s=f[t+e];s<n&&(n=s,r=e)}p[e]=r}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},eT=rC(at,(e=>Math.asin(e))),tT={kernelName:at,backendName:"cpu",kernelFunc:eT},nT=rC(it,(e=>Math.asinh(e))),rT={kernelName:it,backendName:"cpu",kernelFunc:nT},sT=rC(ot,(e=>Math.atan(e))),aT={kernelName:ot,backendName:"cpu",kernelFunc:sT},iT=hC(((e,t)=>Math.atan2(e,t))),oT=EC(lt,iT),uT={kernelName:lt,backendName:"cpu",kernelFunc:oT},lT=rC(ut,(e=>Math.atanh(e))),cT={kernelName:ut,backendName:"cpu",kernelFunc:lT};function hT(e,t,n,r,s,a){const i=s.strideHeight,o=s.strideWidth,u=s.dilationHeight,l=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,p=s.padInfo.top,d=s.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=vi(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],b=s.outShape[2]*s.outShape[3],x=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<s.inChannels;++t)for(let y=0;y<s.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(s.inHeight,c+w),I=n+y*b;for(let n=0;n<s.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(s.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=u){const s=m+n*r[1];for(let n=c;n<p;n+=l){const i=e[s+n*r[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function pT(e,t,n,r,s=!1,a=!1){const i=vi(r.outShape,"int32"),o=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,p=r.effectiveFilterWidth,d=r.padInfo.top,f=r.padInfo.left,m=vi(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*u-f;let d=h;for(;d<0;)d+=c;const x=Math.min(r.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=l){const i=n-g;for(let o=d;o<x;o+=c){const u=o-h,l=m.get(e,n,o,t);l>w&&(w=l,v=s?a?((e*r.inHeight+n)*r.inWidth+o)*r.inChannels+t:(n*r.inWidth+o)*r.inChannels+t:i*p+u)}}i.set(v,e,n,o,t)}}return i}function dT(e,t,n,r,s,a){const i=s.strideDepth,o=s.strideHeight,u=s.strideWidth,l=s.dilationDepth,c=s.dilationHeight,h=s.dilationWidth,p=s.effectiveFilterDepth,d=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=vi(s.outShape,n),w=x.values,v=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],k=s.outShape[2]*s.outShape[3]*s.outShape[4],I=s.outShape[3]*s.outShape[4],N=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*v,x=t*r[0];for(let t=0;t<s.inChannels;++t)for(let v=0;v<s.outDepth;++v){const S=v*i-m;let C=S;for(;C<0;)C+=l;const T=Math.min(s.inDepth,p+S),$=n+v*k;for(let n=0;n<s.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(s.inHeight,d+i),v=$+n*I;for(let n=0;n<s.outWidth;++n){const i=n*u-y;let o=i;for(;o<0;)o+=h;const d=Math.min(s.inWidth,f+i),g=v+n*N;let k=b,I=0,S=0;for(let n=C;n<T;n+=l){const s=x+n*r[1];for(let n=p;n<m;n+=c){const i=s+n*r[2];for(let n=o;n<d;n+=h){const s=e[i+n*r[3]+t];if("max"===a&&s>k?k=s:"avg"===a&&(I+=s,S++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+t]="avg"===a?I/S:k}}}}return x}const fT={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;eC(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ne(nl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Hu(s.shape,a,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&ue(l.inShape,l.outShape))c=oC({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=_e(s.shape),r=hT(e,s.shape,s.dtype,t,l,"avg");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const mT={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r;eC(s,"avgPool3d");const c=qu(s.shape,a,i,1,o,u,l),h=dT(n.data.get(s.dataId).values,s.shape,s.dtype,_e(s.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const gT={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;eC([s,a],"avgPool3DGrad");const c=qu(a.shape,i,o,1,u,l),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,k=c.effectiveFilterWidth,I=w-1-c.padInfo.front,N=k-1-c.padInfo.left,S=v-1-c.padInfo.top,C=vi(a.shape,"float32"),T=1/(f*m*g),$=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-I,i=r-S,o=s-N;let u=0;for(let n=0;n<w;n+=y){const r=(a+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<v;n+=b){const s=(i+n)/p;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<k;n+=x){const a=(o+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;u+=$.get(e,r,s,a,t)}}}C.set(u*T,e,n,r,s,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const yT={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;eC([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=Hu(i.shape,o,u,1,l),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=vi(i.shape,"float32"),k=1/(d*f),I=n.data.get(s.dataId).values,N=vi(s.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-w,a=r-x;let i=0;for(let n=0;n<y;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const s=(a+n)/p;if(s<0||s>=c.outWidth||Math.floor(s)!==s)continue;i+=N.get(e,r,s,t)}}v.set(i*k,e,n,r,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const bT={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,scale:a,offset:i,mean:o,variance:u}=t;ne(o.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ne(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ne(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),eC([s,o,u,a,i],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const c=n.data.get(s.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(u.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,k=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[v++])*d[k++]/Math.sqrt(p[I++]+l),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),I>=b&&(I=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function xT(e,t,n,r,s){const a=go(r,t,n),i=ie(n),o=_e(r);if(a){const n=yo(t,o);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const u=vi(r,s,"string"===s?bf(e):e),l=vi(n,s);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map(((e,n)=>e+t[n]));l.set(u.get(...r),...n)}return"string"===s?xf(l.values):l.values}function wT(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r;eC(s,"slice");const[o,u]=bo(s,a,i);ro(s,o,u);const l=xT(n.data.get(s.dataId).values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,l)}const vT={kernelName:gr,backendName:"cpu",kernelFunc:wT};const kT={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;eC([s],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),u=Md(s.shape,a,o),l=Ld(u.length,a.length),c=zd(s.shape,a,o),h=Bd(i,a.length),p=Pd(c,i,a.length),d=OC({inputs:{x:s},backend:n,attrs:{shape:u}}),f=KC({inputs:{x:d},backend:n,attrs:{perm:l}}),m=OC({inputs:{x:f},backend:n,attrs:{shape:c}}),g=wT({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function IT(e,t,n,r,s){const a=ie(r),i=Me(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(i[r]+=a>0?t[n]:1)}return i}function NT(e,t,n,r=!1){const s=e.shape[0],a=e.shape[1],i=vi([s,n],t.dtype);for(let o=0;o<s;o++)for(let s=0;s<a;s++){const a=e.get(o,s);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(r?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,s),o,a):i.set(i.get(o,a)+1,o,a))}return i}const ST={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=IT(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function CT(e){return(t,n,r)=>{const s=be(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],r);return s}}const TT=CT((e=>Math.ceil(e))),$T=sC(xt,TT),ET={kernelName:xt,backendName:"cpu",kernelFunc:$T},AT=rC(wt,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),RT={kernelName:wt,backendName:"cpu",kernelFunc:AT},_T={kernelName:kt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(ie(t.shape)),s=n.data.get(t.dataId),a=s.complexTensorInfos.real,i=s.complexTensorInfos.imag,o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=u[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function FT(e,t,n,r){const s=xe(n,ie(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=ie(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const a="string"===n?bf(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[o+t]=a[i++]}r+=e.shape[1]}))}return s}function DT(e){const{inputs:t,backend:n}=e,{input:r}=t,s=n.data.get(r.dataId).complexTensorInfos.imag,a=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,a)}const OT={kernelName:hn,backendName:"cpu",kernelFunc:DT};function MT(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=ge(s,t[0].shape)[0];let i=_d(t.map((e=>e.shape)),a);if(0===ie(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ie(e.shape)>0));if(1===o.length)return oC({inputs:{x:o[0]},backend:n});if(Rd(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>SC({inputs:{input:e},backend:n}))),t=o.map((e=>DT({inputs:{input:e},backend:n}))),r=MT({inputs:e,backend:n,attrs:{axis:a}}),s=MT({inputs:t,backend:n,attrs:{axis:a}}),i=kC({inputs:{real:r,imag:s},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),i}const u=o.map((e=>{const t=ie(e.shape.slice(a));return OC({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),l=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=_d(u.map((e=>e.shape)),1);const c=1===u[0].shape[0],h=FT(l,i,t[0].dtype,c),p=_d(o.map((e=>e.shape)),a),d=n.makeTensorInfo(p,t[0].dtype,h);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const LT={kernelName:It,backendName:"cpu",kernelFunc:MT};function zT(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r;eC([s,a],"conv2d");const h=rl(u),p=Ku(s.shape,a.shape,i,l,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Ps(p.outShape,s.dtype),v=_e(s.shape),k=_e(a.shape),I=v[0],N=x?v[1]:v[2],S=x?v[2]:1,C=x?1:v[1],T=w.strides[0],$=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(s.dataId).values,_=n.data.get(a.dataId).values,F=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*T;for(let e=0;e<p.outHeight;++e){const r=n+e*$,s=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=s+e*m;if(n<0||n>=p.inHeight)continue;const a=e*k[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=r+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=p.inWidth)continue;const s=i+r*S;let o=a+e*k[1];for(let e=0;e<p.inChannels;++e){const n=R[s+e*C];for(let e=0;e<p.outChannels;++e)F[t+e*A]+=n*_[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const BT={kernelName:Nt,backendName:"cpu",kernelFunc:zT};const PT={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r;eC([s,a],"conv2dBackpropFilter");const h=rl(u),p=Ku(s.shape,c,i,1,o,l,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Ps(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,I=new Ps(s.shape,s.dtype,v),N=new Ps(a.shape,a.dtype,k);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((x-r)/f)),a=Math.min(p.outWidth,(p.inWidth+x-r)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let u=0;for(let l=0;l<p.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=s;e<a;++e){const n=r+e*f-x;u+=y?I.get(l,t,n,i)*N.get(l,c,e,o):I.get(l,i,t,n)*N.get(l,o,c,e)}}b.set(u,e,r,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const VT={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r;eC([s,a],"conv2dBackpropInput");const h=_e(a.shape),p=_e(s.shape);let d=rl(l);const f=Ku(i,a.shape,o,1,u,c,!1,d),m=new Ps(f.inShape,"float32"),g=m.values,y=n.data.get(s.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:I,filterWidth:N,inChannels:S,inHeight:C,inWidth:T,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:_}=f;d=f.dataFormat;const F=I-1-f.padInfo.top,D=N-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],V=O?p[1]:p[2],W=O?p[2]:1,U=O?1:p[1];for(let e=0;e<k;++e)for(let t=0;t<S;++t)for(let n=0;n<C;++n){const r=n-F,s=Math.max(0,Math.ceil(r/R)),a=Math.min(E,(I+r)/R);for(let i=0;i<T;++i){const o=i-D,u=Math.max(0,Math.ceil(o/_)),l=Math.min(A,(N+o)/_);let c=0;for(let n=s;n<a;++n){const s=n*R-r;for(let r=u;r<l;++r){const a=P*e+V*n+W*r,i=x*(I-1-s)+w*(N-1-(r*_-o))+v*t;for(let e=0;e<$;++e){c+=y[a+U*e]*b[i+e]}}}g[M*e+L*n+z*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const WT={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r;eC([s,a],"conv3d");const l=Xu(s.shape,a.shape,i,u,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,x=g.top,w=new Ps(l.outShape,s.dtype),v=n.data.get(s.dataId).values,k=n.data.get(a.dataId).values,I=w.values,N=_e(s.shape),S=_e(a.shape);for(let e=0;e<l.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const r=n+e*w.strides[1],s=e*l.strideDepth-y;for(let e=0;e<c;++e){const n=s+e*d;if(n<0||n>=l.inDepth)continue;const a=e*S[0],i=t+n*N[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-x;for(let e=0;e<h;++e){const r=n+e*f;if(r<0||r>=l.inHeight)continue;const s=a+e*S[1],o=i+r*N[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-b;for(let e=0;e<p;++e){const t=r+e*m;if(t<0||t>=l.inWidth)continue;const a=s+e*S[2],i=o+t*l.inChannels;let u=a;for(let e=0;e<l.inChannels;++e){const t=v[i+e];for(let e=0;e<l.outChannels;++e)I[n+e]+=t*k[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const UT={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r;eC([s,a],"conv3dBackpropFilterV2");const l=_e(s.shape),c=_e(a.shape),h=Xu(s.shape,u,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Ps(h.filterShape,"float32"),x=b.values,[w,v,k,I]=b.strides,N=n.data.get(a.dataId).values,[S,C,T,$]=c,E=n.data.get(s.dataId).values,[A,R,_,F]=l,D=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((D-e)/p)),n=Math.min(h.outDepth,(h.inDepth+D-e)/p),r=e*w;for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((M-s)/d)),i=Math.min(h.outHeight,(h.inHeight+M-s)/d),o=s*v+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((O-r)/f)),l=Math.min(h.outWidth,(h.inWidth+O-r)/f),c=r*k+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*S;for(let m=t;m<n;++m){const t=(e+m*p-D)*R+h,n=m*C+y;for(let e=a;e<i;++e){const a=(s+e*d-M)*_+t,i=e*T+n;for(let e=u;e<l;++e){const t=e*$+i;g+=E[(r+e*f-O)*F+a+o]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const GT={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r;eC([s],"conv3dBackpropInputV2");const l=_e(s.shape),c=_e(a.shape),h=Xu(u,a.shape,o,1,i),p=new Ps(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(s.dataId).values,[x,w,v,k]=l,I=n.data.get(a.dataId).values,[N,S,C,T]=c,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:_,inDepth:F,inHeight:D,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:V,strideWidth:W}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,j=R-1-h.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<_;++t)for(let n=0;n<F;++n){const r=n-U,s=Math.max(0,Math.ceil(r/P)),a=Math.min(L,(E+r)/P);for(let i=0;i<D;++i){const o=i-G,u=Math.max(0,Math.ceil(o/V)),l=Math.min(z,(A+o)/V);for(let c=0;c<O;++c){const h=c-j,p=Math.max(0,Math.ceil(h/W)),$=Math.min(B,(R+h)/W);let _=0;for(let n=s;n<a;++n){const s=n*P-r;for(let r=u;r<l;++r){const a=r*V-o;for(let i=p;i<$;++i){const o=x*e+w*n+v*r+k*i,u=N*(E-1-s)+S*(A-1-a)+C*(R-1-(i*W-h))+T*t;for(let e=0;e<M;++e){_+=b[o+e]*I[u+e]}}}}d[f*e+m*n+g*i+y*c+t]=_}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},jT=rC(At,(e=>Math.cos(e))),HT={kernelName:At,backendName:"cpu",kernelFunc:jT},qT=rC(Rt,(e=>Math.cosh(e))),KT={kernelName:Rt,backendName:"cpu",kernelFunc:qT};const XT={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,[c,h,p,d]=s.shape,f=a.shape[0],[m,g]=o,y=vi([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(s.dataId).values,v=_e(s.shape),k=_e(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],s=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(s-n)*(h-1)/(m-1):0,f=g>1?(a-r)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+s)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let r=0;r<d;r++){const s=r+n*k[2]+t*k[1]+e*k[0];y.values[s]=l}else if("bilinear"===u){const n=Math.floor(c),s=Math.ceil(c),o=c-n;for(let u=0;u<g;u++){const c=g>1?r*(p-1)+u*f:.5*(r+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const r=n+u*k[2]+t*k[1]+e*k[0];y.values[r]=l}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let r=0;r<d;r++){let a=r+h*v[2]+n*v[1]+i*v[0];const l=w[a];a=r+m*v[2]+n*v[1]+i*v[0];const c=w[a];a=r+h*v[2]+s*v[1]+i*v[0];const p=w[a];a=r+m*v[2]+s*v[1]+i*v[0];const d=l+(c-l)*b,f=p+(w[a]-p)*b;a=r+u*k[2]+t*k[1]+e*k[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const s=g>1?r*(p-1)+n*f:.5*(r+a)*(p-1);if(s<0||s>p-1){for(let r=0;r<d;r++){const s=r+n*k[2]+t*k[1]+e*k[0];y.values[s]=l}continue}const o=Math.round(s),u=Math.round(c);for(let r=0;r<d;r++){const s=r+o*v[2]+u*v[1]+i*v[0],a=r+n*k[2]+t*k[1]+e*k[0];y.values[a]=w[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const YT={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r;eC(s,"cumsum");const u=Nc([a],s.shape.length);let l=s;null!=u&&(l=KC({inputs:{x:s},backend:n,attrs:{perm:u}}));const c=Cc(1,s.shape.length)[0];if(c!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${c}`);const h=Qs(l.dtype,"int32"),p=Me(ie(l.shape),h),d=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const r=m(e,t-1);p[n]=i?d[r]+p[r]:d[n]+p[r]}}const g=n.makeTensorInfo(l.shape,h,p);if(null!=u){const e=KC({inputs:{x:g},backend:n,attrs:{perm:Sc(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}};const ZT={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=IT(n.data.get(s.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===s.shape.length){const e=NT(n.bufferSync(s),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};const JT={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r;ne("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),ne(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=s.shape[0],u=s.shape[1],l=s.shape[2],c=s.shape[3],h=u*a,p=l*a,d=c/(a*a),f=n.data.get(s.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),r=t%a;for(let t=0;t<p;++t){const s=Math.floor(t/a),i=(r*a+t%a)*d;for(let t=0;t<d;++t){const r=t+i+c*(s+l*(n+u*e));m[g++]=f[r]}}}return n.makeTensorInfo([o,h,p,d],s.dtype,m)}};function QT(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:l}=r;eC([s,a],"depthwiseConv2DNative");const c=_e(s.shape),h=_e(a.shape);let p=u;null==p&&(p=[1,1]),ne(nl(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=Ku(s.shape,a.shape,i,p,o,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new Ps(d.outShape,s.dtype),I=n.data.get(s.dataId).values,N=n.data.get(a.dataId).values,S=k.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*k.strides[0];for(let e=0;e<d.outHeight;++e){const r=n+e*k.strides[1],s=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=s+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=r+e*k.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=d.inWidth)continue;const s=a+e*h[1],o=i+r*d.inChannels;let u=t,l=s;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)S[u+e]+=t*N[l+e];u+=v,l+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const e$={kernelName:Mt,backendName:"cpu",kernelFunc:QT};const t$={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r;eC([s,a],"depthwiseConv2dNativeBackpropFilter");const h=Ku(s.shape,c,i,o,u,l,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Ps(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(s.dataId).values,v=new Ps(s.shape,s.dtype,w),k=n.data.get(a.dataId).values,I=new Ps(a.shape,a.dtype,k);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/d)),a=Math.min(h.outWidth,(h.inWidth+y-r)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),u=i%x;let l=0;for(let u=0;u<h.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=s;e<a;++e){const n=r+e*d-y;l+=v.get(u,t,n,o)*I.get(u,c,e,i)}}g.set(l,e,r,o,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const n$={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r;eC([s,a],"depthwiseConv2DNativeBackpropInput");const h=_e(s.shape),p=_e(a.shape),d=Ku(c,a.shape,i,o,u,l,!0),f=new Ps(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(s.dataId).values,[w,v,k]=h,I=n.data.get(a.dataId).values,[N,S,C]=p,{batchSize:T,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:_,outChannels:F,outHeight:D,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=E-1-d.padInfo.left,P=F/A;for(let e=0;e<T;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const r=n-z,s=Math.max(0,Math.ceil(r/M)),a=Math.min(D,($+r)/M);for(let i=0;i<_;++i){const o=i-B,u=Math.max(0,Math.ceil(o/L)),l=Math.min(O,(E+o)/L);let c=0;for(let n=s;n<a;++n){const s=n*M-r;for(let r=u;r<l;++r){const a=w*e+v*n+k*r,i=N*($-1-s)+S*(E-1-(r*L-o))+C*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*I[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const r$={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=ie(r.shape),a=n.data.get(r.dataId).values,i=vi([s,s],r.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*s+e]=a[e];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,i.dtype,i.values)}},s$={kernelName:Pt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s}=e,{strides:a,pad:i,dilations:o}=n,u=t,l=u.data.get(r.dataId).values,c=r.shape.length,h=u.data.get(s.dataId).values,p=s.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:C}=ju(r.shape,s.shape,a,i,"NHWC",o),T=ie(C),$=C.length,E=xe(r.dtype,T);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*S;if(d>=0&&d<m){const i=Be([e,a,d,o],c,_e(r.shape)),f=Be([t,n,o],p,_e(s.shape)),m=l[i]+h[f];m>u&&(u=m)}}}E[Be([e,t,a,o],$,_e(C))]=u}}}return{dataId:u.write(Ts(E,r.dtype),C,r.dtype),shape:C,dtype:r.dtype}}},a$={kernelName:Wt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=De(r.shape,l.data.get(r.dataId).values),h=De(s.shape,l.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:N,outShape:S}=ju(r.shape,s.shape,i,o,"NHWC",u);ne(a.rank===S.length,(()=>`Error in ${Wt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const C=De(S,l.data.get(a.dataId).values),T=Le(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,u=0;for(let t=0;t<v;++t){const r=n+t*I;if(r>=0&&r<d)for(let n=0;n<k;++n){const l=s+n*N;if(l>=0&&l<f){const s=c[e][r][l][a]+h[t][n][a];s>i&&(i=s,o=t,u=n)}}}T[o][u][a]+=C[e][t][r][a]}}}return{dataId:l.write(Ts(T,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},i$={kernelName:Vt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:s,dy:a}=e,{strides:i,pad:o,dilations:u}=n,l=t,c=De(r.shape,l.data.get(r.dataId).values),h=De(s.shape,l.data.get(s.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:N,outShape:S}=ju(r.shape,s.shape,i,o,"NHWC",u);ne(a.rank===S.length,(()=>`Error in ${Vt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const C=De(S,l.data.get(a.dataId).values),T=Le(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let r=0;r<y;++r){const s=r*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,u=s<0?0:s;for(let t=0;t<v;++t){const r=n+t*I;if(r>=0&&r<d)for(let n=0;n<k;++n){const l=s+n*N;if(l>=0&&l<f){const s=c[e][r][l][a]+h[t][n][a];s>i&&(i=s,o=r,u=l)}}}T[e][o][u][a]+=C[e][t][r][a]}}}return{dataId:l.write(Ts(T,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},o$=hC(((e,t)=>e*t)),u$=AC(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n}))),l$=EC(Pn,o$,u$),c$={kernelName:Pn,backendName:"cpu",kernelFunc:l$};function h$(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;let o;eC(s,"sum"),o="bool"===s.dtype?TC({inputs:{x:s},backend:n,attrs:{dtype:"int32"}}):oC({inputs:{x:s},backend:n});const u=o.shape.length,l=ge(a,o.shape),c=Nc(l,u);let h=l,p=o;null!=c&&(p=KC({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Cc(h.length,u)),Ic("sum",h,p.shape.length);const[d,f]=vc(p.shape,h);let m=NC(n,d,Qs(p.dtype,"int32"));const g=ie(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=OC({inputs:{x:m},backend:n,attrs:{shape:kc(m.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const p$={kernelName:Ir,backendName:"cpu",kernelFunc:h$};const d$={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:i,summedDims:o,idDims:u}=uf(s,a.length);cf(i.length,u,a);const{path:l,steps:c}=hf(o,u),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=lf(d,u[t]);let s;pf(e)?s=a[t]:(s=KC({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const i=s.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);ue(s.shape,i)||(s=OC({inputs:{x:s},backend:n,attrs:{shape:i}}),f.push(s)),null===p?p=s:(p=l$({inputs:{a:s,b:p},backend:n}),f.push(p))}e<h-1&&(l[e]>=0&&(p=h$({inputs:{x:p},backend:n,attrs:{axis:l[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}};const f$={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:s}=t;eC([r,s],"eluGrad");const a=new Float32Array(ie(s.shape)),i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(s.shape,"float32",a)}},m$=hC(((e,t)=>e===t?1:0)),g$=EC(Kt,m$,null,"bool"),y$={kernelName:Kt,backendName:"cpu",kernelFunc:g$},b$=Ud,x$=Gd,w$=jd,v$=Hd,k$=qd,I$=Kd,N$=rC(qt,(e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+b$*n);return t*(1-((((I$*r+k$)*r+v$)*r+w$)*r+x$)*r*Math.exp(-n*n))})),S$={kernelName:qt,backendName:"cpu",kernelFunc:N$},C$=CT((e=>Math.exp(e))),T$=sC(Xt,C$),$$={kernelName:Xt,backendName:"cpu",kernelFunc:T$};function E$(e){const{inputs:t,backend:n,attrs:r}=e,{input:s}=t,{dim:a}=r,i=s.shape.length,o=s.shape.slice();let u=a;return a<0&&(ne(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+a+1),o.splice(u,0,1),OC({inputs:{x:s},backend:n,attrs:{shape:o}})}const A$={kernelName:Yt,backendName:"cpu",kernelFunc:E$},R$=CT((e=>Math.expm1(e))),_$=sC(Zt,R$),F$={kernelName:Zt,backendName:"cpu",kernelFunc:_$},D$=hC(((e,t)=>e/t)),O$=EC(Ut,D$),M$={kernelName:Ut,backendName:"cpu",kernelFunc:O$},L$=hC(((e,t)=>e-t)),z$=AC(((e,t,n,r)=>({real:e-n,imag:t-r}))),B$=EC(zr,L$,z$),P$={kernelName:zr,backendName:"cpu",kernelFunc:B$};function V$(e,t,n){const r=e.shape,s=r[0],a=r[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,l=[s,a],c=ie(l),h=be("float32",c),p=be("float32",c);for(let e=0;e<s;e++){const r=wT({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),s=wT({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=kC({inputs:{real:r,imag:s},backend:n}),{real:l,imag:c}=W$(i,t,n),d=Zd(l,c);for(let t=0;t<a;t++){const n=tf(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(l,"float32",h),f=n.makeTensorInfo(l,"float32",p),m=kC({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function W$(e,t,n){const r=ie(e.shape),s=n.data.get(e.dataId),a=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((o=r)&o-1)){const s=U$(a,i,r,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",s.real),t=n.makeTensorInfo(o,"float32",s.imag),a=n.makeTensorInfo([],"float32",Cs(r,"float32")),i=oC({inputs:{x:a},backend:n}),u=M$.kernelFunc({inputs:{a:e,b:a},backend:n}),l=M$.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(u.dataId).values,h=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:c,imag:h}}return s}return Jd(function(e,t,n){const r=new Float32Array(2*t);for(let s=0;s<t;s++){let a=0,i=0;for(let r=0;r<t;r++){const o=sf(s*r,t,n),u=tf(e,r);a+=u.real*o.real-u.imag*o.imag,i+=u.real*o.imag+u.imag*o.real}n&&(a/=t,i/=t),nf(r,a,i,s)}return r}(Zd(a,i),r,t));var o}function U$(e,t,n,r,s){if(1===n)return{real:e,imag:t};const a=Zd(e,t),i=n/2,o=Qd(a),u=o.real,l=o.imag,c=[u.length],h=s.makeTensorInfo(c,"float32",u),p=s.makeTensorInfo(c,"float32",l),d=kC({inputs:{real:h,imag:p},backend:s}),f=ef(a),m=f.real,g=f.imag,y=[m.length],b=s.makeTensorInfo(y,"float32",m),x=s.makeTensorInfo(y,"float32",g),w=kC({inputs:{real:b,imag:x},backend:s}),v=U$(u,l,i,r,s),k=v.real,I=v.imag,N=[k.length],S=s.makeTensorInfo(N,"float32",k),C=s.makeTensorInfo(N,"float32",I),T=kC({inputs:{real:S,imag:C},backend:s}),$=U$(m,g,i,r,s),E=$.real,A=$.imag,R=[E.length],_=s.makeTensorInfo(R,"float32",E),F=s.makeTensorInfo(R,"float32",A),D=kC({inputs:{real:_,imag:F},backend:s}),O=rf(n,r),M=[O.real.length],L=s.makeTensorInfo(M,"float32",O.real),z=s.makeTensorInfo(M,"float32",O.imag),B=kC({inputs:{real:L,imag:z},backend:s}),P=l$({inputs:{a:B,b:D},backend:s}),V=FC({inputs:{a:T,b:P},backend:s}),W=B$({inputs:{a:T,b:P},backend:s}),U=SC({inputs:{input:V},backend:s}),G=SC({inputs:{input:W},backend:s}),j=DT({inputs:{input:V},backend:s}),H=DT({inputs:{input:W},backend:s}),q=MT({inputs:[U,G],backend:s,attrs:{axis:0}}),K=MT({inputs:[j,H],backend:s,attrs:{axis:0}}),X=s.data.get(q.dataId).values,Y=s.data.get(K.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(S),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const G$={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=ie(r.shape),a=r.shape[r.shape.length-1],i=OC({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=V$(i,!1,n),u=OC({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}};function j$(e){const{backend:t,attrs:n}=e,{shape:r,value:s,dtype:a}=n,i=a||Ee(s),o=xe(i,ie(r));return function(e,t,n){e.fill(t)}(o,s),t.makeTensorInfo(r,i,o)}const H$={kernelName:Qt,backendName:"cpu",kernelFunc:j$};const q$={kernelName:en,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,s=n,a=be(r.dtype,ie(r.shape)),[i,o,u,l]=r.shape,c=s.data.get(r.dataId).values;for(let e=0;e<i;e++){const t=e*u*o*l;for(let e=0;e<o;e++){const n=e*(u*l);for(let e=0;e<u;e++){const r=e*l;for(let s=0;s<l;s++){const i=Math.round(u-e-1),o=t+n+r+s;let h=c[o];if(i>=0&&i<u){h=c[t+n+i*l+s]}a[o]=h}}}}return{dataId:s.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},K$=CT((e=>Math.floor(e))),X$=sC(tn,K$),Y$={kernelName:tn,backendName:"cpu",kernelFunc:X$},Z$=hC(((e,t)=>Math.floor(e/t))),J$=EC(nn,Z$,null,"int32"),Q$={kernelName:nn,backendName:"cpu",kernelFunc:J$};const eE={kernelName:Qr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=zT({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=FC({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=vC(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};const tE={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r;let m=QT({inputs:{x:s,filter:a},backend:n,attrs:{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=FC({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=vC(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function nE(e,t,n,r,s,a,i,o,u){const l=vi([r,a],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let t=0;t<s;t++){const a=e[n*s+t];c+=a*i[t],r.push(a)}if(c<0||c>=u/a)throw new Error(`Invalid indices: ${r} does not index into ${o}`);for(let e=0;e<a;e++)l.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return l}const rE={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=ie(r.shape),i=s.shape,o=i[i.length-1],[u,l,c,h]=Qi(r,s);if(0===l)return n.makeTensorInfo(u,r.dtype,[]);const p=nE(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,l,o,c,h,r.shape,a);return n.makeTensorInfo(u,r.dtype,p.values)}};function sE(e,t,n){const r=vi(n,e.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),a=s[0],i=s[2],o=t.locToIndex([a,i]);s[2]=t.values[o];const u=e.locToIndex(s);r.values[n]=e.values[u]}return r}const aE={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:i,batchDims:o}=r;eC([s,a],"gatherV2");let u=o;null==o&&(u=0);const l=ie(a.shape),c=yf(s,a,ge(i,s.shape)[0],u),h=OC({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),p=OC({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,l/c.batchSize]}}),d=[c.batchSize,c.outerSize,l/c.batchSize,c.sliceSize],f=n.bufferSync(p),m=sE(n.bufferSync(h),f,d);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.makeTensorInfo(c.outputShape,m.dtype,m.values)}},iE=hC(((e,t)=>e>t?1:0)),oE=EC(on,iE,null,"bool"),uE={kernelName:on,backendName:"cpu",kernelFunc:oE},lE=hC(((e,t)=>e>=t?1:0)),cE=EC(un,lE,null,"bool"),hE={kernelName:un,backendName:"cpu",kernelFunc:cE};const pE={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,s=ie(r.shape),a=r.shape[r.shape.length-1],i=OC({inputs:{x:r},backend:n,attrs:{shape:[s/a,a]}}),o=V$(i,!0,n),u=OC({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),u}},dE=rC(pn,(e=>Number.isFinite(e)?1:0),"bool"),fE={kernelName:pn,backendName:"cpu",kernelFunc:dE},mE=rC(dn,(e=>Math.abs(e)===1/0?1:0),"bool"),gE={kernelName:dn,backendName:"cpu",kernelFunc:mE},yE=rC(fn,(e=>Number.isNaN(e)?1:0),"bool"),bE={kernelName:fn,backendName:"cpu",kernelFunc:yE},xE=hC(((e,t)=>e<t?1:0)),wE=EC(gn,xE,null,"bool"),vE={kernelName:gn,backendName:"cpu",kernelFunc:wE},kE=hC(((e,t)=>e<=t?1:0)),IE=EC(yn,kE,null,"bool"),NE={kernelName:yn,backendName:"cpu",kernelFunc:IE};function SE(e,t,n){const r=(t-e)/(n-1),s=Me(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+r;return s}const CE={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=SE(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},TE=CT((e=>Math.log(e))),$E=sC(xn,TE),EE={kernelName:xn,backendName:"cpu",kernelFunc:$E},AE=rC(wn,(e=>Math.log1p(e))),RE={kernelName:wn,backendName:"cpu",kernelFunc:AE},_E=hC(((e,t)=>e&&t)),FE=EC(vn,_E,null,"bool"),DE={kernelName:vn,backendName:"cpu",kernelFunc:FE},OE=rC(kn,(e=>e?0:1),"bool"),ME={kernelName:kn,backendName:"cpu",kernelFunc:OE},LE=hC(((e,t)=>e||t)),zE=EC(In,LE,null,"bool"),BE={kernelName:In,backendName:"cpu",kernelFunc:zE};const PE={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r;eC(s,"LRN");const l=s.shape[3],c=l-1,h=n.data.get(s.dataId).values,p=ie(s.shape),d=new Float32Array(p);function f(e){const t=e%l;let n=e-t+Math.max(0,t-a);const r=e-t+Math.min(t+a,c);let s=0;for(;n<=r;n++){const e=h[n];s+=e*e}return s}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-u);d[e]=n}return n.makeTensorInfo(s.shape,s.dtype,d)}};const VE={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r;eC(i,"LRNGrad");const h=ie(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),r=e-t+Math.min(p,t+o+1);let s=0;for(let e=n;e<r;e++)s+=Math.pow(f[e],2);s=l*s+u;for(let t=n;t<r;t++){let n=-2*l*c*f[t]*m[e]/s;e===t&&(n+=Math.pow(s,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,s.dtype,g)}};function WE(e,t,n,r){const s=be(r,ie(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}function UE(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:i}=r,o=n;let u=s.shape;const l=u.length,c=ge(a,u);let h=c;const p=Nc(h,l);let d=o.data.get(s.dataId).values;if(null!=p){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[p[t]];d=qC(d,u,s.dtype,p,e),h=Cc(h.length,l),u=e}eC(s,"max"),Ic("max",h,l);const[f,m]=vc(u,h),g=WE(d,ie(m),f,s.dtype),y=o.write(g,f,s.dtype);let b=f;if(i){b=kc(f,c)}return{dataId:y,shape:b,dtype:s.dtype}}const GE={kernelName:Tn,backendName:"cpu",kernelFunc:UE},jE=hC(((e,t)=>Math.max(e,t))),HE=EC($n,jE),qE={kernelName:$n,backendName:"cpu",kernelFunc:HE};const KE={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;eC(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ne(nl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Hu(s.shape,a,i,1,o,u);let c;if(1===l.filterWidth&&1===l.filterHeight&&ue(l.inShape,l.outShape))c=oC({inputs:{x:s},backend:n});else{const e=n.data.get(s.dataId).values,t=_e(s.shape),r=hT(e,s.shape,s.dtype,t,l,"max");c=n.makeTensorInfo(l.outShape,s.dtype,r.values)}return c}};const XE={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r;eC(s,"maxPool3d");const c=qu(s.shape,a,i,1,o,u,l),h=dT(n.data.get(s.dataId).values,s.shape,s.dtype,_e(s.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const YE={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,{filterSize:i,strides:o,pad:u,dimRoundingMode:l}=r;eC([s,a],"maxPool3DGrad");const c=qu(a.shape,i,o,1,u,l),h=function(e,t){const n=vi(t.outShape,"int32"),r=t.strideDepth,s=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*s-d;let p=l;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+l);for(let s=0;s<t.outWidth;++s){const d=s*a-f;let k=d;for(;k<0;)k+=u;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let r=p;r<v;r+=o){const s=r-l;for(let a=k;a<I;a+=u){const i=a-d,o=e.get(m,t,r,a,g);o>=N&&(N=o,S=n*c*h+s*c+i)}}}n.set(S,m,y,r,s,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,v=b-1-c.padInfo.front,k=w-1-c.padInfo.left,I=x-1-c.padInfo.top,N=vi(a.shape,"float32"),S=n.bufferSync(s);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const a=n-v,i=r-I,o=s-k;let u=0;for(let n=0;n<b;n+=m){const r=(a+n)/p;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<x;s+=g){const a=(i+s)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const l=(o+i)/f;if(l<0||l>=c.outWidth||Math.floor(l)!==l)continue;const p=b*x*w-1-h.get(e,r,a,l,t)===n*x*w+s*w+i?1:0;if(0===p)continue;u+=S.get(e,r,a,l,t)*p}}}N.set(u,e,n,r,s,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const ZE={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;eC([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=Hu(o.shape,u,l,1,c,h),d=n.data.get(o.dataId).values,f=vi(p.outShape,o.dtype,pT(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,I=vi(o.shape,"float32"),N=n.data.get(s.dataId).values,S=vi(s.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){const s=n-k,a=r-v;let i=0;for(let n=0;n<x;n+=y){const r=(s+n)/m;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let s=0;s<w;s+=b){const o=(a+s)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const u=x*w-1-f.get(e,r,o,t)===n*w+s?1:0;if(0===u)continue;i+=S.get(e,r,o,t)*u}}I.set(i,e,n,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const JE={kernelName:Fn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,u=n;eC(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,c=Hu(r.shape,s,a,[1,1],i),[h,p]=function(e,t,n,r,s){const a=hT(e,0,n,_e(t),s,"max"),i=pT(e,t,n,s,!0,r);return[a.values,i.values]}(l,r.shape,r.dtype,o,c),d=u.write(h,c.outShape,r.dtype),f=u.write(p,c.outShape,r.dtype);return[{dataId:d,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const QE={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=ge(a,s.shape),u=ie(vc(s.shape,o)[1]),l=[],c=n.makeTensorInfo([],"float32",new Float32Array([u]));l.push(c);const h=TC({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});l.push(h);const p=O$({inputs:{a:h,b:c},backend:n});l.push(p);const d=h$({inputs:{x:p},backend:n,attrs:{axis:a,keepDims:i}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}};const eA={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;eC(s,"min");const o=ge(a,s.shape);let u=o;const l=Nc(u,s.shape.length);let c=s;null!=l&&(c=KC({inputs:{x:s},backend:n,attrs:{perm:l}}),u=Cc(u.length,s.shape.length)),Ic("min",u,c.shape.length);const[h,p]=vc(c.shape,u),d=ie(p),f=Me(ie(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=OC({inputs:{x:g},backend:n,attrs:{shape:kc(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},tA=hC(((e,t)=>Math.min(e,t))),nA=EC(Mn,tA),rA={kernelName:Mn,backendName:"cpu",kernelFunc:nA};const sA={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,mode:i}=r;eC(s,"mirrorPad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=a.map(((e,t)=>e[0]+s.shape[t])),c="reflect"===i?0:1,h=n.data.get(s.dataId).values,p=s.shape.length,d=_e(s.shape),f=ie(o),m=o.length,g=_e(o),y=be(s.dtype,f);for(let e=0;e<f;e++){let t=Pe(e,m,g);for(let e=0;e<m;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-c:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+c);t=t.map(((e,t)=>e-u[t]));const n=Be(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,s.dtype),shape:o,dtype:s.dtype}}},aA=hC(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),iA=EC(zn,aA),oA={kernelName:zn,backendName:"cpu",kernelFunc:iA};var uA=n(2948);function lA(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,i=s.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const u=ge([o],s.shape),l=UE({inputs:{x:s},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),c=kc(l.shape,u),h=OC({inputs:{x:l},backend:n,attrs:{shape:c}}),p=B$({inputs:{a:s,b:h},backend:n}),d=T$({inputs:{x:p},backend:n}),f=h$({inputs:{x:d},backend:n,attrs:{axis:u,keepDims:!1}}),m=OC({inputs:{x:f},backend:n,attrs:{shape:c}}),g=O$({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const cA={kernelName:Cr,backendName:"cpu",kernelFunc:lA};const hA={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r;eC(s,"multinomial");const u=o?s:lA({inputs:{logits:s},backend:n,attrs:{dim:-1}}),l=u.shape[0],c=u.shape[1],h=n.data.get(u.dataId).values,p=[l,a],d=Me(ie(p),"int32");for(let e=0;e<l;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const r=uA.alea(i.toString()),s=e*a;for(let e=0;e<a;++e){const t=r();d[s+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){d[s+e]=r;break}}}return o||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(p,"int32",d)}};function pA(e,t,n){const r=Cs(-1,n);return o$([],t,r,e,n)}const dA={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;eC(r,"neg");const s=n.data.get(r.dataId).values,[a,i]=pA(s,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,a)}},fA=Lp;const mA={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r;eC(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=fA(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},gA=zp;const yA={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r;eC(s,"NonMaxSuppressionPadded");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=gA(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},bA=Bp;const xA={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r;eC(s,"NonMaxSuppressionWithScore");const c=n.data.get(s.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=bA(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},wA=hC(((e,t)=>e!==t?1:0)),vA=EC(Wn,wA,null,"bool"),kA={kernelName:Wn,backendName:"cpu",kernelFunc:vA};const IA={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{depth:a,onValue:i,offValue:o}=r;eC(s,"oneHot");const u=ie(s.shape),l=new Float32Array(u*a);l.fill(o);const c=n.data.get(s.dataId).values;for(let e=0;e<u;++e)c[e]>=0&&c[e]<a&&(l[e*a+c[e]]=i);return n.makeTensorInfo([...s.shape,a],"int32",l)}};function NA(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=SC({inputs:{input:r},backend:n}),t=NA({inputs:{x:e},backend:n}),s=DT({inputs:{input:r},backend:n}),a=NA({inputs:{x:s},backend:n}),i=kC({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return j$({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const SA={kernelName:Kr,backendName:"cpu",kernelFunc:NA};const CA={kernelName:Hn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const t=SC({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=DT({inputs:{input:s},backend:r}),i=NA({inputs:{x:a},backend:r}),o=kC({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return j$({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function TA(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return E$({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{re(a,e.shape,"All tensors passed to stack must have matching shapes"),ne(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],u=MT({inputs:t.map((e=>{const t=E$({inputs:{input:e},backend:n,attrs:{dim:s}});return o.push(t),t})),backend:n,attrs:{axis:s}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}const $A={kernelName:Kn,backendName:"cpu",kernelFunc:TA};const EA={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r;eC(s,"pad");const o=a.map(((e,t)=>e[0]+s.shape[t]+e[1])),u=a.map((e=>e[0])),l=n.data.get(s.dataId).values,c=ie(s.shape),h=s.shape.length,p=_e(s.shape),d=ie(o),f=o.length,m=_e(o),g=be(s.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++){g[Be(Pe(e,h,p).map(((e,t)=>e+u[t])),f,m)]=l[e]}return{dataId:n.write(g,o,s.dtype),shape:o,dtype:s.dtype}}},AA=hC(((e,t)=>Math.pow(e,t))),RA=EC(Zn,AA),_A={kernelName:Zn,backendName:"cpu",kernelFunc:RA};function FA(e,t,n,r){const[s,a]=vc(e,r),i=Qs(t,"int32"),o=Me(ie(s),i),u=ie(a);for(let e=0;e<o.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];o[e]=r}return{outVals:o,outShape:s,outDtype:i}}const DA={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;eC(s,"prod");const o=s.shape.length,u=ge(a,s.shape),l=Nc(u,o);let c=u,h=s;const p=[];null!=l&&(h=KC({inputs:{x:s},backend:n,attrs:{perm:l}}),p.push(h),c=Cc(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=FA(h.shape,h.dtype,d,c);let y=m;return i&&(y=kc(m,u)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function OA(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return Me(0,r);const s=Me(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+n;return s}const MA={kernelName:er,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,dtype:a,step:i}=n,o=OA(r,s,i,a);return t.makeTensorInfo([o.length],a,o)}},LA=rC(nr,(e=>1/e)),zA={kernelName:nr,backendName:"cpu",kernelFunc:LA};const BA={kernelName:or,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r;eC(s,"resizeBilinear");const u=_e(s.shape),[l,c]=o,[h,p,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(ie([h,l,c,f])),y=[a&&l>1?p-1:p,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],v=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<l;t++){let n;n=i?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),s=n-r,a=Math.min(p-1,Math.ceil(n)),o=e*u[0]+r*u[1],l=e*u[0]+a*u[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),r=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*u[2],h=l+n*u[2],p=o+a*u[2],y=l+a*u[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*r,i=a+(n+(m[y+e]-n)*r-a)*s;g[x++]=i}}}return n.makeTensorInfo([h,l,c,f],"float32",g)}};const PA={kernelName:ur,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r;eC([a,s],"resizeBilinearGrad");const o=_e(s.shape),[u,l,c,h]=s.shape,[,p,d]=a.shape,f=new Float32Array(u*l*c*h),m=[i&&p>1?l-1:l,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,r=Math.floor(n),s=Math.min(Math.ceil(n),l-1),a=t+r*o[1],i=t+s*o[1],u=n-r,p=1-u;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),c-1),s=t-n,l=1-s,d=a+n*o[2],m=a+r*o[2],g=i+n*o[2],y=i+r*o[2],v=p*l,k=p*s,I=u*l,N=u*s;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*v,f[m+e]+=t*k,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([u,c,l,h],"float32",f)}};const VA={kernelName:ar,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r;eC(s,"resizeNearestNeighbor");const u=_e(s.shape),[l,c]=o,[h,p,d,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(h*l*c*f),y=[a&&l>1?p-1:p,a&&c>1?d-1:d],b=[a&&l>1?l-1:l,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let e=0;e<h;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=i?x*(e+.5):x*e;let r=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(r=Math.max(0,r));const s=t+r*u[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const r=s+n*u[2];for(let e=0;e<f;e++){const t=m[r+e];g[v++]=t}}}}return n.makeTensorInfo([h,l,c,f],s.dtype,g)}};const WA={kernelName:ir,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r;eC([a,s],"resizeNearestNeighborGrad");const o=_e(s.shape),u=_e(a.shape),[l,c,h,p]=s.shape,[,d,f]=a.shape,m=new Float32Array(l*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,I=2*Math.ceil(v)+2,N=2*Math.ceil(k)+2;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],r=Math.floor(e*v),s=Math.floor(r-I/2);for(let r=0;r<h;r++){const a=n+r*o[2],l=Math.floor(r*k),y=Math.floor(l-N/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const l=a+s;if(l<0||l>=d)continue;const p=t+l*u[1],m=l*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const s=p+t*u[2],a=t*w;r===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[s+n])}}m[a+n]=o}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}};const UA={kernelName:cr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r;eC(s,"reverse");const i=s.shape.length,o=ge(a,s.shape);if(0===i)return oC({inputs:{x:s},backend:n});const u=new Ps(s.shape,s.dtype),l=n.bufferSync(s);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=s.shape[e]-1-n[e])),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},GA={kernelName:Zr,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=be(r.dtype,ie(r.shape)),[l,c,h,p]=r.shape,[d,f]=Od(i,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let r=0;r<h;r++){const s=r*p;for(let i=0;i<p;i++){const o=[l,e,r,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=y[t+v*(h*p)+w*p+i]}u[t+n+s+i]=k}}}}return{dataId:o.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},jA=rC(hr,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),HA={kernelName:hr,backendName:"cpu",kernelFunc:jA},qA=CT((e=>1/Math.sqrt(e))),KA=sC(pr,qA),XA={kernelName:pr,backendName:"cpu",kernelFunc:KA};function YA(e,t,n,r,s,a,i,o,u,l){const c=[r/s,s],h=e.values,p=t.values;if(0===r)return vi(n,t.dtype);const d=vi(c,t.dtype);d.values.fill(u);for(let e=0;e<a;e++){const a=[];let u=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),u+=n*o[t]}if(u<0||u>=r/s)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<s;n++)l?d.values[u*s+n]+=p[e*s+n]:d.values[u*s+n]=0===t.rank?p[0]:p[e*s+n]}return d}const ZA={kernelName:dr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=no(0,s,i),p=YA(n.bufferSync(s),n.bufferSync(a),i,h,l,u,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};const JA={kernelName:fr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t;eC([r,s,a],"select");const i=r.shape.length,o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=Qs(s.dtype,a.dtype),h=Me(ie(s.shape),c);let p=0;const d=0===i||i>1||1===s.shape.length?1:ie(s.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=u[e]:h[p++]=l[e];return n.makeTensorInfo(s.shape,c,h)}},QA=Vd,eR=Wd,tR=rC(mr,(e=>e>=0?eR*e:QA*(Math.exp(e)-1))),nR={kernelName:mr,backendName:"cpu",kernelFunc:tR},rR=rC(xr,(e=>e<0?-1:e>0?1:0)),sR={kernelName:xr,backendName:"cpu",kernelFunc:rR},aR=rC(yr,(e=>Math.sin(e))),iR={kernelName:yr,backendName:"cpu",kernelFunc:aR},oR=rC(br,(e=>Math.sinh(e))),uR={kernelName:br,backendName:"cpu",kernelFunc:oR},lR=Math.log(1.1920928955078125e-7)+2,cR=rC(vr,(e=>{const t=e>-lR,n=e<lR,r=Math.exp(e);let s;return s=n?r:t?e:Math.log(1+r),s})),hR={kernelName:vr,backendName:"cpu",kernelFunc:cR};const pR={kernelName:Nr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;eC([s],"spaceToBatchND");const o=ie(a),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=EA.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),c=Md(l.shape,a,o,!1),h=Ld(c.length,a.length,!1),p=zd(l.shape,a,o,!1),d=OC({inputs:{x:l},backend:n,attrs:{shape:c}}),f=KC({inputs:{x:d},backend:n,attrs:{perm:h}}),m=OC({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function dR(e,t,n,r,s,a,i){const o=t[0],u=a[0],l=new Array(u),c=new Array(o),h=t[1];if(0===u){if(0!==o)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${o}`);return[xe(n,0),[0,h],xe(s,0),l,c]}let p=!0,d=0;const f=new Array(u).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(`indices(${t}, 0) is invalid: ${n} < 0`);if(n>=u)throw new Error(`indices(${t}, 0) is invalid: ${n} >= ${u}`);++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=r;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,l,c]}{const t=f[u-1],a=xe(n,t*h),p=xe(s,t),d=new Array(u).fill(0);for(let t=0;t<o;++t){const n=e[t*h],s=d[n],i=(0===n?0:f[n-1])+s;d[n]++;for(let n=0;n<h;++n)a[i*h+n]=e[t*h+n];p[i]=r[t],c[t]=i}for(let e=0;e<u;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}}return[a,[t,h],p,l,c]}}const fR={kernelName:Tr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n        ${s.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(r.dataId).values,u=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=dR(o,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(p,r.dtype,h),n.makeTensorInfo([p[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function mR(e,t,n,r,s){const a=ie(r),i=t[0],o=s.length,u=[];let l=1,c=-1;for(let e=0;e<o;++e){const t=s[e];if(-1===t){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${e}`);c=e,u.push(1)}else{if(t<0)throw new Error(`size ${e} must be non-negative, not ${t}`);l*=t,u.push(t)}}if(-1!==c){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/l);if(l*e!==a)throw new Error(`Input to reshape is a SparseTensor with ${a}\n          dense values, but the requested shape requires a multiple of ${l}. inputShape=${r} outputShape= ${u}`);u[c]=e}const h=ie(u);if(h!==a)throw new Error(`Input to reshape is a tensor with ${a} dense values, but the requested shape has ${h}. inputShape=${r} outputShape=${u}`);const p=r.length,d=[];if(p>0){d[p-1]=1;for(let e=p-2;e>=0;--e)d[e]=d[e+1]*r[e+1]}const f=[];if(o>0){f[o-1]=1;for(let e=o-2;e>=0;--e)f[e]=f[e+1]*u[e+1]}const m=xe(n,i*o);for(let t=0;t<i;++t){let n=0;for(let r=0;r<p;++r)n+=e[t*p+r]*d[r];for(let e=0;e<o;++e)m[t*o+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[i,o],u]}const gR={kernelName:$r,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(s.dataId).values),o=n.data.get(r.dataId).values,u=Array.from(n.data.get(a.dataId).values),[l,c,h]=mR(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function yR(e,t,n,r,s,a=!1,i=0){const o=r.length;if(o!==s.length)throw new Error("segmentIds and indices should have same size.");const u=[t[0],e.length/t[0]],l=u[1],c=o>0?s[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const p=xe(n,h.reduce(((e,t)=>e*t),1));if(0===o)return c>0&&p.fill(i),[p,h];if(c<=0)throw new Error("segment ids must be >= 0");let d=0,f=1,m=0,g=s[d];for(;;){let t=0;if(f<o){if(t=s[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(`Segment id ${g} out of range [0, ${c}), possibly because segmentIds input is not sorted.`);g>m&&p.fill(i,m*l,g*l);for(let t=d;t<f;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(`Bad: indices[${t}] == ${r[t]} out of range [0, ${u[0]})`);for(let t=0;t<l;t++)p[g*l+t]+=e[n*l+t]}if(a)for(let e=0;e<l;e++)p[g*l+e]/=f-d;if(d=f,++f,m=g+1,g=t,f>o)break}return m<c&&p.fill(i,m*l,c*l),[p,h]}const bR={kernelName:Er,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=yR(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const xR={kernelName:Ar,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);const i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,u=n.data.get(a.dataId).values,[l,c]=yR(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(c,r.dtype,l)}};const wR={kernelName:Rr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:h,outputSize:p}=no(0,s,o),d=YA(n.bufferSync(s),n.bufferSync(a),o,p,c,l,u,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}};const vR={kernelName:Sr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:i}=r,o=ge(i,s.shape)[0],u=ff(s,a,o),l=new Array(s.shape.length).fill(0),c=s.shape.slice();return u.map((e=>{const t=[...c];t[o]=e;const r=wT({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[o]+=e,r}))}},kR=rC(kr,(e=>Math.sqrt(e))),IR={kernelName:kr,backendName:"cpu",kernelFunc:kR},NR={kernelName:Fr,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;eC(n,"square");const s=r.data.get(n.dataId).values,a=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];a[e]=t*t}return{dataId:r.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},SR=hC(((e,t)=>{const n=e-t;return n*n})),CR=EC(_r,SR),TR={kernelName:_r,backendName:"cpu",kernelFunc:CR},$R=rC(Xr,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),ER={kernelName:Xr,backendName:"cpu",kernelFunc:$R};function AR(e,t,n,r){const s=vi(e,t.dtype);for(let e=0;e<s.size;e++){const a=s.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+r[e];s.set(t.get(...i),...a)}return s}const RR={kernelName:Dr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=r;eC(s,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=xo(s.shape,a,i,o,u,l,c,h,p),x=OC({inputs:{x:s},backend:n,attrs:{shape:y}});let w;if(d){const e=wT({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=OC({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,s.dtype,[]);else{const e=AR(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const v=OC({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),v}};class _R{constructor(e,t,n,r,s,a){this.separator=As(e),this.nGramWidths=t,this.leftPad=As(n),this.rightPad=As(r),this.padWidth=s,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,s,a){for(let i=0;i<s;++i){const o=this.getPadWidth(a),u=Math.max(0,o-i),l=Math.max(0,o-(s-(i+1))),c=a-(u+l),h=t+(u>0?0:i-o);let p=0;p+=u*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=l*this.rightPad.length;p+=(u+l+c-1)*this.separator.length,n[r+i]=new Uint8Array(p);const d=n[r+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let s=1;s<r;++s){let r=t[s]>=e;if(r=r&&t[s]<=n,!r)throw new Error(`Invalid split value ${t[s]}, must be in [${e}, ${n}]`);e=t[s]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,a=xe("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=s;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach((e=>{r+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===r&&(r=1),a[e]=a[e-1]+r}const i=new Array(a[s]);for(let n=0;n<s;++n){const r=t[n];let s=a[n];if(this.nGramWidths.forEach((a=>{const o=t[n+1]-t[n],u=this.getNumNGrams(o,a);this.createNGrams(e,r,i,s,u,a),s+=u})),this.preserveShort&&s===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const o=a+2*this.padWidth,u=1;this.createNGrams(e,r,i,s,u,o)}}return[i,a]}}function FR(e,t,n,r,s,a,i,o){return new _R(n,r,s,a,i,o).compute(e,t)}const DR={kernelName:Or,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=FR(p,d,s,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function OR(e,t,n){if(!e.length)return[];if(0===t.length){const t=new Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.subarray(n,n+1);return t}if(1===t.length){const r=t[0],s=[];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return n&&0===e.length||s.push(e),s}const r=[];let s=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(s,a);n&&0===t.length||r.push(t),s=a+1}return r}function MR(e,t,n){const r=e.length,s=[];let a=0,i=0;const o=new Array(r);for(let u=0;u<r;++u){const r=OR(e[u],t,n),l=r.length;o[u]=l,a+=l,i=Math.max(i,l),s.push(...r)}const u=xe("int32",2*a),l=new Array(a),c=[r,i];let h=0;for(let e=0;e<r;++e)for(let t=0;t<o[e];++t)u[2*h]=e,u[2*h+1]=t,l[h]=s[h],++h;return[u,l,c]}const LR={kernelName:Mr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,u=n.data.get(i.dataId).values[0],[l,c,h]=MR(o,u,s),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function zR(e,t){const n=xe("int32",e.length);for(let r=0;r<e.length;++r)n[r]=Ss(e[r]).modulo(t).getLowBitsUnsigned();return n}const BR={kernelName:Lr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=zR(n.data.get(a.dataId).values,s);return n.makeTensorInfo(a.shape,"int32",i)}},PR=rC(Br,(e=>Math.tan(e))),VR={kernelName:Br,backendName:"cpu",kernelFunc:PR},WR=rC(Pr,(e=>Math.tanh(e)));function UR(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=vi(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),s=new Array(e.rank);for(let t=0;t<s.length;t++)s[t]=n[t]%e.shape[t];const a=e.locToIndex(s);r.values[t]=e.values[a]}return r}const GR=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function jR(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,a=t-n+1,i=Math.log(s),o=.5*Math.exp(2*i/3),u=.5*Math.sqrt(i*o*(s-o)/s)*Math.sign(a-s/2);jR(e,t,Math.max(n,Math.floor(t-a*o/s+u)),Math.min(r,Math.floor(t+(s-a)*o/s+u)))}const s=e[t];let a=n,i=r;for(J(e,n,t),GR(e[r],s)>0&&J(e,n,r);a<i;){for(J(e,a,i),a++,i--;GR(e[a],s)<0;)a+=1;for(;GR(e[i],s)>0;)i-=1}0===GR(e[n],s)?J(e,n,i):(i+=1,J(e,i,r)),i<=t&&(n=i+1),t<=i&&(r=i-1)}}function HR(e,t,n,r,s){const a=t[t.length-1],[i,o]=[e.length/a,a],u=be(n,i*r),l=be("int32",i*r);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach(((e,t)=>i[t]={value:e,index:t})),r<i.length&&(jR(i,r),i=i.slice(0,r)),s&&i.sort(GR);const c=t*r,h=u.subarray(c,c+r),p=l.subarray(c,c+r);for(let e=0;e<r;e++)h[e]=i[e].value,p[e]=i[e].index}const c=t.slice();return c[c.length-1]=r,[vi(c,n,u),vi(c,"int32",l)]}function qR(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Y(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Y(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Y(0,e,t-1)}(e,t);case"constant":default:return function(e,t){return e}(e)}}function KR(e,t,n,r,s,a,i,o,u,l,c){return 0<=o&&o<t&&0<=u&&u<n?e[i*r+o*s+u*a+l]:c}function XR(e,t,n,r,s,a,i,o,u,l,c){return KR(e,t,n,r,s,a,i,Math.round(o),Math.round(u),l,c)}function YR(e,t,n,r,s,a,i,o,u,l,c){const h=Math.floor(o),p=Math.floor(u),d=h+1,f=p+1;return(d-o)*((f-u)*KR(e,t,n,r,s,a,i,h,p,l,c)+(u-p)*KR(e,t,n,r,s,a,i,h,f,l,c))+(o-h)*((f-u)*KR(e,t,n,r,s,a,i,d,p,l,c)+(u-p)*KR(e,t,n,r,s,a,i,d,f,l,c))}function ZR(e,t,n,r){const s=ge(t,n)[0],a=[1,n[0],1];for(let e=0;e<s;e++)a[0]*=n[e];a[1]=n[s];for(let e=s+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[s]),u=new Ps(a,r,e),l=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[s];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)e.push(u.get(n,t,r));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,l.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new Ps(h,r);l.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let r=0;r<a[2];r++)p.set(u.get(n,e,r),n,t,r)}));const d=n.slice();return d[s]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const JR=[BC,VC,UC,jC,DC,HC,YC,ZC,JC,QC,tT,rT,aT,uT,cT,fT,mT,gT,yT,zC,bT,kT,ST,$C,ET,RT,IC,_T,LT,PT,VT,BT,UT,GT,WT,HT,KT,XT,YT,ZT,JT,e$,t$,n$,r$,s$,i$,a$,M$,d$,iC,f$,y$,S$,$$,A$,F$,G$,H$,q$,Y$,Q$,eE,tE,rE,aE,uE,hE,uC,pE,OT,fE,gE,bE,cC,vE,NE,CE,EE,RE,DE,ME,BE,PE,VE,qE,KE,XE,YE,ZE,JE,GE,QE,eA,rA,sA,oA,hA,c$,dA,mA,yA,xA,kA,IA,CA,$A,EA,_A,fC,DA,MA,CC,zA,gC,bC,MC,BA,PA,VA,WA,UA,GA,HA,XA,ZA,JA,nR,wC,sR,iR,uR,vT,cA,hR,pR,fR,gR,bR,xR,wR,vR,IR,NR,TR,ER,RR,DR,LR,BR,P$,p$,VR,{kernelName:Pr,backendName:"cpu",kernelFunc:WR},{kernelName:Vr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;eC(s,"tile");const i=UR(n.bufferSync(s),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Wr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r;eC(s,"topk");const o=n.data.get(s.dataId).values,[u,l]=HR(o,s.shape,s.dtype,a,i);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},XC,{kernelName:Ur,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:s,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=n,[c,h,p,d]=s.shape,[f,m]=null!=l?l:[h,p],g=[c,f,m,d],y=_e(s.shape),b=y[0],x=y[1],w=y[2],v=be(s.dtype,ie(g));v.fill(u);const k=r.data.get(s.dataId).values,I=r.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?I:I.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<d;++s){let a;const l=t[6]*r+t[7]*n+1;if(0===l)continue;const c=(t[0]*r+t[1]*n+t[2])/l,d=(t[3]*r+t[4]*n+t[5])/l,f=qR(c,p,o),m=qR(d,h,o);switch(i){case"nearest":a=XR(k,h,p,b,x,w,e,m,f,s,u);break;case"bilinear":a=YR(k,h,p,b,x,w,e,m,f,s,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}v[e*b+n*x+r*w+s]=a}return r.makeTensorInfo(g,s.dtype,v)}return{dataId:r.write(v,g,s.dtype),shape:s.shape,dtype:s.dtype}}},{kernelName:jr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;eC(a,"unique");const i=r.data.get(a.dataId).values,{outputValues:o,outputShape:u,indices:l}=ZR(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:Hr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s.shape.length,o=s.shape[a],u=new Array(i-1);let l=0;for(let e=0;e<i;e++)e!==a&&(u[l++]=s.shape[e]);const c=new Array(i).fill(0),h=s.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=wT({inputs:{x:s},backend:n,attrs:{begin:c,size:h}});p[e]=OC({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:qr,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:i}=r;eC(s,"unsortedSegmentSum");const o=[],u=[],l=s.shape.length-a.shape.length;let c=a;for(let e=0;e<l;++e){const t=E$({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,u.push(t)}for(let e=0;e<i;++e){const t=Cs(e,"int32"),r=n.makeTensorInfo([],"int32",t),a=g$({inputs:{a:r,b:c},backend:n}),i=TC({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),l=l$({inputs:{a:i,b:s},backend:n}),h=h$({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),u.push(r),u.push(a),u.push(i),u.push(l),u.push(h)}const h=TA({inputs:o,backend:n,attrs:{axis:0}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},SA];for(const e of JR)is(e);const QR={},e_={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function t_(e){if(!(e in QR)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);if(t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete QR[e]}),!1),1===e)return t.getContext("webgl",e_)||t.getContext("experimental-webgl",e_);return t.getContext("webgl2",e_)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;QR[e]=t}const t=QR[e];return t.isContextLost()?(delete QR[e],t_(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),QR[e])}var n_,r_,s_;function a_(e,t){return[t,e]}function i_(e){const t=ie(e);return he(Math.ceil(t/4))}function o_(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function u_(e,t){const n=e;let r,s,a,i,o,u,l,c,h,p;return 2===je().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,l=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(r=e.RGBA,s=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,l=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),u=e.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:u,downloadUnpackNumChannels:l,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function l_(e,t){const n=t();return je().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(n_||(n_={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(r_||(r_={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(s_||(s_={}));function c_(e){return!!(je().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function h_(e,t){return w_(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}function p_(e,t){const n=w_(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(l_(e,(()=>e.shaderSource(n,t))),l_(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=d_.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),a=s.length.toString().length+2,i=s.map(((e,t)=>de((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const u=i.slice(0,r-1),l=i.slice(r-1,r),c=i.slice(r);console.log(u.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${de(l[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const d_=/ERROR: [0-9]+:([0-9]+):/g;function f_(e,t){if(l_(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function m_(e,t,n,r,s,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(l_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),l_(e,(()=>e.vertexAttribPointer(o,s,e.FLOAT,!1,a,i))),l_(e,(()=>e.enableVertexAttribArray(o))),!0)}function g_(e,t,n,r){l_(e,(()=>function(e,t,n){v_(e,n),l_(e,(()=>e.activeTexture(e.TEXTURE0+n))),l_(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),l_(e,(()=>e.uniform1i(n,r)))}function y_(e,t,n){l_(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),l_(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function b_(e,t){l_(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),l_(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function x_(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function w_(e,t,n){const r=l_(e,(()=>t()));if(null==r)throw new Error(n);return r}function v_(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function k_(e,t=2){return ie(e.slice(0,e.length-t))}function I_(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function N_(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[k_(e),...I_(e)]),t}function S_(e){return e%2==0}function C_(e,t){if(ue(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(S_(n)&&S_(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&S_(e[0])&&S_(t[0])}let T_,$_;function E_(e,t){return null!=e.getExtension(t)}function A_(e){try{if(null!=t_(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function R_(e){if(0===e)return!1;const t=t_(e);if(1!==e){if(E_(t,"EXT_color_buffer_float"))return __(t);const e="EXT_color_buffer_half_float";if(E_(t,e)){const n=t.getExtension(e);return function(e,t){const n=u_(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const s=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,s,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!E_(t,"OES_texture_float"))return!1;if(!E_(t,"WEBGL_color_buffer_float"))return!1;return __(t)}function __(e){const t=u_(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),s}function F_(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&ne("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const D_=je();function O_(){let e,t,n,r,s,a,i,o,u,l;return 2===je().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:u,defineRound:l}}function M_(e,t,n="index"){const r=_e(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / ${t}`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * ${t}`:`index -= ${e[s]} * ${t}`};`)).join("")}function L_(e,t,n="index"){const r=_e(t);return r.map(((t,s)=>`${`int ${e[s]} = ${n} / outShapeStrides[${s}]`}; ${s===r.length-1?`int ${e[s+1]} = ${n} - ${e[s]} * outShapeStrides[${s}]`:`index -= ${e[s]} * outShapeStrides[${s}]`};`)).join("")}function z_(e){const t=_e(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}D_.registerFlag("HAS_WEBGL",(()=>D_.getNumber("WEBGL_VERSION")>0)),D_.registerFlag("WEBGL_VERSION",(()=>A_(2)?2:A_(1)?1:0)),D_.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),D_.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===D_.get("WEBGL_VERSION"))),D_.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),D_.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),D_.registerFlag("WEBGL_PACK",(()=>D_.getBool("HAS_WEBGL"))),D_.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_PACK_CLIP",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_PACK_REDUCE",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_LAZILY_UNPACK",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_CONV_IM2COL",(()=>D_.getBool("WEBGL_PACK"))),D_.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==T_){const t=t_(e);T_=t.getParameter(t.MAX_TEXTURE_SIZE)}return T_}(D_.getNumber("WEBGL_VERSION")))),D_.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==$_){const t=t_(e);$_=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,$_)}(D_.getNumber("WEBGL_VERSION")))),D_.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=D_.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=t_(e);return t=E_(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:E_(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),D_.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>D_.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!pa())),D_.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=t_(e);if(1===e){if(!E_(t,"OES_texture_float"))return!1}else if(!E_(t,"EXT_color_buffer_float"))return!1;return __(t)}(D_.getNumber("WEBGL_VERSION")))),D_.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!D_.getBool("WEBGL_FORCE_F16_TEXTURES")&&D_.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),D_.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>R_(D_.getNumber("WEBGL_VERSION")))),D_.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=D_.getNumber("WEBGL_VERSION"))&&null!=t_(e).fenceSync;var e})),D_.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>D_.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),D_.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),D_.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>pa()&&D_.getBool("IS_CHROME")?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),D_.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),D_.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),D_.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),D_.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));const B_="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class P_{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=n_.DENSE;const t=i_(e),n=O_();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${M_(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class V_{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=n_.DENSE;const t=i_(e),n=O_();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${M_(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class W_{constructor(e){this.variableNames=["A"],this.outTexUsage=r_.DOWNLOAD;const t=O_();this.outputShape=e,this.userCode=`\n      ${B_}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class U_{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=r_.DOWNLOAD;const t=O_();this.outputShape=e,this.userCode=`\n      ${B_}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class G_{constructor(e,t,n=!1){this.variableNames=["A"];const r=O_(),[s,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${z_(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n        vec4 values = ${r.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${r.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class j_{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const r=O_(),[s,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${s}.0);\n              values = ${r.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${z_(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${r.output} = ${o};\n      }\n    `}}function H_(e){const t=O_();return function(e,t){const n=w_(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(l_(e,(()=>e.shaderSource(n,t))),l_(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function q_(e){return function(e,t){const n=w_(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return l_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),l_(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function K_(e){return function(e,t){const n=w_(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return l_(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),l_(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function X_(e,t,n,r,s,a){!function(e,t){const n=je().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return w_(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return l_(e,(()=>e.bindTexture(o,i))),l_(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),l_(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),l_(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),l_(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),l_(e,(()=>e.texImage2D(o,0,r,t,n,0,s,a,null))),l_(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function Y_(e){return e.internalFormatFloat}function Z_(e){return e.internalFormatHalfFloat}function J_(e){return e.downloadTextureFormat}function Q_(e){return e.internalFormatPackedFloat}function eF(e){return e.internalFormatPackedHalfFloat}function tF(e,t,n,r,s,a,i,o){const u=e,l=new Float32Array(function(e,t){const[n,r]=o_(e,t);return n*r*4}(a,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class nF{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=je().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){QR[e]=t}(t,e)):this.gl=t_(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===je().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=h_(this.gl,e),E_(this.gl,t))this.textureHalfFloatExtension=h_(this.gl,t);else if(je().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),E_(this.gl,r))this.colorBufferHalfFloatExtension=h_(this.gl,r);else if(je().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",E_(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!E_(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=q_(this.gl),this.indexBuffer=K_(this.gl),this.framebuffer=function(e){return w_(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=u_(this.gl,this.textureHalfFloatExtension)}get debug(){return je().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;l_(e,(()=>e.finish())),l_(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),l_(e,(()=>e.deleteFramebuffer(this.framebuffer))),l_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),l_(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),l_(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=a_(t,n);return X_(e,s,a,Y_(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=a_(t,n);return X_(e,s,a,Z_(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=a_(t,n);return X_(e,s,a,J_(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){l_(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?l_(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):l_(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),l_(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,a){let i,o,u;l_(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),o=e.UNSIGNED_BYTE,u=e.RGBA):(i=new Float32Array(n*r*4),o=e.FLOAT,u=a.internalFormatPackedFloat),i.set(s),l_(e,(()=>e.texImage2D(e.TEXTURE_2D,0,u,n,r,0,e.RGBA,o,i))),l_(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=o_(t,n);return X_(e,s,a,eF(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[s,a]=o_(t,n);return X_(e,s,a,Q_(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(b_(this.gl,this.framebuffer),this.outputTexture=null),l_(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[s,a]=a_(t,n),i=new Uint8Array(t*n*4);return l_(e,(()=>e.readPixels(0,0,s,a,r.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,s,a){return tF(this.gl,e,0,0,0,s,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const s=e.createBuffer();l_(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,s)));const a=16*t*n;return l_(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),l_(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),l_(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),s}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(je().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(s,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=s}else je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return l_(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=p_(t,e);null==this.vertexShader&&(this.vertexShader=H_(t));const r=function(e){return w_(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return l_(t,(()=>t.attachShader(r,this.vertexShader))),l_(t,(()=>t.attachShader(r,n))),function(e,t){if(l_(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,r),this.debug&&f_(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(e,t,n){return l_(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),m_(e,t,"clipSpacePos",n,3,20,0)&&m_(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&l_(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&f_(this.gl,this.program),l_(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return w_(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),l_(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),g_(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,s]=o_(t,n);this.setOutputMatrixTextureDriver(e,r,s)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&f_(this.gl,this.program),x_(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),l_(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),l_(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=h_(this.gl,2===je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await fe((()=>this.disposed||this.isQueryAvailable(e,je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||fe((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),y_(this.gl,e,this.framebuffer),this.debug&&x_(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(y_(this.gl,this.outputTexture,this.framebuffer),this.debug&&x_(this.gl)):b_(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;y_(r,e,this.framebuffer),this.debug&&x_(r),this.outputTexture=e,l_(r,(()=>r.viewport(0,0,t,n))),l_(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),l_(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:rF}=g;function sF(e,t,n){const r=[];if(e.forEach((e=>{const t=ie(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=mF(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),a=e.map((e=>function(e,t,n=!1,r){let s="";s+=n?iF(e,r):aF(e,r);const a=e.shapeInfo.logicalShape,i=t.logicalShape;a.length<=i.length&&(s+=n?function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=rF(e.shapeInfo.logicalShape,t.logicalShape),u=fF(i),l=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+l]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+l]}`)).join(", ");let d="return outputValue;";const f=1===ie(e.shapeInfo.logicalShape),m=1===ie(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${u} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${r}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===u&&null==e.shapeInfo.flatOffset&&ue(i,a))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=fF(u),c=rF(e.shapeInfo.logicalShape,t.logicalShape),h=u-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":u<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";f=u<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", ");return`\n    float ${s}() {\n      ${l} coords = getOutputCoords();\n      ${p}\n      return get${r}(${f});\n    }\n  `}(e,t));return s}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=O_(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let l,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${oF}\n    ${uF}\n    ${lF}\n  `}(o);t.isPacked?(l=function(e,t,n){switch(e.length){case 0:return hF();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(ue(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),a=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),a=s*Math.ceil(e[e.length-2]/2);let i=a,o="",u="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(l=function(e,t,n){switch(e.length){case 0:return hF();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(ue(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${L_(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=M_(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${L_(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=M_(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=M_(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=M_(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=cF);return[h,u,c,s,l,a,n.userCode].join("\n")}function aF(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,a]=e.shapeInfo.texShape;if(1===s&&1===a)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=pF(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${o}, ${u}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${dF(e)}\n      }\n    `;const s=e.shapeInfo.texShape,a=s[0],i=s[1];if(1===i&&1===a)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=pF(n);if(1===i)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape;if(null!=a&&ue(n,a)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=a[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=ye(n),u=i;if(u.length<n.length){const n=["row","col"];return`\n      ${aF(gF(e,u),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${yF(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${dF(e)}\n      }\n    `;const l=a[0],c=a[1],h=pF(r);if(1===c)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===l)return t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(t)return`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `;return`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${l}, ${c}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:u}=ye(n),l=o;if(l.length<n.length){const n=["row","col","depth"];return`\n        ${aF(gF(e,l),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${yF(n,u)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${dF(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const f=pF(r);if(t)return`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * ${a} + col * ${i} + depth + ${f};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:u,keptDims:l}=ye(n);if(u.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${aF(gF(e,u),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${yF(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${dF(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const y=pF(r);if(t)return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],a=t[3]*s,i=t[2]*a,o=t[1]*i,{newShape:u,keptDims:l}=ye(t);if(u.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${aF(gF(e,u))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${yF(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${s})) +\n          depth3;\n        ${dF(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===s&&null==c)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=pF(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${s} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:a}=ye(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${aF(gF(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${yF(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,u=t[3]*o,l=t[2]*u,c=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${l}, ${u}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${dF(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${u}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=pF(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${l} + depth * ${u} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function iF(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=O_();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=e.shapeInfo.texShape,a=O_();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],u=O_();if(null!=a&&ue(n,a))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${u.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `;const l=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${l[0]}, ${l[1]}, row, col);\n      return ${u.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const r=[1,2],a=["b","row","col"];return`\n        ${iF(gF(e,n.slice(1)),t)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${yF(a,r)});\n        }\n      `}const o=O_();if(t)return`\n    vec4 ${s}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${r}, uv);\n    }\n  `;const u=i[0],l=i[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${h}, ${c}, b, row, col);\n      return ${o.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=O_();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],l=u[0],c=u[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=a[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${r}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const oF="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",uF="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",lF="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",cF="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function hF(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function pF(e){return`offset${e}`}function dF(e){const t=e.name,n=ie(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function fF(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function mF(e,t,n){const{newShape:r}=ye(t),s=t.length,a=e&&3===s&&1===t[0],i=a?t.slice(1):r,o=!e&&s>1&&!ue(t,n)&&r.length<s||a;return{useSqueezeShape:o,uniformShape:o?i:t}}function gF(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function yF(e,t){return t.map((t=>e[t])).join(", ")}function bF(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],a=s.shape;if(!ue(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&s.isUniform)return;const i=e.texShape,o=s.isUniform?null:s.texData.texShape;if(!ue(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function xF(e){return je().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}const{addImpl:wF,bincountImpl:vF,bincountReduceImpl:kF,ceilImpl:IF,concatImpl:NF,equalImpl:SF,expImpl:CF,expm1Impl:TF,floorImpl:$F,gatherNdImpl:EF,gatherV2Impl:AF,greaterImpl:RF,greaterEqualImpl:_F,lessImpl:FF,lessEqualImpl:DF,linSpaceImpl:OF,logImpl:MF,maxImpl:LF,maximumImpl:zF,minimumImpl:BF,multiplyImpl:PF,negImpl:VF,notEqualImpl:WF,prodImpl:UF,rangeImpl:GF,rsqrtImpl:jF,simpleAbsImpl:HF,sliceImpl:qF,sparseFillEmptyRowsImpl:KF,sparseReshapeImpl:XF,sparseSegmentReductionImpl:YF,stridedSliceImpl:ZF,stringNGramsImpl:JF,stringSplitImpl:QF,stringToHashBucketFastImpl:eD,subImpl:tD,tileImpl:nD,topKImpl:rD,transposeImpl:sD,uniqueImpl:aD}=G;function iD(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function oD(e,t){return 1===t?[e]:iD(e,t)}class uD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=oD("rc",t),r=fF(t),s=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let r="";for(let s=e-2;s<e;s++)r+=`${n[s]} >= ${t[s]}`,s<e-1&&(r+="||");return r}(t,e,n),a=function(e,t,n,r){if(1===e)return"";const s=r.slice(-2);return`\n    int r = ${s[0]};\n    int c = ${s[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,r=function(e,t){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let a=`${0===r?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);if(1===n)return`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${r[0]}),\n          cEdge ? 0. : getA(${r[1]}),\n          rEdge ? 0. : getA(${r[2]}),\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${s}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class lD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var r;this.userCode=`\n      ${r=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${M_(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${z_(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class cD{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=pD(t,n),s=dD(e,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const a=hD(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}let i;return r===s_.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===s_.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===s_.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===s_.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===s_.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=pD(n,r),a=dD(t,s,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=hD(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=je().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],l=u.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function hD(e,t,n,r,s){const a=function(e,t){switch(e){case s_.PACKED_2X2_FLOAT32:return Q_(t);case s_.PACKED_2X2_FLOAT16:return eF(t);case s_.UNPACKED_FLOAT32:return Y_(t);case s_.UNPACKED_FLOAT16:return Z_(t);case s_.PACKED_4X1_UNSIGNED_BYTE:return J_(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let i;if(s){const[t,n]=o_(e[0],e[1]);i=t*n}else{const[t,n]=a_(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function pD(e,t){if(e===r_.UPLOAD)return s_.PACKED_2X2_FLOAT32;if(e===r_.RENDER||null==e)return function(e){return je().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?s_.PACKED_2X2_FLOAT32:s_.UNPACKED_FLOAT32:e?s_.PACKED_2X2_FLOAT16:s_.UNPACKED_FLOAT16}(t);if(e===r_.DOWNLOAD||e===r_.PIXELS)return s_.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function dD(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class fD{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=xF(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const mD="return abs(x);";const gD="return x;";class yD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=xF(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class bD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=oD("rc",t),r=fF(t),s=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${s});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const xD=rp,wD={};const vD=je().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class kD extends H{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!je().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=t_(je().getNumber("WEBGL_VERSION"));this.binaryCache=((t=je().getNumber("WEBGL_VERSION"))in wD||(wD[t]={}),wD[t]),this.gpgpu=new nF(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new cD(this.gpgpu),this.numMBBeforeWarning=null==je().global.screen?1024:je().global.screen.height*je().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new j(this,Po())}nextDataId(){return kD.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((je().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||je().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:r_.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,s){if(je().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:r_.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new yD(i,gD):new fD(i,gD);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const u=null!=this.activeTimers;let l,c;if(u&&(l=$s()),"complex64"===r){c=Zd(this.readSync(s.real.dataId),this.readSync(s.imag.dataId))}else c=this.getValuesFromTexture(e);return u&&(this.downloadWaitMs+=$s()-l),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=s){let t;t=o?new yD(r,gD):new fD(r,gD);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:a}],a),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(e);if(!je().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===je().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,l,c=null;if("complex64"!==a&&je().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(e);const t=this.texData.get(u.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...i_(r))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);l=Zd(e[0],e[1])}else if(null==c)l=this.getValuesFromTexture(e);else{const e=ie(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=u&&this.disposeIntermediateTensorInfo(u),null!=c){const e=this.gpgpu.gl;l_(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,l),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Po().removeDataId(e,this),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>Rs(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return vi(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!c_(n)){if(je().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=ie(t);if(je().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...i_(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const a=je().getBool("WEBGL_PACK")&&!0===r,i=a?N_(t):t,o=a?new U_(i):new W_(i),u=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),l=this.texData.get(u.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture,l.texShape[0],l.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(u),c}timerAvailable(){return je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}async time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=ae(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=ae(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);i.kernelMs=Q(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:$s(),endMs:null}}endTimer(e){return je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=$s(),e)}async getQueryTime(e){if(je().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:s,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,u=this.dataRefCount.get(o);u>1?this.dataRefCount.set(o,u-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,s,a)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=vD){return je().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&ie(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Xd("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return xD(e.shape,t)}packedUnaryOp(e,t,n){const r=new yD(e.shape,t),s=this.compileAndRun(r,[e],n);return Po().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=HF(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(je().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,mD,e.dtype);const t=new fD(e.shape,mD),n=this.compileAndRun(t,[e]);return Po().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&Ce(n[0])){const s=n.map((e=>As(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return Po().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new bD(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new uD(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[k_(e.shape),...I_(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},s=[k_(t),...I_(t)],a=new lD(s,n),i=this.runWebGLProgram(a,[r],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:r,dtype:s}=t,a=N_(r);let i;i=n?new V_(a):new P_(a);return{dtype:s,shape:r,dataId:this.runWebGLProgram(i,[{shape:a,dtype:s,dataId:e}],s,null,!0).dataId}}runWebGLProgram(e,t,n,r,s=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===n_.DENSE){const t=i_(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===ie(a.shape))return i.values=be(a.dtype,0),a;const o=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&ie(t.shape)<=je().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!C_(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),o.push(t),n=this.texData.get(t.dataId),e.shape=r}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const l={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o}=mF(e.packedInputs,t.shape,a);let u="",l="",c="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=_e(o);c=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else l=`${o[0]>1}_${o[1]>1}`;const h=t.shape.length,p=2===h&&ue(t.shape,a),d=1===ie(t.shape),f=Su(t.shape,n.shape),m=!e.packedInputs&&h===n.shape.length&&ue(a,n.texData.texShape),g=e.packedInputs||h>2?"":`${a[0]>1}_${a[1]>1}`;r+=`${h}_${m}_${i}_${o.length}_${d}_${f}_${p}_${u}_${l}_${c}_${g}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let a=e.constructor.name;return a+="_"+r+"_"+s+`${je().getNumber("WEBGL_VERSION")}`,a}(e,u,l),h=this.getAndSaveBinary(c,(()=>function(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),a=s.map((e=>e.shapeInfo)),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},o=sF(s,i,t),u=e.createProgram(o);let l=null;const c=e.getUniformLocation(u,"NAN",!1);1===je().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(u,"INFINITY",!1));const h=!1,p={},d={},f={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n];p[r]=e.getUniformLocation(u,r,h),p[`offset${r}`]=e.getUniformLocation(u,`offset${r}`,h),t.enableShapeUniforms&&(d[`${r}Shape`]=e.getUniformLocation(u,`${r}Shape`,h),f[`${r}TexShape`]=e.getUniformLocation(u,`${r}TexShape`,h))}let m,g,y;t.enableShapeUniforms&&(m=e.getUniformLocation(u,"outShape",h),y=e.getUniformLocation(u,"outShapeStrides",h),g=e.getUniformLocation(u,"outTexShape",h));const b=[];return t.customUniforms&&t.customUniforms.forEach(((t,n)=>{b[n]=e.getUniformLocation(u,t.name,h)})),{program:t,source:o,webGLProgram:u,uniformLocations:p,customUniformLocations:b,inShapeInfos:a,outShapeInfo:i,infLoc:l,nanLoc:c,inShapesLocations:d,inTexShapesLocations:f,outShapeLocation:m,outShapeStridesLocation:y,outTexShapeLocation:g}}(this.gpgpu,e,u,l))),p=null!=this.activeTimers;let d;p&&(d=this.startTimer()),function(e,t,n,r,s){t.program.enableShapeUniforms||(bF(t.inShapeInfos,n),bF([t.outShapeInfo],[r]));const a=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===je().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],a=t.uniformLocations[s],i=t.uniformLocations[`offset${s}`],o=t.inShapesLocations[`${s}Shape`],u=t.inTexShapesLocations[`${s}TexShape`];if(o){const{uniformShape:r}=mF(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(o,new Int32Array(r));break;case 2:e.gl.uniform2iv(o,new Int32Array(r));break;case 3:e.gl.uniform3iv(o,new Int32Array(r));break;case 4:e.gl.uniform4iv(o,new Int32Array(r))}}if(u&&e.gl.uniform2i(u,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(ie(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,r)}));const o=t.outShapeLocation;if(o)switch(r.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=_e(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s&&t.program.customUniforms.forEach(((n,r)=>{const a=t.customUniformLocations[r],i=s[r];if("float"===n.type)e.gl.uniform1fv(a,i);else if("vec2"===n.type)e.gl.uniform2fv(a,i);else if("vec3"===n.type)e.gl.uniform3fv(a,i);else if("vec4"===n.type)e.gl.uniform4fv(a,i);else if("int"===n.type)e.gl.uniform1iv(a,i);else if("ivec2"===n.type)e.gl.uniform2iv(a,i);else if("ivec3"===n.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,i)}})),e.executeProgram()}(this.gpgpu,h,u,l,r),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)}));const f=je().get("WEBGL_FLUSH_THRESHOLD");if(f>0){const e=$s();e-this.lastGlFlushTime>f&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!je().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===s){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,r,s=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,s)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!je().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Uo((()=>{if(!je().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=je().getBool("DEBUG");je().set("DEBUG",!1);const t=this.abs(gu(1e-8)).dataSync()[0];if(je().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const u=null!=this.activeTimers;let l;u&&(l=$s());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=je().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Z(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=ye(e);e=t.newShape}let r=ie(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=k_(e);let n=2,s=2;return e.length&&([n,s]=I_(e)),r=t*(n/2)*(s/2),he(r).map((e=>2*e))}return he(r)}(n,o),t.texShape=c),null!=s){const e=N_(n);let a,i=c[1],h=c[0];const p=s instanceof Uint8Array;o?([i,h]=o_(c[0],c[1]),a=new j_(e,[h,i],p)):a=new G_(e,[h,i],p);const d=this.makeTensorInfo([h,i],r);this.texData.get(d.dataId).usage=p?r_.PIXELS:r_.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,s);const f=!0,m=this.runWebGLProgram(a,[d],r,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,u&&(this.uploadWaitMs+=$s()-l)}else{const e=this.acquireTexture(c,i,r,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*Ne(t)}}kD.nextDataId=0;da()&&Qo("webgl",(()=>new kD),2);class ID{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Tu(t,n),this.enableShapeUniforms=xF(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class ND{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Tu(t,n);const s=this.outputShape.length;this.enableShapeUniforms=xF(s);let a="";if(r)if(0===s||1===ie(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${fF(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=oD("coords",s);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function SD(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const CD={kernelName:ln,backendName:"webgl",kernelFunc:SD};function TD(e){const{inputs:t,backend:n}=e,{real:r,imag:s}=t,a=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(a.dataId),o=SD({inputs:{x:r},backend:n}),u=SD({inputs:{x:s},backend:n});return i.complexTensorInfos={real:o,imag:u},a}const $D={kernelName:vt,backendName:"webgl",kernelFunc:TD},ED="return (a < 0.) ? b * a : a;",AD="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const RD={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:a}=r,i=n.makeTensorInfo([],"float32",Cs(a,"float32")),o=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND(AD,s.shape,i.shape):new ID(ED,s.shape,i.shape),u=n.runWebGLProgram(o,[s,i],s.dtype);return n.disposeIntermediateTensorInfo(i),u}},_D="return (a < 0.) ? b * a : a;",FD="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const DD={kernelName:Jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,a=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND(FD,r.shape,s.shape):new ID(_D,r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}};function OD({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:a})=>{const{x:i}=s,o=a,u=r||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,u);return o.makeTensorInfo(i.shape,u,t)}let l;return l=je().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new yD(i.shape,t):new fD(i.shape,e),o.runWebGLProgram(l,[i],u)}}function MD({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:a}){return({inputs:i,backend:o})=>{const{a:u,b:l}=i,c=o;if(r&&"complex64"===u.dtype){const t=c.texData.get(u.dataId),n=c.texData.get(l.dataId),[r,s]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,r]=t,s={dataId:n.dataId,dtype:n.dtype,shape:u.shape},a={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new ID(e,u.shape,l.shape);return c.runWebGLProgram(i,[s,a],Qs(n.dtype,r.dtype))})),a=TD({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),a}const h=a||Qs(u.dtype,l.dtype);if(("string"===u.dtype||"string"===l.dtype||c.shouldExecuteOnCPU([u,l]))&&null!=s){const e=c.texData.get(u.dataId).values,t=c.texData.get(l.dataId).values,n="string"===u.dtype?bf(e):e,r="string"===u.dtype?bf(t):t,[a,i]=s(u.shape,l.shape,n,r,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let p;return p=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new ND(t,u.shape,l.shape,n):new ID(e,u.shape,l.shape),c.runWebGLProgram(p,[u,l],h)}}function LD(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?FD:_D;if("leakyrelu"===e)return t?AD:ED;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class zD{constructor(e,t,n,r=!1,s=!1,a=!1,i=null,o=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const l=r?e[1]:e[2],c=Math.ceil(l/2),h=r?"i * 2, rc.y":"rc.y, i * 2",p=s?"rc.z, i * 2":"i * 2, rc.z",d=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const BD="return areal * breal - aimag * bimag;",PD="return areal * bimag + aimag * breal;";class VD{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Tu(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const WD="return a * b;";function UD(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,a=Qs(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new VD(BD,r.shape,s.shape),i=new VD(PD,r.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,o,"float32"),l=n.runWebGLProgram(i,o,"float32"),c=TD({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[i,o]=PF(r.shape,s.shape,e.values,t.values,a),u=n.makeTensorInfo(o,a);return n.texData.get(u.dataId).values=i,u}let i;return i=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND(WD,r.shape,s.shape):new ID(WD,r.shape,s.shape),n.runWebGLProgram(i,[r,s],a)}const GD={kernelName:Pn,backendName:"webgl",kernelFunc:UD};function jD(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:a}=r,i=n,o=ie(s.shape),u=me(a,o),l=ie(u);ne(o===l,(()=>`The new shape (${u}) has ${l} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(s.dataId);return!c.isPacked||C_(s.shape,u)||null!==c.texture&&C_(c.shape,u)?(i.incRef(s.dataId),{dataId:s.dataId,shape:u,dtype:s.dtype}):function(e,t,n){const r=[k_(e.shape),...I_(e.shape)],s={dtype:e.dtype,shape:r,dataId:e.dataId},a=[k_(t),...I_(t)],i=new lD(a,r),o=n.runWebGLProgram(i,[s],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(s,u,i)}const HD={kernelName:sr,backendName:"webgl",kernelFunc:jD};class qD{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];const i=4*Math.floor(n/4),o=n%4;let u="sumValue += dot(values, ones);";if(null!=t){const e=1/t;u=`sumValue += dot(values * ${le(e)?e.toPrecision(2):e}, ones);`}let l="";s%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class KD{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:a}=e;this.outputShape=[r,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";s%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${u});\n      }\n    `}}function XD(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=Dd(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let a=e;for(let i=0;i<s.length;i++){const{inSize:o,windowSize:u,outSize:l}=s[i];let c,h;c="mean"===n?0===i?new qD({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},o):new qD({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l}):new KD({windowSize:u,inSize:o,batchSize:e.shape[0],outSize:l},n),h=a,a=r.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(h)}return a}class YD{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=fF(this.rank),s=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${s}));\n    }\n    `}}class ZD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=fF(this.rank),s=iD("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=s[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${o}) {\n        result[1] = ${u};\n      }\n      --${s[this.rank-1]};\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${o}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function JD(e,t,n){const r=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ZD(e.shape,t):new YD(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function QD(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r;return function(e,t,n,r){const s=t,a=e.shape.length,i=ge(s,e.shape);let o=i;const u=Nc(o,a),l=null!=u;let c=e;l&&(c=JD(e,u,r),o=Cc(o.length,a)),Ic("sum",o,a);const[h,p]=vc(c.shape,o);let d=h;n&&(d=kc(h,i));const f=ie(p),m=jD({inputs:{x:c},attrs:{shape:[ie(e.shape)/f,f]},backend:r}),g=XD(m,ea(e.dtype),"sum",r),y=jD({inputs:{x:g},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),l&&r.disposeIntermediateTensorInfo(c),y}(s,a,i,n)}const eO={kernelName:Ir,backendName:"webgl",kernelFunc:QD};function tO(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{perm:a}=r,i=n,o=s.shape.length,u=new Array(o);for(let e=0;e<u.length;e++)u[e]=s.shape[a[e]];let l;if(i.shouldExecuteOnCPU([s])){const e=i.texData.get(s.dataId).values,t=sD(e,s.shape,s.dtype,a,u);l=i.makeTensorInfo(u,s.dtype);i.texData.get(l.dataId).values=t}else l=JD(s,a,i);return l}const nO={kernelName:Gr,backendName:"webgl",kernelFunc:tO};function rO({a:e,b:t,transposeA:n,transposeB:r,backend:s,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:u=null}){const l=e.shape.length,c=t.shape.length,h=n?e.shape[l-2]:e.shape[l-1],p=r?t.shape[c-1]:t.shape[c-2],d=n?e.shape[l-1]:e.shape[l-2],f=r?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=ie(m),b=ie(g);ne(l>=2&&c>=2&&(y===b||1===y||1===b),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`));const x=(y>b?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([d,f]);ne(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`));const w=n?[y,h,d]:[y,d,h],v=r?[b,f,p]:[b,p,f],k=jD({inputs:{x:e},backend:s,attrs:{shape:w}}),I=jD({inputs:{x:t},backend:s,attrs:{shape:v}}),N=[k,I],S=Math.max(y,b),C=n?k.shape[1]:k.shape[2],T=null!=a,$=null!=i,E="leakyrelu"===u,A=null!=u?LD(u,!0):null;let R;if((1===d||1===f)&&C>1e3&&!1===(T||$||E||null!=A)){let e=k,t=I;n&&(e=tO({inputs:{x:k},backend:s,attrs:{perm:[0,2,1]}}),N.push(e)),r&&(t=tO({inputs:{x:I},backend:s,attrs:{perm:[0,2,1]}}),N.push(t));const a=1===f;let i=e;1!==f&&(i=jD({inputs:{x:e},backend:s,attrs:{shape:[S,C,1]}}),N.push(i));const o=1===f?2:1;let u=t;a&&(u=jD({inputs:{x:t},backend:s,attrs:{shape:[S,1,C]}}),N.push(u));const l=UD({inputs:{a:i,b:u},backend:s});R=QD({inputs:{x:l},backend:s,attrs:{axis:o,keepDims:!0}}),N.push(l)}else{const u=Qs(e.dtype,t.dtype),l=new zD(w,v,[S,d,f],n,r,T,A,$,E),c=[k,I];if(null!=a&&c.push(a),$&&c.push(i),E){const e=s.makeTensorInfo([],"float32",Cs(o,"float32"));c.push(e),N.push(e)}R=s.runWebGLProgram(l,c,u)}const _=jD({inputs:{x:R},backend:s,attrs:{shape:x}});N.push(R);for(const e of N)s.disposeIntermediateTensorInfo(e);return _}const sO={kernelName:Jr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:h}=r;return rO({a:s,b:a,transposeA:u,transposeB:l,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},aO="return abs(x);";const iO={kernelName:Ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=HF(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=je().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new yD(r.shape,aO):new fD(r.shape,aO),n.runWebGLProgram(s,[r],r.dtype)}},oO=OD({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),uO={kernelName:Ze,backendName:"webgl",kernelFunc:oO},lO=OD({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),cO={kernelName:Je,backendName:"webgl",kernelFunc:lO},hO="return a + b;",pO=MD({opSnippet:hO,packedOpSnippet:hO,supportsComplex:!0,cpuKernelImpl:wF}),dO={kernelName:Qe,backendName:"webgl",kernelFunc:pO};class fO{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class mO{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const gO={kernelName:et,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return SD({inputs:{x:s[0]},backend:r});if(s.length>je().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const a=s.map((e=>e.dtype)).reduce(((e,t)=>Qs(e,t))),i=s.map((e=>e.shape)),o=je().getBool("WEBGL_PACK")?new mO(s[0].shape,i):new fO(s[0].shape,i);return r.runWebGLProgram(o,s,a)}};const yO={kernelName:tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=ge(a,s.shape);let l=u;const c=Nc(l,o);let h=s;null!=c&&(h=tO({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Cc(l.length,o)),Ic("all",l,o);const[p,d]=vc(h.shape,l),f=jD({inputs:{x:h},backend:n,attrs:{shape:[-1,ie(d)]}}),m=XD(f,f.dtype,"all",n);let g;if(i){g=jD({inputs:{x:m},backend:n,attrs:{shape:kc(p,u)}})}else g=jD({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};const bO={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=ge(a,s.shape);let l=u;const c=Nc(l,o);let h=s;null!=c&&(h=tO({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Cc(l.length,o)),Ic("any",l,o);const[p,d]=vc(h.shape,l),f=jD({inputs:{x:h},backend:n,attrs:{shape:[-1,ie(d)]}}),m=XD(f,f.dtype,"any",n);let g;if(i){g=jD({inputs:{x:m},backend:n,attrs:{shape:kc(p,u)}})}else g=jD({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class xO{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:s,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[s,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class wO{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,ne(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],a=Math.ceil(s/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,u=fF(o),l=oD("coords",o);let c,h;if(1===a){h=o+1;const e=fF(h);c=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[o-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[o-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[o-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[o-2]};`}else h=o,c=`\n        ${u} sourceLocR = coords;\n        ++${l[o-1]};\n        ${u} sourceLocG = coords;\n        ++${l[o-2]};\n        ${u} sourceLocA = coords;\n        --${l[o-1]};\n        ${u} sourceLocB = coords;\n        --${l[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=oD("sourceLocR",h-1).concat("inIdx.r"),g=oD("sourceLocG",h-1).concat("inIdx.g"),y=oD("sourceLocB",h-1).concat("inIdx.b"),b=oD("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${l[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${l[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function vO(e,t,n,r=null){let s=t.shape[0],a=t.shape[1];null!=r&&(s=r.shape[0],a=r.shape[1]);const i=Dd(a),o={windowSize:i,inSize:a,batchSize:s,outSize:Math.ceil(a/i)},u=new xO(o,n,null==r),l=[t];null!=r&&l.push(r);const c=e.runWebGLProgram(u,l,"int32");if(1===c.shape[1])return c;const h=vO(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function kO(e,t,n,r=null){const s=null!=r?r.shape:t.shape,a=Dd(s[s.length-1]),i=new wO(s,a,n,null==r),o=null==r?[t]:[t,r],u=e.runWebGLProgram(i,o,"int32");if(u.shape.length===t.shape.length){const r=kO(e,t,n,u);return e.disposeIntermediateTensorInfo(u),r}return u}function IO(e,t,n,r){const s=[n];if(Ic("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!je().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=vc(t.shape,s),o=ie(i),u=jD({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(u);const l=vO(e,u,r);n.push(l);const c=jD({inputs:{x:l},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return kO(e,t,r)}const NO={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=ge(a,s.shape);const o=Nc(i,s.shape.length);let u=s;const l=[];null!=o&&(u=tO({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Cc(i.length,u.shape.length)),Ic("argMax",[i[0]],u.shape.length);const c=IO(n,u,i[0],"max");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const SO={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a}=r;let i=ge(a,s.shape);const o=Nc(i,s.shape.length);let u=s;const l=[];null!=o&&(u=tO({inputs:{x:s},backend:n,attrs:{perm:o}}),l.push(u),i=Cc(i.length,u.shape.length)),Ic("argMin",[i[0]],u.shape.length);const c=IO(n,u,i[0],"min");return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},CO=OD({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),TO={kernelName:at,backendName:"webgl",kernelFunc:CO},$O=OD({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),EO={kernelName:it,backendName:"webgl",kernelFunc:$O},AO=OD({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),RO={kernelName:ot,backendName:"webgl",kernelFunc:AO},_O=MD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),FO={kernelName:lt,backendName:"webgl",kernelFunc:_O},DO=OD({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),OO={kernelName:ut,backendName:"webgl",kernelFunc:DO};class MO{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class LO{constructor(e,t,n,r=!1,s=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?s?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const v=4*Math.floor(a/4),k=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const zO={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;F_(s,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ne(nl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Hu(s.shape,a,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&ue(l.inShape,l.outShape))return SD({inputs:{x:s},backend:n});const c=new MO(l,"avg",!1);return n.runWebGLProgram(c,[s],"float32")}};const BO={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:u,dataFormat:l}=r,c=qu(s.shape,a,i,[1,1,1],o,u,l),h=new LO(c,"avg",!1);return n.runWebGLProgram(h,[s],"float32")}};class PO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=o-1-e.padInfo.top,c=u-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class VO{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${s}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const WO={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=qu(i.shape,o,u,[1,1,1],l,c),p=new VO(h);return n.runWebGLProgram(p,[s],i.dtype)}};const UO={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a;F_([s,a],"avgPoolGrad");const{filterSize:o,strides:u,pad:l}=r,c=Hu(i.shape,o,u,1,l),h=new PO(c);return n.runWebGLProgram(h,[s],i.dtype)}};const GO={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:s,b:a}=t,{transposeA:i,transposeB:o}=r;return rO({a:s,b:a,transposeA:i,transposeB:o,backend:n})}};class jO{constructor(e,t,n,r,s,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Tu(e,t),Tu(e,n);let i="0.0";null!=r&&(Tu(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=s&&(Tu(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class HO{constructor(e,t,n,r,s,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Tu(e,t),Tu(e,n);let i="vec4(0.0)";null!=r&&(Tu(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=s&&(Tu(e,s),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const qO={kernelName:rn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:s,variance:a,offset:i,scale:o}=e;ne(s.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),ne(null==i||s.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),ne(null==o||s.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:u}=n;null==u&&(u=.001);const l=[r,s,a];let c=null;null!=i&&(c=i.shape,l.push(i));let h=null;null!=o&&(h=o.shape,l.push(o));const p=je().getBool("WEBGL_PACK_NORMALIZATION")?new HO(r.shape,s.shape,a.shape,c,h,u):new jO(r.shape,s.shape,a.shape,c,h,u);return t.runWebGLProgram(p,l,l[0].dtype)}};class KO{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=fF(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return XO.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${XO[t]} = start[${t}] + coords.${XO[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const XO=["x","y","z","w","u","v"];class YO{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=fF(this.rank),n=oD("coords",this.rank),r=oD("sourceLoc",this.rank),s=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${s})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function ZO(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,size:i}=r,[o,u]=bo(s,a,i);if(ro(s,o,u),0===ie(u))return n.makeTensorInfo(u,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=qF(e.values,o,u,s.shape,s.dtype);return n.makeTensorInfo(u,s.dtype,t)}const{isPacked:l}=n.texData.get(s.dataId),c=go(s.shape,o,u);if(l||!c){const e=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new YO(u):new KO(u),t=[o];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),a=r.makeTensorInfo(n,e.dtype),i=r.texData.get(a.dataId);Object.assign(i,s),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=yo(t,_e(e.shape));s.slice&&(o+=s.slice.flatOffset),i.slice={flatOffset:o,origDataId:s.slice&&s.slice.origDataId||e.dataId};const u=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,u+1),a}(s,o,u,n)}const JO={kernelName:gr,backendName:"webgl",kernelFunc:ZO},QO={kernelName:mt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,crops:i}=r;ne(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),u=Md(s.shape,a,o),l=Ld(u.length,a.length),c=zd(s.shape,a,o),h=Bd(i,a.length),p=Pd(c,i,a.length),d=[],f=jD({inputs:{x:s},backend:n,attrs:{shape:u}}),m=tO({inputs:{x:f},backend:n,attrs:{perm:l}}),g=jD({inputs:{x:m},backend:n,attrs:{shape:c}}),y=ZO({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const eM={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i}=r,o=n.readSync(s.dataId),u=n.readSync(a.dataId),l=vF(o,u,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,l)}},tM=MD({opSnippet:"return float(a != b);",cpuKernelImpl:WF,dtype:"bool"}),nM={kernelName:Wn,backendName:"webgl",kernelFunc:tM};function rM(e){const{inputs:t,backend:n}=e,{input:r}=t;return SD({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const sM={kernelName:tr,backendName:"webgl",kernelFunc:rM};const aM={kernelName:bt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:a}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===a.dtype)return SD({inputs:{x:a},backend:r});const t=Mc(a.shape),n=e({inputs:{x:a},backend:r,attrs:{dtype:"float32"}}),s=TD({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===a.dtype){const t=rM({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!ke(a.dtype,i)){const e=SD({inputs:{x:a},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new fD(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",be("bool",1)),t=tM({inputs:{a:a,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},iM="return ceil(x);",oM=OD({opSnippet:iM,packedOpSnippet:iM,cpuKernelImpl:IF}),uM={kernelName:xt,backendName:"webgl",kernelFunc:oM};class lM{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class cM{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const hM={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:a,clipValueMax:i}=r;let o;o=je().getBool("WEBGL_PACK_CLIP")?new cM(s.shape):new lM(s.shape);const u=[[a],[i]];return n.runWebGLProgram(o,[s],s.dtype,u)}};class pM{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function dM(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const fM={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=n.texData.get(r.dataId),a=new pM(r.shape),i=[dM(r,s.complexTensorInfos.real),dM(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class mM{constructor(e){this.outputShape=[],this.outputShape=_d(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class gM{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=_d(e,t);const n=this.outputShape,r=n.length,s=fF(r),a=oD("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const u=i[t],l=i.slice(-2),c=i.join();let h=`if (${u} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${l.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${u} < ${o[e]}  && ${u} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${yM(i,u,t)}),\n            vec2(${yM(l,u,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${yM(i,u,d)}),\n          vec2(${yM(l,u,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${n[r-2]} &&\n            ${a[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function yM(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function bM(e){const{inputs:t,backend:n}=e,{input:r}=t;return SD({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const xM={kernelName:hn,backendName:"webgl",kernelFunc:bM};function wM(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>rM({inputs:{input:e},backend:n}))),s=e.map((e=>bM({inputs:{input:e},backend:n}))),a=wM(r,t,n),i=wM(s,t,n),o=TD({inputs:{real:a,imag:i},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),s.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=ie(e.shape.slice(t));return jD({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),a=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=_d(s.map((e=>e.shape)),1),o=1===s[0].shape[0],u=NF(a,i,r,o),l=_d(e.map((e=>e.shape)),t),c=n.makeTensorInfo(l,r,u);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>je().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),s=wM(e.slice(0,r),t,n),a=wM(e.slice(r),t,n),i=wM([s,a],t,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}if(je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const s=new gM(e.map((e=>e.shape)),t);return n.runWebGLProgram(s,e,r)}const{tensors2D:a,outShape:i}=function(e,t,n){const r=_d(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>jD({inputs:{x:e},attrs:{shape:[-1,ie(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),o=new mM(a.map((e=>e.shape))),u=n.runWebGLProgram(o,a,r);a.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=jD({inputs:{x:u},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(u),l}function vM(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,a=ge(s,t[0].shape)[0],i=_d(t.map((e=>e.shape)),a);if(0===ie(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ie(e.shape)>0));if(1===o.length)return SD({inputs:{x:o[0]},backend:n});return Rd(o.map((e=>e.shape)),a),wM(o,a,n)}const kM={kernelName:It,backendName:"webgl",kernelFunc:vM};class IM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class NM{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${s}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class SM{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:r,inChannels:s,strideWidth:a,strideHeight:i,padInfo:o,outWidth:u,dilationWidth:l,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=s*r,m=O_(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let r=0;r<=1;r++)x+=`\n          blockIndex = rc.y + ${r};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${u})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${u}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${l} * (int(mod(float(pos), ${f}.) / ${s}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${s}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+r}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+r}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function CM({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const u=e.shape,l=r.texData.get(e.dataId),c=n.inChannels,h=u[0]*u[1]*u[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[],g=(1===h||1===p)&&c>1e3,y=u[2]%2!=0&&!!l.isPacked;if(!g&&je().getBool("WEBGL_LAZILY_UNPACK")&&je().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&y){const c=d?u[0]*u[1]*(u[2]+1):u[0]*u[2]*(u[3]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,ne(C_(l.shape,h.shape),(()=>`packed reshape ${l.shape} to ${h.shape} isn't free`));const g=jD({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(g);const y=rO({a:h,b:g,backend:r,transposeA:false,transposeB:false,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),b=r.texData.get(y.dataId);ne(b.isPacked,(()=>"batchMatMul result is expected to be packed")),l.shape=p,b.shape=n.outShape,f=SD({inputs:{x:y},backend:r}),f.shape=n.outShape,m.push(y)}else{const l=jD({inputs:{x:e},backend:r,attrs:{shape:[1,d?u[0]*u[1]*u[2]:u[0]*u[2]*u[3],n.inChannels]}}),c=jD({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=rO({a:l,b:c,transposeA:false,transposeB:false,backend:r,bias:s,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=jD({inputs:{x:h},backend:r,attrs:{shape:n.outShape}}),m.push(l),m.push(c),m.push(h)}for(const e of m)r.disposeIntermediateTensorInfo(e);return f}function TM({x:e,filter:t,convInfo:n,backend:r,bias:s=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:u,filterHeight:l,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=u*l*c,g=p*h,y=[m,g],b=[],x=jD({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),w=jD({inputs:{x:t},backend:r,attrs:{shape:[1,m,ie(t.shape)/m]}});b.push(x),b.push(w);const v=new SM(y,x.shape,n),k=r.runWebGLProgram(v,[x],"float32"),I=jD({inputs:{x:k},backend:r,attrs:{shape:[1,y[0],y[1]]}});b.push(k),b.push(I);const N=null!=s,S=null!=a,C="leakyrelu"===o,T=o?LD(o,!0):null,$=new zD(I.shape,w.shape,[1,g,n.outChannels],!0,!1,N,T,S,C),E=[I,w];if(s&&E.push(s),S&&E.push(a),C){const e=r.makeTensorInfo([],"float32",Cs(i,"float32"));E.push(e),b.push(e)}const A=r.runWebGLProgram($,E,"float32"),R=jD({inputs:{x:A},backend:r,attrs:{shape:f?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});b.push(A);for(const e of b)r.disposeIntermediateTensorInfo(e);return R}const $M={kernelName:Nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dataFormat:u,dilations:l,dimRoundingMode:c}=r,h=rl(u),p=Ku(s.shape,a.shape,i,l,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(je().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])d=TM({x:s,filter:a,convInfo:p,backend:n});else{const e=new IM(p);d=n.runWebGLProgram(e,[s,a],"float32")}else d=CM({x:s,filter:a,convInfo:p,backend:n});const f=jD({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class EM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class AM{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,u=a?1:2,l=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class RM{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${s};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _M{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,s=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${s}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const FM={kernelName:St,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,dataFormat:u,dimRoundingMode:l,filterShape:c}=r,h=rl(u),p=Ku(s.shape,c,i,1,o,l,!1,h),d=new EM(p);return n.runWebGLProgram(d,[s,a],"float32")}};const DM={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{inputShape:i,strides:o,pad:u,dataFormat:l,dimRoundingMode:c}=r,h=rl(l),p=Ku(i,a.shape,o,1,u,c,!1,h),d=new AM(p);return n.runWebGLProgram(d,[s,a],"float32")}};const OM={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=Xu(s.shape,a.shape,i,u,o),c=new NM(l);return n.runWebGLProgram(c,[s,a],"float32")}};const MM={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,pad:o,filterShape:u}=r,l=Xu(s.shape,u,i,1,o),c=new RM(l);return n.runWebGLProgram(c,[s,a],"float32")}};const LM={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{pad:i,strides:o,inputShape:u}=r,l=Xu(u,a.shape,o,1,i),c=new _M(l);return n.runWebGLProgram(c,[s,a],"float32")}},zM=OD({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),BM={kernelName:At,backendName:"webgl",kernelFunc:zM},PM=OD({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),VM={kernelName:Rt,backendName:"webgl",kernelFunc:PM};class WM{constructor(e,t,n,r,s){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,u]=e,[l]=t,[c,h]=n;this.outputShape=[l,c,h,u];const p="bilinear"===r?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${s}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${s}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const UM={kernelName:Ft,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:s,boxes:a,boxInd:i}=t,{cropSize:o,method:u,extrapolationValue:l}=r,c=new WM(s.shape,a.shape,o,u,l);return n.runWebGLProgram(c,[s,a,i],"float32")}};class GM{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const r=e.length,s=t?"0.0":`getX(${jM(r,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${fF(r)} coords = getOutputCoords();\n        int end = ${HM(r,"coords")};\n        float val = ${s};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${HM(r,"coords")} = idx;\n          val += getX(${jM(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function jM(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function HM(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const qM={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,exclusive:i,reverse:o}=r,u=s.shape.length,l=Nc([a],u);let c=s;null!=l&&(c=tO({inputs:{x:s},backend:n,attrs:{perm:l}}));const h=Cc(1,u)[0];if(h!==u-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${s.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=SD({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new GM(c.shape,!1,o),r=[[e]],s=d;d=n.runWebGLProgram(t,[d],d.dtype,r),n.disposeIntermediateTensorInfo(s)}if(i){const e=new GM(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=l){const e=tO({inputs:{x:d},backend:n,attrs:{perm:Sc(l)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}};const KM={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,weights:a}=t,{size:i,binaryOutput:o}=r;if(1===s.shape.length){const e=n.readSync(s.dataId),t=n.readSync(a.dataId),r=vF(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,r)}if(2===s.shape.length){const e=n.bufferSync(s),t=n.bufferSync(a),r=kF(e,t,i,o);return n.makeTensorInfo(r.shape,a.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class XM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const YM={kernelName:Ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockSize:a,dataFormat:i}=r;ne(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=s.shape[0],u="NHWC"===i?s.shape[1]:s.shape[2],l="NHWC"===i?s.shape[2]:s.shape[3],c="NHWC"===i?s.shape[3]:s.shape[1],h=u*a,p=l*a,d=c/(a*a),f=new XM("NHWC"===i?[o,h,p,d]:[o,d,h,p],a,i);return n.runWebGLProgram(f,[s],s.dtype)}};class ZM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,u=e.padInfo.left,l=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${c});\n      const ivec2 pads = ivec2(${o}, ${u});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class JM{constructor(e,t=!1,n=null,r=!1,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.outChannels/e.inChannels,i=e.inHeight,o=e.inWidth,u=e.padInfo.top,l=e.padInfo.left,c=e.strideHeight,h=e.strideWidth,p=e.dilationHeight,d=e.dilationWidth,f=e.filterHeight,m=e.filterWidth,g=m;let y="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<m;e++)y+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;for(let e=0;e<f;e++){for(let e=0;e<m;e++)y+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;y+=`\n        xR = xRCorner + ${e*p};\n        if (xR >=0 && xR < ${i}) {\n      `;for(let t=0;t<(g+1)/2;t++){const n=2*t,r=n*d;if(y+=`\n          xC = xCCorner + ${r};\n          `,1===h){if(n<m&&(l%2==1?(y+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < ${o} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${o}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n              `,y+=1===d&&r>0?`\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < ${o}) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${o}) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                  } else {\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                  }\n                  `):y+=`\n                if (xC >= 0 && xC < ${o} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${o}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xC${n} = xTexelC${n};\n                `,r+1<m)){const e=l%2==0?Z(d):d;d%2==0&&l%2==1||d%2!=0&&l%2!=1?(y+=`\n                  xCOffset = xC + ${l%2} + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < ${o} && xTexelC${n+1}Ready == 0) {\n                    xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= ${o}) {\n                      xTexelC${n+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${n+1}Ready = 1;\n                  }\n                  `,d>1&&(y+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < ${o} && xTexelC${n}Ready == 0) {\n                      xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${n}Ready = 1;\n                    }\n                    `),y+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                  `):y+=1===e?`\n                    xC${n+1} = xTexelC${n};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < ${o} && xTexelC${n+1}Ready == 0) {\n                      xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= ${o}) {\n                        xTexelC${n+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${n+1}Ready = 1;\n                    }\n\n                    xC${n+1} = xTexelC${n+1};\n                    `}}else r<m&&(l%2==1?(y+=`\n                xCOffset = xC + 1 - ${h};\n                if(xCOffset >= 0 && xCOffset < ${o} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= ${o}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${o} && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= ${o}) {\n                    xTexelC${n+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n              `,r+1<m&&(y+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + ${h};\n                  if(xCOffset >= 0 && xCOffset < ${o}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                `)):(y+=`\n                if(xC >= 0 && xC < ${o} && xTexelC${n}Ready == 0) {\n                  xTexelC${n} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= ${o}) {\n                    xTexelC${n}.zw = vec2(0.0);\n                  }\n                  xTexelC${n}Ready = 1;\n                }\n\n                xCOffset = xC + ${h};\n                if(xCOffset >= 0 && xCOffset < ${o} && xTexelC${n+1}Ready == 0) {\n                  xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= ${o}) {\n                    xTexelC${n+1}.zw = vec2(0.);\n                  }\n                  xTexelC${n+1}Ready = 1;\n                }\n\n                xC${n} = vec4(\n                  xTexelC${n}.xy, xTexelC${n+1}.xy);\n              `,r+1<m&&(y+=`\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                `)));n<m&&(y+=`\n            wTexel = getW(${e}, ${r}, d1, q);\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\n          `,r+1<m&&(y+=`\n              wTexel = getW(${e}, ${r+1}, d1, q);\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}y+="\n        }\n      "}let b="",x="";n&&(b=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,x="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${c}, ${h});\n      const ivec2 pads = ivec2(${u}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${y}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}const QM={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u,dimRoundingMode:l}=r;let c=u;null==c&&(c=[1,1]),ne(nl(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=Ku(s.shape,a.shape,i,c,o,l,!0);let p;return p=je().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new JM(h):new ZM(h),n.runWebGLProgram(p,[s,a],"float32")}};class eL{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,s=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${s};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tL{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,s=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${s}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const nL={kernelName:Lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,filterShape:c}=r,h=Ku(s.shape,c,i,o,u,l,!0),p=new eL(h);return n.runWebGLProgram(p,[s,a],"float32")}};const rL={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:a}=t,{strides:i,dilations:o,pad:u,dimRoundingMode:l,inputShape:c}=r,h=Ku(c,a.shape,i,o,u,l,!0),p=new tL(h);return n.runWebGLProgram(p,[s,a],"float32")}};class sL{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const aL={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],a=ie(r.shape),i=jD({inputs:{x:r},backend:n,attrs:{shape:[a]}}),o=new sL(a),u=n.runWebGLProgram(o,[i],i.dtype),l=jD({inputs:{x:u},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),l}};class iL{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:s,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:u,dilationWidth:l}=e,{top:c,left:h}=r;this.userCode=`\n      const ivec2 strides = ivec2(${s}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const oL={kernelName:Pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a}=t,{strides:i,pad:o,dilations:u}=r,l=ju(s.shape,a.shape,i,o,"NHWC",u);let c;const h=new iL(l);c=n.runWebGLProgram(h,[s,a],"float32");const p=jD({inputs:{x:c},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const uL={kernelName:Gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,a=t,{allDims:i,summedDims:o,idDims:u}=uf(s,a.length);cf(i.length,u,a);const{path:l,steps:c}=hf(o,u),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:r}=lf(d,u[t]);let s;pf(e)?s=a[t]:(s=tO({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(s));const i=s.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);ue(s.shape,i)||(s=jD({inputs:{x:s},backend:n,attrs:{shape:i}}),f.push(s)),null===p?p=s:(p=UD({inputs:{a:s,b:p},backend:n}),f.push(p))}e<h-1&&(l[e]>=0&&(p=QD({inputs:{x:p},backend:n,attrs:{axis:l[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},lL=OD({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),cL={kernelName:jt,backendName:"webgl",kernelFunc:lL},hL={kernelName:Ht,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,a=je().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ND("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new ID("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(a,[r,s],r.dtype)}},pL=MD({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:SF}),dL={kernelName:Kt,backendName:"webgl",kernelFunc:pL},fL=OD({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Ud};\n  float a1 = ${Gd};\n  float a2 = ${jd};\n  float a3 = ${Hd};\n  float a4 = ${qd};\n  float a5 = ${Kd};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),mL={kernelName:qt,backendName:"webgl",kernelFunc:fL},gL="return exp(x);",yL=OD({opSnippet:gL,packedOpSnippet:gL,cpuKernelImpl:CF}),bL={kernelName:Xt,backendName:"webgl",kernelFunc:yL};function xL(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let u=s;return s<0&&(ne(-(i+1)<=s,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),u=i+s+1),o.splice(u,0,1),jD({inputs:{x:a},backend:r,attrs:{shape:o}})}const wL={kernelName:Yt,backendName:"webgl",kernelFunc:xL},vL="return exp(x) - 1.0;",kL=OD({opSnippet:vL,packedOpSnippet:vL,cpuKernelImpl:TF}),IL={kernelName:Zt,backendName:"webgl",kernelFunc:kL};class NL{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${r}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${s};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function SL(e,t,n){const r=n.texData.get(e.dataId),s=ie(e.shape),a=e.shape[e.shape.length-1],i=jD({inputs:{x:e},backend:n,attrs:{shape:[s/a,a]}}),o=i.shape,u=new NL("real",o,t),l=new NL("imag",o,t),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:o},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(u,c,"float32"),p=n.runWebGLProgram(l,c,"float32"),d=TD({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=jD({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const CL={kernelName:Jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return SL(r,!1,n)}};class TL{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function $L(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:a}=n;if(a=a||Ee(s),"string"===a){const e=xe(a,ie(r));return e.fill(s),t.makeTensorInfo(r,a,e)}{const e=new TL(r,s),n=[[s]];return t.runWebGLProgram(e,[],a,n)}}const EL={kernelName:Qt,backendName:"webgl",kernelFunc:$L};class AL{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const RL={kernelName:en,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,s=new AL(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},_L="return floor(x);",FL=OD({opSnippet:_L,packedOpSnippet:_L,cpuKernelImpl:$F}),DL={kernelName:tn,backendName:"webgl",kernelFunc:FL},OL=MD({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),ML={kernelName:nn,backendName:"webgl",kernelFunc:OL};class LL{constructor(e){this.variableNames=["A"];const t=O_(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class zL{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=O_(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const BL={kernelName:Yr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:a}=r,i="undefined"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[u,l]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[l,u],h=[l,u,a];(o||i)&&(null==PL&&(PL=document.createElement("canvas").getContext("2d")),PL.canvas.width=u,PL.canvas.height=l,PL.drawImage(s,0,0,u,l),s=PL.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=r_.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),s);const d=je().getBool("WEBGL_PACK")?new zL(h):new LL(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let PL;const VL={kernelName:Qr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=r,m=rl(c),g=Ku(s.shape,a.shape,u,h,l,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(je().getBool("WEBGL_CONV_IM2COL")&&1===s.shape[0])y=TM({x:s,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,r="leakyrelu"===d,u=d?LD(d,!1):null,l=new IM(g,e,u,t,r),c=[s,a];if(i&&c.push(i),o&&c.push(o),r){const e=n.makeTensorInfo([],"float32",Cs(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(l,c,"float32")}else y=CM({x:s,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=jD({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const WL={kernelName:es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:a,bias:i,preluActivationWeights:o}=t,{strides:u,pad:l,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=r,f=[];let m=c;null==m&&(m=[1,1]),ne(nl(u,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`));const g=Ku(s.shape,a.shape,u,m,l,h,!0),y=je().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?LD(p,y):null,x=[s,a],w=null!=i,v=null!=o,k="leakyrelu"===p;if(w&&x.push(i),v&&x.push(o),k){const e=n.makeTensorInfo([],"float32",Cs(d,"float32"));x.push(e),f.push(e)}let I;I=y?new JM(g,w,b,v,k):new ZM(g,w,b,v,k);const N=n.runWebGLProgram(I,x,"float32");return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class UL{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=fF(t.length),s=fF(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const GL={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,a=s.shape,i=a[a.length-1],o=ie(r.shape),[u,l,c,h]=Qi(r,s),p=jD({inputs:{x:s},backend:n,attrs:{shape:[l,i]}}),d=jD({inputs:{x:r},backend:n,attrs:{shape:[ie(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=EF(e,t,r.dtype,l,i,c,h,r.shape,o);return n.makeTensorInfo(u,r.dtype,a.values)}const f=new UL(i,h,[l,c]),m=n.runWebGLProgram(f,[d,p],d.dtype),g=jD({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class jL{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=fF(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("int(getIndices(resRC.x, resRC.z))"):r.push(`${n[t]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function HL(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:a}=t,{axis:i,batchDims:o}=r,u=yf(s,a,ge(i,s.shape)[0],o),l=ie(a.shape),c=[],h=jD({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=jD({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,l/u.batchSize]}});c.push(h),c.push(p);const d=[u.batchSize,u.outerSize,l/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.bufferSync(p),t=n.bufferSync(h),r=AF(t,e,d);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,r.dtype,r.values)}const f=new jL(h.shape,d),m=n.runWebGLProgram(f,[h,p],h.dtype);c.push(m);const g=jD({inputs:{x:m},backend:n,attrs:{shape:u.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}const qL={kernelName:sn,backendName:"webgl",kernelFunc:HL},KL=MD({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:RF,dtype:"bool"}),XL={kernelName:on,backendName:"webgl",kernelFunc:KL},YL=MD({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:_F}),ZL={kernelName:un,backendName:"webgl",kernelFunc:YL};const JL={kernelName:cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return SL(r,!0,n)}},QL=OD({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),ez={kernelName:pn,backendName:"webgl",kernelFunc:QL},tz=OD({opSnippet:"return float(isinf(x));",dtype:"bool"}),nz={kernelName:dn,backendName:"webgl",kernelFunc:tz},rz=OD({opSnippet:"return float(isnan(x));",dtype:"bool"}),sz={kernelName:fn,backendName:"webgl",kernelFunc:rz},az=MD({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:FF,dtype:"bool"}),iz={kernelName:gn,backendName:"webgl",kernelFunc:az},oz=MD({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:DF,dtype:"bool"}),uz={kernelName:yn,backendName:"webgl",kernelFunc:oz};const lz={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:s,num:a}=n,i=OF(r,s,a);return t.makeTensorInfo([i.length],"float32",i)}},cz=OD({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:MF}),hz={kernelName:xn,backendName:"webgl",kernelFunc:cz},pz=OD({opSnippet:"return log(1.0 + x);"}),dz={kernelName:wn,backendName:"webgl",kernelFunc:pz},fz=MD({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),mz={kernelName:vn,backendName:"webgl",kernelFunc:fz},gz=OD({opSnippet:"return float(!(x >= 1.0));"}),yz={kernelName:kn,backendName:"webgl",kernelFunc:gz},bz=MD({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),xz={kernelName:In,backendName:"webgl",kernelFunc:bz};class wz{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class vz{constructor(e,t,n,r,s){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${u})`:1===s?`1.0/(${u})`:`exp(log(${u}) * float(-${s}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const kz={kernelName:Sn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:a,bias:i,alpha:o,beta:u}=r,l=je().getBool("WEBGL_PACK_NORMALIZATION")?new vz(s.shape,a,i,o,u):new wz(s.shape,a,i,o,u);return n.runWebGLProgram(l,[s],s.dtype)}};class Iz{constructor(e,t,n,r,s){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${s})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${s});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Nz={kernelName:Cn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s,y:a,dy:i}=t,{depthRadius:o,bias:u,alpha:l,beta:c}=r,h=new Iz(s.shape,o,u,l,c);return n.runWebGLProgram(h,[s,a,i],s.dtype)}};function Sz(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:a,keepDims:i}=r,o=s.shape.length,u=ge(a,s.shape);let l=u;const c=Nc(l,o),h=null!=c,p=n.shouldExecuteOnCPU([s]);let d=s;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const r=sD(e,s.shape,s.dtype,c,t);d=n.makeTensorInfo(t,s.dtype);n.texData.get(d.dataId).values=r}else d=JD(s,c,n);l=Cc(l.length,o)}Ic("max",l,o);const[f,m]=vc(d.shape,l);let g,y=f;if(i&&(y=kc(f,u)),p){const e=n.texData.get(d.dataId).values,t=LF(e,ie(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,r){const s=ie(t),a=jD({inputs:{x:e},attrs:{shape:[ie(e.shape)/s,s]},backend:r}),i=XD(a,e.dtype,"max",r),o=jD({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const Cz={kernelName:Tn,backendName:"webgl",kernelFunc:Sz},Tz=MD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:zF}),$z={kernelName:$n,backendName:"webgl",kernelFunc:Tz};const Ez={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;F_(s,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:u}=r;ne(nl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const l=Hu(s.shape,a,i,1,o,u);if(1===l.filterWidth&&1===l.filterHeight&&ue(l.inShape,l.outShape))return SD({inputs:{x:s},backend:n});const c=new MO(l,"max",!1);return n.runWebGLProgram(c,[s],s.dtype)}};const Az={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:a,strides:i,pad:o,dataFormat:u,dimRoundingMode:l}=r,c=qu(s.shape,a,i,[1,1,1],o,l,u),h=new LO(c,"max",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class Rz{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,s=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=s-1-e.padInfo.top,o=a-1-e.padInfo.left,u=s*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${s};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _z{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,s=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=u-1-e.padInfo.top,p=l-1-e.padInfo.left,d=o*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${s}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Fz={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a}=t,i=a,{filterSize:o,strides:u,pad:l,dimRoundingMode:c}=r,h=qu(i.shape,o,u,[1,1,1],l,c),p=new LO(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new _z(h),m=n.runWebGLProgram(f,[s,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const Dz={kernelName:An,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:a,output:i}=t,o=a;F_([a,i],"maxPoolGrad");const{filterSize:u,strides:l,pad:c,dimRoundingMode:h}=r,p=Hu(o.shape,u,l,1,c,h),d=new MO(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new Rz(p),g=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const Oz={kernelName:Fn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:s,strides:a,pad:i,includeBatchInIndex:o}=t,u=n;ne(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const l=[1,1];ne(nl(a,l),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${l}'`));const c=Hu(r.shape,s,a,l,i),[h,p]=function(e,t,n,r){let s=new MO(n,"max",!1);const a=r.runWebGLProgram(s,[e],"float32");return s=new MO(n,"max",!0,!0,t),[a,r.runWebGLProgram(s,[e],"float32")]}(r,o,c,u);return[h,p]}};const Mz={kernelName:Dn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:s,axis:a}=t,i=n,o=r.shape.length,u=ge(a,r.shape);let l=u;const c=Nc(l,o),h=null!=c,p=i.shouldExecuteOnCPU([r]),d=[];let f=r;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const n=sD(e,r.shape,r.dtype,c,t);f=i.makeTensorInfo(t,r.dtype);i.texData.get(f.dataId).values=n}else f=JD(r,c,i);d.push(f),l=Cc(l.length,o)}Ic("sum",l,o);const[m,g]=vc(f.shape,l);let y=m;s&&(y=kc(m,u));const b=function(e,t,n,r){const s=ie(t),a=jD({inputs:{x:e},attrs:{shape:[ie(e.shape)/s,s]},backend:r}),i=XD(a,"float32","mean",r),o=jD({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}};const Lz={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=ge(a,s.shape);let l=u;const c=Nc(l,o);let h=s;null!=c&&(h=tO({inputs:{x:s},backend:n,attrs:{perm:c}}),l=Cc(l.length,s.shape.length)),Ic("min",l,o);const[p,d]=vc(h.shape,l),f=jD({inputs:{x:h},backend:n,attrs:{shape:[-1,ie(d)]}}),m=XD(f,f.dtype,"min",n);let g;if(i){g=jD({inputs:{x:m},backend:n,attrs:{shape:kc(p,u)}})}else g=jD({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},zz=MD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:BF}),Bz={kernelName:Mn,backendName:"webgl",kernelFunc:zz};class Pz{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fF(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${s} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class Vz{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fF(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=oD("rc",r),u=oD("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${s} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${s} source = rc;\n        ${s} lt = ${s}(lessThan(source, start));\n        ${s} gte = ${s}(greaterThanEqual(source, end));\n        ${s} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${s} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${o[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[r-2]} += 1;\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${o[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const Wz={kernelName:Ln,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:s,mode:a}=n,i=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Vz(r.shape,s,a):new Pz(r.shape,s,a);return t.runWebGLProgram(i,[r],r.dtype)}},Uz=MD({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Gz={kernelName:zn,backendName:"webgl",kernelFunc:Uz};class jz{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const Hz=MD({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),qz={kernelName:Ut,backendName:"webgl",kernelFunc:Hz},Kz="return a - b;",Xz=MD({opSnippet:Kz,packedOpSnippet:Kz,supportsComplex:!0,cpuKernelImpl:tD}),Yz={kernelName:zr,backendName:"webgl",kernelFunc:Xz};function Zz(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:a}=r,i=ge([a],s.shape),o=Sz({inputs:{x:s},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),u=kc(o.shape,i),l=jD({inputs:{x:o},backend:n,attrs:{shape:u}}),c=Xz({inputs:{a:s,b:l},backend:n}),h=yL({inputs:{x:c},backend:n}),p=QD({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=jD({inputs:{x:p},backend:n,attrs:{shape:u}}),f=Hz({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const Jz={kernelName:Cr,backendName:"webgl",kernelFunc:Zz};const Qz={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{numSamples:a,seed:i,normalized:o}=r,u=o?s:Zz({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),l=u.shape[0],c=u.shape[1],h=new jz(l,c,a),p=[[i]],d=n.runWebGLProgram(h,[u],"int32",p);return o||n.disposeIntermediateTensorInfo(u),d}},eB="return -x;";const tB={kernelName:Vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,s]=VF(e.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,t)}let s;return s=je().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new yD(r.shape,eB):new fD(r.shape,eB),n.runWebGLProgram(s,[r],r.dtype)}},nB=Lp;const rB={kernelName:Un,backendName:"webgl",kernelFunc:function(e){Xd("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=r,l=n.readSync(s.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=nB(l,c,i,o,u);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},sB=zp;const aB={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){Xd("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,padToMaxOutputSize:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=sB(c,h,i,o,u,l);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},iB=Bp;const oB={kernelName:jn,backendName:"webgl",kernelFunc:function(e){Xd("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:l}=r,c=n.readSync(s.dataId),h=n.readSync(a.dataId),p=i,d=o,f=u,m=l,{selectedIndices:g,selectedScores:y}=iB(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class uB{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const lB={kernelName:qn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{depth:a,onValue:i,offValue:o}=r,u=ie(s.shape),l=new uB(u,a,i,o),c=jD({inputs:{x:s},backend:n,attrs:{shape:[u]}}),h=n.runWebGLProgram(l,[c],s.dtype);n.disposeIntermediateTensorInfo(c);const p=jD({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function cB(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=rM({inputs:{input:r},backend:n}),t=cB({inputs:{x:e},backend:n}),s=bM({inputs:{input:r},backend:n}),a=cB({inputs:{x:s},backend:n}),i=TD({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}return $L({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const hB={kernelName:Kr,backendName:"webgl",kernelFunc:cB};const pB={kernelName:Hn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const t=rM({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r}),a=bM({inputs:{input:s},backend:r}),i=cB({inputs:{x:a},backend:r}),o=TD({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(a),r.disposeIntermediateTensorInfo(i),o}return $L({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}};const dB={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return xL({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{re(a,e.shape,"All tensors passed to stack must have matching shapes"),ne(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],u=vM({inputs:t.map((e=>{const t=xL({inputs:{input:e},backend:n,attrs:{dim:s}});return o.push(t),t})),backend:n,attrs:{axis:s}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),u}};class fB{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fF(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${s} start = ${s}(${a});\n      ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${s} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class mB{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,s=fF(r),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=oD("rc",r),u=oD("source",r),l=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${o[r-2]} += 1;\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===r?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${s} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;d+=1===r?"} ":"}}",this.userCode=`\n      const ${s} start = ${s}(${a});\n      const ${s} end = ${s}(${i});\n\n      void main() {\n        ${s} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const gB=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:a,constantValue:i}=r,o=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mB(s.shape,a,i):new fB(s.shape,a,i),u=[[i]];return n.runWebGLProgram(o,[s],s.dtype,u)},yB={kernelName:Xn,backendName:"webgl",kernelFunc:gB},bB=MD({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),xB={kernelName:Zn,backendName:"webgl",kernelFunc:bB};const wB={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:a,keepDims:i}=r,o=s.shape.length,u=[],l=ge(a,s.shape);let c=l;const h=Nc(c,o);let p,d=s;if(null!=h&&(d=tO({inputs:{x:s},backend:n,attrs:{perm:h}}),c=Cc(c.length,o),u.push(d)),Ic("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:r,outDtype:s}=UF(d.shape,d.dtype,e,c);p=n.makeTensorInfo(r,s,t)}else{const[e,t]=vc(d.shape,c),r=ie(t),a=jD({inputs:{x:d},backend:n,attrs:{shape:[-1,r]}}),i=XD(a,ea(s.dtype),"prod",n);p=jD({inputs:{x:i},backend:n,attrs:{shape:e}}),u.push(a),u.push(i)}if(i){u.push(p);const e=kc(p.shape,l);p=jD({inputs:{x:p},backend:n,attrs:{shape:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},vB=e=>{const{backend:t,attrs:n}=e,{start:r,stop:s,step:a,dtype:i}=n,o=GF(r,s,a,i);return t.makeTensorInfo([o.length],i,o)},kB={kernelName:er,backendName:"webgl",kernelFunc:vB},IB=OD({opSnippet:"return 1.0 / x;"}),NB={kernelName:nr,backendName:"webgl",kernelFunc:IB},SB=OD({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),CB={kernelName:rr,backendName:"webgl",kernelFunc:SB},TB=OD({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),$B={kernelName:lr,backendName:"webgl",kernelFunc:TB};class EB{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class AB{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let h;h=s?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const RB={kernelName:or,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=je().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new AB(s.shape,u,l,a,i):new EB(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],"float32")}};class _B{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const FB={kernelName:ur,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new _B(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class DB{constructor(e,t,n,r,s){this.variableNames=["A"],this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],h=r?"0.5":"0.0";let p;p=s?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class OB{constructor(e,t,n,r,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,u]=e;this.outputShape=[a,t,n,u];const l=[r&&t>1?i-1:i,r&&n>1?o-1:o],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],h=r?"0.5":"0.0";let p;p=s?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const MB={kernelName:ar,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:a,halfPixelCenters:i,size:o}=r,[u,l]=o,c=je().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new OB(s.shape,u,l,a,i):new DB(s.shape,u,l,a,i);return n.runWebGLProgram(c,[s],s.dtype)}};class LB{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,s]=t,[,a,i]=e,o=[n&&a>1?r-1:r,n&&i>1?s-1:s],u=[n&&a>1?a-1:a,n&&i>1?i-1:i],l=o[0]/u[0],c=o[1]/u[1],h=1/l,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const zB={kernelName:ir,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s,dy:a}=t,{alignCorners:i}=r,o=new LB(a.shape,s.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class BB{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),s=fF(n);this.userCode=`\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class PB{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=oD("rc",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=fF(n);function o(n){const r=e.map(((r,s)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${s}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(r.slice())};\n          if(${s}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            if(${s}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const VB={kernelName:cr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:a}=r,i=s.shape.length,o=ge(a,s.shape);if(0===i)return SD({inputs:{x:s},backend:n});const u=je().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new PB(s.shape,o):new BB(s.shape,o);return n.runWebGLProgram(u,[s],s.dtype)}};class WB{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let s="";s="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${s}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const UB={kernelName:Zr,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:s,fillValue:a,center:i}=t,o=n,u=new WB(r.shape,a),[l,c]=Od(i,r.shape[1],r.shape[2]),h=[[l,c,Math.sin(s),Math.cos(s)]];return o.runWebGLProgram(u,[r],r.dtype,h)}},GB=OD({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),jB={kernelName:hr,backendName:"webgl",kernelFunc:GB},HB=OD({opSnippet:"return inversesqrt(x);",cpuKernelImpl:jF}),qB={kernelName:pr,backendName:"webgl",kernelFunc:HB};class KB{constructor(e,t,n,r,s,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=fF(s.length),u=fF(a.length);let l="";1===n?l="i":2===n&&(l="i, j");const c=`getIndices(${l})`;let h="";1===r?h="i":2===r&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${s});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const XB={kernelName:dr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:a}=t,{shape:i}=r,{sliceRank:o,numUpdates:u,sliceSize:l,strides:c,outputSize:h}=no(0,s,i),p=[h/l,l];if(0===h)return n.makeTensorInfo(i,s.dtype);const d=jD({inputs:{x:s},backend:n,attrs:{shape:[u,o]}}),f=jD({inputs:{x:a},backend:n,attrs:{shape:[u,l]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new KB(u,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=jD({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class YB{constructor(e,t,n){let r,s;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&a.push(`${n[r]}`);r=a.join(),s=i.join()}const a=fF(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${s}));\n        } else {\n          setOutput(getB(${s}));\n        }\n      }\n    `}}const ZB={kernelName:fr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:a}=t,i=new YB(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(i,[r,s,a],Qs(s.dtype,a.dtype))}},JB=OD({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Vd};\n  float scale = ${Wd};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),QB={kernelName:mr,backendName:"webgl",kernelFunc:JB},eP=OD({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),tP={kernelName:wr,backendName:"webgl",kernelFunc:eP},nP=OD({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),rP={kernelName:xr,backendName:"webgl",kernelFunc:nP},sP=OD({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),aP={kernelName:yr,backendName:"webgl",kernelFunc:sP},iP=OD({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),oP={kernelName:br,backendName:"webgl",kernelFunc:iP},uP=OD({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),lP={kernelName:vr,backendName:"webgl",kernelFunc:uP},cP={kernelName:Nr,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:a,paddings:i}=r;ne(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),u=[[0,0]];u.push(...i);for(let e=1+a.length;e<s.shape.length;++e)u.push([0,0]);const l=[],c=gB({inputs:{x:s},backend:n,attrs:{paddings:u,constantValue:0}}),h=Md(c.shape,a,o,!1),p=Ld(h.length,a.length,!1),d=zd(c.shape,a,o,!1),f=jD({inputs:{x:c},backend:n,attrs:{shape:h}}),m=tO({inputs:{x:f},backend:n,attrs:{perm:p}}),g=jD({inputs:{x:m},backend:n,attrs:{shape:d}});return l.push(c),l.push(f),l.push(m),l.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const hP={kernelName:Tr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:s,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\n         ${s.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(r.dataId),u=n.readSync(s.dataId),l=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=KF(o,r.shape,r.dtype,u,s.dtype,l,c);return[n.makeTensorInfo(p,r.dtype,h),n.makeTensorInfo([p[0]],s.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const pP={kernelName:$r,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:s,newShape:a}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(s.dataId)),o=n.readSync(r.dataId),u=Array.from(n.readSync(a.dataId)),[l,c,h]=XF(o,r.shape,r.dtype,i,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const dP={kernelName:Er,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=YF(i,r.shape,r.dtype,o,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const fP={kernelName:Ar,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:s,segmentIds:a}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${s.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(r.dataId),o=n.readSync(s.dataId),u=n.readSync(a.dataId),[l,c]=YF(i,r.shape,r.dtype,o,u);return n.makeTensorInfo(c,r.dtype,l)}};const mP={kernelName:Rr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:a,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:u,numUpdates:l,strides:c,outputSize:h}=no(0,s,o),p=new KB(l,u,s.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,s,i],a.dtype),f=jD({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}};const gP={kernelName:Sr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:a,axis:i}=r,o=ge(i,s.shape)[0],u=ff(s,a,o),l=s.shape.length,c=new Array(l).fill(0),h=s.shape.slice();return u.map((e=>{const t=[...h];t[o]=e;const r=ZO({inputs:{x:s},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,r}))}},yP=OD({opSnippet:"return sqrt(x);"}),bP={kernelName:kr,backendName:"webgl",kernelFunc:yP},xP=OD({opSnippet:"return x * x;"}),wP={kernelName:Fr,backendName:"webgl",kernelFunc:xP},vP="return (a - b) * (a - b);",kP=MD({opSnippet:vP,packedOpSnippet:vP}),IP={kernelName:_r,backendName:"webgl",kernelFunc:kP};const NP={kernelName:Xr,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:r}=e,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new fD(r.shape,s);return n.runWebGLProgram(a,[r],r.dtype)}};class SP{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,s=fF(n.length),a=fF(n.length);let i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${s} begin = ${s}(${e});\n      ${s} strides = ${s}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const CP={kernelName:Dr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:a,end:i,strides:o,beginMask:u,endMask:l,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=r,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=xo(s.shape,a,i,o,u,l,c,h,p),x=jD({inputs:{x:s},backend:n,attrs:{shape:y}});let w;if(d){const e=ZO({inputs:{x:x},backend:n,attrs:{begin:f,size:g}});w=jD({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,s.dtype,[]);else{if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=vi(x.shape,x.dtype,e),r=ZF(b,t,m,f);w=n.makeTensorInfo(b,x.dtype,r.values)}else{const e=new SP(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}}const v=jD({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),v}};const TP={kernelName:Or,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:s,nGramWidths:a,leftPad:i,rightPad:o,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=JF(p,d,s,a,i,o,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const $P={kernelName:Mr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:s}=r,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),u=n.readSync(i.dataId)[0],[l,c,h]=QF(o,u,s),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const EP={kernelName:Lr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:s}=r,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(s<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=eD(i,s);return n.makeTensorInfo(a.shape,"int32",o)}},AP=OD({opSnippet:"return tan(x);"}),RP={kernelName:Br,backendName:"webgl",kernelFunc:AP},_P=OD({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),FP={kernelName:Pr,backendName:"webgl",kernelFunc:_P};class DP{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=fF(this.rank),s=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}function OP(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:a}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>Rs(e))):e,r=vi(s.shape,s.dtype,t),i=nD(r,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new DP(s.shape,a);return n.runWebGLProgram(i,[s],s.dtype)}const MP={kernelName:Vr,backendName:"webgl",kernelFunc:OP};class LP{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class zP{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function BP(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function PP(e){let t=1;for(;t<e;)t*=2;return t}const VP={kernelName:Wr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:a,sorted:i}=r,o=je().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=je().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=s.shape,c=l[l.length-1];if(n.shouldExecuteOnCPU([s])||c<o||a>u){const e=n.readSync(s.dataId),[t,r]=rD(e,l,s.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===a)return l[l.length-1]=0,[n.makeTensorInfo(l,s.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===c)return[s,$L({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const h=n.texData.get(s.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(s):s,f=ie(l)/c,m=jD({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&BP(n,d);const g=PP(a),y=PP(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,r)=>{const s=x(),a=new LP(r),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(a,s,"int32",i),BP(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),r=new zP([f,e/2]),s=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(r,t,"int32",s),BP(n,a);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,b.shape)}let v=b;b=ZO({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),BP(n,v);let k=HL({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});BP(n,m);const I=l.slice(0,-1);I.push(a),v=b,b=jD({inputs:{x:b},attrs:{shape:I},backend:n}),BP(n,v);const N=k;return k=jD({inputs:{x:k},attrs:{shape:I},backend:n}),BP(n,N),[k,b]}};class WP{constructor(e,t,n,r,s,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(r){case"constant":o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4;break;default:o=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${s});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${s});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const UP={kernelName:Ur,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:s,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:u,outputShape:l}=r,[c,h,p,d]=s.shape,[f,m]=null!=l?l:[h,p],g=new WP(h,p,i,o,u,[c,f,m,d]);return n.runWebGLProgram(g,[s,a],"float32")}};const GP={kernelName:jr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:a}=t;F_(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=r.readSync(a.dataId),{outputValues:o,outputShape:u,indices:l}=aD(i,s,a.shape,a.dtype);return[r.makeTensorInfo(u,a.dtype,o),r.makeTensorInfo([l.length],"int32",l)]}};const jP={kernelName:Hr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:s}=t;let{axis:a}=r;a<0&&(a+=s.shape.length);const i=s,o=i.shape.length,u=s.shape[a],l=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(l[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(u);for(let e=0;e<f.length;e++){p[a]=e;const t=ZO({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),r=jD({inputs:{x:t},backend:n,attrs:{shape:l}});f[e]=r,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class HP{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,s=e.inSize,a=e.numSegments,i=a*Math.ceil(s/n);this.outputShape=[r,i];const o=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return initializationValue;\n        }\n      `);let h="";s%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const qP=[kz,Nz,sO,iO,uO,cO,dO,gO,yO,bO,NO,SO,TO,EO,FO,RO,OO,BO,zO,WO,UO,GO,qO,QO,eM,aM,uM,hM,fM,$D,kM,FM,DM,$M,MM,LM,OM,BM,VM,UM,qM,KM,YM,nL,rL,QM,aL,oL,uL,cL,hL,dL,mL,bL,wL,IL,CL,EL,RL,DL,ML,BL,VL,WL,GL,qL,XL,ZL,CD,JL,xM,ez,nz,sz,RD,iz,uz,lz,dz,hz,mz,yz,xz,Cz,Az,Ez,Fz,Dz,Oz,$z,Mz,Lz,Bz,Wz,Gz,Qz,GD,tB,rB,aB,oB,nM,lB,pB,dB,yB,xB,DD,wB,kB,sM,qz,NB,$B,CB,HD,RB,FB,MB,zB,VB,UB,jB,qB,XB,ZB,QB,tP,rP,aP,oP,JO,Jz,lP,cP,hP,pP,dP,fP,mP,gP,bP,wP,IP,NP,CP,TP,$P,EP,Yz,eO,RP,FP,MP,VP,UP,nO,GP,jP,{kernelName:qr,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:a}=t,{numSegments:i}=r,o=s.shape.length,u=[];let l=0;const c=Nc([l],o);let h=s;null!=c&&(h=tO({inputs:{x:s},backend:n,attrs:{perm:c}}),u.push(h),l=Cc(1,o)[0]);const p=gf(h.shape,l,i),d=ie([h.shape[l]]),f=jD({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});u.push(f);const m=ea(s.dtype),g=(e,t,r,s,a)=>{const i=e.shape[0],o=e.shape[1],l=mf(o,a),c=new HP({windowSize:l,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,r],s);if(u.push(h),h.shape[1]===a)return h;const p=vB({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=OP({inputs:{x:p},backend:n,attrs:{reps:[o/l]}});u.push(p),u.push(d);return g(h,t,d,s,a)},y=jD({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){u.push(y);const e=Sc(c);b=tO({inputs:{x:b},backend:n,attrs:{perm:e}})}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},hB];for(const e of qP)is(e);const KP={"tfjs-core":Do,"tfjs-backend-cpu":"3.8.0","tfjs-backend-webgl":"3.8.0","tfjs-data":QS,"tfjs-layers":Xb,"tfjs-converter":WN,tfjs:"3.8.0"}},448:function(e,t,n){let r,s=n(7045),a=window.AudioContext||window.webkitAudioContext,i=e=>{let t=new Event("error");return t.data=new Error("Wrong state for "+e),t};class o{constructor(e,t=null){this.stream=e,this.config=t,this.state="inactive",this.em=document.createDocumentFragment(),this.encoder=(e=>{let t=e.toString().replace(/^(\(\)\s*=>|function\s*\(\))\s*{/,"").replace(/}$/,""),n=new Blob([t]);return new Worker(URL.createObjectURL(n))})(o.encoder);let n=this;this.encoder.addEventListener("message",(e=>{let t=new Event("dataavailable");t.data=new Blob([e.data],{type:n.mimeType}),n.em.dispatchEvent(t),"inactive"===n.state&&n.em.dispatchEvent(new Event("stop"))}))}start(e){if("inactive"!==this.state)return this.em.dispatchEvent(i("start"));this.state="recording",r||(r=new a(this.config)),this.clone=this.stream.clone(),this.input=r.createMediaStreamSource(this.clone),this.processor=r.createScriptProcessor(2048,1,1),this.encoder.postMessage(["init",r.sampleRate]),this.processor.onaudioprocess=e=>{"recording"===this.state&&this.encoder.postMessage(["encode",e.inputBuffer.getChannelData(0)])},this.input.connect(this.processor),this.processor.connect(r.destination),this.em.dispatchEvent(new Event("start")),e&&(this.slicing=setInterval((()=>{"recording"===this.state&&this.requestData()}),e))}stop(){return"inactive"===this.state?this.em.dispatchEvent(i("stop")):(this.requestData(),this.state="inactive",this.clone.getTracks().forEach((e=>{e.stop()})),this.processor.disconnect(),this.input.disconnect(),clearInterval(this.slicing))}pause(){return"recording"!==this.state?this.em.dispatchEvent(i("pause")):(this.state="paused",this.em.dispatchEvent(new Event("pause")))}resume(){return"paused"!==this.state?this.em.dispatchEvent(i("resume")):(this.state="recording",this.em.dispatchEvent(new Event("resume")))}requestData(){return"inactive"===this.state?this.em.dispatchEvent(i("requestData")):this.encoder.postMessage(["dump",r.sampleRate])}addEventListener(...e){this.em.addEventListener(...e)}removeEventListener(...e){this.em.removeEventListener(...e)}dispatchEvent(...e){this.em.dispatchEvent(...e)}}o.prototype.mimeType="audio/wav",o.isTypeSupported=e=>o.prototype.mimeType===e,o.notSupported=!navigator.mediaDevices||!a,o.encoder=s,e.exports=o},7045:function(e){e.exports=()=>{let e=[];onmessage=t=>{"encode"===t.data[0]?function(t){let n=t.length,r=new Uint8Array(2*n);for(let e=0;e<n;e++){let n=2*e,s=t[e];s>1?s=1:s<-1&&(s=-1),s*=32768,r[n]=s,r[n+1]=s>>8}e.push(r)}(t.data[1]):"dump"===t.data[0]&&function(t){let n=e.length?e[0].length:0,r=e.length*n,s=new Uint8Array(44+r),a=new DataView(s.buffer);a.setUint32(0,1380533830,!1),a.setUint32(4,36+r,!0),a.setUint32(8,1463899717,!1),a.setUint32(12,1718449184,!1),a.setUint32(16,16,!0),a.setUint16(20,1,!0),a.setUint16(22,1,!0),a.setUint32(24,t,!0),a.setUint32(28,2*t,!0),a.setUint16(32,2,!0),a.setUint16(34,16,!0),a.setUint32(36,1684108385,!1),a.setUint32(40,r,!0);for(let t=0;t<e.length;t++)s.set(e[t],t*n+44);e=[],postMessage(s.buffer,[s.buffer])}(t.data[1])}}},9742:function(e,t){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,a=u(e),i=a[0],o=a[1],l=new s(function(e,t,n){return 3*(t+n)/4-n}(0,i,o)),c=0,h=o>0?i-4:i;for(n=0;n<h;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],l[c++]=t>>16&255,l[c++]=t>>8&255,l[c++]=255&t;2===o&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,l[c++]=255&t);1===o&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,l[c++]=t>>8&255,l[c++]=255&t);return l},t.fromByteArray=function(e){for(var t,r=e.length,s=r%3,a=[],i=16383,o=0,u=r-s;o<u;o+=i)a.push(l(e,o,o+i>u?u:o+i));1===s?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===s&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],r=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,o=a.length;i<o;++i)n[i]=a[i],r[a.charCodeAt(i)]=i;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,r){for(var s,a,i=[],o=t;o<r;o+=3)s=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),i.push(n[(a=s)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return i.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},746:function(e,t){"use strict";function n(e){var t=32;return(e&=-e)&&t--,65535&e&&(t-=16),16711935&e&&(t-=8),252645135&e&&(t-=4),858993459&e&&(t-=2),1431655765&e&&(t-=1),t}t.INT_BITS=32,t.INT_MAX=2147483647,t.INT_MIN=-1<<31,t.sign=function(e){return(e>0)-(e<0)},t.abs=function(e){var t=e>>31;return(e^t)-t},t.min=function(e,t){return t^(e^t)&-(e<t)},t.max=function(e,t){return e^(e^t)&-(e<t)},t.isPow2=function(e){return!(e&e-1||!e)},t.log2=function(e){var t,n;return t=(e>65535)<<4,t|=n=((e>>>=t)>255)<<3,t|=n=((e>>>=n)>15)<<2,(t|=n=((e>>>=n)>3)<<1)|(e>>>=n)>>1},t.log10=function(e){return e>=1e9?9:e>=1e8?8:e>=1e7?7:e>=1e6?6:e>=1e5?5:e>=1e4?4:e>=1e3?3:e>=100?2:e>=10?1:0},t.popCount=function(e){return 16843009*((e=(858993459&(e-=e>>>1&1431655765))+(e>>>2&858993459))+(e>>>4)&252645135)>>>24},t.countTrailingZeros=n,t.nextPow2=function(e){return e+=0===e,--e,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,(e|=e>>>16)+1},t.prevPow2=function(e){return e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,(e|=e>>>16)-(e>>>1)},t.parity=function(e){return e^=e>>>16,e^=e>>>8,e^=e>>>4,27030>>>(e&=15)&1};var r=new Array(256);!function(e){for(var t=0;t<256;++t){var n=t,r=t,s=7;for(n>>>=1;n;n>>>=1)r<<=1,r|=1&n,--s;e[t]=r<<s&255}}(r),t.reverse=function(e){return r[255&e]<<24|r[e>>>8&255]<<16|r[e>>>16&255]<<8|r[e>>>24&255]},t.interleave2=function(e,t){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e&=65535)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t&=65535)|t<<8))|t<<4))|t<<2))|t<<1))<<1},t.deinterleave2=function(e,t){return(e=65535&((e=16711935&((e=252645135&((e=858993459&((e=e>>>t&1431655765)|e>>>1))|e>>>2))|e>>>4))|e>>>16))<<16>>16},t.interleave3=function(e,t,n){return e=1227133513&((e=3272356035&((e=251719695&((e=4278190335&((e&=1023)|e<<16))|e<<8))|e<<4))|e<<2),(e|=(t=1227133513&((t=3272356035&((t=251719695&((t=4278190335&((t&=1023)|t<<16))|t<<8))|t<<4))|t<<2))<<1)|(n=1227133513&((n=3272356035&((n=251719695&((n=4278190335&((n&=1023)|n<<16))|n<<8))|n<<4))|n<<2))<<2},t.deinterleave3=function(e,t){return(e=1023&((e=4278190335&((e=251719695&((e=3272356035&((e=e>>>t&1227133513)|e>>>2))|e>>>4))|e>>>8))|e>>>16))<<22>>22},t.nextCombination=function(e){var t=e|e-1;return t+1|(~t&-~t)-1>>>n(e)+1}},8764:function(e,t,n){"use strict";const r=n(9742),s=n(645),a="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.lW=u,t.h2=50;const i=2147483647;function o(e){if(e>i)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return l(e,t,n)}function l(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|m(e,t);let r=o(n);const s=r.write(e,t);s!==n&&(r=r.slice(0,s));return r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){const t=new Uint8Array(e);return d(t.buffer,t.byteOffset,t.byteLength)}return p(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer))return d(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return d(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return u.from(r,t,n);const s=function(e){if(u.isBuffer(e)){const t=0|f(e.length),n=o(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Y(e.length)?o(0):p(e);if("Buffer"===e.type&&Array.isArray(e.data))return p(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return c(e),o(e<0?0:0|f(e))}function p(e){const t=e.length<0?0:0|f(e.length),n=o(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function d(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,u.prototype),r}function f(e){if(e>=i)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i.toString(16)+" bytes");return 0|e}function m(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return H(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(e).length;default:if(s)return r?-1:H(e).length;t=(""+t).toLowerCase(),s=!0}}function g(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return A(this,t,n);case"utf8":case"utf-8":return C(this,t,n);case"ascii":return $(this,t,n);case"latin1":case"binary":return E(this,t,n);case"base64":return S(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function y(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function b(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Y(n=+n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:x(e,t,n,r,s);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):x(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function x(e,t,n,r,s){let a,i=1,o=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;i=2,o/=2,u/=2,n/=2}function l(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(s){let r=-1;for(a=n;a<o;a++)if(l(e,a)===l(t,-1===r?0:a-r)){if(-1===r&&(r=a),a-r+1===u)return r*i}else-1!==r&&(a-=a-r),r=-1}else for(n+u>o&&(n=o-u),a=n;a>=0;a--){let n=!0;for(let r=0;r<u;r++)if(l(e,a+r)!==l(t,r)){n=!1;break}if(n)return a}return-1}function w(e,t,n,r){n=Number(n)||0;const s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;const a=t.length;let i;for(r>a/2&&(r=a/2),i=0;i<r;++i){const r=parseInt(t.substr(2*i,2),16);if(Y(r))return i;e[n+i]=r}return i}function v(e,t,n,r){return K(H(t,e.length-n),e,n,r)}function k(e,t,n,r){return K(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function I(e,t,n,r){return K(q(t),e,n,r)}function N(e,t,n,r){return K(function(e,t){let n,r,s;const a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),r=n>>8,s=n%256,a.push(s),a.push(r);return a}(t,e.length-n),e,n,r)}function S(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function C(e,t,n){n=Math.min(e.length,n);const r=[];let s=t;for(;s<n;){const t=e[s];let a=null,i=t>239?4:t>223?3:t>191?2:1;if(s+i<=n){let n,r,o,u;switch(i){case 1:t<128&&(a=t);break;case 2:n=e[s+1],128==(192&n)&&(u=(31&t)<<6|63&n,u>127&&(a=u));break;case 3:n=e[s+1],r=e[s+2],128==(192&n)&&128==(192&r)&&(u=(15&t)<<12|(63&n)<<6|63&r,u>2047&&(u<55296||u>57343)&&(a=u));break;case 4:n=e[s+1],r=e[s+2],o=e[s+3],128==(192&n)&&128==(192&r)&&128==(192&o)&&(u=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&o,u>65535&&u<1114112&&(a=u))}}null===a?(a=65533,i=1):a>65535&&(a-=65536,r.push(a>>>10&1023|55296),a=56320|1023&a),r.push(a),s+=i}return function(e){const t=e.length;if(t<=T)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=T));return n}(r)}u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,n){return l(e,t,n)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,n){return function(e,t,n){return c(e),e<=0?o(e):void 0!==t?"string"==typeof n?o(e).fill(t,n):o(e).fill(t):o(e)}(e,t,n)},u.allocUnsafe=function(e){return h(e)},u.allocUnsafeSlow=function(e){return h(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(X(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let s=0,a=Math.min(n,r);s<a;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const r=u.allocUnsafe(t);let s=0;for(n=0;n<e.length;++n){let t=e[n];if(X(t,Uint8Array))s+t.length>r.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else{if(!u.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(r,s)}s+=t.length}return r},u.byteLength=m,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?C(this,0,e):g.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e="";const n=t.h2;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},a&&(u.prototype[a]=u.prototype.inspect),u.prototype.compare=function(e,t,n,r,s){if(X(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(s>>>=0)-(r>>>=0),i=(n>>>=0)-(t>>>=0);const o=Math.min(a,i),l=this.slice(r,s),c=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==c[e]){a=l[e],i=c[e];break}return a<i?-1:i<a?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return b(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return b(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}const s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let a=!1;for(;;)switch(r){case"hex":return w(this,e,t,n);case"utf8":case"utf-8":return v(this,e,t,n);case"ascii":case"latin1":case"binary":return k(this,e,t,n);case"base64":return I(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return N(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const T=4096;function $(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function E(e,t,n){let r="";n=Math.min(e.length,n);for(let s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function A(e,t,n){const r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let s="";for(let r=t;r<n;++r)s+=Z[e[r]];return s}function R(e,t,n){const r=e.slice(t,n);let s="";for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}function _(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function F(e,t,n,r,s,a){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<a)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function D(e,t,n,r,s){W(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,n}function O(e,t,n,r,s){W(t,r,s,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=i,i>>=8,e[n+2]=i,i>>=8,e[n+1]=i,i>>=8,e[n]=i,n+8}function M(e,t,n,r,s,a){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(e,t,n,r,a){return t=+t,n>>>=0,a||M(e,0,n,4),s.write(e,t,n,r,23,4),n+4}function z(e,t,n,r,a){return t=+t,n>>>=0,a||M(e,0,n,8),s.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const r=this.subarray(e,t);return Object.setPrototypeOf(r,u.prototype),r},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||_(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return r},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||_(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||_(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||_(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||_(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||_(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||_(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=J((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,s=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(r)+(BigInt(s)<<BigInt(32))})),u.prototype.readBigUInt64BE=J((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=t*2**24+65536*this[++e]+256*this[++e]+this[++e],s=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(s)})),u.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||_(e,t,this.length);let r=this[e],s=1,a=0;for(;++a<t&&(s*=256);)r+=this[e+a]*s;return s*=128,r>=s&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||_(e,t,this.length);let r=t,s=1,a=this[e+--r];for(;r>0&&(s*=256);)a+=this[e+--r]*s;return s*=128,a>=s&&(a-=Math.pow(2,8*t)),a},u.prototype.readInt8=function(e,t){return e>>>=0,t||_(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||_(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){e>>>=0,t||_(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||_(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||_(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=J((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=J((function(e){U(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||G(e,this.length-8);const r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||_(e,4,this.length),s.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||_(e,4,this.length),s.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||_(e,8,this.length),s.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||_(e,8,this.length),s.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){F(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=1,a=0;for(this[t]=255&e;++a<n&&(s*=256);)this[t+a]=e/s&255;return t+n},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){F(this,e,t,n,Math.pow(2,8*n)-1,0)}let s=n-1,a=1;for(this[t+s]=255&e;--s>=0&&(a*=256);)this[t+s]=e/a&255;return t+n},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=J((function(e,t=0){return D(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=J((function(e,t=0){return O(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);F(this,e,t,n,r-1,-r)}let s=0,a=1,i=0;for(this[t]=255&e;++s<n&&(a*=256);)e<0&&0===i&&0!==this[t+s-1]&&(i=1),this[t+s]=(e/a>>0)-i&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){const r=Math.pow(2,8*n-1);F(this,e,t,n,r-1,-r)}let s=n-1,a=1,i=0;for(this[t+s]=255&e;--s>=0&&(a*=256);)e<0&&0===i&&0!==this[t+s+1]&&(i=1),this[t+s]=(e/a>>0)-i&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||F(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=J((function(e,t=0){return D(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=J((function(e,t=0){return O(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(e,t,n){return L(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return L(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return z(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return z(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);const s=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),s},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){const t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{const a=u.isBuffer(e)?e:u.from(e,r),i=a.length;if(0===i)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=a[s%i]}return this};const B={};function P(e,t,n){B[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function V(e){let t="",n=e.length;const r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function W(e,t,n,r,s,a){if(e>n||e<t){const r="bigint"==typeof t?"n":"";let s;throw s=a>3?0===t||t===BigInt(0)?`>= 0${r} and < 2${r} ** ${8*(a+1)}${r}`:`>= -(2${r} ** ${8*(a+1)-1}${r}) and < 2 ** ${8*(a+1)-1}${r}`:`>= ${t}${r} and <= ${n}${r}`,new B.ERR_OUT_OF_RANGE("value",s,e)}!function(e,t,n){U(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||G(t,e.length-(n+1))}(r,s,a)}function U(e,t){if("number"!=typeof e)throw new B.ERR_INVALID_ARG_TYPE(t,"number",e)}function G(e,t,n){if(Math.floor(e)!==e)throw U(e,n),new B.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new B.ERR_BUFFER_OUT_OF_BOUNDS;throw new B.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}P("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),P("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),P("ERR_OUT_OF_RANGE",(function(e,t,n){let r=`The value of "${e}" is out of range.`,s=n;return Number.isInteger(n)&&Math.abs(n)>2**32?s=V(String(n)):"bigint"==typeof n&&(s=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(s=V(s)),s+="n"),r+=` It must be ${t}. Received ${s}`,r}),RangeError);const j=/[^+/0-9A-Za-z-_]/g;function H(e,t){let n;t=t||1/0;const r=e.length;let s=null;const a=[];for(let i=0;i<r;++i){if(n=e.charCodeAt(i),n>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===r){(t-=3)>-1&&a.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&a.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function q(e){return r.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function K(e,t,n,r){let s;for(s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Y(e){return e!=e}const Z=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const r=16*n;for(let s=0;s<16;++s)t[r+s]=e[n]+e[s]}return t}();function J(e){return"undefined"==typeof BigInt?Q:e}function Q(){throw new Error("BigInt not supported")}},6239:function(e,t,n){"use strict";var r=n(5081);function s(){this.argTypes=[],this.shimArgs=[],this.arrayArgs=[],this.arrayBlockIndices=[],this.scalarArgs=[],this.offsetArgs=[],this.offsetArgIndex=[],this.indexArgs=[],this.shapeArgs=[],this.funcName="",this.pre=null,this.body=null,this.post=null,this.debug=!1}e.exports=function(e){var t=new s;t.pre=e.pre,t.body=e.body,t.post=e.post;var n=e.args.slice(0);t.argTypes=n;for(var a=0;a<n.length;++a){var i=n[a];if("array"===i||"object"==typeof i&&i.blockIndices){if(t.argTypes[a]="array",t.arrayArgs.push(a),t.arrayBlockIndices.push(i.blockIndices?i.blockIndices:0),t.shimArgs.push("array"+a),a<t.pre.args.length&&t.pre.args[a].count>0)throw new Error("cwise: pre() block may not reference array args");if(a<t.post.args.length&&t.post.args[a].count>0)throw new Error("cwise: post() block may not reference array args")}else if("scalar"===i)t.scalarArgs.push(a),t.shimArgs.push("scalar"+a);else if("index"===i){if(t.indexArgs.push(a),a<t.pre.args.length&&t.pre.args[a].count>0)throw new Error("cwise: pre() block may not reference array index");if(a<t.body.args.length&&t.body.args[a].lvalue)throw new Error("cwise: body() block may not write to array index");if(a<t.post.args.length&&t.post.args[a].count>0)throw new Error("cwise: post() block may not reference array index")}else if("shape"===i){if(t.shapeArgs.push(a),a<t.pre.args.length&&t.pre.args[a].lvalue)throw new Error("cwise: pre() block may not write to array shape");if(a<t.body.args.length&&t.body.args[a].lvalue)throw new Error("cwise: body() block may not write to array shape");if(a<t.post.args.length&&t.post.args[a].lvalue)throw new Error("cwise: post() block may not write to array shape")}else{if("object"!=typeof i||!i.offset)throw new Error("cwise: Unknown argument type "+n[a]);t.argTypes[a]="offset",t.offsetArgs.push({array:i.array,offset:i.offset}),t.offsetArgIndex.push(a)}}if(t.arrayArgs.length<=0)throw new Error("cwise: No array arguments specified");if(t.pre.args.length>n.length)throw new Error("cwise: Too many arguments in pre() block");if(t.body.args.length>n.length)throw new Error("cwise: Too many arguments in body() block");if(t.post.args.length>n.length)throw new Error("cwise: Too many arguments in post() block");return t.debug=!!e.printCode||!!e.debug,t.funcName=e.funcName||"cwise",t.blockSize=e.blockSize||64,r(t)}},1984:function(e,t,n){"use strict";var r=n(8706);function s(e,t,n){var r,s,a=e.length,i=t.arrayArgs.length,o=t.indexArgs.length>0,u=[],l=[],c=0,h=0;for(r=0;r<a;++r)l.push(["i",r,"=0"].join(""));for(s=0;s<i;++s)for(r=0;r<a;++r)h=c,c=e[r],0===r?l.push(["d",s,"s",r,"=t",s,"p",c].join("")):l.push(["d",s,"s",r,"=(t",s,"p",c,"-s",h,"*t",s,"p",h,")"].join(""));for(l.length>0&&u.push("var "+l.join(",")),r=a-1;r>=0;--r)c=e[r],u.push(["for(i",r,"=0;i",r,"<s",c,";++i",r,"){"].join(""));for(u.push(n),r=0;r<a;++r){for(h=c,c=e[r],s=0;s<i;++s)u.push(["p",s,"+=d",s,"s",r].join(""));o&&(r>0&&u.push(["index[",h,"]-=s",h].join("")),u.push(["++index[",c,"]"].join(""))),u.push("}")}return u.join("\n")}function a(e,t,n){for(var r=e.body,s=[],a=[],i=0;i<e.args.length;++i){var o=e.args[i];if(!(o.count<=0)){var u=new RegExp(o.name,"g"),l="",c=t.arrayArgs.indexOf(i);switch(t.argTypes[i]){case"offset":var h=t.offsetArgIndex.indexOf(i);c=t.offsetArgs[h].array,l="+q"+h;case"array":l="p"+c+l;var p="l"+i,d="a"+c;if(0===t.arrayBlockIndices[c])1===o.count?"generic"===n[c]?o.lvalue?(s.push(["var ",p,"=",d,".get(",l,")"].join("")),r=r.replace(u,p),a.push([d,".set(",l,",",p,")"].join(""))):r=r.replace(u,[d,".get(",l,")"].join("")):r=r.replace(u,[d,"[",l,"]"].join("")):"generic"===n[c]?(s.push(["var ",p,"=",d,".get(",l,")"].join("")),r=r.replace(u,p),o.lvalue&&a.push([d,".set(",l,",",p,")"].join(""))):(s.push(["var ",p,"=",d,"[",l,"]"].join("")),r=r.replace(u,p),o.lvalue&&a.push([d,"[",l,"]=",p].join("")));else{for(var f=[o.name],m=[l],g=0;g<Math.abs(t.arrayBlockIndices[c]);g++)f.push("\\s*\\[([^\\]]+)\\]"),m.push("$"+(g+1)+"*t"+c+"b"+g);if(u=new RegExp(f.join(""),"g"),l=m.join("+"),"generic"===n[c])throw new Error("cwise: Generic arrays not supported in combination with blocks!");r=r.replace(u,[d,"[",l,"]"].join(""))}break;case"scalar":r=r.replace(u,"Y"+t.scalarArgs.indexOf(i));break;case"index":r=r.replace(u,"index");break;case"shape":r=r.replace(u,"shape")}}}return[s.join("\n"),r,a.join("\n")].join("\n").trim()}function i(e){for(var t=new Array(e.length),n=!0,r=0;r<e.length;++r){var s=e[r],a=s.match(/\d+/);a=a?a[0]:"",0===s.charAt(0)?t[r]="u"+s.charAt(1)+a:t[r]=s.charAt(0)+a,r>0&&(n=n&&t[r]===t[r-1])}return n?t[0]:t.join("")}e.exports=function(e,t){for(var n=t[1].length-Math.abs(e.arrayBlockIndices[0])|0,o=new Array(e.arrayArgs.length),u=new Array(e.arrayArgs.length),l=0;l<e.arrayArgs.length;++l)u[l]=t[2*l],o[l]=t[2*l+1];var c=[],h=[],p=[],d=[],f=[];for(l=0;l<e.arrayArgs.length;++l){e.arrayBlockIndices[l]<0?(p.push(0),d.push(n),c.push(n),h.push(n+e.arrayBlockIndices[l])):(p.push(e.arrayBlockIndices[l]),d.push(e.arrayBlockIndices[l]+n),c.push(0),h.push(e.arrayBlockIndices[l]));for(var m=[],g=0;g<o[l].length;g++)p[l]<=o[l][g]&&o[l][g]<d[l]&&m.push(o[l][g]-p[l]);f.push(m)}var y=["SS"],b=["'use strict'"],x=[];for(g=0;g<n;++g)x.push(["s",g,"=SS[",g,"]"].join(""));for(l=0;l<e.arrayArgs.length;++l){y.push("a"+l),y.push("t"+l),y.push("p"+l);for(g=0;g<n;++g)x.push(["t",l,"p",g,"=t",l,"[",p[l]+g,"]"].join(""));for(g=0;g<Math.abs(e.arrayBlockIndices[l]);++g)x.push(["t",l,"b",g,"=t",l,"[",c[l]+g,"]"].join(""))}for(l=0;l<e.scalarArgs.length;++l)y.push("Y"+l);if(e.shapeArgs.length>0&&x.push("shape=SS.slice(0)"),e.indexArgs.length>0){var w=new Array(n);for(l=0;l<n;++l)w[l]="0";x.push(["index=[",w.join(","),"]"].join(""))}for(l=0;l<e.offsetArgs.length;++l){var v=e.offsetArgs[l],k=[];for(g=0;g<v.offset.length;++g)0!==v.offset[g]&&(1===v.offset[g]?k.push(["t",v.array,"p",g].join("")):k.push([v.offset[g],"*t",v.array,"p",g].join("")));0===k.length?x.push("q"+l+"=0"):x.push(["q",l,"=",k.join("+")].join(""))}var I=r([].concat(e.pre.thisVars).concat(e.body.thisVars).concat(e.post.thisVars));for((x=x.concat(I)).length>0&&b.push("var "+x.join(",")),l=0;l<e.arrayArgs.length;++l)b.push("p"+l+"|=0");e.pre.body.length>3&&b.push(a(e.pre,e,u));var N=a(e.body,e,u),S=function(e){for(var t=0,n=e[0].length;t<n;){for(var r=1;r<e.length;++r)if(e[r][t]!==e[0][t])return t;++t}return t}(f);S<n?b.push(function(e,t,n,r){for(var a=t.length,i=n.arrayArgs.length,o=n.blockSize,u=n.indexArgs.length>0,l=[],c=0;c<i;++c)l.push(["var offset",c,"=p",c].join(""));for(c=e;c<a;++c)l.push(["for(var j"+c+"=SS[",t[c],"]|0;j",c,">0;){"].join("")),l.push(["if(j",c,"<",o,"){"].join("")),l.push(["s",t[c],"=j",c].join("")),l.push(["j",c,"=0"].join("")),l.push(["}else{s",t[c],"=",o].join("")),l.push(["j",c,"-=",o,"}"].join("")),u&&l.push(["index[",t[c],"]=j",c].join(""));for(c=0;c<i;++c){for(var h=["offset"+c],p=e;p<a;++p)h.push(["j",p,"*t",c,"p",t[p]].join(""));l.push(["p",c,"=(",h.join("+"),")"].join(""))}for(l.push(s(t,n,r)),c=e;c<a;++c)l.push("}");return l.join("\n")}(S,f[0],e,N)):b.push(s(f[0],e,N)),e.post.body.length>3&&b.push(a(e.post,e,u)),e.debug&&console.log("-----Generated cwise routine for ",t,":\n"+b.join("\n")+"\n----------");var C=[e.funcName||"unnamed","_cwise_loop_",o[0].join("s"),"m",S,i(u)].join("");return new Function(["function ",C,"(",y.join(","),"){",b.join("\n"),"} return ",C].join(""))()}},5081:function(e,t,n){"use strict";var r=n(1984);e.exports=function(e){var t=["'use strict'","var CACHED={}"],n=[],s=e.funcName+"_cwise_thunk";t.push(["return function ",s,"(",e.shimArgs.join(","),"){"].join(""));for(var a=[],i=[],o=[["array",e.arrayArgs[0],".shape.slice(",Math.max(0,e.arrayBlockIndices[0]),e.arrayBlockIndices[0]<0?","+e.arrayBlockIndices[0]+")":")"].join("")],u=[],l=[],c=0;c<e.arrayArgs.length;++c){var h=e.arrayArgs[c];n.push(["t",h,"=array",h,".dtype,","r",h,"=array",h,".order"].join("")),a.push("t"+h),a.push("r"+h),i.push("t"+h),i.push("r"+h+".join()"),o.push("array"+h+".data"),o.push("array"+h+".stride"),o.push("array"+h+".offset|0"),c>0&&(u.push("array"+e.arrayArgs[0]+".shape.length===array"+h+".shape.length+"+(Math.abs(e.arrayBlockIndices[0])-Math.abs(e.arrayBlockIndices[c]))),l.push("array"+e.arrayArgs[0]+".shape[shapeIndex+"+Math.max(0,e.arrayBlockIndices[0])+"]===array"+h+".shape[shapeIndex+"+Math.max(0,e.arrayBlockIndices[c])+"]"))}for(e.arrayArgs.length>1&&(t.push("if (!("+u.join(" && ")+")) throw new Error('cwise: Arrays do not all have the same dimensionality!')"),t.push("for(var shapeIndex=array"+e.arrayArgs[0]+".shape.length-"+Math.abs(e.arrayBlockIndices[0])+"; shapeIndex--\x3e0;) {"),t.push("if (!("+l.join(" && ")+")) throw new Error('cwise: Arrays do not all have the same shape!')"),t.push("}")),c=0;c<e.scalarArgs.length;++c)o.push("scalar"+e.scalarArgs[c]);return n.push(["type=[",i.join(","),"].join()"].join("")),n.push("proc=CACHED[type]"),t.push("var "+n.join(",")),t.push(["if(!proc){","CACHED[type]=proc=compile([",a.join(","),"])}","return proc(",o.join(","),")}"].join("")),e.debug&&console.log("-----Generated thunk:\n"+t.join("\n")+"\n----------"),new Function("compile",t.join("\n"))(r.bind(void 0,e))}},6615:function(e,t,n){"use strict";var r=n(7727),s=n(8706),a=0;function i(e,t,n){this.name=e,this.lvalue=t,this.rvalue=n,this.count=0}function o(e,t,n,r){this.body=e,this.args=t,this.thisVars=n,this.localVars=r}e.exports=function(e){for(var t=["(",e,")()"].join(""),u=r.parse(t,{range:!0}),l="_inline_"+a+++"_",c=function(e){for(var t=e.body[0].expression.callee.params,n=new Array(t.length),r=0;r<t.length;++r)n[r]=t[r].name;return n}(u),h=new Array(c.length),p=0;p<c.length;++p)h[p]=new i([l,"arg",p,"_"].join(""),!1,!1);for(var d=new Array(t.length),f=(p=0,t.length);p<f;++p)d[p]=t.charAt(p);var m,g=[],y=[];function b(e,t){for(var n=e.range[0],r=e.range[1],s=n+1;s<r;++s)d[s]="";d[n]=t}return function e(t,r){if(t.parent=r,"MemberExpression"===t.type)t.computed?(e(t.object,t),e(t.property,t)):"ThisExpression"===t.object.type?b(t,(x=t.property.name,w="this_"+x.replace(/\_/g,"__"),y.push(w),w)):e(t.object,t);else{if("ThisExpression"===t.type)throw new Error("cwise-parser: Computed this is not allowed");if("Identifier"===t.type){var s=t.name,a=c.indexOf(s);if(a>=0){var i=h[a],o=function(e){return"AssignmentExpression"===e.parent.type&&e.parent.left===e?"="===e.parent.operator?1:3:"UpdateExpression"===e.parent.type?3:2}(t);1&o&&(i.lvalue=!0),2&o&&(i.rvalue=!0),++i.count,b(t,i.name)}else(function(e){if("eval"===e)throw new Error("cwise-parser: eval() not allowed");return"undefined"!=typeof window?e in window:void 0!==n.g?e in n.g:"undefined"!=typeof self&&e in self})(s)||b(t,function(e){var t=l+e.replace(/\_/g,"__");return g.push(t),t}(s))}else if("Literal"===t.type)"string"==typeof t.value&&b(t,"'"+t.value.replace(/\_/g,"\\_").replace(/\'/g,"'")+"'");else{if("WithStatement"===t.type)throw new Error("cwise-parser: with() statements not allowed");for(var u=Object.keys(t),p=0,d=u.length;p<d;++p)if("parent"!==u[p]){var f=t[u[p]];if(f)if(f instanceof Array)for(var m=0;m<f.length;++m)f[m]&&"string"==typeof f[m].type&&e(f[m],t);else"string"==typeof f.type&&e(f,t)}}}var x,w}(u.body[0].expression.callee.body,void 0),s(g),s(y),new o((m=u.body[0].expression.callee.body,d.slice(m.range[0],m.range[1]).join("")),h,y,g)}},7727:function(e,t){var n,r,s;!function(a,i){"use strict";r=[t],void 0===(s="function"==typeof(n=function(e){var t,n,r,s,a,i,o,u,l,c,h,p,d,f,m,g,y,b;function x(e,t){if(!e)throw new Error("ASSERT: "+t)}function w(e){return e>=48&&e<=57}function v(e){return"0123456789abcdefABCDEF".indexOf(e)>=0}function k(e){return"01234567".indexOf(e)>=0}function I(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0}function N(e){return 10===e||13===e||8232===e||8233===e}function S(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&o.NonAsciiIdentifierStart.test(String.fromCharCode(e))}function C(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&o.NonAsciiIdentifierPart.test(String.fromCharCode(e))}function T(e){switch(e){case"class":case"enum":case"export":case"extends":case"import":case"super":return!0;default:return!1}}function $(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}}function E(e){return"eval"===e||"arguments"===e}function A(e){if(c&&$(e))return!0;switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}}function R(e,t,n,r,s){var a;x("number"==typeof n,"Comment must have valid position"),y.lastCommentStart>=n||(y.lastCommentStart=n,a={type:e,value:t},b.range&&(a.range=[n,r]),b.loc&&(a.loc=s),b.comments.push(a),b.attachComment&&(b.leadingComments.push(a),b.trailingComments.push(a)))}function _(e){var t,n,r,s;for(t=h-e,n={start:{line:p,column:h-d-e}};h<f;)if(r=l.charCodeAt(h),++h,N(r))return b.comments&&(s=l.slice(t+e,h-1),n.end={line:p,column:h-d-1},R("Line",s,t,h-1,n)),13===r&&10===l.charCodeAt(h)&&++h,++p,void(d=h);b.comments&&(s=l.slice(t+e,h),n.end={line:p,column:h-d},R("Line",s,t,h,n))}function F(){var e,t,n,r;for(b.comments&&(e=h-2,t={start:{line:p,column:h-d-2}});h<f;)if(N(n=l.charCodeAt(h)))13===n&&10===l.charCodeAt(h+1)&&++h,++p,++h,d=h,h>=f&&ae({},i.UnexpectedToken,"ILLEGAL");else if(42===n){if(47===l.charCodeAt(h+1))return++h,++h,void(b.comments&&(r=l.slice(e+2,h-2),t.end={line:p,column:h-d},R("Block",r,e,h,t)));++h}else++h;ae({},i.UnexpectedToken,"ILLEGAL")}function D(){var e,t;for(t=0===h;h<f;)if(I(e=l.charCodeAt(h)))++h;else if(N(e))++h,13===e&&10===l.charCodeAt(h)&&++h,++p,d=h,t=!0;else if(47===e)if(47===(e=l.charCodeAt(h+1)))++h,++h,_(2),t=!0;else{if(42!==e)break;++h,++h,F()}else if(t&&45===e){if(45!==l.charCodeAt(h+1)||62!==l.charCodeAt(h+2))break;h+=3,_(3)}else{if(60!==e)break;if("!--"!==l.slice(h+1,h+4))break;++h,++h,++h,++h,_(4)}}function O(e){var t,n,r,s=0;for(n="u"===e?4:2,t=0;t<n;++t){if(!(h<f&&v(l[h])))return"";r=l[h++],s=16*s+"0123456789abcdef".indexOf(r.toLowerCase())}return String.fromCharCode(s)}function M(){var e,t;for(e=l.charCodeAt(h++),t=String.fromCharCode(e),92===e&&(117!==l.charCodeAt(h)&&ae({},i.UnexpectedToken,"ILLEGAL"),++h,(e=O("u"))&&"\\"!==e&&S(e.charCodeAt(0))||ae({},i.UnexpectedToken,"ILLEGAL"),t=e);h<f&&C(e=l.charCodeAt(h));)++h,t+=String.fromCharCode(e),92===e&&(t=t.substr(0,t.length-1),117!==l.charCodeAt(h)&&ae({},i.UnexpectedToken,"ILLEGAL"),++h,(e=O("u"))&&"\\"!==e&&C(e.charCodeAt(0))||ae({},i.UnexpectedToken,"ILLEGAL"),t+=e);return t}function L(){var e,t;for(e=h++;h<f;){if(92===(t=l.charCodeAt(h)))return h=e,M();if(!C(t))break;++h}return l.slice(e,h)}function z(){var e,n;return e=h,{type:1===(n=92===l.charCodeAt(h)?M():L()).length?t.Identifier:A(n)?t.Keyword:"null"===n?t.NullLiteral:"true"===n||"false"===n?t.BooleanLiteral:t.Identifier,value:n,lineNumber:p,lineStart:d,start:e,end:h}}function B(){var e,n,r,s,a=h,o=l.charCodeAt(h),u=l[h];switch(o){case 46:case 40:case 41:case 59:case 44:case 123:case 125:case 91:case 93:case 58:case 63:case 126:return++h,b.tokenize&&(40===o?b.openParenToken=b.tokens.length:123===o&&(b.openCurlyToken=b.tokens.length)),{type:t.Punctuator,value:String.fromCharCode(o),lineNumber:p,lineStart:d,start:a,end:h};default:if(61===(e=l.charCodeAt(h+1)))switch(o){case 43:case 45:case 47:case 60:case 62:case 94:case 124:case 37:case 38:case 42:return h+=2,{type:t.Punctuator,value:String.fromCharCode(o)+String.fromCharCode(e),lineNumber:p,lineStart:d,start:a,end:h};case 33:case 61:return h+=2,61===l.charCodeAt(h)&&++h,{type:t.Punctuator,value:l.slice(a,h),lineNumber:p,lineStart:d,start:a,end:h}}}return">>>="===(s=l.substr(h,4))?(h+=4,{type:t.Punctuator,value:s,lineNumber:p,lineStart:d,start:a,end:h}):">>>"===(r=s.substr(0,3))||"<<="===r||">>="===r?(h+=3,{type:t.Punctuator,value:r,lineNumber:p,lineStart:d,start:a,end:h}):u===(n=r.substr(0,2))[1]&&"+-<>&|".indexOf(u)>=0||"=>"===n?(h+=2,{type:t.Punctuator,value:n,lineNumber:p,lineStart:d,start:a,end:h}):"<>=!+-*%&|^/".indexOf(u)>=0?(++h,{type:t.Punctuator,value:u,lineNumber:p,lineStart:d,start:a,end:h}):void ae({},i.UnexpectedToken,"ILLEGAL")}function P(e){for(var n="";h<f&&v(l[h]);)n+=l[h++];return 0===n.length&&ae({},i.UnexpectedToken,"ILLEGAL"),S(l.charCodeAt(h))&&ae({},i.UnexpectedToken,"ILLEGAL"),{type:t.NumericLiteral,value:parseInt("0x"+n,16),lineNumber:p,lineStart:d,start:e,end:h}}function V(e){for(var n="0"+l[h++];h<f&&k(l[h]);)n+=l[h++];return(S(l.charCodeAt(h))||w(l.charCodeAt(h)))&&ae({},i.UnexpectedToken,"ILLEGAL"),{type:t.NumericLiteral,value:parseInt(n,8),octal:!0,lineNumber:p,lineStart:d,start:e,end:h}}function W(){var e,t;for(e=h+1;e<f;++e){if("8"===(t=l[e])||"9"===t)return!1;if(!k(t))return!0}return!0}function U(){var e,n,r;if(x(w((r=l[h]).charCodeAt(0))||"."===r,"Numeric literal must start with a decimal digit or a decimal point"),n=h,e="","."!==r){if(e=l[h++],r=l[h],"0"===e){if("x"===r||"X"===r)return++h,P(n);if(k(r)&&W())return V(n)}for(;w(l.charCodeAt(h));)e+=l[h++];r=l[h]}if("."===r){for(e+=l[h++];w(l.charCodeAt(h));)e+=l[h++];r=l[h]}if("e"===r||"E"===r)if(e+=l[h++],"+"!==(r=l[h])&&"-"!==r||(e+=l[h++]),w(l.charCodeAt(h)))for(;w(l.charCodeAt(h));)e+=l[h++];else ae({},i.UnexpectedToken,"ILLEGAL");return S(l.charCodeAt(h))&&ae({},i.UnexpectedToken,"ILLEGAL"),{type:t.NumericLiteral,value:parseFloat(e),lineNumber:p,lineStart:d,start:n,end:h}}function G(){var e,n,r,s,a,o,u,c,m="",g=!1;for(u=p,c=d,x("'"===(e=l[h])||'"'===e,"String literal must starts with a quote"),n=h,++h;h<f;){if((r=l[h++])===e){e="";break}if("\\"===r)if((r=l[h++])&&N(r.charCodeAt(0)))++p,"\r"===r&&"\n"===l[h]&&++h,d=h;else switch(r){case"u":case"x":o=h,(a=O(r))?m+=a:(h=o,m+=r);break;case"n":m+="\n";break;case"r":m+="\r";break;case"t":m+="\t";break;case"b":m+="\b";break;case"f":m+="\f";break;case"v":m+="\v";break;default:k(r)?(0!==(s="01234567".indexOf(r))&&(g=!0),h<f&&k(l[h])&&(g=!0,s=8*s+"01234567".indexOf(l[h++]),"0123".indexOf(r)>=0&&h<f&&k(l[h])&&(s=8*s+"01234567".indexOf(l[h++]))),m+=String.fromCharCode(s)):m+=r}else{if(N(r.charCodeAt(0)))break;m+=r}}return""!==e&&ae({},i.UnexpectedToken,"ILLEGAL"),{type:t.StringLiteral,value:m,octal:g,startLineNumber:u,startLineStart:c,lineNumber:p,lineStart:d,start:n,end:h}}function j(e,t){var n;try{n=new RegExp(e,t)}catch(e){ae({},i.InvalidRegExp)}return n}function H(){var e,t,n,r;for(x("/"===(e=l[h]),"Regular expression literal must start with a slash"),t=l[h++],n=!1,r=!1;h<f;)if(t+=e=l[h++],"\\"===e)N((e=l[h++]).charCodeAt(0))&&ae({},i.UnterminatedRegExp),t+=e;else if(N(e.charCodeAt(0)))ae({},i.UnterminatedRegExp);else if(n)"]"===e&&(n=!1);else{if("/"===e){r=!0;break}"["===e&&(n=!0)}return r||ae({},i.UnterminatedRegExp),{value:t.substr(1,t.length-2),literal:t}}function q(){var e,t,n,r;for(t="",n="";h<f&&C((e=l[h]).charCodeAt(0));)if(++h,"\\"===e&&h<f)if("u"===(e=l[h])){if(r=++h,e=O("u"))for(n+=e,t+="\\u";r<h;++r)t+=l[r];else h=r,n+="u",t+="\\u";ie({},i.UnexpectedToken,"ILLEGAL")}else t+="\\",ie({},i.UnexpectedToken,"ILLEGAL");else n+=e,t+=e;return{value:n,literal:t}}function K(){var e,n,r,s;return g=null,D(),e=h,n=H(),r=q(),s=j(n.value,r.value),b.tokenize?{type:t.RegularExpression,value:s,lineNumber:p,lineStart:d,start:e,end:h}:{literal:n.literal+r.literal,value:s,start:e,end:h}}function X(){var e,t,n,r;return D(),e=h,t={start:{line:p,column:h-d}},n=K(),t.end={line:p,column:h-d},b.tokenize||(b.tokens.length>0&&(r=b.tokens[b.tokens.length-1]).range[0]===e&&"Punctuator"===r.type&&("/"!==r.value&&"/="!==r.value||b.tokens.pop()),b.tokens.push({type:"RegularExpression",value:n.literal,range:[e,h],loc:t})),n}function Y(e){return e.type===t.Identifier||e.type===t.Keyword||e.type===t.BooleanLiteral||e.type===t.NullLiteral}function Z(){var e,t;if(!(e=b.tokens[b.tokens.length-1]))return X();if("Punctuator"===e.type){if("]"===e.value)return B();if(")"===e.value)return!(t=b.tokens[b.openParenToken-1])||"Keyword"!==t.type||"if"!==t.value&&"while"!==t.value&&"for"!==t.value&&"with"!==t.value?B():X();if("}"===e.value){if(b.tokens[b.openCurlyToken-3]&&"Keyword"===b.tokens[b.openCurlyToken-3].type){if(!(t=b.tokens[b.openCurlyToken-4]))return B()}else{if(!b.tokens[b.openCurlyToken-4]||"Keyword"!==b.tokens[b.openCurlyToken-4].type)return B();if(!(t=b.tokens[b.openCurlyToken-5]))return X()}return r.indexOf(t.value)>=0?B():X()}return X()}return"Keyword"===e.type&&"this"!==e.value?X():B()}function J(){var e;return D(),h>=f?{type:t.EOF,lineNumber:p,lineStart:d,start:h,end:h}:S(e=l.charCodeAt(h))?z():40===e||41===e||59===e?B():39===e||34===e?G():46===e?w(l.charCodeAt(h+1))?U():B():w(e)?U():b.tokenize&&47===e?Z():B()}function Q(){var e,r,s;return D(),e={start:{line:p,column:h-d}},r=J(),e.end={line:p,column:h-d},r.type!==t.EOF&&(s=l.slice(r.start,r.end),b.tokens.push({type:n[r.type],value:s,range:[r.start,r.end],loc:e})),r}function ee(){var e;return h=(e=g).end,p=e.lineNumber,d=e.lineStart,g=void 0!==b.tokens?Q():J(),h=e.end,p=e.lineNumber,d=e.lineStart,e}function te(){var e,t,n;e=h,t=p,n=d,g=void 0!==b.tokens?Q():J(),h=e,p=t,d=n}function ne(e,t){this.line=e,this.column=t}function re(e,t,n,r){this.start=new ne(e,t),this.end=new ne(n,r)}function se(){var e,t,n,r;return e=h,t=p,n=d,D(),r=p!==t,h=e,p=t,d=n,r}function ae(e,t){var n,r=Array.prototype.slice.call(arguments,2),s=t.replace(/%(\d)/g,(function(e,t){return x(t<r.length,"Message reference must be in range"),r[t]}));throw"number"==typeof e.lineNumber?((n=new Error("Line "+e.lineNumber+": "+s)).index=e.start,n.lineNumber=e.lineNumber,n.column=e.start-d+1):((n=new Error("Line "+p+": "+s)).index=h,n.lineNumber=p,n.column=h-d+1),n.description=s,n}function ie(){try{ae.apply(null,arguments)}catch(e){if(!b.errors)throw e;b.errors.push(e)}}function oe(e){if(e.type===t.EOF&&ae(e,i.UnexpectedEOS),e.type===t.NumericLiteral&&ae(e,i.UnexpectedNumber),e.type===t.StringLiteral&&ae(e,i.UnexpectedString),e.type===t.Identifier&&ae(e,i.UnexpectedIdentifier),e.type===t.Keyword){if(T(e.value))ae(e,i.UnexpectedReserved);else if(c&&$(e.value))return void ie(e,i.StrictReservedWord);ae(e,i.UnexpectedToken,e.value)}ae(e,i.UnexpectedToken,e.value)}function ue(e){var n=ee();n.type===t.Punctuator&&n.value===e||oe(n)}function le(e){var n=ee();n.type===t.Keyword&&n.value===e||oe(n)}function ce(e){return g.type===t.Punctuator&&g.value===e}function he(e){return g.type===t.Keyword&&g.value===e}function pe(){var e;return g.type===t.Punctuator&&("="===(e=g.value)||"*="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e)}function de(){var e,n=h,r=p,s=d,a=g;if(59===l.charCodeAt(h)||ce(";"))ee();else{if(e=p,D(),p!==e)return h=n,p=r,d=s,void(g=a);g.type===t.EOF||ce("}")||oe(g)}}function fe(e){return e.type===s.Identifier||e.type===s.MemberExpression}function me(){var e,t=[];for(e=g,ue("[");!ce("]");)ce(",")?(ee(),t.push(null)):(t.push(De()),ce("]")||ue(","));return ee(),m.markEnd(m.createArrayExpression(t),e)}function ge(e,t){var n,r,s;return n=c,s=g,r=ot(),t&&c&&E(e[0].name)&&ie(t,i.StrictParamName),c=n,m.markEnd(m.createFunctionExpression(null,e,[],r),s)}function ye(){var e,n;return n=g,(e=ee()).type===t.StringLiteral||e.type===t.NumericLiteral?(c&&e.octal&&ie(e,i.StrictOctalLiteral),m.markEnd(m.createLiteral(e),n)):m.markEnd(m.createIdentifier(e.value),n)}function be(){var e,n,r,s,a,o;return o=g,(e=g).type===t.Identifier?(r=ye(),"get"!==e.value||ce(":")?"set"!==e.value||ce(":")?(ue(":"),s=De(),m.markEnd(m.createProperty("init",r,s),o)):(n=ye(),ue("("),(e=g).type!==t.Identifier?(ue(")"),ie(e,i.UnexpectedToken,e.value),s=ge([])):(a=[ze()],ue(")"),s=ge(a,e)),m.markEnd(m.createProperty("set",n,s),o)):(n=ye(),ue("("),ue(")"),s=ge([]),m.markEnd(m.createProperty("get",n,s),o))):e.type!==t.EOF&&e.type!==t.Punctuator?(n=ye(),ue(":"),s=De(),m.markEnd(m.createProperty("init",n,s),o)):void oe(e)}function xe(){var e,t,n,r,o,u=[],l={},h=String;for(o=g,ue("{");!ce("}");)t=(e=be()).key.type===s.Identifier?e.key.name:h(e.key.value),r="init"===e.kind?a.Data:"get"===e.kind?a.Get:a.Set,n="$"+t,Object.prototype.hasOwnProperty.call(l,n)?(l[n]===a.Data?c&&r===a.Data?ie({},i.StrictDuplicateProperty):r!==a.Data&&ie({},i.AccessorDataProperty):r===a.Data?ie({},i.AccessorDataProperty):l[n]&r&&ie({},i.AccessorGetSet),l[n]|=r):l[n]=r,u.push(e),ce("}")||ue(",");return ue("}"),m.markEnd(m.createObjectExpression(u),o)}function we(){var e;return ue("("),e=Oe(),ue(")"),e}function ve(){var e,n,r,s;if(ce("("))return we();if(ce("["))return me();if(ce("{"))return xe();if(e=g.type,s=g,e===t.Identifier)r=m.createIdentifier(ee().value);else if(e===t.StringLiteral||e===t.NumericLiteral)c&&g.octal&&ie(g,i.StrictOctalLiteral),r=m.createLiteral(ee());else if(e===t.Keyword){if(he("function"))return ct();he("this")?(ee(),r=m.createThisExpression()):oe(ee())}else e===t.BooleanLiteral?((n=ee()).value="true"===n.value,r=m.createLiteral(n)):e===t.NullLiteral?((n=ee()).value=null,r=m.createLiteral(n)):ce("/")||ce("/=")?(r=void 0!==b.tokens?m.createLiteral(X()):m.createLiteral(K()),te()):oe(ee());return m.markEnd(r,s)}function ke(){var e=[];if(ue("("),!ce(")"))for(;h<f&&(e.push(De()),!ce(")"));)ue(",");return ue(")"),e}function Ie(){var e,t;return t=g,Y(e=ee())||oe(e),m.markEnd(m.createIdentifier(e.value),t)}function Ne(){return ue("."),Ie()}function Se(){var e;return ue("["),e=Oe(),ue("]"),e}function Ce(){var e,t,n;return n=g,le("new"),e=$e(),t=ce("(")?ke():[],m.markEnd(m.createNewExpression(e,t),n)}function Te(){var e,t,n,r,s=y.allowIn;for(r=g,y.allowIn=!0,e=he("new")?Ce():ve();;){if(ce("."))n=Ne(),e=m.createMemberExpression(".",e,n);else if(ce("("))t=ke(),e=m.createCallExpression(e,t);else{if(!ce("["))break;n=Se(),e=m.createMemberExpression("[",e,n)}m.markEnd(e,r)}return y.allowIn=s,e}function $e(){var e,t,n;for(x(y.allowIn,"callee of new expression always allow in keyword."),n=g,e=he("new")?Ce():ve();ce(".")||ce("[");)ce("[")?(t=Se(),e=m.createMemberExpression("[",e,t)):(t=Ne(),e=m.createMemberExpression(".",e,t)),m.markEnd(e,n);return e}function Ee(){var e,n,r=g;return e=Te(),g.type===t.Punctuator&&(!ce("++")&&!ce("--")||se()||(c&&e.type===s.Identifier&&E(e.name)&&ie({},i.StrictLHSPostfix),fe(e)||ie({},i.InvalidLHSInAssignment),n=ee(),e=m.markEnd(m.createPostfixExpression(n.value,e),r))),e}function Ae(){var e,n,r;return g.type!==t.Punctuator&&g.type!==t.Keyword?n=Ee():ce("++")||ce("--")?(r=g,e=ee(),n=Ae(),c&&n.type===s.Identifier&&E(n.name)&&ie({},i.StrictLHSPrefix),fe(n)||ie({},i.InvalidLHSInAssignment),n=m.createUnaryExpression(e.value,n),n=m.markEnd(n,r)):ce("+")||ce("-")||ce("~")||ce("!")?(r=g,e=ee(),n=Ae(),n=m.createUnaryExpression(e.value,n),n=m.markEnd(n,r)):he("delete")||he("void")||he("typeof")?(r=g,e=ee(),n=Ae(),n=m.createUnaryExpression(e.value,n),n=m.markEnd(n,r),c&&"delete"===n.operator&&n.argument.type===s.Identifier&&ie({},i.StrictDelete)):n=Ee(),n}function Re(e,n){var r=0;if(e.type!==t.Punctuator&&e.type!==t.Keyword)return 0;switch(e.value){case"||":r=1;break;case"&&":r=2;break;case"|":r=3;break;case"^":r=4;break;case"&":r=5;break;case"==":case"!=":case"===":case"!==":r=6;break;case"<":case">":case"<=":case">=":case"instanceof":r=7;break;case"in":r=n?7:0;break;case"<<":case">>":case">>>":r=8;break;case"+":case"-":r=9;break;case"*":case"/":case"%":r=11}return r}function _e(){var e,t,n,r,s,a,i,o,u,l;if(e=g,u=Ae(),0===(s=Re(r=g,y.allowIn)))return u;for(r.prec=s,ee(),t=[e,g],a=[u,r,i=Ae()];(s=Re(g,y.allowIn))>0;){for(;a.length>2&&s<=a[a.length-2].prec;)i=a.pop(),o=a.pop().value,u=a.pop(),n=m.createBinaryExpression(o,u,i),t.pop(),e=t[t.length-1],m.markEnd(n,e),a.push(n);(r=ee()).prec=s,a.push(r),t.push(g),n=Ae(),a.push(n)}for(n=a[l=a.length-1],t.pop();l>1;)n=m.createBinaryExpression(a[l-1].value,a[l-2],n),l-=2,e=t.pop(),m.markEnd(n,e);return n}function Fe(){var e,t,n,r,s;return s=g,e=_e(),ce("?")&&(ee(),t=y.allowIn,y.allowIn=!0,n=De(),y.allowIn=t,ue(":"),r=De(),e=m.createConditionalExpression(e,n,r),m.markEnd(e,s)),e}function De(){var e,t,n,r,a;return e=g,a=g,r=t=Fe(),pe()&&(fe(t)||ie({},i.InvalidLHSInAssignment),c&&t.type===s.Identifier&&E(t.name)&&ie(e,i.StrictLHSAssignment),e=ee(),n=De(),r=m.markEnd(m.createAssignmentExpression(e.value,t,n),a)),r}function Oe(){var e,t=g;if(e=De(),ce(",")){for(e=m.createSequenceExpression([e]);h<f&&ce(",");)ee(),e.expressions.push(De());m.markEnd(e,t)}return e}function Me(){for(var e,t=[];h<f&&!ce("}")&&void 0!==(e=ht());)t.push(e);return t}function Le(){var e,t;return t=g,ue("{"),e=Me(),ue("}"),m.markEnd(m.createBlockStatement(e),t)}function ze(){var e,n;return n=g,(e=ee()).type!==t.Identifier&&oe(e),m.markEnd(m.createIdentifier(e.value),n)}function Be(e){var t,n,r=null;return n=g,t=ze(),c&&E(t.name)&&ie({},i.StrictVarName),"const"===e?(ue("="),r=De()):ce("=")&&(ee(),r=De()),m.markEnd(m.createVariableDeclarator(t,r),n)}function Pe(e){var t=[];do{if(t.push(Be(e)),!ce(","))break;ee()}while(h<f);return t}function Ve(){var e;return le("var"),e=Pe(),de(),m.createVariableDeclaration(e,"var")}function We(e){var t,n;return n=g,le(e),t=Pe(e),de(),m.markEnd(m.createVariableDeclaration(t,e),n)}function Ue(){return ue(";"),m.createEmptyStatement()}function Ge(){var e=Oe();return de(),m.createExpressionStatement(e)}function je(){var e,t,n;return le("if"),ue("("),e=Oe(),ue(")"),t=it(),he("else")?(ee(),n=it()):n=null,m.createIfStatement(e,t,n)}function He(){var e,t,n;return le("do"),n=y.inIteration,y.inIteration=!0,e=it(),y.inIteration=n,le("while"),ue("("),t=Oe(),ue(")"),ce(";")&&ee(),m.createDoWhileStatement(e,t)}function qe(){var e,t,n;return le("while"),ue("("),e=Oe(),ue(")"),n=y.inIteration,y.inIteration=!0,t=it(),y.inIteration=n,m.createWhileStatement(e,t)}function Ke(){var e,t,n;return n=g,e=ee(),t=Pe(),m.markEnd(m.createVariableDeclaration(t,e.value),n)}function Xe(){var e,t,n,r,s,a,o,u=y.allowIn;return e=t=n=null,le("for"),ue("("),ce(";")?ee():(he("var")||he("let")?(y.allowIn=!1,e=Ke(),y.allowIn=u,1===e.declarations.length&&he("in")&&(ee(),r=e,s=Oe(),e=null)):(y.allowIn=!1,e=Oe(),y.allowIn=u,he("in")&&(fe(e)||ie({},i.InvalidLHSInForIn),ee(),r=e,s=Oe(),e=null)),void 0===r&&ue(";")),void 0===r&&(ce(";")||(t=Oe()),ue(";"),ce(")")||(n=Oe())),ue(")"),o=y.inIteration,y.inIteration=!0,a=it(),y.inIteration=o,void 0===r?m.createForStatement(e,t,n,a):m.createForInStatement(r,s,a)}function Ye(){var e,n=null;return le("continue"),59===l.charCodeAt(h)?(ee(),y.inIteration||ae({},i.IllegalContinue),m.createContinueStatement(null)):se()?(y.inIteration||ae({},i.IllegalContinue),m.createContinueStatement(null)):(g.type===t.Identifier&&(e="$"+(n=ze()).name,Object.prototype.hasOwnProperty.call(y.labelSet,e)||ae({},i.UnknownLabel,n.name)),de(),null!==n||y.inIteration||ae({},i.IllegalContinue),m.createContinueStatement(n))}function Ze(){var e,n=null;return le("break"),59===l.charCodeAt(h)?(ee(),y.inIteration||y.inSwitch||ae({},i.IllegalBreak),m.createBreakStatement(null)):se()?(y.inIteration||y.inSwitch||ae({},i.IllegalBreak),m.createBreakStatement(null)):(g.type===t.Identifier&&(e="$"+(n=ze()).name,Object.prototype.hasOwnProperty.call(y.labelSet,e)||ae({},i.UnknownLabel,n.name)),de(),null!==n||y.inIteration||y.inSwitch||ae({},i.IllegalBreak),m.createBreakStatement(n))}function Je(){var e=null;return le("return"),y.inFunctionBody||ie({},i.IllegalReturn),32===l.charCodeAt(h)&&S(l.charCodeAt(h+1))?(e=Oe(),de(),m.createReturnStatement(e)):se()?m.createReturnStatement(null):(ce(";")||ce("}")||g.type===t.EOF||(e=Oe()),de(),m.createReturnStatement(e))}function Qe(){var e,t;return c&&(D(),ie({},i.StrictModeWith)),le("with"),ue("("),e=Oe(),ue(")"),t=it(),m.createWithStatement(e,t)}function et(){var e,t,n,r=[];for(n=g,he("default")?(ee(),e=null):(le("case"),e=Oe()),ue(":");h<f&&!(ce("}")||he("default")||he("case"));)t=it(),r.push(t);return m.markEnd(m.createSwitchCase(e,r),n)}function tt(){var e,t,n,r,s;if(le("switch"),ue("("),e=Oe(),ue(")"),ue("{"),t=[],ce("}"))return ee(),m.createSwitchStatement(e,t);for(r=y.inSwitch,y.inSwitch=!0,s=!1;h<f&&!ce("}");)null===(n=et()).test&&(s&&ae({},i.MultipleDefaultsInSwitch),s=!0),t.push(n);return y.inSwitch=r,ue("}"),m.createSwitchStatement(e,t)}function nt(){var e;return le("throw"),se()&&ae({},i.NewlineAfterThrow),e=Oe(),de(),m.createThrowStatement(e)}function rt(){var e,t,n;return n=g,le("catch"),ue("("),ce(")")&&oe(g),e=ze(),c&&E(e.name)&&ie({},i.StrictCatchVariable),ue(")"),t=Le(),m.markEnd(m.createCatchClause(e,t),n)}function st(){var e,t=[],n=null;return le("try"),e=Le(),he("catch")&&t.push(rt()),he("finally")&&(ee(),n=Le()),0!==t.length||n||ae({},i.NoCatchOrFinally),m.createTryStatement(e,[],t,n)}function at(){return le("debugger"),de(),m.createDebuggerStatement()}function it(){var e,n,r,a,o=g.type;if(o===t.EOF&&oe(g),o===t.Punctuator&&"{"===g.value)return Le();if(a=g,o===t.Punctuator)switch(g.value){case";":return m.markEnd(Ue(),a);case"(":return m.markEnd(Ge(),a)}if(o===t.Keyword)switch(g.value){case"break":return m.markEnd(Ze(),a);case"continue":return m.markEnd(Ye(),a);case"debugger":return m.markEnd(at(),a);case"do":return m.markEnd(He(),a);case"for":return m.markEnd(Xe(),a);case"function":return m.markEnd(lt(),a);case"if":return m.markEnd(je(),a);case"return":return m.markEnd(Je(),a);case"switch":return m.markEnd(tt(),a);case"throw":return m.markEnd(nt(),a);case"try":return m.markEnd(st(),a);case"var":return m.markEnd(Ve(),a);case"while":return m.markEnd(qe(),a);case"with":return m.markEnd(Qe(),a)}return(e=Oe()).type===s.Identifier&&ce(":")?(ee(),r="$"+e.name,Object.prototype.hasOwnProperty.call(y.labelSet,r)&&ae({},i.Redeclaration,"Label",e.name),y.labelSet[r]=!0,n=it(),delete y.labelSet[r],m.markEnd(m.createLabeledStatement(e,n),a)):(de(),m.markEnd(m.createExpressionStatement(e),a))}function ot(){var e,n,r,a,o,u,p,d,b=[];for(d=g,ue("{");h<f&&g.type===t.StringLiteral&&(n=g,e=ht(),b.push(e),e.expression.type===s.Literal);)"use strict"===l.slice(n.start+1,n.end-1)?(c=!0,r&&ie(r,i.StrictOctalLiteral)):!r&&n.octal&&(r=n);for(a=y.labelSet,o=y.inIteration,u=y.inSwitch,p=y.inFunctionBody,y.labelSet={},y.inIteration=!1,y.inSwitch=!1,y.inFunctionBody=!0;h<f&&!ce("}")&&void 0!==(e=ht());)b.push(e);return ue("}"),y.labelSet=a,y.inIteration=o,y.inSwitch=u,y.inFunctionBody=p,m.markEnd(m.createBlockStatement(b),d)}function ut(e){var t,n,r,s,a,o,u=[];if(ue("("),!ce(")"))for(s={};h<f&&(n=g,t=ze(),a="$"+n.value,c?(E(n.value)&&(r=n,o=i.StrictParamName),Object.prototype.hasOwnProperty.call(s,a)&&(r=n,o=i.StrictParamDupe)):e||(E(n.value)?(e=n,o=i.StrictParamName):$(n.value)?(e=n,o=i.StrictReservedWord):Object.prototype.hasOwnProperty.call(s,a)&&(e=n,o=i.StrictParamDupe)),u.push(t),s[a]=!0,!ce(")"));)ue(",");return ue(")"),{params:u,stricted:r,firstRestricted:e,message:o}}function lt(){var e,t,n,r,s,a,o,u,l,h=[];return l=g,le("function"),n=g,e=ze(),c?E(n.value)&&ie(n,i.StrictFunctionName):E(n.value)?(a=n,o=i.StrictFunctionName):$(n.value)&&(a=n,o=i.StrictReservedWord),h=(s=ut(a)).params,r=s.stricted,a=s.firstRestricted,s.message&&(o=s.message),u=c,t=ot(),c&&a&&ae(a,o),c&&r&&ie(r,o),c=u,m.markEnd(m.createFunctionDeclaration(e,h,[],t),l)}function ct(){var e,t,n,r,s,a,o,u,l=null,h=[];return u=g,le("function"),ce("(")||(e=g,l=ze(),c?E(e.value)&&ie(e,i.StrictFunctionName):E(e.value)?(n=e,r=i.StrictFunctionName):$(e.value)&&(n=e,r=i.StrictReservedWord)),h=(s=ut(n)).params,t=s.stricted,n=s.firstRestricted,s.message&&(r=s.message),o=c,a=ot(),c&&n&&ae(n,r),c&&t&&ie(t,r),c=o,m.markEnd(m.createFunctionExpression(l,h,[],a),u)}function ht(){if(g.type===t.Keyword)switch(g.value){case"const":case"let":return We(g.value);case"function":return lt();default:return it()}if(g.type!==t.EOF)return it()}function pt(){for(var e,n,r,a=[];h<f&&(n=g).type===t.StringLiteral&&(e=ht(),a.push(e),e.expression.type===s.Literal);)"use strict"===l.slice(n.start+1,n.end-1)?(c=!0,r&&ie(r,i.StrictOctalLiteral)):!r&&n.octal&&(r=n);for(;h<f&&void 0!==(e=ht());)a.push(e);return a}function dt(){var e,t;return D(),te(),t=g,c=!1,e=pt(),m.markEnd(m.createProgram(e),t)}function ft(){var e,t,n,r=[];for(e=0;e<b.tokens.length;++e)n={type:(t=b.tokens[e]).type,value:t.value},b.range&&(n.range=t.range),b.loc&&(n.loc=t.loc),r.push(n);b.tokens=r}function mt(e,n){var r;"string"==typeof e||e instanceof String||(e=String(e)),m=u,h=0,p=(l=e).length>0?1:0,d=0,f=l.length,g=null,y={allowIn:!0,labelSet:{},inFunctionBody:!1,inIteration:!1,inSwitch:!1,lastCommentStart:-1},b={},(n=n||{}).tokens=!0,b.tokens=[],b.tokenize=!0,b.openParenToken=-1,b.openCurlyToken=-1,b.range="boolean"==typeof n.range&&n.range,b.loc="boolean"==typeof n.loc&&n.loc,"boolean"==typeof n.comment&&n.comment&&(b.comments=[]),"boolean"==typeof n.tolerant&&n.tolerant&&(b.errors=[]);try{if(te(),g.type===t.EOF)return b.tokens;for(ee();g.type!==t.EOF;)try{ee()}catch(e){if(g,b.errors){b.errors.push(e);break}throw e}ft(),r=b.tokens,void 0!==b.comments&&(r.comments=b.comments),void 0!==b.errors&&(r.errors=b.errors)}catch(e){throw e}finally{b={}}return r}function gt(e,t){var n,r;r=String,"string"==typeof e||e instanceof String||(e=r(e)),m=u,h=0,p=(l=e).length>0?1:0,d=0,f=l.length,g=null,y={allowIn:!0,labelSet:{},inFunctionBody:!1,inIteration:!1,inSwitch:!1,lastCommentStart:-1},b={},void 0!==t&&(b.range="boolean"==typeof t.range&&t.range,b.loc="boolean"==typeof t.loc&&t.loc,b.attachComment="boolean"==typeof t.attachComment&&t.attachComment,b.loc&&null!==t.source&&void 0!==t.source&&(b.source=r(t.source)),"boolean"==typeof t.tokens&&t.tokens&&(b.tokens=[]),"boolean"==typeof t.comment&&t.comment&&(b.comments=[]),"boolean"==typeof t.tolerant&&t.tolerant&&(b.errors=[]),b.attachComment&&(b.range=!0,b.comments=[],b.bottomRightStack=[],b.trailingComments=[],b.leadingComments=[]));try{n=dt(),void 0!==b.comments&&(n.comments=b.comments),void 0!==b.tokens&&(ft(),n.tokens=b.tokens),void 0!==b.errors&&(n.errors=b.errors)}catch(e){throw e}finally{b={}}return n}(n={})[(t={BooleanLiteral:1,EOF:2,Identifier:3,Keyword:4,NullLiteral:5,NumericLiteral:6,Punctuator:7,StringLiteral:8,RegularExpression:9}).BooleanLiteral]="Boolean",n[t.EOF]="<end>",n[t.Identifier]="Identifier",n[t.Keyword]="Keyword",n[t.NullLiteral]="Null",n[t.NumericLiteral]="Numeric",n[t.Punctuator]="Punctuator",n[t.StringLiteral]="String",n[t.RegularExpression]="RegularExpression",r=["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="],s={AssignmentExpression:"AssignmentExpression",ArrayExpression:"ArrayExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",Program:"Program",Property:"Property",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SwitchStatement:"SwitchStatement",SwitchCase:"SwitchCase",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement"},a={Data:1,Get:2,Set:4},i={UnexpectedToken:"Unexpected token %0",UnexpectedNumber:"Unexpected number",UnexpectedString:"Unexpected string",UnexpectedIdentifier:"Unexpected identifier",UnexpectedReserved:"Unexpected reserved word",UnexpectedEOS:"Unexpected end of input",NewlineAfterThrow:"Illegal newline after throw",InvalidRegExp:"Invalid regular expression",UnterminatedRegExp:"Invalid regular expression: missing /",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NoCatchOrFinally:"Missing catch or finally after try",UnknownLabel:"Undefined label '%0'",Redeclaration:"%0 '%1' has already been declared",IllegalContinue:"Illegal continue statement",IllegalBreak:"Illegal break statement",IllegalReturn:"Illegal return statement",StrictModeWith:"Strict mode code may not include a with statement",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictDuplicateProperty:"Duplicate data property in object literal not allowed in strict mode",AccessorDataProperty:"Object literal may not have data and accessor property with the same name",AccessorGetSet:"Object literal may not have multiple get/set accessors with the same name",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictReservedWord:"Use of future reserved word in strict mode"},o={NonAsciiIdentifierStart:new RegExp("[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]"),NonAsciiIdentifierPart:new RegExp("[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ̀-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԧԱ-Ֆՙա-և֑-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-٩ٮ-ۓە-ۜ۟-۪ۨ-ۼۿܐ-݊ݍ-ޱ߀-ߵߺࠀ-࠭ࡀ-࡛ࢠࢢ-ࢬࣤ-ࣾऀ-ॣ०-९ॱ-ॷॹ-ॿঁ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-ৱਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૯ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-୯ୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௯ఁ-ఃఅ-ఌఎ-ఐఒ-నప-ళవ-హఽ-ౄె-ైొ-్ౕౖౘౙౠ-ౣ౦-౯ಂಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲംഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൎൗൠ-ൣ൦-൯ൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟෲෳก-ฺเ-๎๐-๙ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟༀ༘༙༠-༩༹༵༷༾-ཇཉ-ཬཱ-྄྆-ྗྙ-ྼ࿆က-၉ၐ-ႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-፟ᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-᜔ᜠ-᜴ᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-៓ៗៜ៝០-៩᠋-᠍᠐-᠙ᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤜᤠ-ᤫᤰ-᤻᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧙ᨀ-ᨛᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙ᪧᬀ-ᭋ᭐-᭙᭫-᭳ᮀ-᯳ᰀ-᰷᱀-᱉ᱍ-ᱽ᳐-᳔᳒-ᳶᴀ-ᷦ᷼-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‌‍‿⁀⁔ⁱⁿₐ-ₜ⃐-⃥⃜⃡-⃰ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ⵿-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〯〱-〵〸-〼ぁ-ゖ゙゚ゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-꙯ꙴ-꙽ꙿ-ꚗꚟ-꛱ꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠧꡀ-ꡳꢀ-꣄꣐-꣙꣠-ꣷꣻ꤀-꤭ꤰ-꥓ꥠ-ꥼꦀ-꧀ꧏ-꧙ꨀ-ꨶꩀ-ꩍ꩐-꩙ꩠ-ꩶꩺꩻꪀ-ꫂꫛ-ꫝꫠ-ꫯꫲ-꫶ꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯪ꯬꯭꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ︀-️︠-︦︳︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]")},u={name:"SyntaxTree",processComment:function(e){var t,n;if(!(e.type===s.Program&&e.body.length>0)){for(b.trailingComments.length>0?b.trailingComments[0].range[0]>=e.range[1]?(n=b.trailingComments,b.trailingComments=[]):b.trailingComments.length=0:b.bottomRightStack.length>0&&b.bottomRightStack[b.bottomRightStack.length-1].trailingComments&&b.bottomRightStack[b.bottomRightStack.length-1].trailingComments[0].range[0]>=e.range[1]&&(n=b.bottomRightStack[b.bottomRightStack.length-1].trailingComments,delete b.bottomRightStack[b.bottomRightStack.length-1].trailingComments);b.bottomRightStack.length>0&&b.bottomRightStack[b.bottomRightStack.length-1].range[0]>=e.range[0];)t=b.bottomRightStack.pop();t?t.leadingComments&&t.leadingComments[t.leadingComments.length-1].range[1]<=e.range[0]&&(e.leadingComments=t.leadingComments,delete t.leadingComments):b.leadingComments.length>0&&b.leadingComments[b.leadingComments.length-1].range[1]<=e.range[0]&&(e.leadingComments=b.leadingComments,b.leadingComments=[]),n&&(e.trailingComments=n),b.bottomRightStack.push(e)}},markEnd:function(e,t){return b.range&&(e.range=[t.start,h]),b.loc&&(e.loc=new re(void 0===t.startLineNumber?t.lineNumber:t.startLineNumber,t.start-(void 0===t.startLineStart?t.lineStart:t.startLineStart),p,h-d),this.postProcess(e)),b.attachComment&&this.processComment(e),e},postProcess:function(e){return b.source&&(e.loc.source=b.source),e},createArrayExpression:function(e){return{type:s.ArrayExpression,elements:e}},createAssignmentExpression:function(e,t,n){return{type:s.AssignmentExpression,operator:e,left:t,right:n}},createBinaryExpression:function(e,t,n){return{type:"||"===e||"&&"===e?s.LogicalExpression:s.BinaryExpression,operator:e,left:t,right:n}},createBlockStatement:function(e){return{type:s.BlockStatement,body:e}},createBreakStatement:function(e){return{type:s.BreakStatement,label:e}},createCallExpression:function(e,t){return{type:s.CallExpression,callee:e,arguments:t}},createCatchClause:function(e,t){return{type:s.CatchClause,param:e,body:t}},createConditionalExpression:function(e,t,n){return{type:s.ConditionalExpression,test:e,consequent:t,alternate:n}},createContinueStatement:function(e){return{type:s.ContinueStatement,label:e}},createDebuggerStatement:function(){return{type:s.DebuggerStatement}},createDoWhileStatement:function(e,t){return{type:s.DoWhileStatement,body:e,test:t}},createEmptyStatement:function(){return{type:s.EmptyStatement}},createExpressionStatement:function(e){return{type:s.ExpressionStatement,expression:e}},createForStatement:function(e,t,n,r){return{type:s.ForStatement,init:e,test:t,update:n,body:r}},createForInStatement:function(e,t,n){return{type:s.ForInStatement,left:e,right:t,body:n,each:!1}},createFunctionDeclaration:function(e,t,n,r){return{type:s.FunctionDeclaration,id:e,params:t,defaults:n,body:r,rest:null,generator:!1,expression:!1}},createFunctionExpression:function(e,t,n,r){return{type:s.FunctionExpression,id:e,params:t,defaults:n,body:r,rest:null,generator:!1,expression:!1}},createIdentifier:function(e){return{type:s.Identifier,name:e}},createIfStatement:function(e,t,n){return{type:s.IfStatement,test:e,consequent:t,alternate:n}},createLabeledStatement:function(e,t){return{type:s.LabeledStatement,label:e,body:t}},createLiteral:function(e){return{type:s.Literal,value:e.value,raw:l.slice(e.start,e.end)}},createMemberExpression:function(e,t,n){return{type:s.MemberExpression,computed:"["===e,object:t,property:n}},createNewExpression:function(e,t){return{type:s.NewExpression,callee:e,arguments:t}},createObjectExpression:function(e){return{type:s.ObjectExpression,properties:e}},createPostfixExpression:function(e,t){return{type:s.UpdateExpression,operator:e,argument:t,prefix:!1}},createProgram:function(e){return{type:s.Program,body:e}},createProperty:function(e,t,n){return{type:s.Property,key:t,value:n,kind:e}},createReturnStatement:function(e){return{type:s.ReturnStatement,argument:e}},createSequenceExpression:function(e){return{type:s.SequenceExpression,expressions:e}},createSwitchCase:function(e,t){return{type:s.SwitchCase,test:e,consequent:t}},createSwitchStatement:function(e,t){return{type:s.SwitchStatement,discriminant:e,cases:t}},createThisExpression:function(){return{type:s.ThisExpression}},createThrowStatement:function(e){return{type:s.ThrowStatement,argument:e}},createTryStatement:function(e,t,n,r){return{type:s.TryStatement,block:e,guardedHandlers:t,handlers:n,finalizer:r}},createUnaryExpression:function(e,t){return"++"===e||"--"===e?{type:s.UpdateExpression,operator:e,argument:t,prefix:!0}:{type:s.UnaryExpression,operator:e,argument:t,prefix:!0}},createVariableDeclaration:function(e,t){return{type:s.VariableDeclaration,declarations:e,kind:t}},createVariableDeclarator:function(e,t){return{type:s.VariableDeclarator,id:e,init:t}},createWhileStatement:function(e,t){return{type:s.WhileStatement,test:e,body:t}},createWithStatement:function(e,t){return{type:s.WithStatement,object:e,body:t}}},e.version="1.2.5",e.tokenize=mt,e.parse=gt,e.Syntax=function(){var e,t={};for(e in"function"==typeof Object.create&&(t=Object.create(null)),s)s.hasOwnProperty(e)&&(t[e]=s[e]);return"function"==typeof Object.freeze&&Object.freeze(t),t}()})?n.apply(t,r):n)||(e.exports=s)}()},6780:function(e,t,n){"use strict";var r=n(6615),s=n(6239),a=["args","body"],i=["pre","post","printCode","funcName","blockSize"];e.exports=function(e){for(var t in e)a.indexOf(t)<0&&i.indexOf(t)<0&&console.warn("cwise: Unknown argument '"+t+"' passed to expression compiler");for(var n=0;n<a.length;++n)if(!e[a[n]])throw new Error("cwise: Missing argument: "+a[n]);return s({args:e.args,pre:r(e.pre||function(){}),body:r(e.body),post:r(e.post||function(){}),debug:!!e.printCode,funcName:e.funcName||e.body.name||"cwise",blockSize:e.blockSize||64})}},6841:function(e){"use strict";function t(e,n,r){var s=0|e[r];if(s<=0)return[];var a,i=new Array(s);if(r===e.length-1)for(a=0;a<s;++a)i[a]=n;else for(a=0;a<s;++a)i[a]=t(e,n,r+1);return i}e.exports=function(e,n){switch(void 0===n&&(n=0),typeof e){case"number":if(e>0)return function(e,t){var n,r;for(n=new Array(e),r=0;r<e;++r)n[r]=t;return n}(0|e,n);break;case"object":if("number"==typeof e.length)return t(e,n,0)}return[]}},9645:function(e){"use strict";function t(e){if(this.size=0|e,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=e<<1;for(var t=new Array(2*this.size),n=0;n<t.length;n+=2){const e=Math.PI*n/this.size;t[n]=Math.cos(e),t[n+1]=-Math.sin(e)}this.table=t;for(var r=0,s=1;this.size>s;s<<=1)r++;this._width=r%2==0?r-1:r,this._bitrev=new Array(1<<this._width);for(var a=0;a<this._bitrev.length;a++){this._bitrev[a]=0;for(var i=0;i<this._width;i+=2){var o=this._width-i-2;this._bitrev[a]|=(a>>>i&3)<<o}}this._out=null,this._data=null,this._inv=0}e.exports=t,t.prototype.fromComplexArray=function(e,t){for(var n=t||new Array(e.length>>>1),r=0;r<e.length;r+=2)n[r>>>1]=e[r];return n},t.prototype.createComplexArray=function(){const e=new Array(this._csize);for(var t=0;t<e.length;t++)e[t]=0;return e},t.prototype.toComplexArray=function(e,t){for(var n=t||this.createComplexArray(),r=0;r<n.length;r+=2)n[r]=e[r>>>1],n[r+1]=0;return n},t.prototype.completeSpectrum=function(e){for(var t=this._csize,n=t>>>1,r=2;r<n;r+=2)e[t-r]=e[r],e[t-r+1]=-e[r+1]},t.prototype.transform=function(e,t){if(e===t)throw new Error("Input and output buffers must be different");this._out=e,this._data=t,this._inv=0,this._transform4(),this._out=null,this._data=null},t.prototype.realTransform=function(e,t){if(e===t)throw new Error("Input and output buffers must be different");this._out=e,this._data=t,this._inv=0,this._realTransform4(),this._out=null,this._data=null},t.prototype.inverseTransform=function(e,t){if(e===t)throw new Error("Input and output buffers must be different");this._out=e,this._data=t,this._inv=1,this._transform4();for(var n=0;n<e.length;n++)e[n]/=this.size;this._out=null,this._data=null},t.prototype._transform4=function(){var e,t,n=this._out,r=this._csize,s=1<<this._width,a=r/s<<1,i=this._bitrev;if(4===a)for(e=0,t=0;e<r;e+=a,t++){const n=i[t];this._singleTransform2(e,n,s)}else for(e=0,t=0;e<r;e+=a,t++){const n=i[t];this._singleTransform4(e,n,s)}var o=this._inv?-1:1,u=this.table;for(s>>=2;s>=2;s>>=2){var l=(a=r/s<<1)>>>2;for(e=0;e<r;e+=a)for(var c=e+l,h=e,p=0;h<c;h+=2,p+=s){const e=h,t=e+l,r=t+l,s=r+l,a=n[e],i=n[e+1],c=n[t],d=n[t+1],f=n[r],m=n[r+1],g=n[s],y=n[s+1],b=a,x=i,w=u[p],v=o*u[p+1],k=c*w-d*v,I=c*v+d*w,N=u[2*p],S=o*u[2*p+1],C=f*N-m*S,T=f*S+m*N,$=u[3*p],E=o*u[3*p+1],A=g*$-y*E,R=g*E+y*$,_=b+C,F=x+T,D=b-C,O=x-T,M=k+A,L=I+R,z=o*(k-A),B=o*(I-R),P=_+M,V=F+L,W=_-M,U=F-L,G=D+B,j=O-z,H=D-B,q=O+z;n[e]=P,n[e+1]=V,n[t]=G,n[t+1]=j,n[r]=W,n[r+1]=U,n[s]=H,n[s+1]=q}}},t.prototype._singleTransform2=function(e,t,n){const r=this._out,s=this._data,a=s[t],i=s[t+1],o=s[t+n],u=s[t+n+1],l=a+o,c=i+u,h=a-o,p=i-u;r[e]=l,r[e+1]=c,r[e+2]=h,r[e+3]=p},t.prototype._singleTransform4=function(e,t,n){const r=this._out,s=this._data,a=this._inv?-1:1,i=2*n,o=3*n,u=s[t],l=s[t+1],c=s[t+n],h=s[t+n+1],p=s[t+i],d=s[t+i+1],f=s[t+o],m=s[t+o+1],g=u+p,y=l+d,b=u-p,x=l-d,w=c+f,v=h+m,k=a*(c-f),I=a*(h-m),N=g+w,S=y+v,C=b+I,T=x-k,$=g-w,E=y-v,A=b-I,R=x+k;r[e]=N,r[e+1]=S,r[e+2]=C,r[e+3]=T,r[e+4]=$,r[e+5]=E,r[e+6]=A,r[e+7]=R},t.prototype._realTransform4=function(){var e,t,n=this._out,r=this._csize,s=1<<this._width,a=r/s<<1,i=this._bitrev;if(4===a)for(e=0,t=0;e<r;e+=a,t++){const n=i[t];this._singleRealTransform2(e,n>>>1,s>>>1)}else for(e=0,t=0;e<r;e+=a,t++){const n=i[t];this._singleRealTransform4(e,n>>>1,s>>>1)}var o=this._inv?-1:1,u=this.table;for(s>>=2;s>=2;s>>=2){var l=(a=r/s<<1)>>>1,c=l>>>1,h=c>>>1;for(e=0;e<r;e+=a)for(var p=0,d=0;p<=h;p+=2,d+=s){var f=e+p,m=f+c,g=m+c,y=g+c,b=n[f],x=n[f+1],w=n[m],v=n[m+1],k=n[g],I=n[g+1],N=n[y],S=n[y+1],C=b,T=x,$=u[d],E=o*u[d+1],A=w*$-v*E,R=w*E+v*$,_=u[2*d],F=o*u[2*d+1],D=k*_-I*F,O=k*F+I*_,M=u[3*d],L=o*u[3*d+1],z=N*M-S*L,B=N*L+S*M,P=C+D,V=T+O,W=C-D,U=T-O,G=A+z,j=R+B,H=o*(A-z),q=o*(R-B),K=P+G,X=V+j,Y=W+q,Z=U-H;if(n[f]=K,n[f+1]=X,n[m]=Y,n[m+1]=Z,0!==p){if(p!==h){var J=W+-o*q,Q=-U+-o*H,ee=P+-o*G,te=-V- -o*j,ne=e+c-p,re=e+l-p;n[ne]=J,n[ne+1]=Q,n[re]=ee,n[re+1]=te}}else{var se=P-G,ae=V-j;n[g]=se,n[g+1]=ae}}}},t.prototype._singleRealTransform2=function(e,t,n){const r=this._out,s=this._data,a=s[t],i=s[t+n],o=a+i,u=a-i;r[e]=o,r[e+1]=0,r[e+2]=u,r[e+3]=0},t.prototype._singleRealTransform4=function(e,t,n){const r=this._out,s=this._data,a=this._inv?-1:1,i=2*n,o=3*n,u=s[t],l=s[t+n],c=s[t+i],h=s[t+o],p=u+c,d=u-c,f=l+h,m=a*(l-h),g=p+f,y=d,b=-m,x=p-f,w=d,v=m;r[e]=g,r[e+1]=0,r[e+2]=y,r[e+3]=b,r[e+4]=x,r[e+5]=0,r[e+6]=w,r[e+7]=v}},645:function(e,t){t.read=function(e,t,n,r,s){var a,i,o=8*s-r-1,u=(1<<o)-1,l=u>>1,c=-7,h=n?s-1:0,p=n?-1:1,d=e[t+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+e[t+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=r;c>0;i=256*i+e[t+h],h+=p,c-=8);if(0===a)a=1-l;else{if(a===u)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,r),a-=l}return(d?-1:1)*i*Math.pow(2,a-r)},t.write=function(e,t,n,r,s,a){var i,o,u,l=8*a-s-1,c=(1<<l)-1,h=c>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:a-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+h>=1?p/u:p*Math.pow(2,1-h))*u>=2&&(i++,u/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(t*u-1)*Math.pow(2,s),i+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,s),i=0));s>=8;e[n+d]=255&o,d+=f,o/=256,s-=8);for(i=i<<s|o,l+=s;l>0;e[n+d]=255&i,d+=f,i/=256,l-=8);e[n+d-f]|=128*m}},6907:function(e){"use strict";e.exports=function(e){for(var t=new Array(e),n=0;n<e;++n)t[n]=n;return t}},8738:function(e){function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},3720:function(e){e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var s={},a={};function i(e,t){var n,r,i;return t?(i=0<=(e>>>=0)&&e<256)&&(r=a[e])?r:(n=u(e,(0|e)<0?-1:0,!0),i&&(a[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(r=s[e])?r:(n=u(e,e<0?-1:0,!1),i&&(s[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=d)return k}else{if(e<=-f)return I;if(e+1>=f)return v}return e<0?o(-e,t).neg():u(e%p|0,e/p|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=i,n.fromNumber=o,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(e.substring(1),t,n).neg();for(var s=o(l(n,8)),a=g,i=0;i<e.length;i+=8){var u=Math.min(8,e.length-i),h=parseInt(e.substring(i,i+u),n);if(u<8){var p=o(l(n,u));a=a.mul(p).add(o(h))}else a=(a=a.mul(s)).add(o(h))}return a.unsigned=t,a}function h(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?c(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var p=4294967296,d=p*p,f=d/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var w=i(-1);n.NEG_ONE=w;var v=u(-1,2147483647,!1);n.MAX_VALUE=v;var k=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var I=u(0,-2147483648,!1);n.MIN_VALUE=I;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=o(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=o(l(e,6),this.unsigned),a=this,i="";;){var u=a.div(s),c=(a.sub(u.mul(s)).toInt()>>>0).toString(e);if((a=u).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1==(1&this.low)},N.isEven=function(){return 0==(1&this.low)},N.equals=function(e){return r(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(r(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},N.neg=N.negate,N.add=function(e){r(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,a=65535&this.low,i=e.high>>>16,o=65535&e.high,l=e.low>>>16,c=0,p=0,d=0,f=0;return d+=(f+=a+(65535&e.low))>>>16,p+=(d+=s+l)>>>16,c+=(p+=n+o)>>>16,c+=t+i,u((d&=65535)<<16|(f&=65535),(c&=65535)<<16|(p&=65535),this.unsigned)},N.subtract=function(e){return r(e)||(e=h(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=h(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,s=65535&this.high,a=this.low>>>16,i=65535&this.low,l=e.high>>>16,c=65535&e.high,p=e.low>>>16,d=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*d)>>>16,y+=(b+=a*d)>>>16,b&=65535,y+=(b+=i*p)>>>16,f+=(y+=s*d)>>>16,y&=65535,f+=(y+=a*p)>>>16,y&=65535,f+=(y+=i*c)>>>16,f+=n*d+s*p+a*c+i*l,u((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(r(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,s,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;a=y}else{if(this.eq(I))return e.eq(b)||e.eq(w)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:w:(s=this.sub(e.mul(n)),a=n.add(s.div(e)));if(e.eq(I))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(s=this;s.gte(e);){n=Math.max(1,Math.floor(s.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:l(2,i-48),p=o(n),d=p.mul(e);d.isNegative()||d.gt(s);)d=(p=o(n-=c,this.unsigned)).mul(e);p.isZero()&&(p=b),a=a.add(p),s=s.sub(d)}return a},N.div=N.divide,N.modulo=function(e){return r(e)||(e=h(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return u(~this.low,~this.high,this.unsigned)},N.and=function(e){return r(e)||(e=h(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return r(e)||(e=h(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return r(e)||(e=h(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},1587:function(e,t,n){"use strict";var r=n(8897),s=n(2861),a=n(316),i=n(5082);e.exports=function(e,t,n){var o,u,l=t.shape,c=l.length,h=1,p=new Array(c),d=0;for(o=c-1;o>=0;--o)if(p[o]=h,h*=l[o],d=Math.max(d,i.scratchMemory(l[o])),t.shape[o]!==n.shape[o])throw new Error("Shape mismatch, real and imaginary arrays must have same size");var f,m=4*h+d;f="array"===t.dtype||"float64"===t.dtype||"custom"===t.dtype?a.mallocDouble(m):a.mallocFloat(m);var g,y,b,x,w=s(f,l.slice(0),p,0),v=s(f,l.slice(0),p.slice(0),h),k=s(f,l.slice(0),p.slice(0),2*h),I=s(f,l.slice(0),p.slice(0),3*h),N=4*h;for(r.assign(w,t),r.assign(v,n),o=c-1;o>=0&&(i(e,h/l[o],l[o],f,w.offset,v.offset,N),0!==o);--o){for(y=1,b=k.stride,x=I.stride,u=o-1;u<c;++u)x[u]=b[u]=y,y*=l[u];for(u=o-2;u>=0;--u)x[u]=b[u]=y,y*=l[u];r.assign(k,w),r.assign(I,v),g=w,w=k,k=g,g=v,v=I,I=g}r.assign(t,w),r.assign(n,v),a.free(f)}},5082:function(e,t,n){var r=n(746);function s(e,t,n,s,a,i){var o,u,l,c,h,p,d,f,m,g,y,b,x,w,v,k,I,N,S,C,T,$,E,A;for(e|=0,t|=0,a|=0,i|=0,o=n|=0,u=r.log2(o),N=0;N<t;++N){for(d=o>>1,h=0,l=0;l<o-1;l++){for(l<h&&(x=s[a+l],s[a+l]=s[a+h],s[a+h]=x,x=s[i+l],s[i+l]=s[i+h],s[i+h]=x),p=d;p<=h;)h-=p,p>>=1;h+=p}for(y=-1,b=0,g=1,f=0;f<u;f++){for(m=g,g<<=1,k=1,I=0,h=0;h<m;h++){for(l=h;l<o;l+=g)S=s[a+(c=l+m)],C=s[i+c],T=s[a+l],$=s[i+l],w=(E=k*(S+C))-C*(k+I),v=E+(A=S*(I-k)),s[a+c]=T-w,s[i+c]=$-v,s[a+l]+=w,s[i+l]+=v;A=k*(b-y),k=(E=y*(k+I))-I*(y+b),I=E+A}b=Math.sqrt((1-y)/2),e<0&&(b=-b),y=Math.sqrt((1+y)/2)}if(e<0){var R=1/o;for(l=0;l<o;l++)s[a+l]*=R,s[i+l]*=R}a+=n,i+=n}}e.exports=function(e,t,n,a,i,o,u){e|=0,t|=0,n|=0,i|=0,o|=0,r.isPow2(n)?s(e,t,n,a,i,o):function(e,t,n,a,i,o,u){e|=0,t|=0,n|=0,i|=0,o|=0,u|=0;var l,c,h,p,d,f,m,g,y,b=r.nextPow2(2*n+1),x=u,w=x+n,v=w+n,k=v+b,I=k+b,N=I+b,S=-e*Math.PI/n;for(y=0;y<n;++y)c=S*(y*y%(2*n)),p=Math.cos(c),d=Math.sin(c),a[I+(b-y)]=a[I+y]=a[x+y]=p,a[N+(b-y)]=a[N+y]=a[w+y]=d;for(y=n;y<=b-n;++y)a[I+y]=0;for(y=n;y<=b-n;++y)a[N+y]=0;s(1,1,b,a,I,N),S=e<0?1/n:1;for(l=0;l<t;++l){for(y=0;y<n;++y)c=a[i+y],h=a[o+y],f=(p=a[x+y])*(c+h),m=c*((d=-a[w+y])-p),g=h*(p+d),a[v+y]=f-g,a[k+y]=f+m;for(y=n;y<b;++y)a[v+y]=0;for(y=n;y<b;++y)a[k+y]=0;for(s(1,1,b,a,v,k),y=0;y<b;++y)c=a[v+y],h=a[k+y],f=(p=a[I+y])*(c+h),m=c*((d=a[N+y])-p),g=h*(p+d),a[v+y]=f-g,a[k+y]=f+m;for(s(-1,1,b,a,v,k),y=0;y<n;++y)c=a[v+y],h=a[k+y],f=(p=a[x+y])*(c+h),m=c*((d=-a[w+y])-p),g=h*(p+d),a[i+y]=S*(f-g),a[o+y]=S*(f+m);i+=n,o+=n}}(e,t,n,a,i,o,u)},e.exports.scratchMemory=function(e){return r.isPow2(e)?0:2*e+4*r.nextPow2(2*e+1)}},8897:function(e,t,n){"use strict";var r=n(6239),s={body:"",args:[],thisVars:[],localVars:[]};function a(e){if(!e)return s;for(var t=0;t<e.args.length;++t){var n=e.args[t];e.args[t]=0===t?{name:n,lvalue:!0,rvalue:!!e.rvalue,count:e.count||1}:{name:n,lvalue:!1,rvalue:!0,count:1}}return e.thisVars||(e.thisVars=[]),e.localVars||(e.localVars=[]),e}function i(e){for(var t=[],n=0;n<e.args.length;++n)t.push("a"+n);return new Function("P",["return function ",e.funcName,"_ndarrayops(",t.join(","),") {P(",t.join(","),");return a0}"].join(""))(function(e){return r({args:e.args,pre:a(e.pre),body:a(e.body),post:a(e.proc),funcName:e.funcName})}(e))}var o={add:"+",sub:"-",mul:"*",div:"/",mod:"%",band:"&",bor:"|",bxor:"^",lshift:"<<",rshift:">>",rrshift:">>>"};!function(){for(var e in o){var n=o[e];t[e]=i({args:["array","array","array"],body:{args:["a","b","c"],body:"a=b"+n+"c"},funcName:e}),t[e+"eq"]=i({args:["array","array"],body:{args:["a","b"],body:"a"+n+"=b"},rvalue:!0,funcName:e+"eq"}),t[e+"s"]=i({args:["array","array","scalar"],body:{args:["a","b","s"],body:"a=b"+n+"s"},funcName:e+"s"}),t[e+"seq"]=i({args:["array","scalar"],body:{args:["a","s"],body:"a"+n+"=s"},rvalue:!0,funcName:e+"seq"})}}();var u={not:"!",bnot:"~",neg:"-",recip:"1.0/"};!function(){for(var e in u){var n=u[e];t[e]=i({args:["array","array"],body:{args:["a","b"],body:"a="+n+"b"},funcName:e}),t[e+"eq"]=i({args:["array"],body:{args:["a"],body:"a="+n+"a"},rvalue:!0,count:2,funcName:e+"eq"})}}();var l={and:"&&",or:"||",eq:"===",neq:"!==",lt:"<",gt:">",leq:"<=",geq:">="};!function(){for(var e in l){var n=l[e];t[e]=i({args:["array","array","array"],body:{args:["a","b","c"],body:"a=b"+n+"c"},funcName:e}),t[e+"s"]=i({args:["array","array","scalar"],body:{args:["a","b","s"],body:"a=b"+n+"s"},funcName:e+"s"}),t[e+"eq"]=i({args:["array","array"],body:{args:["a","b"],body:"a=a"+n+"b"},rvalue:!0,count:2,funcName:e+"eq"}),t[e+"seq"]=i({args:["array","scalar"],body:{args:["a","s"],body:"a=a"+n+"s"},rvalue:!0,count:2,funcName:e+"seq"})}}();var c=["abs","acos","asin","atan","ceil","cos","exp","floor","log","round","sin","sqrt","tan"];!function(){for(var e=0;e<c.length;++e){var n=c[e];t[n]=i({args:["array","array"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b"],body:"a=this_f(b)",thisVars:["this_f"]},funcName:n}),t[n+"eq"]=i({args:["array"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a"],body:"a=this_f(a)",thisVars:["this_f"]},rvalue:!0,count:2,funcName:n+"eq"})}}();var h=["max","min","atan2","pow"];!function(){for(var e=0;e<h.length;++e){var n=h[e];t[n]=i({args:["array","array","array"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b","c"],body:"a=this_f(b,c)",thisVars:["this_f"]},funcName:n}),t[n+"s"]=i({args:["array","array","scalar"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b","c"],body:"a=this_f(b,c)",thisVars:["this_f"]},funcName:n+"s"}),t[n+"eq"]=i({args:["array","array"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b"],body:"a=this_f(a,b)",thisVars:["this_f"]},rvalue:!0,count:2,funcName:n+"eq"}),t[n+"seq"]=i({args:["array","scalar"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b"],body:"a=this_f(a,b)",thisVars:["this_f"]},rvalue:!0,count:2,funcName:n+"seq"})}}();var p=["atan2","pow"];!function(){for(var e=0;e<p.length;++e){var n=p[e];t[n+"op"]=i({args:["array","array","array"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b","c"],body:"a=this_f(c,b)",thisVars:["this_f"]},funcName:n+"op"}),t[n+"ops"]=i({args:["array","array","scalar"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b","c"],body:"a=this_f(c,b)",thisVars:["this_f"]},funcName:n+"ops"}),t[n+"opeq"]=i({args:["array","array"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b"],body:"a=this_f(b,a)",thisVars:["this_f"]},rvalue:!0,count:2,funcName:n+"opeq"}),t[n+"opseq"]=i({args:["array","scalar"],pre:{args:[],body:"this_f=Math."+n,thisVars:["this_f"]},body:{args:["a","b"],body:"a=this_f(b,a)",thisVars:["this_f"]},rvalue:!0,count:2,funcName:n+"opseq"})}}(),t.any=r({args:["array"],pre:s,body:{args:[{name:"a",lvalue:!1,rvalue:!0,count:1}],body:"if(a){return true}",localVars:[],thisVars:[]},post:{args:[],localVars:[],thisVars:[],body:"return false"},funcName:"any"}),t.all=r({args:["array"],pre:s,body:{args:[{name:"x",lvalue:!1,rvalue:!0,count:1}],body:"if(!x){return false}",localVars:[],thisVars:[]},post:{args:[],localVars:[],thisVars:[],body:"return true"},funcName:"all"}),t.sum=r({args:["array"],pre:{args:[],localVars:[],thisVars:["this_s"],body:"this_s=0"},body:{args:[{name:"a",lvalue:!1,rvalue:!0,count:1}],body:"this_s+=a",localVars:[],thisVars:["this_s"]},post:{args:[],localVars:[],thisVars:["this_s"],body:"return this_s"},funcName:"sum"}),t.prod=r({args:["array"],pre:{args:[],localVars:[],thisVars:["this_s"],body:"this_s=1"},body:{args:[{name:"a",lvalue:!1,rvalue:!0,count:1}],body:"this_s*=a",localVars:[],thisVars:["this_s"]},post:{args:[],localVars:[],thisVars:["this_s"],body:"return this_s"},funcName:"prod"}),t.norm2squared=r({args:["array"],pre:{args:[],localVars:[],thisVars:["this_s"],body:"this_s=0"},body:{args:[{name:"a",lvalue:!1,rvalue:!0,count:2}],body:"this_s+=a*a",localVars:[],thisVars:["this_s"]},post:{args:[],localVars:[],thisVars:["this_s"],body:"return this_s"},funcName:"norm2squared"}),t.norm2=r({args:["array"],pre:{args:[],localVars:[],thisVars:["this_s"],body:"this_s=0"},body:{args:[{name:"a",lvalue:!1,rvalue:!0,count:2}],body:"this_s+=a*a",localVars:[],thisVars:["this_s"]},post:{args:[],localVars:[],thisVars:["this_s"],body:"return Math.sqrt(this_s)"},funcName:"norm2"}),t.norminf=r({args:["array"],pre:{args:[],localVars:[],thisVars:["this_s"],body:"this_s=0"},body:{args:[{name:"a",lvalue:!1,rvalue:!0,count:4}],body:"if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}",localVars:[],thisVars:["this_s"]},post:{args:[],localVars:[],thisVars:["this_s"],body:"return this_s"},funcName:"norminf"}),t.norm1=r({args:["array"],pre:{args:[],localVars:[],thisVars:["this_s"],body:"this_s=0"},body:{args:[{name:"a",lvalue:!1,rvalue:!0,count:3}],body:"this_s+=a<0?-a:a",localVars:[],thisVars:["this_s"]},post:{args:[],localVars:[],thisVars:["this_s"],body:"return this_s"},funcName:"norm1"}),t.sup=r({args:["array"],pre:{body:"this_h=-Infinity",args:[],thisVars:["this_h"],localVars:[]},body:{body:"if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",args:[{name:"_inline_1_arg0_",lvalue:!1,rvalue:!0,count:2}],thisVars:["this_h"],localVars:[]},post:{body:"return this_h",args:[],thisVars:["this_h"],localVars:[]}}),t.inf=r({args:["array"],pre:{body:"this_h=Infinity",args:[],thisVars:["this_h"],localVars:[]},body:{body:"if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",args:[{name:"_inline_1_arg0_",lvalue:!1,rvalue:!0,count:2}],thisVars:["this_h"],localVars:[]},post:{body:"return this_h",args:[],thisVars:["this_h"],localVars:[]}}),t.argmin=r({args:["index","array","shape"],pre:{body:"{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",args:[{name:"_inline_0_arg0_",lvalue:!1,rvalue:!1,count:0},{name:"_inline_0_arg1_",lvalue:!1,rvalue:!1,count:0},{name:"_inline_0_arg2_",lvalue:!1,rvalue:!0,count:1}],thisVars:["this_i","this_v"],localVars:[]},body:{body:"{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",args:[{name:"_inline_1_arg0_",lvalue:!1,rvalue:!0,count:2},{name:"_inline_1_arg1_",lvalue:!1,rvalue:!0,count:2}],thisVars:["this_i","this_v"],localVars:["_inline_1_k"]},post:{body:"{return this_i}",args:[],thisVars:["this_i"],localVars:[]}}),t.argmax=r({args:["index","array","shape"],pre:{body:"{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",args:[{name:"_inline_0_arg0_",lvalue:!1,rvalue:!1,count:0},{name:"_inline_0_arg1_",lvalue:!1,rvalue:!1,count:0},{name:"_inline_0_arg2_",lvalue:!1,rvalue:!0,count:1}],thisVars:["this_i","this_v"],localVars:[]},body:{body:"{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",args:[{name:"_inline_1_arg0_",lvalue:!1,rvalue:!0,count:2},{name:"_inline_1_arg1_",lvalue:!1,rvalue:!0,count:2}],thisVars:["this_i","this_v"],localVars:["_inline_1_k"]},post:{body:"{return this_i}",args:[],thisVars:["this_i"],localVars:[]}}),t.random=i({args:["array"],pre:{args:[],body:"this_f=Math.random",thisVars:["this_f"]},body:{args:["a"],body:"a=this_f()",thisVars:["this_f"]},funcName:"random"}),t.assign=i({args:["array","array"],body:{args:["a","b"],body:"a=b"},funcName:"assign"}),t.assigns=i({args:["array","scalar"],body:{args:["a","b"],body:"a=b"},funcName:"assigns"}),t.equals=r({args:["array","array"],pre:s,body:{args:[{name:"x",lvalue:!1,rvalue:!0,count:1},{name:"y",lvalue:!1,rvalue:!0,count:1}],body:"if(x!==y){return false}",localVars:[],thisVars:[]},post:{args:[],localVars:[],thisVars:[],body:"return true"},funcName:"equals"})},906:function(e,t,n){"use strict";var r=n(1587),s=n(9219),a=n(8897),i=n(6780)({args:["array","array","scalar","scalar","scalar"],body:function(e,t,n,r,s){var a=t*n;a<r&&(a=r),a>s&&(a=s)}});e.exports=function(e,t,n,o){void 0===n&&(n=-1/0),void 0===o&&(o=1/0);var u=t.shape,l=e.shape;if(t.shape.length!==e.shape.length)throw new Error("ndarray-resample: input and output arrays should have the same dimensions");var c,h=u.map((function(){return 0}));if(1===e.size)return(c=a.sum(t)/t.size)<n&&(c=n),c>o&&(c=o),void e.set.apply(e,h.concat(c));if(1===t.size)return(c=t.get.apply(t,h))<n&&(c=n),c>o&&(c=o),void a.assigns(e,c);for(var p=u.length,d=new Array(p),f=!1,m=0;m<p;m++)d[m]=Math.min(l[m],u[m]),l[m]>u[m]&&(f=!0);var g=s.malloc(u),y=s.malloc(u);a.assign(g,t),a.assigns(y,0),r(1,g,y);var b=g.lo,x=g.hi,w=s.malloc(l),v=s.malloc(l);f&&(a.assigns(w,0),a.assigns(v,0));var k=new Array(p),I=new Array(p),N=new Array(p),S=new Array(p);for(m=0;m<1<<p;++m){for(var C=0;C<p;++C)if(m&1<<C){if(k[C]=d[C]-(d[C]+1>>>1),0===k[C])continue;I[C]=l[C]-k[C],N[C]=u[C]-k[C],S[C]=1&d[C]?0:1}else k[C]=d[C]+1>>>1,I[C]=0,N[C]=0,S[C]=0;a.assign(x.apply(b.apply(w,I),k),x.apply(b.apply(g,N),k)),a.assign(b.apply(x.apply(b.apply(v,I),k),S),b.apply(x.apply(b.apply(y,N),k),S)),a.assigns(x.apply(x.apply(b.apply(v,I),k),S),0)}r(-1,w,v),i(e,w,e.size/t.size,n,o),s.free(g),s.free(y),s.free(w),s.free(v)}},9219:function(e,t,n){"use strict";var r=n(2861),s=n(8897),a=n(316);t.clone=function(e){var t=e.dtype;"generic"!==t&&"array"!==t||(t="double");var n=a.malloc(e.size,t),i=r(n,e.shape);return s.assign(i,e),i},t.malloc=function(e,t){t||(t="double");for(var n=1,s=new Array(e.length),i=e.length-1;i>=0;--i)s[i]=n,n*=e[i];return r(a.malloc(n,t),e,s,0)},t.free=function(e){"generic"!==e.dtype&&"array"!==e.dtype&&a.free(e.data)},t.zeros=function(e,t){t||(t="double");for(var n=1,s=new Array(e.length),i=e.length-1;i>=0;--i)s[i]=n,n*=e[i];var o=a.malloc(n,t);for(i=0;i<n;++i)o[i]=0;return r(o,e,s,0)},t.ones=function(e,t){t||(t="double");for(var n=1,s=new Array(e.length),i=e.length-1;i>=0;--i)s[i]=n,n*=e[i];var o=a.malloc(n,t);for(i=0;i<n;++i)o[i]=1;return r(o,e,s,0)},t.eye=function(e,t){var n,s;t||(t="double");var i=1,o=new Array(e.length);for(n=e.length-1;n>=0;--n)o[n]=i,i*=e[n];var u=a.malloc(i,t);for(n=0;n<i;++n)u[n]=0;var l=1/0,c=0;for(n=e.length-1;n>=0;n--)c+=o[n],l=Math.min(l,e[n]);for(n=0,s=0;n<l;n++,s+=c)u[s]=1;return r(u,e,o,0)}},2861:function(e,t,n){var r=n(6907),s=n(8738),a="undefined"!=typeof Float64Array;function i(e,t){return e[0]-t[0]}function o(){var e,t=this.stride,n=new Array(t.length);for(e=0;e<n.length;++e)n[e]=[Math.abs(t[e]),e];n.sort(i);var r=new Array(n.length);for(e=0;e<r.length;++e)r[e]=n[e][1];return r}function u(e,t){var n=["View",t,"d",e].join("");t<0&&(n="View_Nil"+e);var s="generic"===e;if(-1===t){var a="function "+n+"(a){this.data=a;};var proto="+n+".prototype;proto.dtype='"+e+"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "+n+"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_"+n+"(a){return new "+n+"(a);}";return new Function(a)()}if(0===t){a="function "+n+"(a,d) {this.data = a;this.offset = d};var proto="+n+".prototype;proto.dtype='"+e+"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "+n+"_copy() {return new "+n+"(this.data,this.offset)};proto.pick=function "+n+"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function "+n+"_get(){return "+(s?"this.data.get(this.offset)":"this.data[this.offset]")+"};proto.set=function "+n+"_set(v){return "+(s?"this.data.set(this.offset,v)":"this.data[this.offset]=v")+"};return function construct_"+n+"(a,b,c,d){return new "+n+"(a,d)}";return new Function("TrivialArray",a)(l[e][0])}a=["'use strict'"];var i=r(t),u=i.map((function(e){return"i"+e})),c="this.offset+"+i.map((function(e){return"this.stride["+e+"]*i"+e})).join("+"),h=i.map((function(e){return"b"+e})).join(","),p=i.map((function(e){return"c"+e})).join(",");a.push("function "+n+"(a,"+h+","+p+",d){this.data=a","this.shape=["+h+"]","this.stride=["+p+"]","this.offset=d|0}","var proto="+n+".prototype","proto.dtype='"+e+"'","proto.dimension="+t),a.push("Object.defineProperty(proto,'size',{get:function "+n+"_size(){return "+i.map((function(e){return"this.shape["+e+"]"})).join("*"),"}})"),1===t?a.push("proto.order=[0]"):(a.push("Object.defineProperty(proto,'order',{get:"),t<4?(a.push("function "+n+"_order(){"),2===t?a.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})"):3===t&&a.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})")):a.push("ORDER})")),a.push("proto.set=function "+n+"_set("+u.join(",")+",v){"),s?a.push("return this.data.set("+c+",v)}"):a.push("return this.data["+c+"]=v}"),a.push("proto.get=function "+n+"_get("+u.join(",")+"){"),s?a.push("return this.data.get("+c+")}"):a.push("return this.data["+c+"]}"),a.push("proto.index=function "+n+"_index(",u.join(),"){return "+c+"}"),a.push("proto.hi=function "+n+"_hi("+u.join(",")+"){return new "+n+"(this.data,"+i.map((function(e){return["(typeof i",e,"!=='number'||i",e,"<0)?this.shape[",e,"]:i",e,"|0"].join("")})).join(",")+","+i.map((function(e){return"this.stride["+e+"]"})).join(",")+",this.offset)}");var d=i.map((function(e){return"a"+e+"=this.shape["+e+"]"})),f=i.map((function(e){return"c"+e+"=this.stride["+e+"]"}));a.push("proto.lo=function "+n+"_lo("+u.join(",")+"){var b=this.offset,d=0,"+d.join(",")+","+f.join(","));for(var m=0;m<t;++m)a.push("if(typeof i"+m+"==='number'&&i"+m+">=0){d=i"+m+"|0;b+=c"+m+"*d;a"+m+"-=d}");a.push("return new "+n+"(this.data,"+i.map((function(e){return"a"+e})).join(",")+","+i.map((function(e){return"c"+e})).join(",")+",b)}"),a.push("proto.step=function "+n+"_step("+u.join(",")+"){var "+i.map((function(e){return"a"+e+"=this.shape["+e+"]"})).join(",")+","+i.map((function(e){return"b"+e+"=this.stride["+e+"]"})).join(",")+",c=this.offset,d=0,ceil=Math.ceil");for(m=0;m<t;++m)a.push("if(typeof i"+m+"==='number'){d=i"+m+"|0;if(d<0){c+=b"+m+"*(a"+m+"-1);a"+m+"=ceil(-a"+m+"/d)}else{a"+m+"=ceil(a"+m+"/d)}b"+m+"*=d}");a.push("return new "+n+"(this.data,"+i.map((function(e){return"a"+e})).join(",")+","+i.map((function(e){return"b"+e})).join(",")+",c)}");var g=new Array(t),y=new Array(t);for(m=0;m<t;++m)g[m]="a[i"+m+"]",y[m]="b[i"+m+"]";a.push("proto.transpose=function "+n+"_transpose("+u+"){"+u.map((function(e,t){return e+"=("+e+"===undefined?"+t+":"+e+"|0)"})).join(";"),"var a=this.shape,b=this.stride;return new "+n+"(this.data,"+g.join(",")+","+y.join(",")+",this.offset)}"),a.push("proto.pick=function "+n+"_pick("+u+"){var a=[],b=[],c=this.offset");for(m=0;m<t;++m)a.push("if(typeof i"+m+"==='number'&&i"+m+">=0){c=(c+this.stride["+m+"]*i"+m+")|0}else{a.push(this.shape["+m+"]);b.push(this.stride["+m+"])}");return a.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}"),a.push("return function construct_"+n+"(data,shape,stride,offset){return new "+n+"(data,"+i.map((function(e){return"shape["+e+"]"})).join(",")+","+i.map((function(e){return"stride["+e+"]"})).join(",")+",offset)}"),new Function("CTOR_LIST","ORDER",a.join("\n"))(l[e],o)}var l={float32:[],float64:[],int8:[],int16:[],int32:[],uint8:[],uint16:[],uint32:[],array:[],uint8_clamped:[],bigint64:[],biguint64:[],buffer:[],generic:[]};e.exports=function(e,t,n,r){if(void 0===e)return(0,l.array[0])([]);"number"==typeof e&&(e=[e]),void 0===t&&(t=[e.length]);var i=t.length;if(void 0===n){n=new Array(i);for(var o=i-1,c=1;o>=0;--o)n[o]=c,c*=t[o]}if(void 0===r){r=0;for(o=0;o<i;++o)n[o]<0&&(r-=(t[o]-1)*n[o])}for(var h=function(e){if(s(e))return"buffer";if(a)switch(Object.prototype.toString.call(e)){case"[object Float64Array]":return"float64";case"[object Float32Array]":return"float32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Uint8ClampedArray]":return"uint8_clamped";case"[object BigInt64Array]":return"bigint64";case"[object BigUint64Array]":return"biguint64"}return Array.isArray(e)?"array":"generic"}(e),p=l[h];p.length<=i+1;)p.push(u(h,p.length-1));return(0,p[i+1])(e,t,n,r)}},6377:function(e,t,n){var r=n(4832),s=n(8652),a=n(801),i=n(2030),o=n(3618),u=n(9049),l=n(1971);l.alea=r,l.xor128=s,l.xorwow=a,l.xorshift7=i,l.xor4096=o,l.tychei=u,e.exports=l},4832:function(e,t,n){var r;!function(e,s,a){function i(e){var t,n=this,r=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new i(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},9049:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},8652:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},3618:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,i,o=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,s=0==(n=o[127&a]^=r+i)?s+1:0);for(s>=128&&(o[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;e.w=i,e.X=o,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},2030:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(e,s,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new i(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,s))||(s.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},1971:function(e,t,n){var r;!function(s,a){var i,o=(0,eval)("this"),u=256,l=a.pow(u,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(s)]}}():e,3),r),d=new f(r),x=function(){for(var e=d.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);s<u;)i[s]=s++;for(s=0;s<u;s++)i[s]=i[a=p&a+e[s%n]+(t=i[s])],i[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,i=r.S;e--;)t=i[s=p&s+1],n=n*u+i[p&(i[s]=i[a=p&a+t])+(i[a]=t)];return r.i=s,r.j=a,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function y(e,t){for(var n,r=e+"",s=0;s<r.length;)t[p&s]=p&(n^=19*t[p&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),s),e.exports){e.exports=d;try{i=n(3906)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}([],Math)},3318:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const i=a(n(877)),o=a(n(4252)),u=a(n(4442)),l=a(n(7232)),c=n(2568),h=new Float32Array(c.length);for(let e=0;e<c.length;e++)h[e]=c[e];const p=document.getElementById("webglButton"),d=document.getElementById("testButton");let f=document.createElement("img");const m=22050,g=new i.MerlinAudioModel("models/audio/labels.json","models/audio/model.json");function y(){const e=function(e){const t=Math.round(330.75),n=Math.round(110.25),r=Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))),s={sampleRate:m,hopLength:n,winLength:t,nFft:r,topDB:80};return o.dBSpectrogram(e,s)}(h),t=u.dBSpectrogramToImage(e,80),n=Math.round(e.length);f.src=t,f.height=300,f.width=n;const r=document.getElementById("specCropHolder");for(;r.firstChild;)r.removeChild(r.firstChild);return r.appendChild(f),h}p.onclick=()=>{const e=document.getElementById("glSupportHolder");for(;e.firstChild;)e.removeChild(e.firstChild);l.ENV.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?e.prepend("WebGL mediump float: Terrific! This device can accurately interpret the audio classification model from within this browser."):e.prepend("WebGL mediump float:  Hmm, while this device cannot accurately interpret the audio classification model locally from within the browser, your classification tasks will be automatically processed by one this server's classification endpoints.")},d.onclick=()=>{y();const e=document.getElementById("specSampleHolder");for(;e.firstChild;)e.removeChild(e.firstChild);(async function(e){const t=await g.averagePredictV3(e,m);return[t[0],t[1]]})(h).then((([t,n])=>{const r=document.createElement("ul");for(let s=0;s<10;s++){const a=document.createElement("li");a.textContent=t[s]+" "+n[s],r.appendChild(a),e.prepend(r)}}))}},877:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.MerlinAudioModel=void 0;const i=a(n(7232)),o=n(4432);t.MerlinAudioModel=class{model;labels;sampleRate=22050;patchWindowSeconds=.96;patchHopSeconds=.48;labelsURL;modelURL;constructor(e,t){this.modelURL=t,this.labelsURL=e}async ensureModelLoaded(){null==this.model&&(await this.ensureLabelsLoaded(),this.model=await i.loadGraphModel(this.modelURL),o.log("Loaded model!."))}async ensureLabelsLoaded(){null==this.labels&&(this.labels=await fetch(this.labelsURL).then((e=>e.json())),o.log("Loaded "+this.labels.length+" labels!.","audio_model.ts"))}async predict(e){await this.ensureModelLoaded();const t=this.patchWindowSeconds*this.sampleRate,n=this.patchHopSeconds*this.sampleRate;let r=i.tensor1d(e);r.shape[0]<t&&(r=r.pad([[0,t-e.length]]));const s=i.signal.frame(r,t,n),a=[];let o=this.patchWindowSeconds/2;const u=i.data.array(s.arraySync());return await u.forEachAsync((e=>{const t=i.tensor(e).expandDims(0),n=this.model.execute(t),r=n.dataSync(),s=n.argMax(-1).dataSync()[0],u=Math.max(...r);a.push([this.labels[s],u,o]),o+=this.patchHopSeconds})),i.dispose([r,s]),a}async averagePredictV3(e,t){await this.ensureModelLoaded();const n=1*t,r=.5*t,s=e.length;let a=null;a=Math.floor(s/n),a=Math.max(1,a),o.log("Extracting "+a+" windows from audio waveform","audio_model.ts");let u=0;const l=[];let c,h;for(let s=0;s<a;s++){const s=u+n;c=i.tensor1d(e.slice(u,s)),c.shape[0]<n&&(o.log("Padding waveform with zeros","audio_model.ts"),c=c.pad([[0,n-c.shape[0]]]));const a=c,p=i.tensor1d([t],"int32");h=await(this.model?.executeAsync({waveform:a,samplerate:p})),l.push(h.dataSync()),u+=r}const p=i.mean(i.tensor(l),0);p.print();const d=i.topk(p,this.labels.length,!0),f=d.values.dataSync(),m=d.indices.dataSync(),g=[];for(let e=0;e<this.labels.length;e++)g.push(this.labels[m[e]]);return i.dispose([c,undefined,undefined,h,p,d]),[g,f]}}},4252:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferToWave=t.hannWindow=t.createMelFilterbank=t.frame=t.padConstant=t.padCenterToLength=t.applyWindow=t.applyWholeFilterbank=t.stft=t.magSpectrogram=t.resampleAndMakeMono=t.getMonoAudio=t.powerToDb=t.melSpectrogram=t.loadAudioFromFile=t.loadAudioFromUrl=t.dBSpectrogram=t.fetch_audio=void 0;const i=a(n(906)),o=a(n(2861)),u=n(9645),l=22050,c=window,h=c.webkitOfflineAudioContext,p=h?new c.webkitOfflineAudioContext(1,44100,44100):new c.OfflineAudioContext(1,l,l);!window.AudioContext&&window.webkitAudioContext&&(window.AudioContext=window.webkitAudioContext,window.OfflineAudioContext=window.webkitOfflineAudioContext);t.fetch_audio=async(e,n)=>{const r=new window.AudioContext;return fetch(e).then((e=>e.arrayBuffer())).then((e=>2===r.decodeAudioData.length?new Promise((t=>{r.decodeAudioData(e,(e=>{t(e)}))})):r.decodeAudioData(e))).then((e=>{const r=e.sampleRate;return e.sampleRate===n?{waveform:t.getMonoAudio(e),sourceSampleRate:r}:((e,t)=>{const n=e.sampleRate,r=e.length*t/n,s=new OfflineAudioContext(1,r,t);return new Promise((t=>{const n=s.createBufferSource();n.buffer=e,s.oncomplete=e=>{t(e.renderedBuffer)},n.connect(s.destination),n.start(),s.startRendering()}))})(e,n).then((e=>({waveform:e.getChannelData(0),sourceSampleRate:r})))}))};t.dBSpectrogram=(e,n)=>{n.power||(n.power=2);const r=t.stft(e,n),[s,a]=t.magSpectrogram(r,n.power);n.nFft=a,n.topDB||(n.topDB=80);return((e,t=1e-10,n=80)=>{const r=e.length,s=e[0].length,a=[];for(let e=0;e<r;e++)a[e]=new Float32Array(s);const i=Math.max.apply(null,e.map((e=>Math.max.apply(null,e))));for(let n=0;n<r;n++)for(let r=0;r<s;r++){const s=e[n][r];a[n][r]=10*Math.log10(Math.max(t,s)),a[n][r]-=10*Math.log10(Math.max(t,i))}if(n){if(n<0)throw new Error("topDb must be non-negative.");const e=Math.max.apply(null,a.map((e=>Math.max.apply(null,e))));for(let t=0;t<r;t++)for(let r=0;r<s;r++)a[t][r]=Math.max(a[t][r],e-n)}return a})(s,1e-10,n.topDB)};t.loadAudioFromUrl=async e=>fetch(e).then((e=>e.arrayBuffer())).then((e=>p.decodeAudioData(e)));t.loadAudioFromFile=async e=>{const t=new FileReader;return new Promise(((n,r)=>{t.onerror=()=>{t.abort(),r(new DOMException("Something went wrong reading that file."))},t.onload=()=>{n(t.result)},t.readAsArrayBuffer(e)})).then((e=>p.decodeAudioData(e)))};t.melSpectrogram=(e,n)=>{n.power||(n.power=2);const r=t.stft(e,n),[s,a]=t.magSpectrogram(r,n.power);n.nFft=a;const i=t.createMelFilterbank(n);return t.applyWholeFilterbank(s,i)};t.powerToDb=(e,t=1e-10,n=80)=>{const r=e.length,s=e[0].length,a=[];for(let e=0;e<r;e++)a[e]=new Float32Array(s);for(let n=0;n<r;n++)for(let r=0;r<s;r++){const s=e[n][r];a[n][r]=10*Math.log10(Math.max(t,s))}if(n){if(n<0)throw new Error("topDb must be non-negative.");for(let e=0;e<r;e++){const t=N(a[e]);for(let r=0;r<s;r++)a[e][r]=Math.max(a[e][r],t-n)}}return a};t.getMonoAudio=e=>{if(1===e.numberOfChannels)return e.getChannelData(0);if(2!==e.numberOfChannels)throw Error(`${e.numberOfChannels} channel audio is not supported.`);const t=e.getChannelData(0),n=e.getChannelData(1),r=new Float32Array(e.length);for(let s=0;s<e.length;++s)r[s]=(t[s]+n[s])/2;return r};t.resampleAndMakeMono=async(e,n=22050)=>{if(e.sampleRate===n)return t.getMonoAudio(e);const r=e.sampleRate,s=e.length*n/r;if(h){const n=t.getMonoAudio(e),r=new Float32Array(s);return i(o(r,[s]),o(n,[n.length])),r}{const t=p.createBufferSource();return t.buffer=e,t.connect(p.destination),t.start(),p.startRendering().then((e=>e.getChannelData(0)))}};t.magSpectrogram=(e,t)=>[e.map((e=>I(y(e),t))),e[0].length-1];t.stft=(e,n)=>{const r=n.nFft||2048,s=n.winLength||r,a=n.hopLength||Math.floor(s/4);let i=t.hannWindow(s);i=t.padCenterToLength(i,r),e=f(e,Math.floor(r/2));const o=t.frame(e,r,a),u=[],l=o.length,c=r+2;for(let e=0;e<l;e++)u[e]=new Float32Array(c);for(let e=0;e<l;e++){const n=t.applyWindow(o[e],i),r=m(n);u[e].set(r.slice(0,c))}return u};t.applyWholeFilterbank=(e,t)=>{const n=[];for(let r=0;r<e.length;r++)n[r]=d(e[r],t);return n};const d=(e,n)=>{if(e.length!==n[0].length)throw new Error(`Each entry in filterbank should have dimensions matching FFT. |mags| = ${e.length}, |filterbank[0]| = ${n[0].length}.`);const r=new Float32Array(n.length);for(let s=0;s<n.length;s++){const a=t.applyWindow(e,n[s]);r[s]=a.reduce(((e,t)=>e+t))}return r};t.applyWindow=(e,t)=>{if(e.length!==t.length)return null;const n=new Float32Array(e.length);for(let r=0;r<e.length;r++)n[r]=t[r]*e[r];return n};t.padCenterToLength=(e,n)=>{if(e.length>n)throw new Error("Data is longer than length.");const r=Math.floor((n-e.length)/2),s=n-e.length-r;return t.padConstant(e,[r,s])};t.padConstant=(e,t)=>{let n,r;"object"==typeof t?[n,r]=t:n=r=t;const s=new Float32Array(e.length+n+r);return s.set(e,n),s};const f=(e,n)=>{const r=t.padConstant(e,n);for(let e=0;e<n;e++)r[e]=r[2*n-e],r[r.length-e-1]=r[r.length-2*n+e-1];return r};t.frame=(e,t,n)=>{const r=Math.floor((e.length-t)/n)+1,s=Array.from({length:r},((e,n)=>new Float32Array(t)));for(let a=0;a<r;a++){const r=a*n,i=e.slice(r,r+t);s[a].set(i)}return s};t.createMelFilterbank=e=>{const t=e.fMin||0,n=e.fMax||e.sampleRate/2,r=e.nMels||128,s=e.nFft||2048,a=x(e.sampleRate,s),i=w(r+2,t,n),o=v(i),u=k(i,a),l=u[0].length,c=[];for(let e=0;e<r;e++){c[e]=new Float32Array(l);for(let t=0;t<u[e].length;t++){const n=-u[e][t]/o[e],r=u[e+2][t]/o[e+1];c[e][t]=Math.max(0,Math.min(n,r))}}for(let e=0;e<c.length;e++){const t=2/(i[2+e]-i[e]);c[e]=c[e].map((e=>e*t))}return c};const m=e=>{const t=new u(e.length),n=t.createComplexArray(),r=t.toComplexArray(e,null);return t.transform(n,r),n};t.hannWindow=e=>{const t=new Float32Array(e);for(let n=0;n<e;n++)t[n]=.5*(1-Math.cos(2*Math.PI*n/(e-1)));return t};const g=(e,t,n)=>{const r=(t-e)/(n-1),s=new Float32Array(n);for(let t=0;t<n;t++)s[t]=e+r*t;return s},y=e=>{const t=new Float32Array(e.length/2);for(let n=0;n<e.length/2;n++)t[n]=Math.sqrt(e[2*n]*e[2*n]+e[2*n+1]*e[2*n+1]);return t},b=e=>1125*Math.log(1+e/700),x=(e,t)=>g(0,e/2,Math.floor(1+t/2)),w=(e,t,n)=>{const r=b(t),s=b(n);return g(r,s,e).map((e=>(e=>700*(Math.exp(e/1125)-1))(e)))},v=e=>{const t=new Float32Array(e.length-1);for(let n=0;n<e.length;n++)t[n]=e[n+1]-e[n];return t},k=(e,t)=>{const n=[];for(let r=0;r<e.length;r++)n[r]=new Float32Array(t.length);for(let r=0;r<e.length;r++)for(let s=0;s<t.length;s++)n[r][s]=e[r]-t[s];return n},I=(e,t)=>e.map((e=>Math.pow(e,t))),N=e=>e.reduce(((e,t)=>Math.max(e,t)));t.bufferToWave=(e,t)=>{let n,r,s=e.numberOfChannels,a=t*s*2+44,i=new ArrayBuffer(a),o=new DataView(i),u=[],l=0,c=0;for(p(1179011410),p(a-8),p(1163280727),p(544501094),p(16),h(1),h(s),p(e.sampleRate),p(2*e.sampleRate*s),h(2*s),h(16),p(1635017060),p(a-c-4),n=0;n<e.numberOfChannels;n++)u.push(e.getChannelData(n));for(;c<a;){for(n=0;n<s;n++)r=Math.max(-1,Math.min(1,u[n][l])),r=0|(.5+r<0?32768*r:32767*r),o.setInt16(c,r,!0),c+=2;l++}return new Blob([i],{type:"audio/wav"});function h(e){o.setUint16(c,e,!0),c+=2}function p(e){o.setUint32(c,e,!0),c+=4}}},9127:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Greys=void 0,t.Greys=[[0,[1,1,1]],[.002,[1,1,1]],[.004,[.998,.998,.998]],[.006,[.998,.998,.998]],[.008,[.996,.996,.996]],[.01,[.996,.996,.996]],[.012,[.994,.994,.994]],[.014,[.994,.994,.994]],[.016,[.993,.993,.993]],[.018,[.993,.993,.993]],[.02,[.991,.991,.991]],[.022,[.991,.991,.991]],[.023,[.989,.989,.989]],[.025,[.989,.989,.989]],[.027,[.987,.987,.987]],[.029,[.987,.987,.987]],[.031,[.985,.985,.985]],[.033,[.985,.985,.985]],[.035,[.983,.983,.983]],[.037,[.983,.983,.983]],[.039,[.982,.982,.982]],[.041,[.982,.982,.982]],[.043,[.98,.98,.98]],[.045,[.98,.98,.98]],[.047,[.978,.978,.978]],[.049,[.978,.978,.978]],[.051,[.976,.976,.976]],[.053,[.976,.976,.976]],[.055,[.974,.974,.974]],[.057,[.974,.974,.974]],[.059,[.972,.972,.972]],[.061,[.972,.972,.972]],[.063,[.97,.97,.97]],[.065,[.97,.97,.97]],[.067,[.969,.969,.969]],[.068,[.969,.969,.969]],[.07,[.967,.967,.967]],[.072,[.967,.967,.967]],[.074,[.965,.965,.965]],[.076,[.965,.965,.965]],[.078,[.963,.963,.963]],[.08,[.963,.963,.963]],[.082,[.961,.961,.961]],[.084,[.961,.961,.961]],[.086,[.959,.959,.959]],[.088,[.959,.959,.959]],[.09,[.958,.958,.958]],[.092,[.958,.958,.958]],[.094,[.956,.956,.956]],[.096,[.956,.956,.956]],[.098,[.954,.954,.954]],[.1,[.954,.954,.954]],[.102,[.952,.952,.952]],[.104,[.952,.952,.952]],[.106,[.95,.95,.95]],[.108,[.95,.95,.95]],[.11,[.948,.948,.948]],[.112,[.948,.948,.948]],[.114,[.946,.946,.946]],[.115,[.946,.946,.946]],[.117,[.945,.945,.945]],[.119,[.945,.945,.945]],[.121,[.943,.943,.943]],[.123,[.943,.943,.943]],[.125,[.941,.941,.941]],[.127,[.941,.941,.941]],[.129,[.938,.938,.938]],[.131,[.938,.938,.938]],[.133,[.935,.935,.935]],[.135,[.935,.935,.935]],[.137,[.932,.932,.932]],[.139,[.932,.932,.932]],[.141,[.93,.93,.93]],[.143,[.93,.93,.93]],[.145,[.927,.927,.927]],[.147,[.927,.927,.927]],[.149,[.924,.924,.924]],[.151,[.924,.924,.924]],[.153,[.921,.921,.921]],[.155,[.921,.921,.921]],[.157,[.918,.918,.918]],[.159,[.918,.918,.918]],[.16,[.915,.915,.915]],[.162,[.915,.915,.915]],[.164,[.913,.913,.913]],[.166,[.913,.913,.913]],[.168,[.91,.91,.91]],[.17,[.91,.91,.91]],[.172,[.907,.907,.907]],[.174,[.907,.907,.907]],[.176,[.904,.904,.904]],[.178,[.904,.904,.904]],[.18,[.901,.901,.901]],[.182,[.901,.901,.901]],[.184,[.898,.898,.898]],[.186,[.898,.898,.898]],[.188,[.896,.896,.896]],[.19,[.896,.896,.896]],[.192,[.893,.893,.893]],[.194,[.893,.893,.893]],[.196,[.89,.89,.89]],[.198,[.89,.89,.89]],[.2,[.887,.887,.887]],[.202,[.887,.887,.887]],[.204,[.884,.884,.884]],[.205,[.884,.884,.884]],[.207,[.881,.881,.881]],[.209,[.881,.881,.881]],[.211,[.879,.879,.879]],[.213,[.879,.879,.879]],[.215,[.876,.876,.876]],[.217,[.876,.876,.876]],[.219,[.873,.873,.873]],[.221,[.873,.873,.873]],[.223,[.87,.87,.87]],[.225,[.87,.87,.87]],[.227,[.867,.867,.867]],[.229,[.867,.867,.867]],[.231,[.864,.864,.864]],[.233,[.864,.864,.864]],[.235,[.862,.862,.862]],[.237,[.862,.862,.862]],[.239,[.859,.859,.859]],[.241,[.859,.859,.859]],[.243,[.856,.856,.856]],[.245,[.856,.856,.856]],[.247,[.853,.853,.853]],[.249,[.853,.853,.853]],[.25,[.85,.85,.85]],[.252,[.85,.85,.85]],[.254,[.847,.847,.847]],[.256,[.847,.847,.847]],[.258,[.843,.843,.843]],[.26,[.843,.843,.843]],[.262,[.84,.84,.84]],[.264,[.84,.84,.84]],[.266,[.836,.836,.836]],[.268,[.836,.836,.836]],[.27,[.833,.833,.833]],[.272,[.833,.833,.833]],[.274,[.829,.829,.829]],[.276,[.829,.829,.829]],[.278,[.826,.826,.826]],[.28,[.826,.826,.826]],[.282,[.823,.823,.823]],[.284,[.823,.823,.823]],[.286,[.819,.819,.819]],[.288,[.819,.819,.819]],[.29,[.816,.816,.816]],[.292,[.816,.816,.816]],[.294,[.812,.812,.812]],[.295,[.812,.812,.812]],[.297,[.809,.809,.809]],[.299,[.809,.809,.809]],[.301,[.805,.805,.805]],[.303,[.805,.805,.805]],[.305,[.802,.802,.802]],[.307,[.802,.802,.802]],[.309,[.798,.798,.798]],[.311,[.798,.798,.798]],[.313,[.795,.795,.795]],[.315,[.795,.795,.795]],[.317,[.792,.792,.792]],[.319,[.792,.792,.792]],[.321,[.788,.788,.788]],[.323,[.788,.788,.788]],[.325,[.785,.785,.785]],[.327,[.785,.785,.785]],[.329,[.781,.781,.781]],[.331,[.781,.781,.781]],[.333,[.778,.778,.778]],[.335,[.778,.778,.778]],[.337,[.774,.774,.774]],[.339,[.774,.774,.774]],[.341,[.771,.771,.771]],[.342,[.771,.771,.771]],[.344,[.767,.767,.767]],[.346,[.767,.767,.767]],[.348,[.764,.764,.764]],[.35,[.764,.764,.764]],[.352,[.761,.761,.761]],[.354,[.761,.761,.761]],[.356,[.757,.757,.757]],[.358,[.757,.757,.757]],[.36,[.754,.754,.754]],[.362,[.754,.754,.754]],[.364,[.75,.75,.75]],[.366,[.75,.75,.75]],[.368,[.747,.747,.747]],[.37,[.747,.747,.747]],[.372,[.743,.743,.743]],[.374,[.743,.743,.743]],[.376,[.739,.739,.739]],[.378,[.739,.739,.739]],[.38,[.735,.735,.735]],[.382,[.735,.735,.735]],[.384,[.73,.73,.73]],[.386,[.73,.73,.73]],[.387,[.725,.725,.725]],[.389,[.725,.725,.725]],[.391,[.72,.72,.72]],[.393,[.72,.72,.72]],[.395,[.715,.715,.715]],[.397,[.715,.715,.715]],[.399,[.711,.711,.711]],[.401,[.711,.711,.711]],[.403,[.706,.706,.706]],[.405,[.706,.706,.706]],[.407,[.701,.701,.701]],[.409,[.701,.701,.701]],[.411,[.696,.696,.696]],[.413,[.696,.696,.696]],[.415,[.691,.691,.691]],[.417,[.691,.691,.691]],[.419,[.687,.687,.687]],[.421,[.687,.687,.687]],[.423,[.682,.682,.682]],[.425,[.682,.682,.682]],[.427,[.677,.677,.677]],[.429,[.677,.677,.677]],[.431,[.672,.672,.672]],[.432,[.672,.672,.672]],[.434,[.667,.667,.667]],[.436,[.667,.667,.667]],[.438,[.663,.663,.663]],[.44,[.663,.663,.663]],[.442,[.658,.658,.658]],[.444,[.658,.658,.658]],[.446,[.653,.653,.653]],[.448,[.653,.653,.653]],[.45,[.648,.648,.648]],[.452,[.648,.648,.648]],[.454,[.643,.643,.643]],[.456,[.643,.643,.643]],[.458,[.639,.639,.639]],[.46,[.639,.639,.639]],[.462,[.634,.634,.634]],[.464,[.634,.634,.634]],[.466,[.629,.629,.629]],[.468,[.629,.629,.629]],[.47,[.624,.624,.624]],[.472,[.624,.624,.624]],[.474,[.619,.619,.619]],[.476,[.619,.619,.619]],[.477,[.615,.615,.615]],[.479,[.615,.615,.615]],[.481,[.61,.61,.61]],[.483,[.61,.61,.61]],[.485,[.605,.605,.605]],[.487,[.605,.605,.605]],[.489,[.6,.6,.6]],[.491,[.6,.6,.6]],[.493,[.595,.595,.595]],[.495,[.595,.595,.595]],[.497,[.591,.591,.591]],[.499,[.591,.591,.591]],[.501,[.586,.586,.586]],[.503,[.586,.586,.586]],[.505,[.582,.582,.582]],[.507,[.582,.582,.582]],[.509,[.577,.577,.577]],[.511,[.577,.577,.577]],[.513,[.573,.573,.573]],[.515,[.573,.573,.573]],[.517,[.569,.569,.569]],[.519,[.569,.569,.569]],[.521,[.565,.565,.565]],[.523,[.565,.565,.565]],[.524,[.56,.56,.56]],[.526,[.56,.56,.56]],[.528,[.556,.556,.556]],[.53,[.556,.556,.556]],[.532,[.552,.552,.552]],[.534,[.552,.552,.552]],[.536,[.547,.547,.547]],[.538,[.547,.547,.547]],[.54,[.543,.543,.543]],[.542,[.543,.543,.543]],[.544,[.539,.539,.539]],[.546,[.539,.539,.539]],[.548,[.534,.534,.534]],[.55,[.534,.534,.534]],[.552,[.53,.53,.53]],[.554,[.53,.53,.53]],[.556,[.526,.526,.526]],[.558,[.526,.526,.526]],[.56,[.521,.521,.521]],[.562,[.521,.521,.521]],[.564,[.517,.517,.517]],[.566,[.517,.517,.517]],[.568,[.513,.513,.513]],[.569,[.513,.513,.513]],[.571,[.509,.509,.509]],[.573,[.509,.509,.509]],[.575,[.504,.504,.504]],[.577,[.504,.504,.504]],[.579,[.5,.5,.5]],[.581,[.5,.5,.5]],[.583,[.496,.496,.496]],[.585,[.496,.496,.496]],[.587,[.491,.491,.491]],[.589,[.491,.491,.491]],[.591,[.487,.487,.487]],[.593,[.487,.487,.487]],[.595,[.483,.483,.483]],[.597,[.483,.483,.483]],[.599,[.478,.478,.478]],[.601,[.478,.478,.478]],[.603,[.474,.474,.474]],[.605,[.474,.474,.474]],[.607,[.47,.47,.47]],[.609,[.47,.47,.47]],[.611,[.466,.466,.466]],[.613,[.466,.466,.466]],[.614,[.461,.461,.461]],[.616,[.461,.461,.461]],[.618,[.457,.457,.457]],[.62,[.457,.457,.457]],[.622,[.453,.453,.453]],[.624,[.453,.453,.453]],[.626,[.448,.448,.448]],[.628,[.448,.448,.448]],[.63,[.444,.444,.444]],[.632,[.444,.444,.444]],[.634,[.44,.44,.44]],[.636,[.44,.44,.44]],[.638,[.436,.436,.436]],[.64,[.436,.436,.436]],[.642,[.432,.432,.432]],[.644,[.432,.432,.432]],[.646,[.428,.428,.428]],[.648,[.428,.428,.428]],[.65,[.424,.424,.424]],[.652,[.424,.424,.424]],[.654,[.42,.42,.42]],[.656,[.42,.42,.42]],[.658,[.416,.416,.416]],[.659,[.416,.416,.416]],[.661,[.412,.412,.412]],[.663,[.412,.412,.412]],[.665,[.408,.408,.408]],[.667,[.408,.408,.408]],[.669,[.404,.404,.404]],[.671,[.404,.404,.404]],[.673,[.4,.4,.4]],[.675,[.4,.4,.4]],[.677,[.396,.396,.396]],[.679,[.396,.396,.396]],[.681,[.392,.392,.392]],[.683,[.392,.392,.392]],[.685,[.388,.388,.388]],[.687,[.388,.388,.388]],[.689,[.383,.383,.383]],[.691,[.383,.383,.383]],[.693,[.379,.379,.379]],[.695,[.379,.379,.379]],[.697,[.375,.375,.375]],[.699,[.375,.375,.375]],[.701,[.371,.371,.371]],[.703,[.371,.371,.371]],[.705,[.367,.367,.367]],[.706,[.367,.367,.367]],[.708,[.363,.363,.363]],[.71,[.363,.363,.363]],[.712,[.359,.359,.359]],[.714,[.359,.359,.359]],[.716,[.355,.355,.355]],[.718,[.355,.355,.355]],[.72,[.351,.351,.351]],[.722,[.351,.351,.351]],[.724,[.347,.347,.347]],[.726,[.347,.347,.347]],[.728,[.343,.343,.343]],[.73,[.343,.343,.343]],[.732,[.339,.339,.339]],[.734,[.339,.339,.339]],[.736,[.335,.335,.335]],[.738,[.335,.335,.335]],[.74,[.331,.331,.331]],[.742,[.331,.331,.331]],[.744,[.327,.327,.327]],[.746,[.327,.327,.327]],[.748,[.323,.323,.323]],[.75,[.323,.323,.323]],[.751,[.317,.317,.317]],[.753,[.317,.317,.317]],[.755,[.312,.312,.312]],[.757,[.312,.312,.312]],[.759,[.306,.306,.306]],[.761,[.306,.306,.306]],[.763,[.301,.301,.301]],[.765,[.301,.301,.301]],[.767,[.295,.295,.295]],[.769,[.295,.295,.295]],[.771,[.29,.29,.29]],[.773,[.29,.29,.29]],[.775,[.284,.284,.284]],[.777,[.284,.284,.284]],[.779,[.279,.279,.279]],[.781,[.279,.279,.279]],[.783,[.273,.273,.273]],[.785,[.273,.273,.273]],[.787,[.268,.268,.268]],[.789,[.268,.268,.268]],[.791,[.262,.262,.262]],[.793,[.262,.262,.262]],[.795,[.257,.257,.257]],[.796,[.257,.257,.257]],[.798,[.251,.251,.251]],[.8,[.251,.251,.251]],[.802,[.245,.245,.245]],[.804,[.245,.245,.245]],[.806,[.24,.24,.24]],[.808,[.24,.24,.24]],[.81,[.234,.234,.234]],[.812,[.234,.234,.234]],[.814,[.229,.229,.229]],[.816,[.229,.229,.229]],[.818,[.223,.223,.223]],[.82,[.223,.223,.223]],[.822,[.218,.218,.218]],[.824,[.218,.218,.218]],[.826,[.212,.212,.212]],[.828,[.212,.212,.212]],[.83,[.207,.207,.207]],[.832,[.207,.207,.207]],[.834,[.201,.201,.201]],[.836,[.201,.201,.201]],[.838,[.196,.196,.196]],[.84,[.196,.196,.196]],[.841,[.19,.19,.19]],[.843,[.19,.19,.19]],[.845,[.185,.185,.185]],[.847,[.185,.185,.185]],[.849,[.179,.179,.179]],[.851,[.179,.179,.179]],[.853,[.173,.173,.173]],[.855,[.173,.173,.173]],[.857,[.168,.168,.168]],[.859,[.168,.168,.168]],[.861,[.162,.162,.162]],[.863,[.162,.162,.162]],[.865,[.157,.157,.157]],[.867,[.157,.157,.157]],[.869,[.151,.151,.151]],[.871,[.151,.151,.151]],[.873,[.146,.146,.146]],[.875,[.146,.146,.146]],[.877,[.141,.141,.141]],[.879,[.141,.141,.141]],[.881,[.137,.137,.137]],[.883,[.137,.137,.137]],[.885,[.132,.132,.132]],[.886,[.132,.132,.132]],[.888,[.127,.127,.127]],[.89,[.127,.127,.127]],[.892,[.123,.123,.123]],[.894,[.123,.123,.123]],[.896,[.118,.118,.118]],[.898,[.118,.118,.118]],[.9,[.114,.114,.114]],[.902,[.114,.114,.114]],[.904,[.109,.109,.109]],[.906,[.109,.109,.109]],[.908,[.105,.105,.105]],[.91,[.105,.105,.105]],[.912,[.1,.1,.1]],[.914,[.1,.1,.1]],[.916,[.096,.096,.096]],[.918,[.096,.096,.096]],[.92,[.091,.091,.091]],[.922,[.091,.091,.091]],[.924,[.086,.086,.086]],[.926,[.086,.086,.086]],[.928,[.082,.082,.082]],[.93,[.082,.082,.082]],[.932,[.077,.077,.077]],[.933,[.077,.077,.077]],[.935,[.073,.073,.073]],[.937,[.073,.073,.073]],[.939,[.068,.068,.068]],[.941,[.068,.068,.068]],[.943,[.064,.064,.064]],[.945,[.064,.064,.064]],[.947,[.059,.059,.059]],[.949,[.059,.059,.059]],[.951,[.055,.055,.055]],[.953,[.055,.055,.055]],[.955,[.05,.05,.05]],[.957,[.05,.05,.05]],[.959,[.046,.046,.046]],[.961,[.046,.046,.046]],[.963,[.041,.041,.041]],[.965,[.041,.041,.041]],[.967,[.036,.036,.036]],[.969,[.036,.036,.036]],[.971,[.032,.032,.032]],[.973,[.032,.032,.032]],[.975,[.027,.027,.027]],[.977,[.027,.027,.027]],[.978,[.023,.023,.023]],[.98,[.023,.023,.023]],[.982,[.018,.018,.018]],[.984,[.018,.018,.018]],[.986,[.014,.014,.014]],[.988,[.014,.014,.014]],[.99,[.009,.009,.009]],[.992,[.009,.009,.009]],[.994,[.005,.005,.005]],[.996,[.005,.005,.005]],[.998,[0,0,0]],[1,[0,0,0]]]},4432:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.log=t.AudioRecorder=void 0;const s=r(n(448));t.AudioRecorder=s.default;t.log=(e,t="Merlin:")=>{(0,console.log)(`%c ${t} `,"background:green; color:white",e)}},4442:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateSpectrogramToURI=t.dBSpectrogramToImage=t.stft=t.padCenterToLength=t.applyWindow=t.frame=t.hannWindow=t.magSpectrogram=t.padConstant=void 0;const r=n(9127),s=n(4432),a=n(9645);t.padConstant=(e,t)=>{let n,r;"object"==typeof t?[n,r]=t:n=r=t;const s=new Float32Array(e.length+n+r);return s.set(e,n),s};t.magSpectrogram=(e,t)=>[e.map((e=>((e,t)=>e.map((e=>Math.pow(e,t))))((e=>{const t=new Float32Array(e.length/2);for(let n=0;n<e.length/2;n++)t[n]=Math.sqrt(e[2*n]*e[2*n]+e[2*n+1]*e[2*n+1]);return t})(e),t))),e[0].length-1];const i=e=>{const t=new a(e.length),n=t.createComplexArray(),r=t.toComplexArray(e,null);return t.transform(n,r),n};t.hannWindow=e=>{const t=new Float32Array(e);for(let n=0;n<e;n++)t[n]=.5*(1-Math.cos(2*Math.PI*n/(e-1)));return t};t.frame=(e,t,n)=>{const r=Math.floor((e.length-t)/n)+1,s=Array.from({length:r},(()=>new Float32Array(t)));for(let a=0;a<r;a++){const r=a*n,i=e.slice(r,r+t);s[a].set(i)}return s};t.applyWindow=(e,t)=>{if(e.length!==t.length)return s.log(`Buffer length ${e.length} != window length ${t.length}.`),null;const n=new Float32Array(e.length);for(let r=0;r<e.length;r++)n[r]=t[r]*e[r];return n};t.padCenterToLength=(e,n)=>{if(e.length>n)throw new Error("Data is longer than length.");const r=Math.floor((n-e.length)/2),s=n-e.length-r;return t.padConstant(e,[r,s])};t.stft=(e,n)=>{const r=n.nFft||2048,s=n.winLength||r,a=n.hopLength||Math.floor(s/4);let o=t.hannWindow(s);o=t.padCenterToLength(o,r),e=((e,n)=>{const r=t.padConstant(e,n);for(let e=0;e<n;e++)r[e]=r[2*n-e],r[r.length-e-1]=r[r.length-2*n+e-1];return r})(e,Math.floor(r/2));const u=t.frame(e,r,a),l=[],c=u.length,h=r+2;for(let e=0;e<c;e++)l[e]=new Float32Array(h);for(let e=0;e<c;e++){const n=t.applyWindow(u[e],o),r=i(n);l[e].set(r.slice(0,h))}return l};const o=e=>{let t=1;for(;r.Greys[t][0]<e;)t+=1;t-=1;const n=r.Greys[t][0],s=r.Greys[t+1][0],a=(e-n)/Math.abs(n-s),i=r.Greys[t+1][1][0];return i+a*(i-r.Greys[t][1][0])};t.dBSpectrogramToImage=(e,t)=>{const n=e.length;s.log(n.toString());const r=e[0].length;s.log("@ 0 :"+r.toString());const a=e[1].length;s.log("@ 1 :"+a.toString());const i=new Uint8ClampedArray(n*a*4);for(let r=0;r<a;r++)for(let s=0;s<n;s++){let u=e[s][a-1-r];u=1-Math.abs(u/t);const l=o(u),c=4*(r*n+s);i[c]=255*l,i[c+1]=255*l,i[c+2]=255*l,i[c+3]=255}const u=document.createElement("canvas"),l=u.getContext("2d");u.width=n,u.height=a;const c=l.createImageData(n,a);return c.data.set(i),l.putImageData(c,0,0),u.toDataURL()};t.generateSpectrogramToURI=e=>{const n=44100,r=Math.round(661.5),s=Math.round(220.5),a=Math.pow(2,Math.ceil(Math.log(r)/Math.log(2))),i=((e,n)=>{n.power||(n.power=2);const r=t.stft(e,n),[s,a]=t.magSpectrogram(r,n.power);n.nFft=a,n.topDB||(n.topDB=80);return((e,t=1e-10,n=80)=>{const r=e.length,s=e[0].length,a=[];for(let e=0;e<r;e++)a[e]=new Float32Array(s);const i=Math.max.apply(null,e.map((e=>Math.max.apply(null,e))));for(let n=0;n<r;n++)for(let r=0;r<s;r++){const s=e[n][r];a[n][r]=10*Math.log10(Math.max(t,s)),a[n][r]-=10*Math.log10(Math.max(t,i))}if(n){if(n<0)throw new Error("topDb must be non-negative.");const e=Math.max.apply(null,a.map((e=>Math.max.apply(null,e))));for(let t=0;t<r;t++)for(let r=0;r<s;r++)a[t][r]=Math.max(a[t][r],e-n)}return a})(s,1e-10,n.topDB)})(e,{sampleRate:n,hopLength:s,winLength:r,nFft:a,topDB:80});return t.dBSpectrogramToImage(i,80)}},316:function(e,t,n){"use strict";var r=n(746),s=n(6841),a=n(8764).lW;n.g.__TYPEDARRAY_POOL||(n.g.__TYPEDARRAY_POOL={UINT8:s([32,0]),UINT16:s([32,0]),UINT32:s([32,0]),BIGUINT64:s([32,0]),INT8:s([32,0]),INT16:s([32,0]),INT32:s([32,0]),BIGINT64:s([32,0]),FLOAT:s([32,0]),DOUBLE:s([32,0]),DATA:s([32,0]),UINT8C:s([32,0]),BUFFER:s([32,0])});var i="undefined"!=typeof Uint8ClampedArray,o="undefined"!=typeof BigUint64Array,u="undefined"!=typeof BigInt64Array,l=n.g.__TYPEDARRAY_POOL;l.UINT8C||(l.UINT8C=s([32,0])),l.BIGUINT64||(l.BIGUINT64=s([32,0])),l.BIGINT64||(l.BIGINT64=s([32,0])),l.BUFFER||(l.BUFFER=s([32,0]));var c=l.DATA,h=l.BUFFER;function p(e){if(e){var t=e.length||e.byteLength,n=r.log2(t);c[n].push(e)}}function d(e){e=r.nextPow2(e);var t=r.log2(e),n=c[t];return n.length>0?n.pop():new ArrayBuffer(e)}function f(e){return new Uint8Array(d(e),0,e)}function m(e){return new Uint16Array(d(2*e),0,e)}function g(e){return new Uint32Array(d(4*e),0,e)}function y(e){return new Int8Array(d(e),0,e)}function b(e){return new Int16Array(d(2*e),0,e)}function x(e){return new Int32Array(d(4*e),0,e)}function w(e){return new Float32Array(d(4*e),0,e)}function v(e){return new Float64Array(d(8*e),0,e)}function k(e){return i?new Uint8ClampedArray(d(e),0,e):f(e)}function I(e){return o?new BigUint64Array(d(8*e),0,e):null}function N(e){return u?new BigInt64Array(d(8*e),0,e):null}function S(e){return new DataView(d(e),0,e)}function C(e){e=r.nextPow2(e);var t=r.log2(e),n=h[t];return n.length>0?n.pop():new a(e)}t.free=function(e){if(a.isBuffer(e))h[r.log2(e.length)].push(e);else{if("[object ArrayBuffer]"!==Object.prototype.toString.call(e)&&(e=e.buffer),!e)return;var t=e.length||e.byteLength,n=0|r.log2(t);c[n].push(e)}},t.freeUint8=t.freeUint16=t.freeUint32=t.freeBigUint64=t.freeInt8=t.freeInt16=t.freeInt32=t.freeBigInt64=t.freeFloat32=t.freeFloat=t.freeFloat64=t.freeDouble=t.freeUint8Clamped=t.freeDataView=function(e){p(e.buffer)},t.freeArrayBuffer=p,t.freeBuffer=function(e){h[r.log2(e.length)].push(e)},t.malloc=function(e,t){if(void 0===t||"arraybuffer"===t)return d(e);switch(t){case"uint8":return f(e);case"uint16":return m(e);case"uint32":return g(e);case"int8":return y(e);case"int16":return b(e);case"int32":return x(e);case"float":case"float32":return w(e);case"double":case"float64":return v(e);case"uint8_clamped":return k(e);case"bigint64":return N(e);case"biguint64":return I(e);case"buffer":return C(e);case"data":case"dataview":return S(e);default:return null}return null},t.mallocArrayBuffer=d,t.mallocUint8=f,t.mallocUint16=m,t.mallocUint32=g,t.mallocInt8=y,t.mallocInt16=b,t.mallocInt32=x,t.mallocFloat32=t.mallocFloat=w,t.mallocFloat64=t.mallocDouble=v,t.mallocUint8Clamped=k,t.mallocBigUint64=I,t.mallocBigInt64=N,t.mallocDataView=S,t.mallocBuffer=C,t.clearCache=function(){for(var e=0;e<32;++e)l.UINT8[e].length=0,l.UINT16[e].length=0,l.UINT32[e].length=0,l.INT8[e].length=0,l.INT16[e].length=0,l.INT32[e].length=0,l.FLOAT[e].length=0,l.DOUBLE[e].length=0,l.BIGUINT64[e].length=0,l.BIGINT64[e].length=0,l.UINT8C[e].length=0,c[e].length=0,h[e].length=0}},8706:function(e){"use strict";e.exports=function(e,t,n){return 0===e.length?e:t?(n||e.sort(t),function(e,t){for(var n=1,r=e.length,s=e[0],a=e[0],i=1;i<r;++i)if(a=s,t(s=e[i],a)){if(i===n){n++;continue}e[n++]=s}return e.length=n,e}(e,t)):(n||e.sort(),function(e){for(var t=1,n=e.length,r=e[0],s=e[0],a=1;a<n;++a,s=r)if(s=r,(r=e[a])!==s){if(a===t){t++;continue}e[t++]=r}return e.length=t,e}(e))}},3906:function(){},2993:function(){},8352:function(){},4589:function(){},1758:function(){}},t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},n(3318)}();